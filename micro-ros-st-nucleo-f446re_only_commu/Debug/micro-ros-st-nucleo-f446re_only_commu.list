
micro-ros-st-nucleo-f446re_only_commu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000183bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001464  08018590  08018590  00028590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080199f4  080199f4  000308b4  2**0
                  CONTENTS
  4 .ARM          00000008  080199f4  080199f4  000299f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080199fc  080199fc  000308b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  080199fc  080199fc  000299fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019a0c  08019a0c  00029a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008b4  20000000  08019a10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000de10  200008b8  0801a2c4  000308b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000e6c8  0801a2c4  0003e6c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000308b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  000308e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f200  00000000  00000000  0003095a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044a1  00000000  00000000  0004fb5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001850  00000000  00000000  00054000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012c3  00000000  00000000  00055850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028024  00000000  00000000  00056b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d56c  00000000  00000000  0007eb37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9e49  00000000  00000000  0009c0a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007498  00000000  00000000  00185eec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0018d384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200008b8 	.word	0x200008b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018574 	.word	0x08018574

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200008bc 	.word	0x200008bc
 800020c:	08018574 	.word	0x08018574

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_ldivmod>:
 80002e0:	b97b      	cbnz	r3, 8000302 <__aeabi_ldivmod+0x22>
 80002e2:	b972      	cbnz	r2, 8000302 <__aeabi_ldivmod+0x22>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bfbe      	ittt	lt
 80002e8:	2000      	movlt	r0, #0
 80002ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ee:	e006      	blt.n	80002fe <__aeabi_ldivmod+0x1e>
 80002f0:	bf08      	it	eq
 80002f2:	2800      	cmpeq	r0, #0
 80002f4:	bf1c      	itt	ne
 80002f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002fa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002fe:	f000 b9bb 	b.w	8000678 <__aeabi_idiv0>
 8000302:	f1ad 0c08 	sub.w	ip, sp, #8
 8000306:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030a:	2900      	cmp	r1, #0
 800030c:	db09      	blt.n	8000322 <__aeabi_ldivmod+0x42>
 800030e:	2b00      	cmp	r3, #0
 8000310:	db1a      	blt.n	8000348 <__aeabi_ldivmod+0x68>
 8000312:	f000 f84d 	bl	80003b0 <__udivmoddi4>
 8000316:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031e:	b004      	add	sp, #16
 8000320:	4770      	bx	lr
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	db1b      	blt.n	8000364 <__aeabi_ldivmod+0x84>
 800032c:	f000 f840 	bl	80003b0 <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	4770      	bx	lr
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	f000 f82f 	bl	80003b0 <__udivmoddi4>
 8000352:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035a:	b004      	add	sp, #16
 800035c:	4240      	negs	r0, r0
 800035e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000362:	4770      	bx	lr
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	f000 f821 	bl	80003b0 <__udivmoddi4>
 800036e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000376:	b004      	add	sp, #16
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000688:	f006 fb2c 	bl	8006ce4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800068c:	4b58      	ldr	r3, [pc, #352]	; (80007f0 <pvPortMallocMicroROS+0x174>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d101      	bne.n	8000698 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000694:	f000 f980 	bl	8000998 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000698:	4b56      	ldr	r3, [pc, #344]	; (80007f4 <pvPortMallocMicroROS+0x178>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4013      	ands	r3, r2
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	f040 808e 	bne.w	80007c2 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d01d      	beq.n	80006e8 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80006ac:	2208      	movs	r2, #8
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d014      	beq.n	80006e8 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f023 0307 	bic.w	r3, r3, #7
 80006c4:	3308      	adds	r3, #8
 80006c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d00a      	beq.n	80006e8 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d6:	f383 8811 	msr	BASEPRI, r3
 80006da:	f3bf 8f6f 	isb	sy
 80006de:	f3bf 8f4f 	dsb	sy
 80006e2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006e4:	bf00      	nop
 80006e6:	e7fe      	b.n	80006e6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d069      	beq.n	80007c2 <pvPortMallocMicroROS+0x146>
 80006ee:	4b42      	ldr	r3, [pc, #264]	; (80007f8 <pvPortMallocMicroROS+0x17c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d864      	bhi.n	80007c2 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006f8:	4b40      	ldr	r3, [pc, #256]	; (80007fc <pvPortMallocMicroROS+0x180>)
 80006fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80006fc:	4b3f      	ldr	r3, [pc, #252]	; (80007fc <pvPortMallocMicroROS+0x180>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000702:	e004      	b.n	800070e <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8000704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000706:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800070e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	429a      	cmp	r2, r3
 8000716:	d903      	bls.n	8000720 <pvPortMallocMicroROS+0xa4>
 8000718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d1f1      	bne.n	8000704 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000720:	4b33      	ldr	r3, [pc, #204]	; (80007f0 <pvPortMallocMicroROS+0x174>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000726:	429a      	cmp	r2, r3
 8000728:	d04b      	beq.n	80007c2 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800072a:	6a3b      	ldr	r3, [r7, #32]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2208      	movs	r2, #8
 8000730:	4413      	add	r3, r2
 8000732:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	6a3b      	ldr	r3, [r7, #32]
 800073a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073e:	685a      	ldr	r2, [r3, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	1ad2      	subs	r2, r2, r3
 8000744:	2308      	movs	r3, #8
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	429a      	cmp	r2, r3
 800074a:	d91f      	bls.n	800078c <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800074c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4413      	add	r3, r2
 8000752:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	f003 0307 	and.w	r3, r3, #7
 800075a:	2b00      	cmp	r3, #0
 800075c:	d00a      	beq.n	8000774 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 800075e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000762:	f383 8811 	msr	BASEPRI, r3
 8000766:	f3bf 8f6f 	isb	sy
 800076a:	f3bf 8f4f 	dsb	sy
 800076e:	613b      	str	r3, [r7, #16]
}
 8000770:	bf00      	nop
 8000772:	e7fe      	b.n	8000772 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000776:	685a      	ldr	r2, [r3, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	1ad2      	subs	r2, r2, r3
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000786:	69b8      	ldr	r0, [r7, #24]
 8000788:	f000 f968 	bl	8000a5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800078c:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <pvPortMallocMicroROS+0x17c>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	4a18      	ldr	r2, [pc, #96]	; (80007f8 <pvPortMallocMicroROS+0x17c>)
 8000798:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <pvPortMallocMicroROS+0x17c>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <pvPortMallocMicroROS+0x184>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d203      	bcs.n	80007ae <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <pvPortMallocMicroROS+0x17c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <pvPortMallocMicroROS+0x184>)
 80007ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80007ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b0:	685a      	ldr	r2, [r3, #4]
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <pvPortMallocMicroROS+0x178>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	431a      	orrs	r2, r3
 80007b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80007bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007c2:	f006 fa9d 	bl	8006d00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	f003 0307 	and.w	r3, r3, #7
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d00a      	beq.n	80007e6 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 80007d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007d4:	f383 8811 	msr	BASEPRI, r3
 80007d8:	f3bf 8f6f 	isb	sy
 80007dc:	f3bf 8f4f 	dsb	sy
 80007e0:	60fb      	str	r3, [r7, #12]
}
 80007e2:	bf00      	nop
 80007e4:	e7fe      	b.n	80007e4 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80007e6:	69fb      	ldr	r3, [r7, #28]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3728      	adds	r7, #40	; 0x28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200044dc 	.word	0x200044dc
 80007f4:	200044e8 	.word	0x200044e8
 80007f8:	200044e0 	.word	0x200044e0
 80007fc:	200044d4 	.word	0x200044d4
 8000800:	200044e4 	.word	0x200044e4

08000804 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d048      	beq.n	80008a8 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000816:	2308      	movs	r3, #8
 8000818:	425b      	negs	r3, r3
 800081a:	697a      	ldr	r2, [r7, #20]
 800081c:	4413      	add	r3, r2
 800081e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	685a      	ldr	r2, [r3, #4]
 8000828:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <vPortFreeMicroROS+0xac>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4013      	ands	r3, r2
 800082e:	2b00      	cmp	r3, #0
 8000830:	d10a      	bne.n	8000848 <vPortFreeMicroROS+0x44>
	__asm volatile
 8000832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000836:	f383 8811 	msr	BASEPRI, r3
 800083a:	f3bf 8f6f 	isb	sy
 800083e:	f3bf 8f4f 	dsb	sy
 8000842:	60fb      	str	r3, [r7, #12]
}
 8000844:	bf00      	nop
 8000846:	e7fe      	b.n	8000846 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d00a      	beq.n	8000866 <vPortFreeMicroROS+0x62>
	__asm volatile
 8000850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000854:	f383 8811 	msr	BASEPRI, r3
 8000858:	f3bf 8f6f 	isb	sy
 800085c:	f3bf 8f4f 	dsb	sy
 8000860:	60bb      	str	r3, [r7, #8]
}
 8000862:	bf00      	nop
 8000864:	e7fe      	b.n	8000864 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	685a      	ldr	r2, [r3, #4]
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <vPortFreeMicroROS+0xac>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4013      	ands	r3, r2
 8000870:	2b00      	cmp	r3, #0
 8000872:	d019      	beq.n	80008a8 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d115      	bne.n	80008a8 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	685a      	ldr	r2, [r3, #4]
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <vPortFreeMicroROS+0xac>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	43db      	mvns	r3, r3
 8000886:	401a      	ands	r2, r3
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800088c:	f006 fa2a 	bl	8006ce4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	685a      	ldr	r2, [r3, #4]
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <vPortFreeMicroROS+0xb0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4413      	add	r3, r2
 800089a:	4a06      	ldr	r2, [pc, #24]	; (80008b4 <vPortFreeMicroROS+0xb0>)
 800089c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800089e:	6938      	ldr	r0, [r7, #16]
 80008a0:	f000 f8dc 	bl	8000a5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80008a4:	f006 fa2c 	bl	8006d00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80008a8:	bf00      	nop
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200044e8 	.word	0x200044e8
 80008b4:	200044e0 	.word	0x200044e0

080008b8 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80008b8:	b480      	push	{r7}
 80008ba:	b087      	sub	sp, #28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80008c4:	2308      	movs	r3, #8
 80008c6:	425b      	negs	r3, r3
 80008c8:	697a      	ldr	r2, [r7, #20]
 80008ca:	4413      	add	r3, r2
 80008cc:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	685a      	ldr	r2, [r3, #4]
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <getBlockSize+0x38>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	43db      	mvns	r3, r3
 80008dc:	4013      	ands	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]

	return count;
 80008e0:	68fb      	ldr	r3, [r7, #12]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	371c      	adds	r7, #28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	200044e8 	.word	0x200044e8

080008f4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80008fe:	f006 f9f1 	bl	8006ce4 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000902:	6838      	ldr	r0, [r7, #0]
 8000904:	f7ff feba 	bl	800067c <pvPortMallocMicroROS>
 8000908:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d017      	beq.n	8000940 <pvPortReallocMicroROS+0x4c>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d014      	beq.n	8000940 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff ffce 	bl	80008b8 <getBlockSize>
 800091c:	4603      	mov	r3, r0
 800091e:	2208      	movs	r2, #8
 8000920:	1a9b      	subs	r3, r3, r2
 8000922:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000924:	683a      	ldr	r2, [r7, #0]
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	429a      	cmp	r2, r3
 800092a:	d201      	bcs.n	8000930 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	68b8      	ldr	r0, [r7, #8]
 8000936:	f016 ffd4 	bl	80178e2 <memcpy>

		vPortFreeMicroROS(pv);
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff ff62 	bl	8000804 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000940:	f006 f9de 	bl	8006d00 <xTaskResumeAll>

	return newmem;
 8000944:	68bb      	ldr	r3, [r7, #8]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b086      	sub	sp, #24
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000958:	f006 f9c4 	bl	8006ce4 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000966:	6978      	ldr	r0, [r7, #20]
 8000968:	f7ff fe88 	bl	800067c <pvPortMallocMicroROS>
 800096c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000972:	e004      	b.n	800097e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	1c5a      	adds	r2, r3, #1
 8000978:	613a      	str	r2, [r7, #16]
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	1e5a      	subs	r2, r3, #1
 8000982:	617a      	str	r2, [r7, #20]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d1f5      	bne.n	8000974 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000988:	f006 f9ba 	bl	8006d00 <xTaskResumeAll>
  	return mem;
 800098c:	68fb      	ldr	r3, [r7, #12]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800099e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80009a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009a4:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <prvHeapInit+0xac>)
 80009a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d00c      	beq.n	80009cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	3307      	adds	r3, #7
 80009b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f023 0307 	bic.w	r3, r3, #7
 80009be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80009c0:	68ba      	ldr	r2, [r7, #8]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <prvHeapInit+0xac>)
 80009c8:	4413      	add	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009d0:	4a1d      	ldr	r2, [pc, #116]	; (8000a48 <prvHeapInit+0xb0>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009d6:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <prvHeapInit+0xb0>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	4413      	add	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009e4:	2208      	movs	r2, #8
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	1a9b      	subs	r3, r3, r2
 80009ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f023 0307 	bic.w	r3, r3, #7
 80009f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4a15      	ldr	r2, [pc, #84]	; (8000a4c <prvHeapInit+0xb4>)
 80009f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <prvHeapInit+0xb4>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2200      	movs	r2, #0
 8000a00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <prvHeapInit+0xb4>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	1ad2      	subs	r2, r2, r3
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <prvHeapInit+0xb4>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <prvHeapInit+0xb8>)
 8000a26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	4a09      	ldr	r2, [pc, #36]	; (8000a54 <prvHeapInit+0xbc>)
 8000a2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <prvHeapInit+0xc0>)
 8000a32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a36:	601a      	str	r2, [r3, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	200008d4 	.word	0x200008d4
 8000a48:	200044d4 	.word	0x200044d4
 8000a4c:	200044dc 	.word	0x200044dc
 8000a50:	200044e4 	.word	0x200044e4
 8000a54:	200044e0 	.word	0x200044e0
 8000a58:	200044e8 	.word	0x200044e8

08000a5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a64:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <prvInsertBlockIntoFreeList+0xac>)
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	e002      	b.n	8000a70 <prvInsertBlockIntoFreeList+0x14>
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d8f7      	bhi.n	8000a6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	4413      	add	r3, r2
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d108      	bne.n	8000a9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	685a      	ldr	r2, [r3, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	441a      	add	r2, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	441a      	add	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d118      	bne.n	8000ae4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <prvInsertBlockIntoFreeList+0xb0>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d00d      	beq.n	8000ada <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685a      	ldr	r2, [r3, #4]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	441a      	add	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	e008      	b.n	8000aec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <prvInsertBlockIntoFreeList+0xb0>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	e003      	b.n	8000aec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d002      	beq.n	8000afa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000afa:	bf00      	nop
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	200044d4 	.word	0x200044d4
 8000b0c:	200044dc 	.word	0x200044dc

08000b10 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000b1e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b24:	4904      	ldr	r1, [pc, #16]	; (8000b38 <cubemx_transport_open+0x28>)
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	f003 fdcc 	bl	80046c4 <HAL_UART_Receive_DMA>
    return true;
 8000b2c:	2301      	movs	r3, #1
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200044ec 	.word	0x200044ec

08000b3c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000b4a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000b4c:	68f8      	ldr	r0, [r7, #12]
 8000b4e:	f003 fde9 	bl	8004724 <HAL_UART_DMAStop>
    return true;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000b70:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b20      	cmp	r3, #32
 8000b7c:	d11c      	bne.n	8000bb8 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	461a      	mov	r2, r3
 8000b84:	68b9      	ldr	r1, [r7, #8]
 8000b86:	6978      	ldr	r0, [r7, #20]
 8000b88:	f003 fd1e 	bl	80045c8 <HAL_UART_Transmit_DMA>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000b90:	e002      	b.n	8000b98 <cubemx_transport_write+0x3c>
            osDelay(1);
 8000b92:	2001      	movs	r0, #1
 8000b94:	f005 f85a 	bl	8005c4c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000b98:	7cfb      	ldrb	r3, [r7, #19]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d105      	bne.n	8000baa <cubemx_transport_write+0x4e>
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	2b20      	cmp	r3, #32
 8000ba8:	d1f3      	bne.n	8000b92 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8000baa:	7cfb      	ldrb	r3, [r7, #19]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d101      	bne.n	8000bb4 <cubemx_transport_write+0x58>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	e002      	b.n	8000bba <cubemx_transport_write+0x5e>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	e000      	b.n	8000bba <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8000bb8:	2300      	movs	r3, #0
    }
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
 8000bd0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000bd8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bde:	b672      	cpsid	i
}
 8000be0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000bee:	4a1c      	ldr	r2, [pc, #112]	; (8000c60 <cubemx_transport_read+0x9c>)
 8000bf0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000bf2:	b662      	cpsie	i
}
 8000bf4:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f005 f825 	bl	8005c4c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <cubemx_transport_read+0xa0>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <cubemx_transport_read+0x9c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d103      	bne.n	8000c16 <cubemx_transport_read+0x52>
 8000c0e:	69fa      	ldr	r2, [r7, #28]
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	dbe3      	blt.n	8000bde <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000c1a:	e011      	b.n	8000c40 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <cubemx_transport_read+0xa0>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	440b      	add	r3, r1
 8000c26:	4910      	ldr	r1, [pc, #64]	; (8000c68 <cubemx_transport_read+0xa4>)
 8000c28:	5c8a      	ldrb	r2, [r1, r2]
 8000c2a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <cubemx_transport_read+0xa0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c36:	4a0b      	ldr	r2, [pc, #44]	; (8000c64 <cubemx_transport_read+0xa0>)
 8000c38:	6013      	str	r3, [r2, #0]
        wrote++;
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <cubemx_transport_read+0xa0>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <cubemx_transport_read+0x9c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d003      	beq.n	8000c54 <cubemx_transport_read+0x90>
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d3e3      	bcc.n	8000c1c <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000c54:	69bb      	ldr	r3, [r7, #24]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3720      	adds	r7, #32
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20004cf0 	.word	0x20004cf0
 8000c64:	20004cec 	.word	0x20004cec
 8000c68:	200044ec 	.word	0x200044ec

08000c6c <subscription_str_callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void subscription_str_callback(const void * msgin)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b09c      	sub	sp, #112	; 0x70
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  std_msgs__msg__String * msg = (std_msgs__msg__String *)msgin;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	66fb      	str	r3, [r7, #108]	; 0x6c
  pub_str_msg = *msg;
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <subscription_str_callback+0x5c>)
 8000c7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000c7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  char str[100];
  strcpy(str, msg->data.data);
 8000c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	f107 0308 	add.w	r3, r7, #8
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f016 fe20 	bl	80178d2 <strcpy>
  sprintf(pub_str_msg.data.data, "F446RE heard: %s", str);
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <subscription_str_callback+0x5c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f107 0208 	add.w	r2, r7, #8
 8000c9a:	490c      	ldr	r1, [pc, #48]	; (8000ccc <subscription_str_callback+0x60>)
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f016 fba5 	bl	80173ec <siprintf>
  pub_str_msg.data.size = strlen(pub_str_msg.data.data);
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <subscription_str_callback+0x5c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fabc 	bl	8000224 <strlen>
 8000cac:	4603      	mov	r3, r0
 8000cae:	4a06      	ldr	r2, [pc, #24]	; (8000cc8 <subscription_str_callback+0x5c>)
 8000cb0:	6053      	str	r3, [r2, #4]
  rcl_publish(&publisher_string, &pub_str_msg, NULL);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	4904      	ldr	r1, [pc, #16]	; (8000cc8 <subscription_str_callback+0x5c>)
 8000cb6:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <subscription_str_callback+0x64>)
 8000cb8:	f007 ff5c 	bl	8008b74 <rcl_publish>
  debug_led();
 8000cbc:	f000 f844 	bl	8000d48 <debug_led>
}
 8000cc0:	bf00      	nop
 8000cc2:	3770      	adds	r7, #112	; 0x70
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20004cfc 	.word	0x20004cfc
 8000ccc:	0801859c 	.word	0x0801859c
 8000cd0:	20004cf4 	.word	0x20004cf4

08000cd4 <subscription_imu_callback>:

void subscription_imu_callback(const void * msgin)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  sensor_msgs__msg__Imu * msg = (sensor_msgs__msg__Imu *)msgin;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	60fb      	str	r3, [r7, #12]
  pub_imu_msg = *msg;
 8000ce0:	4a09      	ldr	r2, [pc, #36]	; (8000d08 <subscription_imu_callback+0x34>)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	4610      	mov	r0, r2
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000cec:	461a      	mov	r2, r3
 8000cee:	f016 fdf8 	bl	80178e2 <memcpy>
  rcl_publish(&publisher_imu, &pub_imu_msg, NULL);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4904      	ldr	r1, [pc, #16]	; (8000d08 <subscription_imu_callback+0x34>)
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <subscription_imu_callback+0x38>)
 8000cf8:	f007 ff3c 	bl	8008b74 <rcl_publish>
  debug_led();
 8000cfc:	f000 f824 	bl	8000d48 <debug_led>
}
 8000d00:	bf00      	nop
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20004d08 	.word	0x20004d08
 8000d0c:	20004cf8 	.word	0x20004cf8

08000d10 <subscription_ak60_callback>:

// ADD-ON, Callback function
void subscription_ak60_callback(const void *msgin)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__Float32MultiArray *msg = (const std_msgs__msg__Float32MultiArray *)msgin;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	60fb      	str	r3, [r7, #12]

  // Copy the data to the publisher message
  memcpy(pub_ak60_msg.data.data, msg->data.data, 12 * sizeof(float));
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <subscription_ak60_callback+0x30>)
 8000d1e:	6918      	ldr	r0, [r3, #16]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	2230      	movs	r2, #48	; 0x30
 8000d26:	4619      	mov	r1, r3
 8000d28:	f016 fddb 	bl	80178e2 <memcpy>

  // Publish the data
  rcl_publish(&publisher_ak60, &pub_ak60_msg, NULL);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4904      	ldr	r1, [pc, #16]	; (8000d40 <subscription_ak60_callback+0x30>)
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <subscription_ak60_callback+0x34>)
 8000d32:	f007 ff1f 	bl	8008b74 <rcl_publish>
//  debug_led();
}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20004e6c 	.word	0x20004e6c
 8000d44:	20004e68 	.word	0x20004e68

08000d48 <debug_led>:

void debug_led()
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); //LED turned on
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2120      	movs	r1, #32
 8000d50:	4807      	ldr	r0, [pc, #28]	; (8000d70 <debug_led+0x28>)
 8000d52:	f002 fab9 	bl	80032c8 <HAL_GPIO_WritePin>
  HAL_Delay(200); //Wait for 200[ms]
 8000d56:	20c8      	movs	r0, #200	; 0xc8
 8000d58:	f001 f8e6 	bl	8001f28 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //LED turned off
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2120      	movs	r1, #32
 8000d60:	4803      	ldr	r0, [pc, #12]	; (8000d70 <debug_led+0x28>)
 8000d62:	f002 fab1 	bl	80032c8 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000d66:	20c8      	movs	r0, #200	; 0xc8
 8000d68:	f001 f8de 	bl	8001f28 <HAL_Delay>
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40020000 	.word	0x40020000

08000d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d78:	f001 f894 	bl	8001ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7c:	f000 f81c 	bl	8000db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d80:	f000 f914 	bl	8000fac <MX_GPIO_Init>
  MX_DMA_Init();
 8000d84:	f000 f8ea 	bl	8000f5c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d88:	f000 f8be 	bl	8000f08 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000d8c:	f000 f886 	bl	8000e9c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d90:	f004 fe80 	bl	8005a94 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d94:	4a05      	ldr	r2, [pc, #20]	; (8000dac <main+0x38>)
 8000d96:	2100      	movs	r1, #0
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <main+0x3c>)
 8000d9a:	f004 fec5 	bl	8005b28 <osThreadNew>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <main+0x40>)
 8000da2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000da4:	f004 fe9a 	bl	8005adc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <main+0x34>
 8000daa:	bf00      	nop
 8000dac:	080186d0 	.word	0x080186d0
 8000db0:	08001089 	.word	0x08001089
 8000db4:	20004fb4 	.word	0x20004fb4

08000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b094      	sub	sp, #80	; 0x50
 8000dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	2234      	movs	r2, #52	; 0x34
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f016 fc6c 	bl	80176a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	f107 0308 	add.w	r3, r7, #8
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	4b2c      	ldr	r3, [pc, #176]	; (8000e94 <SystemClock_Config+0xdc>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	4a2b      	ldr	r2, [pc, #172]	; (8000e94 <SystemClock_Config+0xdc>)
 8000de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dea:	6413      	str	r3, [r2, #64]	; 0x40
 8000dec:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <SystemClock_Config+0xdc>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df8:	2300      	movs	r3, #0
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	4b26      	ldr	r3, [pc, #152]	; (8000e98 <SystemClock_Config+0xe0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a25      	ldr	r2, [pc, #148]	; (8000e98 <SystemClock_Config+0xe0>)
 8000e02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	4b23      	ldr	r3, [pc, #140]	; (8000e98 <SystemClock_Config+0xe0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e1c:	2310      	movs	r3, #16
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e20:	2302      	movs	r3, #2
 8000e22:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e24:	2300      	movs	r3, #0
 8000e26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e28:	2308      	movs	r3, #8
 8000e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000e2c:	23b4      	movs	r3, #180	; 0xb4
 8000e2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e34:	2302      	movs	r3, #2
 8000e36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	4618      	mov	r0, r3
 8000e42:	f002 fe27 	bl	8003a94 <HAL_RCC_OscConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e4c:	f000 fbe8 	bl	8001620 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e50:	f002 fa54 	bl	80032fc <HAL_PWREx_EnableOverDrive>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e5a:	f000 fbe1 	bl	8001620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5e:	230f      	movs	r3, #15
 8000e60:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e62:	2302      	movs	r3, #2
 8000e64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e6a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e74:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	2105      	movs	r1, #5
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f002 fa8d 	bl	800339c <HAL_RCC_ClockConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000e88:	f000 fbca 	bl	8001620 <Error_Handler>
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	3750      	adds	r7, #80	; 0x50
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40007000 	.word	0x40007000

08000e9c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ea0:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <MX_CAN1_Init+0x64>)
 8000ea2:	4a18      	ldr	r2, [pc, #96]	; (8000f04 <MX_CAN1_Init+0x68>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <MX_CAN1_Init+0x64>)
 8000ea8:	2209      	movs	r2, #9
 8000eaa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_CAN1_Init+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <MX_CAN1_Init+0x64>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_CAN1_Init+0x64>)
 8000eba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ebe:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_CAN1_Init+0x64>)
 8000ec2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ec6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <MX_CAN1_Init+0x64>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_CAN1_Init+0x64>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <MX_CAN1_Init+0x64>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_CAN1_Init+0x64>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <MX_CAN1_Init+0x64>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_CAN1_Init+0x64>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000eec:	4804      	ldr	r0, [pc, #16]	; (8000f00 <MX_CAN1_Init+0x64>)
 8000eee:	f001 f83f 	bl	8001f70 <HAL_CAN_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000ef8:	f000 fb92 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20004e88 	.word	0x20004e88
 8000f04:	40006400 	.word	0x40006400

08000f08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f0e:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <MX_USART2_UART_Init+0x50>)
 8000f10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f2e:	220c      	movs	r2, #12
 8000f30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f40:	f003 faf4 	bl	800452c <HAL_UART_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f4a:	f000 fb69 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20004eb0 	.word	0x20004eb0
 8000f58:	40004400 	.word	0x40004400

08000f5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <MX_DMA_Init+0x4c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a0f      	ldr	r2, [pc, #60]	; (8000fa8 <MX_DMA_Init+0x4c>)
 8000f6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <MX_DMA_Init+0x4c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2105      	movs	r1, #5
 8000f82:	2010      	movs	r0, #16
 8000f84:	f001 fbe0 	bl	8002748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f88:	2010      	movs	r0, #16
 8000f8a:	f001 fbf9 	bl	8002780 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2105      	movs	r1, #5
 8000f92:	2011      	movs	r0, #17
 8000f94:	f001 fbd8 	bl	8002748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f98:	2011      	movs	r0, #17
 8000f9a:	f001 fbf1 	bl	8002780 <HAL_NVIC_EnableIRQ>

}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800

08000fac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	4b2d      	ldr	r3, [pc, #180]	; (800107c <MX_GPIO_Init+0xd0>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a2c      	ldr	r2, [pc, #176]	; (800107c <MX_GPIO_Init+0xd0>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	; (800107c <MX_GPIO_Init+0xd0>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b26      	ldr	r3, [pc, #152]	; (800107c <MX_GPIO_Init+0xd0>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a25      	ldr	r2, [pc, #148]	; (800107c <MX_GPIO_Init+0xd0>)
 8000fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b23      	ldr	r3, [pc, #140]	; (800107c <MX_GPIO_Init+0xd0>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	; (800107c <MX_GPIO_Init+0xd0>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a1e      	ldr	r2, [pc, #120]	; (800107c <MX_GPIO_Init+0xd0>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b1c      	ldr	r3, [pc, #112]	; (800107c <MX_GPIO_Init+0xd0>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <MX_GPIO_Init+0xd0>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a17      	ldr	r2, [pc, #92]	; (800107c <MX_GPIO_Init+0xd0>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <MX_GPIO_Init+0xd0>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	2120      	movs	r1, #32
 8001036:	4812      	ldr	r0, [pc, #72]	; (8001080 <MX_GPIO_Init+0xd4>)
 8001038:	f002 f946 	bl	80032c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800103c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001042:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	480c      	ldr	r0, [pc, #48]	; (8001084 <MX_GPIO_Init+0xd8>)
 8001054:	f001 ffa4 	bl	8002fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001058:	2320      	movs	r3, #32
 800105a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4804      	ldr	r0, [pc, #16]	; (8001080 <MX_GPIO_Init+0xd4>)
 8001070:	f001 ff96 	bl	8002fa0 <HAL_GPIO_Init>

}
 8001074:	bf00      	nop
 8001076:	3728      	adds	r7, #40	; 0x28
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40023800 	.word	0x40023800
 8001080:	40020000 	.word	0x40020000
 8001084:	40020800 	.word	0x40020800

08001088 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	f5ad 7d60 	sub.w	sp, sp, #896	; 0x380
 800108e:	af02      	add	r7, sp, #8
 8001090:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001094:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8001098:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  // micro-ROS configuration
  char test_array[ARRAY_LEN];
  memset(test_array,'z',ARRAY_LEN);
 800109a:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800109e:	22c8      	movs	r2, #200	; 0xc8
 80010a0:	217a      	movs	r1, #122	; 0x7a
 80010a2:	4618      	mov	r0, r3
 80010a4:	f016 fafe 	bl	80176a4 <memset>

  rmw_uros_set_custom_transport(
 80010a8:	4bb4      	ldr	r3, [pc, #720]	; (800137c <StartDefaultTask+0x2f4>)
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	4bb4      	ldr	r3, [pc, #720]	; (8001380 <StartDefaultTask+0x2f8>)
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	4bb4      	ldr	r3, [pc, #720]	; (8001384 <StartDefaultTask+0x2fc>)
 80010b2:	4ab5      	ldr	r2, [pc, #724]	; (8001388 <StartDefaultTask+0x300>)
 80010b4:	49b5      	ldr	r1, [pc, #724]	; (800138c <StartDefaultTask+0x304>)
 80010b6:	2001      	movs	r0, #1
 80010b8:	f009 f9b8 	bl	800a42c <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80010bc:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80010c0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80010c4:	4618      	mov	r0, r3
 80010c6:	f008 fe81 	bl	8009dcc <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 80010ca:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80010ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80010d2:	4aaf      	ldr	r2, [pc, #700]	; (8001390 <StartDefaultTask+0x308>)
 80010d4:	601a      	str	r2, [r3, #0]
  freeRTOS_allocator.deallocate = microros_deallocate;
 80010d6:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80010da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80010de:	4aad      	ldr	r2, [pc, #692]	; (8001394 <StartDefaultTask+0x30c>)
 80010e0:	605a      	str	r2, [r3, #4]
  freeRTOS_allocator.reallocate = microros_reallocate;
 80010e2:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80010e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80010ea:	4aab      	ldr	r2, [pc, #684]	; (8001398 <StartDefaultTask+0x310>)
 80010ec:	609a      	str	r2, [r3, #8]
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80010ee:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80010f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80010f6:	4aa9      	ldr	r2, [pc, #676]	; (800139c <StartDefaultTask+0x314>)
 80010f8:	60da      	str	r2, [r3, #12]

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80010fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80010fe:	4618      	mov	r0, r3
 8001100:	f008 fe72 	bl	8009de8 <rcutils_set_default_allocator>
 8001104:	4603      	mov	r3, r0
 8001106:	f083 0301 	eor.w	r3, r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d004      	beq.n	800111a <StartDefaultTask+0x92>
    printf("Error on default allocators (line %d)\n", __LINE__);
 8001110:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8001114:	48a2      	ldr	r0, [pc, #648]	; (80013a0 <StartDefaultTask+0x318>)
 8001116:	f016 f923 	bl	8017360 <iprintf>
  sensor_msgs__msg__Imu sub_imu_msg;
  rclc_support_t support;
  rcl_allocator_t allocator;
  rcl_node_t node;

  allocator = rcl_get_default_allocator();
 800111a:	f507 735e 	add.w	r3, r7, #888	; 0x378
 800111e:	f5a3 7432 	sub.w	r4, r3, #712	; 0x2c8
 8001122:	463b      	mov	r3, r7
 8001124:	4618      	mov	r0, r3
 8001126:	f008 fe7d 	bl	8009e24 <rcutils_get_default_allocator>
 800112a:	f507 735e 	add.w	r3, r7, #888	; 0x378
 800112e:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8001132:	461d      	mov	r5, r3
 8001134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001138:	682b      	ldr	r3, [r5, #0]
 800113a:	6023      	str	r3, [r4, #0]

  // create init_options
  RCCHECK(rclc_support_init(&support, 0, NULL, &allocator));
 800113c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001140:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8001144:	2200      	movs	r2, #0
 8001146:	2100      	movs	r1, #0
 8001148:	f008 fd16 	bl	8009b78 <rclc_support_init>
 800114c:	f8c7 0374 	str.w	r0, [r7, #884]	; 0x374
 8001150:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8001154:	2b00      	cmp	r3, #0
 8001156:	d007      	beq.n	8001168 <StartDefaultTask+0xe0>
 8001158:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 800115c:	f240 11c9 	movw	r1, #457	; 0x1c9
 8001160:	4890      	ldr	r0, [pc, #576]	; (80013a4 <StartDefaultTask+0x31c>)
 8001162:	f016 f8fd 	bl	8017360 <iprintf>
 8001166:	e232      	b.n	80015ce <StartDefaultTask+0x546>

  // create node
  RCCHECK(rclc_node_init_default(&node, "f446re_node", "", &support));
 8001168:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800116c:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8001170:	4a8d      	ldr	r2, [pc, #564]	; (80013a8 <StartDefaultTask+0x320>)
 8001172:	498e      	ldr	r1, [pc, #568]	; (80013ac <StartDefaultTask+0x324>)
 8001174:	f008 fd4a 	bl	8009c0c <rclc_node_init_default>
 8001178:	f8c7 0370 	str.w	r0, [r7, #880]	; 0x370
 800117c:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8001180:	2b00      	cmp	r3, #0
 8001182:	d007      	beq.n	8001194 <StartDefaultTask+0x10c>
 8001184:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 8001188:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800118c:	4885      	ldr	r0, [pc, #532]	; (80013a4 <StartDefaultTask+0x31c>)
 800118e:	f016 f8e7 	bl	8017360 <iprintf>
 8001192:	e21c      	b.n	80015ce <StartDefaultTask+0x546>

  // create publisher
  RCCHECK(rclc_publisher_init_best_effort(
 8001194:	f00a fb04 	bl	800b7a0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8001198:	4602      	mov	r2, r0
 800119a:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800119e:	4b84      	ldr	r3, [pc, #528]	; (80013b0 <StartDefaultTask+0x328>)
 80011a0:	4884      	ldr	r0, [pc, #528]	; (80013b4 <StartDefaultTask+0x32c>)
 80011a2:	f008 fd6f 	bl	8009c84 <rclc_publisher_init_best_effort>
 80011a6:	f8c7 036c 	str.w	r0, [r7, #876]	; 0x36c
 80011aa:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d007      	beq.n	80011c2 <StartDefaultTask+0x13a>
 80011b2:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80011b6:	f240 11cf 	movw	r1, #463	; 0x1cf
 80011ba:	487a      	ldr	r0, [pc, #488]	; (80013a4 <StartDefaultTask+0x31c>)
 80011bc:	f016 f8d0 	bl	8017360 <iprintf>
 80011c0:	e205      	b.n	80015ce <StartDefaultTask+0x546>
    &publisher_string,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
    "/f446re_string_publisher"));

  RCCHECK(rclc_publisher_init_best_effort(
 80011c2:	f00a f95d 	bl	800b480 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 80011c6:	4602      	mov	r2, r0
 80011c8:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80011cc:	4b7a      	ldr	r3, [pc, #488]	; (80013b8 <StartDefaultTask+0x330>)
 80011ce:	487b      	ldr	r0, [pc, #492]	; (80013bc <StartDefaultTask+0x334>)
 80011d0:	f008 fd58 	bl	8009c84 <rclc_publisher_init_best_effort>
 80011d4:	f8c7 0368 	str.w	r0, [r7, #872]	; 0x368
 80011d8:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d007      	beq.n	80011f0 <StartDefaultTask+0x168>
 80011e0:	f8d7 2368 	ldr.w	r2, [r7, #872]	; 0x368
 80011e4:	f240 11d5 	movw	r1, #469	; 0x1d5
 80011e8:	486e      	ldr	r0, [pc, #440]	; (80013a4 <StartDefaultTask+0x31c>)
 80011ea:	f016 f8b9 	bl	8017360 <iprintf>
 80011ee:	e1ee      	b.n	80015ce <StartDefaultTask+0x546>
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
    "/f446re_imu_publisher"));

  // create subscriber
  RCCHECK(rclc_subscription_init_default(
 80011f0:	f00a fad6 	bl	800b7a0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 80011f4:	4602      	mov	r2, r0
 80011f6:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80011fa:	f507 7013 	add.w	r0, r7, #588	; 0x24c
 80011fe:	4b70      	ldr	r3, [pc, #448]	; (80013c0 <StartDefaultTask+0x338>)
 8001200:	f008 fd74 	bl	8009cec <rclc_subscription_init_default>
 8001204:	f8c7 0364 	str.w	r0, [r7, #868]	; 0x364
 8001208:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800120c:	2b00      	cmp	r3, #0
 800120e:	d007      	beq.n	8001220 <StartDefaultTask+0x198>
 8001210:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 8001214:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8001218:	4862      	ldr	r0, [pc, #392]	; (80013a4 <StartDefaultTask+0x31c>)
 800121a:	f016 f8a1 	bl	8017360 <iprintf>
 800121e:	e1d6      	b.n	80015ce <StartDefaultTask+0x546>
    &subscriber_string,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
    "/f446re_string_subscriber"));

  RCCHECK(rclc_subscription_init_default(
 8001220:	f00a f92e 	bl	800b480 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8001224:	4602      	mov	r2, r0
 8001226:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800122a:	f507 7012 	add.w	r0, r7, #584	; 0x248
 800122e:	4b65      	ldr	r3, [pc, #404]	; (80013c4 <StartDefaultTask+0x33c>)
 8001230:	f008 fd5c 	bl	8009cec <rclc_subscription_init_default>
 8001234:	f8c7 0360 	str.w	r0, [r7, #864]	; 0x360
 8001238:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 800123c:	2b00      	cmp	r3, #0
 800123e:	d007      	beq.n	8001250 <StartDefaultTask+0x1c8>
 8001240:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 8001244:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8001248:	4856      	ldr	r0, [pc, #344]	; (80013a4 <StartDefaultTask+0x31c>)
 800124a:	f016 f889 	bl	8017360 <iprintf>
 800124e:	e1be      	b.n	80015ce <StartDefaultTask+0x546>
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
    "/imu/data_raw"));

  // ADD-ON, Init publish and subscriber
  RCCHECK(rclc_subscription_init_best_effort(
 8001250:	f00a fa8e 	bl	800b770 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>
 8001254:	4602      	mov	r2, r0
 8001256:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800125a:	4b5b      	ldr	r3, [pc, #364]	; (80013c8 <StartDefaultTask+0x340>)
 800125c:	485b      	ldr	r0, [pc, #364]	; (80013cc <StartDefaultTask+0x344>)
 800125e:	f008 fd79 	bl	8009d54 <rclc_subscription_init_best_effort>
 8001262:	f8c7 035c 	str.w	r0, [r7, #860]	; 0x35c
 8001266:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 800126a:	2b00      	cmp	r3, #0
 800126c:	d007      	beq.n	800127e <StartDefaultTask+0x1f6>
 800126e:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 8001272:	f240 11e9 	movw	r1, #489	; 0x1e9
 8001276:	484b      	ldr	r0, [pc, #300]	; (80013a4 <StartDefaultTask+0x31c>)
 8001278:	f016 f872 	bl	8017360 <iprintf>
 800127c:	e1a7      	b.n	80015ce <StartDefaultTask+0x546>
    &subscriber_ak60,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32MultiArray),
    "/AK_60_subscriber"));

  RCCHECK(rclc_publisher_init_best_effort(
 800127e:	f00a fa77 	bl	800b770 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>
 8001282:	4602      	mov	r2, r0
 8001284:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001288:	4b51      	ldr	r3, [pc, #324]	; (80013d0 <StartDefaultTask+0x348>)
 800128a:	4852      	ldr	r0, [pc, #328]	; (80013d4 <StartDefaultTask+0x34c>)
 800128c:	f008 fcfa 	bl	8009c84 <rclc_publisher_init_best_effort>
 8001290:	f8c7 0358 	str.w	r0, [r7, #856]	; 0x358
 8001294:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8001298:	2b00      	cmp	r3, #0
 800129a:	d007      	beq.n	80012ac <StartDefaultTask+0x224>
 800129c:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 80012a0:	f240 11ef 	movw	r1, #495	; 0x1ef
 80012a4:	483f      	ldr	r0, [pc, #252]	; (80013a4 <StartDefaultTask+0x31c>)
 80012a6:	f016 f85b 	bl	8017360 <iprintf>
 80012aa:	e190      	b.n	80015ce <StartDefaultTask+0x546>
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32MultiArray),
    "/AK_60_publisher"));

  // create executor
  rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 80012ac:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80012b0:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 80012b4:	4618      	mov	r0, r3
 80012b6:	f008 f983 	bl	80095c0 <rclc_executor_get_zero_initialized_executor>
  RCCHECK(rclc_executor_init(&executor, &support.context, 4, &allocator));
 80012ba:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80012be:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80012c2:	f107 0020 	add.w	r0, r7, #32
 80012c6:	2204      	movs	r2, #4
 80012c8:	f008 f986 	bl	80095d8 <rclc_executor_init>
 80012cc:	f8c7 0354 	str.w	r0, [r7, #852]	; 0x354
 80012d0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d007      	beq.n	80012e8 <StartDefaultTask+0x260>
 80012d8:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 80012dc:	f240 11f7 	movw	r1, #503	; 0x1f7
 80012e0:	4830      	ldr	r0, [pc, #192]	; (80013a4 <StartDefaultTask+0x31c>)
 80012e2:	f016 f83d 	bl	8017360 <iprintf>
 80012e6:	e172      	b.n	80015ce <StartDefaultTask+0x546>
  RCCHECK(rclc_executor_add_subscription(&executor, &subscriber_string, &sub_str_msg, &subscription_str_callback, ON_NEW_DATA));
 80012e8:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 80012ec:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 80012f0:	f107 0020 	add.w	r0, r7, #32
 80012f4:	2300      	movs	r3, #0
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	4b37      	ldr	r3, [pc, #220]	; (80013d8 <StartDefaultTask+0x350>)
 80012fa:	f008 f9dd 	bl	80096b8 <rclc_executor_add_subscription>
 80012fe:	f8c7 0350 	str.w	r0, [r7, #848]	; 0x350
 8001302:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001306:	2b00      	cmp	r3, #0
 8001308:	d007      	beq.n	800131a <StartDefaultTask+0x292>
 800130a:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 800130e:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8001312:	4824      	ldr	r0, [pc, #144]	; (80013a4 <StartDefaultTask+0x31c>)
 8001314:	f016 f824 	bl	8017360 <iprintf>
 8001318:	e159      	b.n	80015ce <StartDefaultTask+0x546>
  RCCHECK(rclc_executor_add_subscription(&executor, &subscriber_imu, &sub_imu_msg, &subscription_imu_callback, ON_NEW_DATA));
 800131a:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800131e:	f507 7112 	add.w	r1, r7, #584	; 0x248
 8001322:	f107 0020 	add.w	r0, r7, #32
 8001326:	2300      	movs	r3, #0
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <StartDefaultTask+0x354>)
 800132c:	f008 f9c4 	bl	80096b8 <rclc_executor_add_subscription>
 8001330:	f8c7 034c 	str.w	r0, [r7, #844]	; 0x34c
 8001334:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001338:	2b00      	cmp	r3, #0
 800133a:	d007      	beq.n	800134c <StartDefaultTask+0x2c4>
 800133c:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 8001340:	f240 11f9 	movw	r1, #505	; 0x1f9
 8001344:	4817      	ldr	r0, [pc, #92]	; (80013a4 <StartDefaultTask+0x31c>)
 8001346:	f016 f80b 	bl	8017360 <iprintf>
 800134a:	e140      	b.n	80015ce <StartDefaultTask+0x546>
  // ADD-ON, Add Subscriber to Executor
  RCCHECK(rclc_executor_add_subscription(&executor, &subscriber_ak60, &sub_ak60_msg, &subscription_ak60_callback, ON_NEW_DATA));
 800134c:	f107 0020 	add.w	r0, r7, #32
 8001350:	2300      	movs	r3, #0
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <StartDefaultTask+0x358>)
 8001356:	4a23      	ldr	r2, [pc, #140]	; (80013e4 <StartDefaultTask+0x35c>)
 8001358:	491c      	ldr	r1, [pc, #112]	; (80013cc <StartDefaultTask+0x344>)
 800135a:	f008 f9ad 	bl	80096b8 <rclc_executor_add_subscription>
 800135e:	f8c7 0348 	str.w	r0, [r7, #840]	; 0x348
 8001362:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8001366:	2b00      	cmp	r3, #0
 8001368:	d03e      	beq.n	80013e8 <StartDefaultTask+0x360>
 800136a:	f8d7 2348 	ldr.w	r2, [r7, #840]	; 0x348
 800136e:	f240 11fb 	movw	r1, #507	; 0x1fb
 8001372:	480c      	ldr	r0, [pc, #48]	; (80013a4 <StartDefaultTask+0x31c>)
 8001374:	f015 fff4 	bl	8017360 <iprintf>
 8001378:	e129      	b.n	80015ce <StartDefaultTask+0x546>
 800137a:	bf00      	nop
 800137c:	08000bc5 	.word	0x08000bc5
 8001380:	08000b5d 	.word	0x08000b5d
 8001384:	08000b3d 	.word	0x08000b3d
 8001388:	08000b11 	.word	0x08000b11
 800138c:	20004eb0 	.word	0x20004eb0
 8001390:	0800162d 	.word	0x0800162d
 8001394:	08001671 	.word	0x08001671
 8001398:	080016a9 	.word	0x080016a9
 800139c:	08001715 	.word	0x08001715
 80013a0:	080185b0 	.word	0x080185b0
 80013a4:	080185d8 	.word	0x080185d8
 80013a8:	08018604 	.word	0x08018604
 80013ac:	08018608 	.word	0x08018608
 80013b0:	08018614 	.word	0x08018614
 80013b4:	20004cf4 	.word	0x20004cf4
 80013b8:	08018630 	.word	0x08018630
 80013bc:	20004cf8 	.word	0x20004cf8
 80013c0:	08018648 	.word	0x08018648
 80013c4:	08018664 	.word	0x08018664
 80013c8:	08018674 	.word	0x08018674
 80013cc:	20004e48 	.word	0x20004e48
 80013d0:	08018688 	.word	0x08018688
 80013d4:	20004e68 	.word	0x20004e68
 80013d8:	08000c6d 	.word	0x08000c6d
 80013dc:	08000cd5 	.word	0x08000cd5
 80013e0:	08000d11 	.word	0x08000d11
 80013e4:	20004e4c 	.word	0x20004e4c


  // initialize message memory
  pub_str_msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 80013e8:	20c8      	movs	r0, #200	; 0xc8
 80013ea:	f015 fcc1 	bl	8016d70 <malloc>
 80013ee:	4603      	mov	r3, r0
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b79      	ldr	r3, [pc, #484]	; (80015d8 <StartDefaultTask+0x550>)
 80013f4:	601a      	str	r2, [r3, #0]
  pub_str_msg.data.size = 0;
 80013f6:	4b78      	ldr	r3, [pc, #480]	; (80015d8 <StartDefaultTask+0x550>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
  pub_str_msg.data.capacity = ARRAY_LEN;
 80013fc:	4b76      	ldr	r3, [pc, #472]	; (80015d8 <StartDefaultTask+0x550>)
 80013fe:	22c8      	movs	r2, #200	; 0xc8
 8001400:	609a      	str	r2, [r3, #8]

  pub_imu_msg.header.frame_id.capacity = 100;
 8001402:	4b76      	ldr	r3, [pc, #472]	; (80015dc <StartDefaultTask+0x554>)
 8001404:	2264      	movs	r2, #100	; 0x64
 8001406:	611a      	str	r2, [r3, #16]
  pub_imu_msg.header.frame_id.data =(char * ) malloc(100 * sizeof(char));
 8001408:	2064      	movs	r0, #100	; 0x64
 800140a:	f015 fcb1 	bl	8016d70 <malloc>
 800140e:	4603      	mov	r3, r0
 8001410:	461a      	mov	r2, r3
 8001412:	4b72      	ldr	r3, [pc, #456]	; (80015dc <StartDefaultTask+0x554>)
 8001414:	609a      	str	r2, [r3, #8]
  pub_imu_msg.header.frame_id.size = 0;
 8001416:	4b71      	ldr	r3, [pc, #452]	; (80015dc <StartDefaultTask+0x554>)
 8001418:	2200      	movs	r2, #0
 800141a:	60da      	str	r2, [r3, #12]

  sub_str_msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 800141c:	20c8      	movs	r0, #200	; 0xc8
 800141e:	f015 fca7 	bl	8016d70 <malloc>
 8001422:	4603      	mov	r3, r0
 8001424:	461a      	mov	r2, r3
 8001426:	f507 735e 	add.w	r3, r7, #888	; 0x378
 800142a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800142e:	601a      	str	r2, [r3, #0]
  sub_str_msg.data.size = 0;
 8001430:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001434:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
  sub_str_msg.data.capacity = ARRAY_LEN;
 800143c:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001440:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001444:	22c8      	movs	r2, #200	; 0xc8
 8001446:	609a      	str	r2, [r3, #8]

  sub_imu_msg.header.frame_id.capacity = 100;
 8001448:	f507 735e 	add.w	r3, r7, #888	; 0x378
 800144c:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8001450:	2264      	movs	r2, #100	; 0x64
 8001452:	611a      	str	r2, [r3, #16]
  sub_imu_msg.header.frame_id.data =(char * ) malloc(100 * sizeof(char));
 8001454:	2064      	movs	r0, #100	; 0x64
 8001456:	f015 fc8b 	bl	8016d70 <malloc>
 800145a:	4603      	mov	r3, r0
 800145c:	461a      	mov	r2, r3
 800145e:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001462:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8001466:	609a      	str	r2, [r3, #8]
  sub_imu_msg.header.frame_id.size = 0;
 8001468:	f507 735e 	add.w	r3, r7, #888	; 0x378
 800146c:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]

  // ADD-ON, Initialize Message Memory
  sub_ak60_msg.data.data = (float *) malloc(12 * sizeof(float));
 8001474:	2030      	movs	r0, #48	; 0x30
 8001476:	f015 fc7b 	bl	8016d70 <malloc>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	4b58      	ldr	r3, [pc, #352]	; (80015e0 <StartDefaultTask+0x558>)
 8001480:	611a      	str	r2, [r3, #16]
  sub_ak60_msg.data.size = 12;
 8001482:	4b57      	ldr	r3, [pc, #348]	; (80015e0 <StartDefaultTask+0x558>)
 8001484:	220c      	movs	r2, #12
 8001486:	615a      	str	r2, [r3, #20]
  sub_ak60_msg.data.capacity = 12;
 8001488:	4b55      	ldr	r3, [pc, #340]	; (80015e0 <StartDefaultTask+0x558>)
 800148a:	220c      	movs	r2, #12
 800148c:	619a      	str	r2, [r3, #24]

  pub_ak60_msg.data.data = (float *) malloc(12 * sizeof(float));
 800148e:	2030      	movs	r0, #48	; 0x30
 8001490:	f015 fc6e 	bl	8016d70 <malloc>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	4b52      	ldr	r3, [pc, #328]	; (80015e4 <StartDefaultTask+0x55c>)
 800149a:	611a      	str	r2, [r3, #16]
  pub_ak60_msg.data.size = 12;
 800149c:	4b51      	ldr	r3, [pc, #324]	; (80015e4 <StartDefaultTask+0x55c>)
 800149e:	220c      	movs	r2, #12
 80014a0:	615a      	str	r2, [r3, #20]
  pub_ak60_msg.data.capacity = 12;
 80014a2:	4b50      	ldr	r3, [pc, #320]	; (80015e4 <StartDefaultTask+0x55c>)
 80014a4:	220c      	movs	r2, #12
 80014a6:	619a      	str	r2, [r3, #24]

  // execute subscriber
  rclc_executor_spin(&executor);
 80014a8:	f107 0320 	add.w	r3, r7, #32
 80014ac:	4618      	mov	r0, r3
 80014ae:	f008 fb23 	bl	8009af8 <rclc_executor_spin>

  // cleaning Up
  RCCHECK(rcl_publisher_fini(&publisher_string, &node));
 80014b2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80014b6:	4619      	mov	r1, r3
 80014b8:	484b      	ldr	r0, [pc, #300]	; (80015e8 <StartDefaultTask+0x560>)
 80014ba:	f007 fb01 	bl	8008ac0 <rcl_publisher_fini>
 80014be:	f8c7 0344 	str.w	r0, [r7, #836]	; 0x344
 80014c2:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d007      	beq.n	80014da <StartDefaultTask+0x452>
 80014ca:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 80014ce:	f44f 7107 	mov.w	r1, #540	; 0x21c
 80014d2:	4846      	ldr	r0, [pc, #280]	; (80015ec <StartDefaultTask+0x564>)
 80014d4:	f015 ff44 	bl	8017360 <iprintf>
 80014d8:	e079      	b.n	80015ce <StartDefaultTask+0x546>
  RCCHECK(rcl_publisher_fini(&publisher_imu, &node));
 80014da:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80014de:	4619      	mov	r1, r3
 80014e0:	4843      	ldr	r0, [pc, #268]	; (80015f0 <StartDefaultTask+0x568>)
 80014e2:	f007 faed 	bl	8008ac0 <rcl_publisher_fini>
 80014e6:	f8c7 0340 	str.w	r0, [r7, #832]	; 0x340
 80014ea:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d007      	beq.n	8001502 <StartDefaultTask+0x47a>
 80014f2:	f8d7 2340 	ldr.w	r2, [r7, #832]	; 0x340
 80014f6:	f240 211d 	movw	r1, #541	; 0x21d
 80014fa:	483c      	ldr	r0, [pc, #240]	; (80015ec <StartDefaultTask+0x564>)
 80014fc:	f015 ff30 	bl	8017360 <iprintf>
 8001500:	e065      	b.n	80015ce <StartDefaultTask+0x546>
  RCCHECK(rcl_subscription_fini(&subscriber_string, &node));
 8001502:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001506:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800150a:	4611      	mov	r1, r2
 800150c:	4618      	mov	r0, r3
 800150e:	f007 fc25 	bl	8008d5c <rcl_subscription_fini>
 8001512:	f8c7 033c 	str.w	r0, [r7, #828]	; 0x33c
 8001516:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800151a:	2b00      	cmp	r3, #0
 800151c:	d007      	beq.n	800152e <StartDefaultTask+0x4a6>
 800151e:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8001522:	f240 211e 	movw	r1, #542	; 0x21e
 8001526:	4831      	ldr	r0, [pc, #196]	; (80015ec <StartDefaultTask+0x564>)
 8001528:	f015 ff1a 	bl	8017360 <iprintf>
 800152c:	e04f      	b.n	80015ce <StartDefaultTask+0x546>
  RCCHECK(rcl_subscription_fini(&subscriber_imu, &node));
 800152e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001532:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8001536:	4611      	mov	r1, r2
 8001538:	4618      	mov	r0, r3
 800153a:	f007 fc0f 	bl	8008d5c <rcl_subscription_fini>
 800153e:	f8c7 0338 	str.w	r0, [r7, #824]	; 0x338
 8001542:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8001546:	2b00      	cmp	r3, #0
 8001548:	d007      	beq.n	800155a <StartDefaultTask+0x4d2>
 800154a:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 800154e:	f240 211f 	movw	r1, #543	; 0x21f
 8001552:	4826      	ldr	r0, [pc, #152]	; (80015ec <StartDefaultTask+0x564>)
 8001554:	f015 ff04 	bl	8017360 <iprintf>
 8001558:	e039      	b.n	80015ce <StartDefaultTask+0x546>
  RCCHECK(rcl_node_fini(&node));
 800155a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800155e:	4618      	mov	r0, r3
 8001560:	f007 f98c 	bl	800887c <rcl_node_fini>
 8001564:	f8c7 0334 	str.w	r0, [r7, #820]	; 0x334
 8001568:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800156c:	2b00      	cmp	r3, #0
 800156e:	d007      	beq.n	8001580 <StartDefaultTask+0x4f8>
 8001570:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8001574:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001578:	481c      	ldr	r0, [pc, #112]	; (80015ec <StartDefaultTask+0x564>)
 800157a:	f015 fef1 	bl	8017360 <iprintf>
 800157e:	e026      	b.n	80015ce <StartDefaultTask+0x546>
  //ADD-ON, Clean up
  RCCHECK(rcl_publisher_fini(&publisher_ak60, &node));
 8001580:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001584:	4619      	mov	r1, r3
 8001586:	481b      	ldr	r0, [pc, #108]	; (80015f4 <StartDefaultTask+0x56c>)
 8001588:	f007 fa9a 	bl	8008ac0 <rcl_publisher_fini>
 800158c:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
 8001590:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8001594:	2b00      	cmp	r3, #0
 8001596:	d007      	beq.n	80015a8 <StartDefaultTask+0x520>
 8001598:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 800159c:	f240 2122 	movw	r1, #546	; 0x222
 80015a0:	4812      	ldr	r0, [pc, #72]	; (80015ec <StartDefaultTask+0x564>)
 80015a2:	f015 fedd 	bl	8017360 <iprintf>
 80015a6:	e012      	b.n	80015ce <StartDefaultTask+0x546>
  RCCHECK(rcl_subscription_fini(&subscriber_ak60, &node));
 80015a8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80015ac:	4619      	mov	r1, r3
 80015ae:	4812      	ldr	r0, [pc, #72]	; (80015f8 <StartDefaultTask+0x570>)
 80015b0:	f007 fbd4 	bl	8008d5c <rcl_subscription_fini>
 80015b4:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
 80015b8:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d006      	beq.n	80015ce <StartDefaultTask+0x546>
 80015c0:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 80015c4:	f240 2123 	movw	r1, #547	; 0x223
 80015c8:	4808      	ldr	r0, [pc, #32]	; (80015ec <StartDefaultTask+0x564>)
 80015ca:	f015 fec9 	bl	8017360 <iprintf>
  /* USER CODE END 5 */
}
 80015ce:	f507 775e 	add.w	r7, r7, #888	; 0x378
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bdb0      	pop	{r4, r5, r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20004cfc 	.word	0x20004cfc
 80015dc:	20004d08 	.word	0x20004d08
 80015e0:	20004e4c 	.word	0x20004e4c
 80015e4:	20004e6c 	.word	0x20004e6c
 80015e8:	20004cf4 	.word	0x20004cf4
 80015ec:	080185d8 	.word	0x080185d8
 80015f0:	20004cf8 	.word	0x20004cf8
 80015f4:	20004e68 	.word	0x20004e68
 80015f8:	20004e48 	.word	0x20004e48

080015fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a04      	ldr	r2, [pc, #16]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d101      	bne.n	8001612 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800160e:	f000 fc6b 	bl	8001ee8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40001000 	.word	0x40001000

08001620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001624:	b672      	cpsid	i
}
 8001626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001628:	e7fe      	b.n	8001628 <Error_Handler+0x8>
	...

0800162c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <microros_allocate+0x3c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4413      	add	r3, r2
 8001640:	461a      	mov	r2, r3
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <microros_allocate+0x3c>)
 8001644:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <microros_allocate+0x40>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4413      	add	r3, r2
 8001650:	461a      	mov	r2, r3
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <microros_allocate+0x40>)
 8001654:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff f810 	bl	800067c <pvPortMallocMicroROS>
 800165c:	4603      	mov	r3, r0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20004fb8 	.word	0x20004fb8
 800166c:	20004fbc 	.word	0x20004fbc

08001670 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00c      	beq.n	800169a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff f919 	bl	80008b8 <getBlockSize>
 8001686:	4603      	mov	r3, r0
 8001688:	4a06      	ldr	r2, [pc, #24]	; (80016a4 <microros_deallocate+0x34>)
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	461a      	mov	r2, r3
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <microros_deallocate+0x34>)
 8001692:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff f8b5 	bl	8000804 <vPortFreeMicroROS>
  }
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20004fbc 	.word	0x20004fbc

080016a8 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80016b4:	4b15      	ldr	r3, [pc, #84]	; (800170c <microros_reallocate+0x64>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	4413      	add	r3, r2
 80016be:	461a      	mov	r2, r3
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <microros_reallocate+0x64>)
 80016c2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <microros_reallocate+0x68>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	4413      	add	r3, r2
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <microros_reallocate+0x68>)
 80016d2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d104      	bne.n	80016e4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80016da:	68b8      	ldr	r0, [r7, #8]
 80016dc:	f7fe ffce 	bl	800067c <pvPortMallocMicroROS>
 80016e0:	4603      	mov	r3, r0
 80016e2:	e00e      	b.n	8001702 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f7ff f8e7 	bl	80008b8 <getBlockSize>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4a08      	ldr	r2, [pc, #32]	; (8001710 <microros_reallocate+0x68>)
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <microros_reallocate+0x68>)
 80016f6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f7ff f8fa 	bl	80008f4 <pvPortReallocMicroROS>
 8001700:	4603      	mov	r3, r0
  }
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20004fb8 	.word	0x20004fb8
 8001710:	20004fbc 	.word	0x20004fbc

08001714 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	fb02 f303 	mul.w	r3, r2, r3
 8001728:	4a0c      	ldr	r2, [pc, #48]	; (800175c <microros_zero_allocate+0x48>)
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	4413      	add	r3, r2
 800172e:	461a      	mov	r2, r3
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <microros_zero_allocate+0x48>)
 8001732:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	fb02 f303 	mul.w	r3, r2, r3
 800173c:	4a08      	ldr	r2, [pc, #32]	; (8001760 <microros_zero_allocate+0x4c>)
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	4413      	add	r3, r2
 8001742:	461a      	mov	r2, r3
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <microros_zero_allocate+0x4c>)
 8001746:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001748:	68b9      	ldr	r1, [r7, #8]
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f7ff f8ff 	bl	800094e <pvPortCallocMicroROS>
 8001750:	4603      	mov	r3, r0
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20004fb8 	.word	0x20004fb8
 8001760:	20004fbc 	.word	0x20004fbc
 8001764:	00000000 	.word	0x00000000

08001768 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001768:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800177a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800177e:	a320      	add	r3, pc, #128	; (adr r3, 8001800 <UTILS_NanosecondsToTimespec+0x98>)
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	f7fe fdac 	bl	80002e0 <__aeabi_ldivmod>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001792:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001796:	a31a      	add	r3, pc, #104	; (adr r3, 8001800 <UTILS_NanosecondsToTimespec+0x98>)
 8001798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179c:	f7fe fda0 	bl	80002e0 <__aeabi_ldivmod>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	da20      	bge.n	80017ee <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	4a11      	ldr	r2, [pc, #68]	; (80017f8 <UTILS_NanosecondsToTimespec+0x90>)
 80017b2:	fb82 1203 	smull	r1, r2, r2, r3
 80017b6:	1712      	asrs	r2, r2, #28
 80017b8:	17db      	asrs	r3, r3, #31
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	3301      	adds	r3, #1
 80017be:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c6:	6979      	ldr	r1, [r7, #20]
 80017c8:	17c8      	asrs	r0, r1, #31
 80017ca:	460c      	mov	r4, r1
 80017cc:	4605      	mov	r5, r0
 80017ce:	ebb2 0804 	subs.w	r8, r2, r4
 80017d2:	eb63 0905 	sbc.w	r9, r3, r5
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	4906      	ldr	r1, [pc, #24]	; (80017fc <UTILS_NanosecondsToTimespec+0x94>)
 80017e4:	fb01 f303 	mul.w	r3, r1, r3
 80017e8:	441a      	add	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	609a      	str	r2, [r3, #8]
    }
}
 80017ee:	bf00      	nop
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017f8:	44b82fa1 	.word	0x44b82fa1
 80017fc:	3b9aca00 	.word	0x3b9aca00
 8001800:	3b9aca00 	.word	0x3b9aca00
 8001804:	00000000 	.word	0x00000000

08001808 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800180c:	b08e      	sub	sp, #56	; 0x38
 800180e:	af00      	add	r7, sp, #0
 8001810:	6278      	str	r0, [r7, #36]	; 0x24
 8001812:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001814:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001818:	2300      	movs	r3, #0
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800182a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800182e:	4618      	mov	r0, r3
 8001830:	f005 fce6 	bl	8007200 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001836:	17da      	asrs	r2, r3, #31
 8001838:	61bb      	str	r3, [r7, #24]
 800183a:	61fa      	str	r2, [r7, #28]
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	69b9      	ldr	r1, [r7, #24]
 8001846:	000b      	movs	r3, r1
 8001848:	2200      	movs	r2, #0
 800184a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800184e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001850:	2200      	movs	r2, #0
 8001852:	461c      	mov	r4, r3
 8001854:	4615      	mov	r5, r2
 8001856:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800185a:	1911      	adds	r1, r2, r4
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	416b      	adcs	r3, r5
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001866:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800186a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	f04f 0400 	mov.w	r4, #0
 8001876:	f04f 0500 	mov.w	r5, #0
 800187a:	015d      	lsls	r5, r3, #5
 800187c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001880:	0154      	lsls	r4, r2, #5
 8001882:	4622      	mov	r2, r4
 8001884:	462b      	mov	r3, r5
 8001886:	ebb2 0800 	subs.w	r8, r2, r0
 800188a:	eb63 0901 	sbc.w	r9, r3, r1
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800189a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800189e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80018a2:	4690      	mov	r8, r2
 80018a4:	4699      	mov	r9, r3
 80018a6:	eb18 0a00 	adds.w	sl, r8, r0
 80018aa:	eb49 0b01 	adc.w	fp, r9, r1
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018ba:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018be:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018c2:	ebb2 040a 	subs.w	r4, r2, sl
 80018c6:	603c      	str	r4, [r7, #0]
 80018c8:	eb63 030b 	sbc.w	r3, r3, fp
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018d2:	4623      	mov	r3, r4
 80018d4:	181b      	adds	r3, r3, r0
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	462b      	mov	r3, r5
 80018da:	eb41 0303 	adc.w	r3, r1, r3
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	6a3a      	ldr	r2, [r7, #32]
 80018e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018e6:	f7ff ff3f 	bl	8001768 <UTILS_NanosecondsToTimespec>

    return 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	4618      	mov	r0, r3
 80018ee:	3738      	adds	r7, #56	; 0x38
 80018f0:	46bd      	mov	sp, r7
 80018f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080018f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_MspInit+0x54>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	4a11      	ldr	r2, [pc, #68]	; (800194c <HAL_MspInit+0x54>)
 8001908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800190c:	6453      	str	r3, [r2, #68]	; 0x44
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <HAL_MspInit+0x54>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	603b      	str	r3, [r7, #0]
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_MspInit+0x54>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	4a0a      	ldr	r2, [pc, #40]	; (800194c <HAL_MspInit+0x54>)
 8001924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001928:	6413      	str	r3, [r2, #64]	; 0x40
 800192a:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_MspInit+0x54>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	210f      	movs	r1, #15
 800193a:	f06f 0001 	mvn.w	r0, #1
 800193e:	f000 ff03 	bl	8002748 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800

08001950 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	; 0x28
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a1d      	ldr	r2, [pc, #116]	; (80019e4 <HAL_CAN_MspInit+0x94>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d134      	bne.n	80019dc <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <HAL_CAN_MspInit+0x98>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	4a1b      	ldr	r2, [pc, #108]	; (80019e8 <HAL_CAN_MspInit+0x98>)
 800197c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001980:	6413      	str	r3, [r2, #64]	; 0x40
 8001982:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <HAL_CAN_MspInit+0x98>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <HAL_CAN_MspInit+0x98>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <HAL_CAN_MspInit+0x98>)
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_CAN_MspInit+0x98>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80019bc:	2309      	movs	r3, #9
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	4619      	mov	r1, r3
 80019c6:	4809      	ldr	r0, [pc, #36]	; (80019ec <HAL_CAN_MspInit+0x9c>)
 80019c8:	f001 faea 	bl	8002fa0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2105      	movs	r1, #5
 80019d0:	2014      	movs	r0, #20
 80019d2:	f000 feb9 	bl	8002748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80019d6:	2014      	movs	r0, #20
 80019d8:	f000 fed2 	bl	8002780 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80019dc:	bf00      	nop
 80019de:	3728      	adds	r7, #40	; 0x28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40006400 	.word	0x40006400
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020400 	.word	0x40020400

080019f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a4c      	ldr	r2, [pc, #304]	; (8001b40 <HAL_UART_MspInit+0x150>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	f040 8092 	bne.w	8001b38 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a14:	2300      	movs	r3, #0
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	4b4a      	ldr	r3, [pc, #296]	; (8001b44 <HAL_UART_MspInit+0x154>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	4a49      	ldr	r2, [pc, #292]	; (8001b44 <HAL_UART_MspInit+0x154>)
 8001a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a22:	6413      	str	r3, [r2, #64]	; 0x40
 8001a24:	4b47      	ldr	r3, [pc, #284]	; (8001b44 <HAL_UART_MspInit+0x154>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	4b43      	ldr	r3, [pc, #268]	; (8001b44 <HAL_UART_MspInit+0x154>)
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	4a42      	ldr	r2, [pc, #264]	; (8001b44 <HAL_UART_MspInit+0x154>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a40:	4b40      	ldr	r3, [pc, #256]	; (8001b44 <HAL_UART_MspInit+0x154>)
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a4c:	230c      	movs	r3, #12
 8001a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a5c:	2307      	movs	r3, #7
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	4619      	mov	r1, r3
 8001a66:	4838      	ldr	r0, [pc, #224]	; (8001b48 <HAL_UART_MspInit+0x158>)
 8001a68:	f001 fa9a 	bl	8002fa0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001a6c:	4b37      	ldr	r3, [pc, #220]	; (8001b4c <HAL_UART_MspInit+0x15c>)
 8001a6e:	4a38      	ldr	r2, [pc, #224]	; (8001b50 <HAL_UART_MspInit+0x160>)
 8001a70:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001a72:	4b36      	ldr	r3, [pc, #216]	; (8001b4c <HAL_UART_MspInit+0x15c>)
 8001a74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a78:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a7a:	4b34      	ldr	r3, [pc, #208]	; (8001b4c <HAL_UART_MspInit+0x15c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a80:	4b32      	ldr	r3, [pc, #200]	; (8001b4c <HAL_UART_MspInit+0x15c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a86:	4b31      	ldr	r3, [pc, #196]	; (8001b4c <HAL_UART_MspInit+0x15c>)
 8001a88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a8c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a8e:	4b2f      	ldr	r3, [pc, #188]	; (8001b4c <HAL_UART_MspInit+0x15c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a94:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <HAL_UART_MspInit+0x15c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001a9a:	4b2c      	ldr	r3, [pc, #176]	; (8001b4c <HAL_UART_MspInit+0x15c>)
 8001a9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aa0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001aa2:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <HAL_UART_MspInit+0x15c>)
 8001aa4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001aa8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aaa:	4b28      	ldr	r3, [pc, #160]	; (8001b4c <HAL_UART_MspInit+0x15c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001ab0:	4826      	ldr	r0, [pc, #152]	; (8001b4c <HAL_UART_MspInit+0x15c>)
 8001ab2:	f000 fe73 	bl	800279c <HAL_DMA_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001abc:	f7ff fdb0 	bl	8001620 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a22      	ldr	r2, [pc, #136]	; (8001b4c <HAL_UART_MspInit+0x15c>)
 8001ac4:	639a      	str	r2, [r3, #56]	; 0x38
 8001ac6:	4a21      	ldr	r2, [pc, #132]	; (8001b4c <HAL_UART_MspInit+0x15c>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001acc:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <HAL_UART_MspInit+0x164>)
 8001ace:	4a22      	ldr	r2, [pc, #136]	; (8001b58 <HAL_UART_MspInit+0x168>)
 8001ad0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001ad2:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <HAL_UART_MspInit+0x164>)
 8001ad4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ad8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ada:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <HAL_UART_MspInit+0x164>)
 8001adc:	2240      	movs	r2, #64	; 0x40
 8001ade:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <HAL_UART_MspInit+0x164>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <HAL_UART_MspInit+0x164>)
 8001ae8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aec:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aee:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <HAL_UART_MspInit+0x164>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001af4:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <HAL_UART_MspInit+0x164>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001afa:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <HAL_UART_MspInit+0x164>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <HAL_UART_MspInit+0x164>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b06:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <HAL_UART_MspInit+0x164>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001b0c:	4811      	ldr	r0, [pc, #68]	; (8001b54 <HAL_UART_MspInit+0x164>)
 8001b0e:	f000 fe45 	bl	800279c <HAL_DMA_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001b18:	f7ff fd82 	bl	8001620 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <HAL_UART_MspInit+0x164>)
 8001b20:	635a      	str	r2, [r3, #52]	; 0x34
 8001b22:	4a0c      	ldr	r2, [pc, #48]	; (8001b54 <HAL_UART_MspInit+0x164>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2105      	movs	r1, #5
 8001b2c:	2026      	movs	r0, #38	; 0x26
 8001b2e:	f000 fe0b 	bl	8002748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b32:	2026      	movs	r0, #38	; 0x26
 8001b34:	f000 fe24 	bl	8002780 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b38:	bf00      	nop
 8001b3a:	3728      	adds	r7, #40	; 0x28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40004400 	.word	0x40004400
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40020000 	.word	0x40020000
 8001b4c:	20004ef4 	.word	0x20004ef4
 8001b50:	40026088 	.word	0x40026088
 8001b54:	20004f54 	.word	0x20004f54
 8001b58:	400260a0 	.word	0x400260a0

08001b5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08c      	sub	sp, #48	; 0x30
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	2036      	movs	r0, #54	; 0x36
 8001b72:	f000 fde9 	bl	8002748 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b76:	2036      	movs	r0, #54	; 0x36
 8001b78:	f000 fe02 	bl	8002780 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	4b1f      	ldr	r3, [pc, #124]	; (8001c00 <HAL_InitTick+0xa4>)
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	4a1e      	ldr	r2, [pc, #120]	; (8001c00 <HAL_InitTick+0xa4>)
 8001b86:	f043 0310 	orr.w	r3, r3, #16
 8001b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8c:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <HAL_InitTick+0xa4>)
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	f003 0310 	and.w	r3, r3, #16
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b98:	f107 0210 	add.w	r2, r7, #16
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	4611      	mov	r1, r2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f001 fd14 	bl	80035d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001ba8:	f001 fcea 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 8001bac:	4603      	mov	r3, r0
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb4:	4a13      	ldr	r2, [pc, #76]	; (8001c04 <HAL_InitTick+0xa8>)
 8001bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bba:	0c9b      	lsrs	r3, r3, #18
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <HAL_InitTick+0xac>)
 8001bc2:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <HAL_InitTick+0xb0>)
 8001bc4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <HAL_InitTick+0xac>)
 8001bc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bcc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001bce:	4a0e      	ldr	r2, [pc, #56]	; (8001c08 <HAL_InitTick+0xac>)
 8001bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <HAL_InitTick+0xac>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_InitTick+0xac>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001be0:	4809      	ldr	r0, [pc, #36]	; (8001c08 <HAL_InitTick+0xac>)
 8001be2:	f002 f9f5 	bl	8003fd0 <HAL_TIM_Base_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d104      	bne.n	8001bf6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001bec:	4806      	ldr	r0, [pc, #24]	; (8001c08 <HAL_InitTick+0xac>)
 8001bee:	f002 fa49 	bl	8004084 <HAL_TIM_Base_Start_IT>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	e000      	b.n	8001bf8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3730      	adds	r7, #48	; 0x30
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40023800 	.word	0x40023800
 8001c04:	431bde83 	.word	0x431bde83
 8001c08:	20004fc0 	.word	0x20004fc0
 8001c0c:	40001000 	.word	0x40001000

08001c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <NMI_Handler+0x4>

08001c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c1a:	e7fe      	b.n	8001c1a <HardFault_Handler+0x4>

08001c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <MemManage_Handler+0x4>

08001c22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c26:	e7fe      	b.n	8001c26 <BusFault_Handler+0x4>

08001c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c2c:	e7fe      	b.n	8001c2c <UsageFault_Handler+0x4>

08001c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <DMA1_Stream5_IRQHandler+0x10>)
 8001c42:	f000 ff43 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20004ef4 	.word	0x20004ef4

08001c50 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <DMA1_Stream6_IRQHandler+0x10>)
 8001c56:	f000 ff39 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20004f54 	.word	0x20004f54

08001c64 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c68:	4802      	ldr	r0, [pc, #8]	; (8001c74 <CAN1_RX0_IRQHandler+0x10>)
 8001c6a:	f000 fa7c 	bl	8002166 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20004e88 	.word	0x20004e88

08001c78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c7c:	4802      	ldr	r0, [pc, #8]	; (8001c88 <USART2_IRQHandler+0x10>)
 8001c7e:	f002 fdd1 	bl	8004824 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20004eb0 	.word	0x20004eb0

08001c8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c90:	4802      	ldr	r0, [pc, #8]	; (8001c9c <TIM6_DAC_IRQHandler+0x10>)
 8001c92:	f002 fa67 	bl	8004164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20004fc0 	.word	0x20004fc0

08001ca0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
	return 1;
 8001ca4:	2301      	movs	r3, #1
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <_kill>:

int _kill(int pid, int sig)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cba:	f015 fddd 	bl	8017878 <__errno>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2216      	movs	r2, #22
 8001cc2:	601a      	str	r2, [r3, #0]
	return -1;
 8001cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <_exit>:

void _exit (int status)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff ffe7 	bl	8001cb0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ce2:	e7fe      	b.n	8001ce2 <_exit+0x12>

08001ce4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	e00a      	b.n	8001d0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cf6:	f3af 8000 	nop.w
 8001cfa:	4601      	mov	r1, r0
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	60ba      	str	r2, [r7, #8]
 8001d02:	b2ca      	uxtb	r2, r1
 8001d04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	dbf0      	blt.n	8001cf6 <_read+0x12>
	}

return len;
 8001d14:	687b      	ldr	r3, [r7, #4]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b086      	sub	sp, #24
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	e009      	b.n	8001d44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	60ba      	str	r2, [r7, #8]
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	3301      	adds	r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	dbf1      	blt.n	8001d30 <_write+0x12>
	}
	return len;
 8001d4c:	687b      	ldr	r3, [r7, #4]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <_close>:

int _close(int file)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
	return -1;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d7e:	605a      	str	r2, [r3, #4]
	return 0;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <_isatty>:

int _isatty(int file)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
	return 1;
 8001d96:	2301      	movs	r3, #1
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
	return 0;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc8:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <_sbrk+0x5c>)
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <_sbrk+0x60>)
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd4:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <_sbrk+0x64>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <_sbrk+0x64>)
 8001dde:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <_sbrk+0x68>)
 8001de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <_sbrk+0x64>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d207      	bcs.n	8001e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df0:	f015 fd42 	bl	8017878 <__errno>
 8001df4:	4603      	mov	r3, r0
 8001df6:	220c      	movs	r2, #12
 8001df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dfe:	e009      	b.n	8001e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <_sbrk+0x64>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e06:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <_sbrk+0x64>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	4a05      	ldr	r2, [pc, #20]	; (8001e24 <_sbrk+0x64>)
 8001e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e12:	68fb      	ldr	r3, [r7, #12]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20020000 	.word	0x20020000
 8001e20:	00000400 	.word	0x00000400
 8001e24:	2000500c 	.word	0x2000500c
 8001e28:	2000e6c8 	.word	0x2000e6c8

08001e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <SystemInit+0x20>)
 8001e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e36:	4a05      	ldr	r2, [pc, #20]	; (8001e4c <SystemInit+0x20>)
 8001e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e54:	480d      	ldr	r0, [pc, #52]	; (8001e8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e56:	490e      	ldr	r1, [pc, #56]	; (8001e90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e58:	4a0e      	ldr	r2, [pc, #56]	; (8001e94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e5c:	e002      	b.n	8001e64 <LoopCopyDataInit>

08001e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e62:	3304      	adds	r3, #4

08001e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e68:	d3f9      	bcc.n	8001e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6a:	4a0b      	ldr	r2, [pc, #44]	; (8001e98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e6c:	4c0b      	ldr	r4, [pc, #44]	; (8001e9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e70:	e001      	b.n	8001e76 <LoopFillZerobss>

08001e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e74:	3204      	adds	r2, #4

08001e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e78:	d3fb      	bcc.n	8001e72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e7a:	f7ff ffd7 	bl	8001e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e7e:	f015 fd01 	bl	8017884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e82:	f7fe ff77 	bl	8000d74 <main>
  bx  lr    
 8001e86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e90:	200008b4 	.word	0x200008b4
  ldr r2, =_sidata
 8001e94:	08019a10 	.word	0x08019a10
  ldr r2, =_sbss
 8001e98:	200008b8 	.word	0x200008b8
  ldr r4, =_ebss
 8001e9c:	2000e6c8 	.word	0x2000e6c8

08001ea0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea0:	e7fe      	b.n	8001ea0 <ADC_IRQHandler>
	...

08001ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ea8:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <HAL_Init+0x40>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a0d      	ldr	r2, [pc, #52]	; (8001ee4 <HAL_Init+0x40>)
 8001eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_Init+0x40>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <HAL_Init+0x40>)
 8001eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ebe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <HAL_Init+0x40>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a07      	ldr	r2, [pc, #28]	; (8001ee4 <HAL_Init+0x40>)
 8001ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ecc:	2003      	movs	r0, #3
 8001ece:	f000 fc30 	bl	8002732 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ed2:	200f      	movs	r0, #15
 8001ed4:	f7ff fe42 	bl	8001b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed8:	f7ff fd0e 	bl	80018f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40023c00 	.word	0x40023c00

08001ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_IncTick+0x20>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_IncTick+0x24>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <HAL_IncTick+0x24>)
 8001efa:	6013      	str	r3, [r2, #0]
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	2000000c 	.word	0x2000000c
 8001f0c:	20005010 	.word	0x20005010

08001f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return uwTick;
 8001f14:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <HAL_GetTick+0x14>)
 8001f16:	681b      	ldr	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20005010 	.word	0x20005010

08001f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f30:	f7ff ffee 	bl	8001f10 <HAL_GetTick>
 8001f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f40:	d005      	beq.n	8001f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <HAL_Delay+0x44>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f4e:	bf00      	nop
 8001f50:	f7ff ffde 	bl	8001f10 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d8f7      	bhi.n	8001f50 <HAL_Delay+0x28>
  {
  }
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	2000000c 	.word	0x2000000c

08001f70 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e0ed      	b.n	800215e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d102      	bne.n	8001f94 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff fcde 	bl	8001950 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0201 	orr.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fa4:	f7ff ffb4 	bl	8001f10 <HAL_GetTick>
 8001fa8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001faa:	e012      	b.n	8001fd2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fac:	f7ff ffb0 	bl	8001f10 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b0a      	cmp	r3, #10
 8001fb8:	d90b      	bls.n	8001fd2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2205      	movs	r2, #5
 8001fca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e0c5      	b.n	800215e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0e5      	beq.n	8001fac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0202 	bic.w	r2, r2, #2
 8001fee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ff0:	f7ff ff8e 	bl	8001f10 <HAL_GetTick>
 8001ff4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ff6:	e012      	b.n	800201e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ff8:	f7ff ff8a 	bl	8001f10 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b0a      	cmp	r3, #10
 8002004:	d90b      	bls.n	800201e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2205      	movs	r2, #5
 8002016:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e09f      	b.n	800215e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1e5      	bne.n	8001ff8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	7e1b      	ldrb	r3, [r3, #24]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d108      	bne.n	8002046 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	e007      	b.n	8002056 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002054:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	7e5b      	ldrb	r3, [r3, #25]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d108      	bne.n	8002070 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	e007      	b.n	8002080 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800207e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	7e9b      	ldrb	r3, [r3, #26]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d108      	bne.n	800209a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0220 	orr.w	r2, r2, #32
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	e007      	b.n	80020aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0220 	bic.w	r2, r2, #32
 80020a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	7edb      	ldrb	r3, [r3, #27]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d108      	bne.n	80020c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0210 	bic.w	r2, r2, #16
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	e007      	b.n	80020d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0210 	orr.w	r2, r2, #16
 80020d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	7f1b      	ldrb	r3, [r3, #28]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d108      	bne.n	80020ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0208 	orr.w	r2, r2, #8
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	e007      	b.n	80020fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0208 	bic.w	r2, r2, #8
 80020fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	7f5b      	ldrb	r3, [r3, #29]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d108      	bne.n	8002118 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f042 0204 	orr.w	r2, r2, #4
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	e007      	b.n	8002128 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0204 	bic.w	r2, r2, #4
 8002126:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	ea42 0103 	orr.w	r1, r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	1e5a      	subs	r2, r3, #1
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b08a      	sub	sp, #40	; 0x28
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800216e:	2300      	movs	r3, #0
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d07c      	beq.n	80022a6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d023      	beq.n	80021fe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2201      	movs	r2, #1
 80021bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f983 	bl	80024d4 <HAL_CAN_TxMailbox0CompleteCallback>
 80021ce:	e016      	b.n	80021fe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d004      	beq.n	80021e4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
 80021e2:	e00c      	b.n	80021fe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d004      	beq.n	80021f8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
 80021f6:	e002      	b.n	80021fe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f989 	bl	8002510 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002204:	2b00      	cmp	r3, #0
 8002206:	d024      	beq.n	8002252 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002210:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f963 	bl	80024e8 <HAL_CAN_TxMailbox1CompleteCallback>
 8002222:	e016      	b.n	8002252 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222a:	2b00      	cmp	r3, #0
 800222c:	d004      	beq.n	8002238 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
 8002236:	e00c      	b.n	8002252 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800223e:	2b00      	cmp	r3, #0
 8002240:	d004      	beq.n	800224c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
 800224a:	e002      	b.n	8002252 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f969 	bl	8002524 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d024      	beq.n	80022a6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002264:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f943 	bl	80024fc <HAL_CAN_TxMailbox2CompleteCallback>
 8002276:	e016      	b.n	80022a6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d004      	beq.n	800228c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
 800228a:	e00c      	b.n	80022a6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d004      	beq.n	80022a0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
 800229e:	e002      	b.n	80022a6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f949 	bl	8002538 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00c      	beq.n	80022ca <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f003 0310 	and.w	r3, r3, #16
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d007      	beq.n	80022ca <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2210      	movs	r2, #16
 80022c8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00b      	beq.n	80022ec <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d006      	beq.n	80022ec <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2208      	movs	r2, #8
 80022e4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f93a 	bl	8002560 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d009      	beq.n	800230a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f921 	bl	800254c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00c      	beq.n	800232e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	2b00      	cmp	r3, #0
 800231c:	d007      	beq.n	800232e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002324:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2210      	movs	r2, #16
 800232c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	f003 0320 	and.w	r3, r3, #32
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00b      	beq.n	8002350 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d006      	beq.n	8002350 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2208      	movs	r2, #8
 8002348:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f91c 	bl	8002588 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	f003 0310 	and.w	r3, r3, #16
 8002356:	2b00      	cmp	r3, #0
 8002358:	d009      	beq.n	800236e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f903 	bl	8002574 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00b      	beq.n	8002390 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	2b00      	cmp	r3, #0
 8002380:	d006      	beq.n	8002390 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2210      	movs	r2, #16
 8002388:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f906 	bl	800259c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00b      	beq.n	80023b2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d006      	beq.n	80023b2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2208      	movs	r2, #8
 80023aa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f8ff 	bl	80025b0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d07b      	beq.n	80024b4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d072      	beq.n	80024ac <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	f043 0302 	orr.w	r3, r3, #2
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	f043 0304 	orr.w	r3, r3, #4
 8002418:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002420:	2b00      	cmp	r3, #0
 8002422:	d043      	beq.n	80024ac <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800242a:	2b00      	cmp	r3, #0
 800242c:	d03e      	beq.n	80024ac <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002434:	2b60      	cmp	r3, #96	; 0x60
 8002436:	d02b      	beq.n	8002490 <HAL_CAN_IRQHandler+0x32a>
 8002438:	2b60      	cmp	r3, #96	; 0x60
 800243a:	d82e      	bhi.n	800249a <HAL_CAN_IRQHandler+0x334>
 800243c:	2b50      	cmp	r3, #80	; 0x50
 800243e:	d022      	beq.n	8002486 <HAL_CAN_IRQHandler+0x320>
 8002440:	2b50      	cmp	r3, #80	; 0x50
 8002442:	d82a      	bhi.n	800249a <HAL_CAN_IRQHandler+0x334>
 8002444:	2b40      	cmp	r3, #64	; 0x40
 8002446:	d019      	beq.n	800247c <HAL_CAN_IRQHandler+0x316>
 8002448:	2b40      	cmp	r3, #64	; 0x40
 800244a:	d826      	bhi.n	800249a <HAL_CAN_IRQHandler+0x334>
 800244c:	2b30      	cmp	r3, #48	; 0x30
 800244e:	d010      	beq.n	8002472 <HAL_CAN_IRQHandler+0x30c>
 8002450:	2b30      	cmp	r3, #48	; 0x30
 8002452:	d822      	bhi.n	800249a <HAL_CAN_IRQHandler+0x334>
 8002454:	2b10      	cmp	r3, #16
 8002456:	d002      	beq.n	800245e <HAL_CAN_IRQHandler+0x2f8>
 8002458:	2b20      	cmp	r3, #32
 800245a:	d005      	beq.n	8002468 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800245c:	e01d      	b.n	800249a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	f043 0308 	orr.w	r3, r3, #8
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002466:	e019      	b.n	800249c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	f043 0310 	orr.w	r3, r3, #16
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002470:	e014      	b.n	800249c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	f043 0320 	orr.w	r3, r3, #32
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800247a:	e00f      	b.n	800249c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002484:	e00a      	b.n	800249c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800248e:	e005      	b.n	800249c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002498:	e000      	b.n	800249c <HAL_CAN_IRQHandler+0x336>
            break;
 800249a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699a      	ldr	r2, [r3, #24]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024aa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2204      	movs	r2, #4
 80024b2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	431a      	orrs	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f87c 	bl	80025c4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80024cc:	bf00      	nop
 80024ce:	3728      	adds	r7, #40	; 0x28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <__NVIC_SetPriorityGrouping+0x44>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f4:	4013      	ands	r3, r2
 80025f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800260a:	4a04      	ldr	r2, [pc, #16]	; (800261c <__NVIC_SetPriorityGrouping+0x44>)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	60d3      	str	r3, [r2, #12]
}
 8002610:	bf00      	nop
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002624:	4b04      	ldr	r3, [pc, #16]	; (8002638 <__NVIC_GetPriorityGrouping+0x18>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	0a1b      	lsrs	r3, r3, #8
 800262a:	f003 0307 	and.w	r3, r3, #7
}
 800262e:	4618      	mov	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	2b00      	cmp	r3, #0
 800264c:	db0b      	blt.n	8002666 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	f003 021f 	and.w	r2, r3, #31
 8002654:	4907      	ldr	r1, [pc, #28]	; (8002674 <__NVIC_EnableIRQ+0x38>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	2001      	movs	r0, #1
 800265e:	fa00 f202 	lsl.w	r2, r0, r2
 8002662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000e100 	.word	0xe000e100

08002678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	2b00      	cmp	r3, #0
 800268a:	db0a      	blt.n	80026a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	b2da      	uxtb	r2, r3
 8002690:	490c      	ldr	r1, [pc, #48]	; (80026c4 <__NVIC_SetPriority+0x4c>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	0112      	lsls	r2, r2, #4
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	440b      	add	r3, r1
 800269c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a0:	e00a      	b.n	80026b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4908      	ldr	r1, [pc, #32]	; (80026c8 <__NVIC_SetPriority+0x50>)
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3b04      	subs	r3, #4
 80026b0:	0112      	lsls	r2, r2, #4
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	440b      	add	r3, r1
 80026b6:	761a      	strb	r2, [r3, #24]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000e100 	.word	0xe000e100
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	; 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f1c3 0307 	rsb	r3, r3, #7
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	bf28      	it	cs
 80026ea:	2304      	movcs	r3, #4
 80026ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3304      	adds	r3, #4
 80026f2:	2b06      	cmp	r3, #6
 80026f4:	d902      	bls.n	80026fc <NVIC_EncodePriority+0x30>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3b03      	subs	r3, #3
 80026fa:	e000      	b.n	80026fe <NVIC_EncodePriority+0x32>
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	401a      	ands	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002714:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	43d9      	mvns	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	4313      	orrs	r3, r2
         );
}
 8002726:	4618      	mov	r0, r3
 8002728:	3724      	adds	r7, #36	; 0x24
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ff4c 	bl	80025d8 <__NVIC_SetPriorityGrouping>
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800275a:	f7ff ff61 	bl	8002620 <__NVIC_GetPriorityGrouping>
 800275e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	68b9      	ldr	r1, [r7, #8]
 8002764:	6978      	ldr	r0, [r7, #20]
 8002766:	f7ff ffb1 	bl	80026cc <NVIC_EncodePriority>
 800276a:	4602      	mov	r2, r0
 800276c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002770:	4611      	mov	r1, r2
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff ff80 	bl	8002678 <__NVIC_SetPriority>
}
 8002778:	bf00      	nop
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff ff54 	bl	800263c <__NVIC_EnableIRQ>
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027a8:	f7ff fbb2 	bl	8001f10 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e099      	b.n	80028ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2202      	movs	r2, #2
 80027bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0201 	bic.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d8:	e00f      	b.n	80027fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027da:	f7ff fb99 	bl	8001f10 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	d908      	bls.n	80027fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2220      	movs	r2, #32
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2203      	movs	r2, #3
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e078      	b.n	80028ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1e8      	bne.n	80027da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	4b38      	ldr	r3, [pc, #224]	; (80028f4 <HAL_DMA_Init+0x158>)
 8002814:	4013      	ands	r3, r2
 8002816:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002826:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002832:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800283e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	2b04      	cmp	r3, #4
 8002852:	d107      	bne.n	8002864 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	4313      	orrs	r3, r2
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4313      	orrs	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f023 0307 	bic.w	r3, r3, #7
 800287a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	4313      	orrs	r3, r2
 8002884:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	2b04      	cmp	r3, #4
 800288c:	d117      	bne.n	80028be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00e      	beq.n	80028be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 fb01 	bl	8002ea8 <DMA_CheckFifoParam>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2240      	movs	r2, #64	; 0x40
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028ba:	2301      	movs	r3, #1
 80028bc:	e016      	b.n	80028ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 fab8 	bl	8002e3c <DMA_CalcBaseAndBitshift>
 80028cc:	4603      	mov	r3, r0
 80028ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d4:	223f      	movs	r2, #63	; 0x3f
 80028d6:	409a      	lsls	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	f010803f 	.word	0xf010803f

080028f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_DMA_Start_IT+0x26>
 800291a:	2302      	movs	r3, #2
 800291c:	e040      	b.n	80029a0 <HAL_DMA_Start_IT+0xa8>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d12f      	bne.n	8002992 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2202      	movs	r2, #2
 8002936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 fa4a 	bl	8002de0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002950:	223f      	movs	r2, #63	; 0x3f
 8002952:	409a      	lsls	r2, r3
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0216 	orr.w	r2, r2, #22
 8002966:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	d007      	beq.n	8002980 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0208 	orr.w	r2, r2, #8
 800297e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	e005      	b.n	800299e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800299a:	2302      	movs	r3, #2
 800299c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800299e:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029b6:	f7ff faab 	bl	8001f10 <HAL_GetTick>
 80029ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d008      	beq.n	80029da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2280      	movs	r2, #128	; 0x80
 80029cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e052      	b.n	8002a80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0216 	bic.w	r2, r2, #22
 80029e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d103      	bne.n	8002a0a <HAL_DMA_Abort+0x62>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d007      	beq.n	8002a1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0208 	bic.w	r2, r2, #8
 8002a18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0201 	bic.w	r2, r2, #1
 8002a28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a2a:	e013      	b.n	8002a54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a2c:	f7ff fa70 	bl	8001f10 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b05      	cmp	r3, #5
 8002a38:	d90c      	bls.n	8002a54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2203      	movs	r2, #3
 8002a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e015      	b.n	8002a80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1e4      	bne.n	8002a2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a66:	223f      	movs	r2, #63	; 0x3f
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d004      	beq.n	8002aa6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2280      	movs	r2, #128	; 0x80
 8002aa0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e00c      	b.n	8002ac0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2205      	movs	r2, #5
 8002aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0201 	bic.w	r2, r2, #1
 8002abc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ad8:	4b8e      	ldr	r3, [pc, #568]	; (8002d14 <HAL_DMA_IRQHandler+0x248>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a8e      	ldr	r2, [pc, #568]	; (8002d18 <HAL_DMA_IRQHandler+0x24c>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	0a9b      	lsrs	r3, r3, #10
 8002ae4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af6:	2208      	movs	r2, #8
 8002af8:	409a      	lsls	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d01a      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d013      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0204 	bic.w	r2, r2, #4
 8002b1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b24:	2208      	movs	r2, #8
 8002b26:	409a      	lsls	r2, r3
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b30:	f043 0201 	orr.w	r2, r3, #1
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d012      	beq.n	8002b6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00b      	beq.n	8002b6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b66:	f043 0202 	orr.w	r2, r3, #2
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b72:	2204      	movs	r2, #4
 8002b74:	409a      	lsls	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d012      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00b      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b90:	2204      	movs	r2, #4
 8002b92:	409a      	lsls	r2, r3
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9c:	f043 0204 	orr.w	r2, r3, #4
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba8:	2210      	movs	r2, #16
 8002baa:	409a      	lsls	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d043      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d03c      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc6:	2210      	movs	r2, #16
 8002bc8:	409a      	lsls	r2, r3
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d018      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d108      	bne.n	8002bfc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d024      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	4798      	blx	r3
 8002bfa:	e01f      	b.n	8002c3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d01b      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	4798      	blx	r3
 8002c0c:	e016      	b.n	8002c3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d107      	bne.n	8002c2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0208 	bic.w	r2, r2, #8
 8002c2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c40:	2220      	movs	r2, #32
 8002c42:	409a      	lsls	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 808f 	beq.w	8002d6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 8087 	beq.w	8002d6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c62:	2220      	movs	r2, #32
 8002c64:	409a      	lsls	r2, r3
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	d136      	bne.n	8002ce4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0216 	bic.w	r2, r2, #22
 8002c84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695a      	ldr	r2, [r3, #20]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d103      	bne.n	8002ca6 <HAL_DMA_IRQHandler+0x1da>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d007      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0208 	bic.w	r2, r2, #8
 8002cb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cba:	223f      	movs	r2, #63	; 0x3f
 8002cbc:	409a      	lsls	r2, r3
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d07e      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	4798      	blx	r3
        }
        return;
 8002ce2:	e079      	b.n	8002dd8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d01d      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10d      	bne.n	8002d1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d031      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	4798      	blx	r3
 8002d10:	e02c      	b.n	8002d6c <HAL_DMA_IRQHandler+0x2a0>
 8002d12:	bf00      	nop
 8002d14:	20000004 	.word	0x20000004
 8002d18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d023      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	4798      	blx	r3
 8002d2c:	e01e      	b.n	8002d6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10f      	bne.n	8002d5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0210 	bic.w	r2, r2, #16
 8002d4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d032      	beq.n	8002dda <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d022      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2205      	movs	r2, #5
 8002d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0201 	bic.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d307      	bcc.n	8002db4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f2      	bne.n	8002d98 <HAL_DMA_IRQHandler+0x2cc>
 8002db2:	e000      	b.n	8002db6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002db4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d005      	beq.n	8002dda <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	4798      	blx	r3
 8002dd6:	e000      	b.n	8002dda <HAL_DMA_IRQHandler+0x30e>
        return;
 8002dd8:	bf00      	nop
    }
  }
}
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
 8002dec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dfc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2b40      	cmp	r3, #64	; 0x40
 8002e0c:	d108      	bne.n	8002e20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e1e:	e007      	b.n	8002e30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	60da      	str	r2, [r3, #12]
}
 8002e30:	bf00      	nop
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	3b10      	subs	r3, #16
 8002e4c:	4a14      	ldr	r2, [pc, #80]	; (8002ea0 <DMA_CalcBaseAndBitshift+0x64>)
 8002e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e52:	091b      	lsrs	r3, r3, #4
 8002e54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e56:	4a13      	ldr	r2, [pc, #76]	; (8002ea4 <DMA_CalcBaseAndBitshift+0x68>)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d909      	bls.n	8002e7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e72:	f023 0303 	bic.w	r3, r3, #3
 8002e76:	1d1a      	adds	r2, r3, #4
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	659a      	str	r2, [r3, #88]	; 0x58
 8002e7c:	e007      	b.n	8002e8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e86:	f023 0303 	bic.w	r3, r3, #3
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	aaaaaaab 	.word	0xaaaaaaab
 8002ea4:	0801870c 	.word	0x0801870c

08002ea8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d11f      	bne.n	8002f02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	d856      	bhi.n	8002f76 <DMA_CheckFifoParam+0xce>
 8002ec8:	a201      	add	r2, pc, #4	; (adr r2, 8002ed0 <DMA_CheckFifoParam+0x28>)
 8002eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ece:	bf00      	nop
 8002ed0:	08002ee1 	.word	0x08002ee1
 8002ed4:	08002ef3 	.word	0x08002ef3
 8002ed8:	08002ee1 	.word	0x08002ee1
 8002edc:	08002f77 	.word	0x08002f77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d046      	beq.n	8002f7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef0:	e043      	b.n	8002f7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002efa:	d140      	bne.n	8002f7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f00:	e03d      	b.n	8002f7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f0a:	d121      	bne.n	8002f50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	d837      	bhi.n	8002f82 <DMA_CheckFifoParam+0xda>
 8002f12:	a201      	add	r2, pc, #4	; (adr r2, 8002f18 <DMA_CheckFifoParam+0x70>)
 8002f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f18:	08002f29 	.word	0x08002f29
 8002f1c:	08002f2f 	.word	0x08002f2f
 8002f20:	08002f29 	.word	0x08002f29
 8002f24:	08002f41 	.word	0x08002f41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f2c:	e030      	b.n	8002f90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d025      	beq.n	8002f86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f3e:	e022      	b.n	8002f86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f48:	d11f      	bne.n	8002f8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f4e:	e01c      	b.n	8002f8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d903      	bls.n	8002f5e <DMA_CheckFifoParam+0xb6>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d003      	beq.n	8002f64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f5c:	e018      	b.n	8002f90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	73fb      	strb	r3, [r7, #15]
      break;
 8002f62:	e015      	b.n	8002f90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00e      	beq.n	8002f8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]
      break;
 8002f74:	e00b      	b.n	8002f8e <DMA_CheckFifoParam+0xe6>
      break;
 8002f76:	bf00      	nop
 8002f78:	e00a      	b.n	8002f90 <DMA_CheckFifoParam+0xe8>
      break;
 8002f7a:	bf00      	nop
 8002f7c:	e008      	b.n	8002f90 <DMA_CheckFifoParam+0xe8>
      break;
 8002f7e:	bf00      	nop
 8002f80:	e006      	b.n	8002f90 <DMA_CheckFifoParam+0xe8>
      break;
 8002f82:	bf00      	nop
 8002f84:	e004      	b.n	8002f90 <DMA_CheckFifoParam+0xe8>
      break;
 8002f86:	bf00      	nop
 8002f88:	e002      	b.n	8002f90 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f8a:	bf00      	nop
 8002f8c:	e000      	b.n	8002f90 <DMA_CheckFifoParam+0xe8>
      break;
 8002f8e:	bf00      	nop
    }
  } 
  
  return status; 
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop

08002fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b089      	sub	sp, #36	; 0x24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
 8002fba:	e165      	b.n	8003288 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	f040 8154 	bne.w	8003282 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d005      	beq.n	8002ff2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d130      	bne.n	8003054 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43db      	mvns	r3, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4013      	ands	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003028:	2201      	movs	r2, #1
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f003 0201 	and.w	r2, r3, #1
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	2b03      	cmp	r3, #3
 800305e:	d017      	beq.n	8003090 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	2203      	movs	r2, #3
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d123      	bne.n	80030e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	08da      	lsrs	r2, r3, #3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3208      	adds	r2, #8
 80030a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	220f      	movs	r2, #15
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	08da      	lsrs	r2, r3, #3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3208      	adds	r2, #8
 80030de:	69b9      	ldr	r1, [r7, #24]
 80030e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	2203      	movs	r2, #3
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4013      	ands	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 0203 	and.w	r2, r3, #3
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4313      	orrs	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80ae 	beq.w	8003282 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	4b5d      	ldr	r3, [pc, #372]	; (80032a0 <HAL_GPIO_Init+0x300>)
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	4a5c      	ldr	r2, [pc, #368]	; (80032a0 <HAL_GPIO_Init+0x300>)
 8003130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003134:	6453      	str	r3, [r2, #68]	; 0x44
 8003136:	4b5a      	ldr	r3, [pc, #360]	; (80032a0 <HAL_GPIO_Init+0x300>)
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003142:	4a58      	ldr	r2, [pc, #352]	; (80032a4 <HAL_GPIO_Init+0x304>)
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	089b      	lsrs	r3, r3, #2
 8003148:	3302      	adds	r3, #2
 800314a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	220f      	movs	r2, #15
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4013      	ands	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a4f      	ldr	r2, [pc, #316]	; (80032a8 <HAL_GPIO_Init+0x308>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d025      	beq.n	80031ba <HAL_GPIO_Init+0x21a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a4e      	ldr	r2, [pc, #312]	; (80032ac <HAL_GPIO_Init+0x30c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d01f      	beq.n	80031b6 <HAL_GPIO_Init+0x216>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a4d      	ldr	r2, [pc, #308]	; (80032b0 <HAL_GPIO_Init+0x310>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d019      	beq.n	80031b2 <HAL_GPIO_Init+0x212>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a4c      	ldr	r2, [pc, #304]	; (80032b4 <HAL_GPIO_Init+0x314>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d013      	beq.n	80031ae <HAL_GPIO_Init+0x20e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a4b      	ldr	r2, [pc, #300]	; (80032b8 <HAL_GPIO_Init+0x318>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00d      	beq.n	80031aa <HAL_GPIO_Init+0x20a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a4a      	ldr	r2, [pc, #296]	; (80032bc <HAL_GPIO_Init+0x31c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d007      	beq.n	80031a6 <HAL_GPIO_Init+0x206>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a49      	ldr	r2, [pc, #292]	; (80032c0 <HAL_GPIO_Init+0x320>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d101      	bne.n	80031a2 <HAL_GPIO_Init+0x202>
 800319e:	2306      	movs	r3, #6
 80031a0:	e00c      	b.n	80031bc <HAL_GPIO_Init+0x21c>
 80031a2:	2307      	movs	r3, #7
 80031a4:	e00a      	b.n	80031bc <HAL_GPIO_Init+0x21c>
 80031a6:	2305      	movs	r3, #5
 80031a8:	e008      	b.n	80031bc <HAL_GPIO_Init+0x21c>
 80031aa:	2304      	movs	r3, #4
 80031ac:	e006      	b.n	80031bc <HAL_GPIO_Init+0x21c>
 80031ae:	2303      	movs	r3, #3
 80031b0:	e004      	b.n	80031bc <HAL_GPIO_Init+0x21c>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e002      	b.n	80031bc <HAL_GPIO_Init+0x21c>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <HAL_GPIO_Init+0x21c>
 80031ba:	2300      	movs	r3, #0
 80031bc:	69fa      	ldr	r2, [r7, #28]
 80031be:	f002 0203 	and.w	r2, r2, #3
 80031c2:	0092      	lsls	r2, r2, #2
 80031c4:	4093      	lsls	r3, r2
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031cc:	4935      	ldr	r1, [pc, #212]	; (80032a4 <HAL_GPIO_Init+0x304>)
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	089b      	lsrs	r3, r3, #2
 80031d2:	3302      	adds	r3, #2
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031da:	4b3a      	ldr	r3, [pc, #232]	; (80032c4 <HAL_GPIO_Init+0x324>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031fe:	4a31      	ldr	r2, [pc, #196]	; (80032c4 <HAL_GPIO_Init+0x324>)
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003204:	4b2f      	ldr	r3, [pc, #188]	; (80032c4 <HAL_GPIO_Init+0x324>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003228:	4a26      	ldr	r2, [pc, #152]	; (80032c4 <HAL_GPIO_Init+0x324>)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800322e:	4b25      	ldr	r3, [pc, #148]	; (80032c4 <HAL_GPIO_Init+0x324>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	43db      	mvns	r3, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4013      	ands	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003252:	4a1c      	ldr	r2, [pc, #112]	; (80032c4 <HAL_GPIO_Init+0x324>)
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003258:	4b1a      	ldr	r3, [pc, #104]	; (80032c4 <HAL_GPIO_Init+0x324>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	43db      	mvns	r3, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4013      	ands	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800327c:	4a11      	ldr	r2, [pc, #68]	; (80032c4 <HAL_GPIO_Init+0x324>)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	3301      	adds	r3, #1
 8003286:	61fb      	str	r3, [r7, #28]
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	2b0f      	cmp	r3, #15
 800328c:	f67f ae96 	bls.w	8002fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003290:	bf00      	nop
 8003292:	bf00      	nop
 8003294:	3724      	adds	r7, #36	; 0x24
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800
 80032a4:	40013800 	.word	0x40013800
 80032a8:	40020000 	.word	0x40020000
 80032ac:	40020400 	.word	0x40020400
 80032b0:	40020800 	.word	0x40020800
 80032b4:	40020c00 	.word	0x40020c00
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40021400 	.word	0x40021400
 80032c0:	40021800 	.word	0x40021800
 80032c4:	40013c00 	.word	0x40013c00

080032c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	807b      	strh	r3, [r7, #2]
 80032d4:	4613      	mov	r3, r2
 80032d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032d8:	787b      	ldrb	r3, [r7, #1]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032de:	887a      	ldrh	r2, [r7, #2]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032e4:	e003      	b.n	80032ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032e6:	887b      	ldrh	r3, [r7, #2]
 80032e8:	041a      	lsls	r2, r3, #16
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	619a      	str	r2, [r3, #24]
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
	...

080032fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003302:	2300      	movs	r3, #0
 8003304:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	603b      	str	r3, [r7, #0]
 800330a:	4b20      	ldr	r3, [pc, #128]	; (800338c <HAL_PWREx_EnableOverDrive+0x90>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	4a1f      	ldr	r2, [pc, #124]	; (800338c <HAL_PWREx_EnableOverDrive+0x90>)
 8003310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003314:	6413      	str	r3, [r2, #64]	; 0x40
 8003316:	4b1d      	ldr	r3, [pc, #116]	; (800338c <HAL_PWREx_EnableOverDrive+0x90>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003322:	4b1b      	ldr	r3, [pc, #108]	; (8003390 <HAL_PWREx_EnableOverDrive+0x94>)
 8003324:	2201      	movs	r2, #1
 8003326:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003328:	f7fe fdf2 	bl	8001f10 <HAL_GetTick>
 800332c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800332e:	e009      	b.n	8003344 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003330:	f7fe fdee 	bl	8001f10 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800333e:	d901      	bls.n	8003344 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e01f      	b.n	8003384 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003344:	4b13      	ldr	r3, [pc, #76]	; (8003394 <HAL_PWREx_EnableOverDrive+0x98>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800334c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003350:	d1ee      	bne.n	8003330 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003352:	4b11      	ldr	r3, [pc, #68]	; (8003398 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003354:	2201      	movs	r2, #1
 8003356:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003358:	f7fe fdda 	bl	8001f10 <HAL_GetTick>
 800335c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800335e:	e009      	b.n	8003374 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003360:	f7fe fdd6 	bl	8001f10 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800336e:	d901      	bls.n	8003374 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e007      	b.n	8003384 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003374:	4b07      	ldr	r3, [pc, #28]	; (8003394 <HAL_PWREx_EnableOverDrive+0x98>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003380:	d1ee      	bne.n	8003360 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40023800 	.word	0x40023800
 8003390:	420e0040 	.word	0x420e0040
 8003394:	40007000 	.word	0x40007000
 8003398:	420e0044 	.word	0x420e0044

0800339c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0cc      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033b0:	4b68      	ldr	r3, [pc, #416]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d90c      	bls.n	80033d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033be:	4b65      	ldr	r3, [pc, #404]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c6:	4b63      	ldr	r3, [pc, #396]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0b8      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d020      	beq.n	8003426 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033f0:	4b59      	ldr	r3, [pc, #356]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	4a58      	ldr	r2, [pc, #352]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003408:	4b53      	ldr	r3, [pc, #332]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	4a52      	ldr	r2, [pc, #328]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003412:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003414:	4b50      	ldr	r3, [pc, #320]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	494d      	ldr	r1, [pc, #308]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	4313      	orrs	r3, r2
 8003424:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d044      	beq.n	80034bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d107      	bne.n	800344a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343a:	4b47      	ldr	r3, [pc, #284]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d119      	bne.n	800347a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e07f      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d003      	beq.n	800345a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003456:	2b03      	cmp	r3, #3
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345a:	4b3f      	ldr	r3, [pc, #252]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e06f      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346a:	4b3b      	ldr	r3, [pc, #236]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e067      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800347a:	4b37      	ldr	r3, [pc, #220]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f023 0203 	bic.w	r2, r3, #3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	4934      	ldr	r1, [pc, #208]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	4313      	orrs	r3, r2
 800348a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800348c:	f7fe fd40 	bl	8001f10 <HAL_GetTick>
 8003490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003492:	e00a      	b.n	80034aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003494:	f7fe fd3c 	bl	8001f10 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e04f      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034aa:	4b2b      	ldr	r3, [pc, #172]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 020c 	and.w	r2, r3, #12
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d1eb      	bne.n	8003494 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034bc:	4b25      	ldr	r3, [pc, #148]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d20c      	bcs.n	80034e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ca:	4b22      	ldr	r3, [pc, #136]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d2:	4b20      	ldr	r3, [pc, #128]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e032      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f0:	4b19      	ldr	r3, [pc, #100]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	4916      	ldr	r1, [pc, #88]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d009      	beq.n	8003522 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800350e:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	490e      	ldr	r1, [pc, #56]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	4313      	orrs	r3, r2
 8003520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003522:	f000 f887 	bl	8003634 <HAL_RCC_GetSysClockFreq>
 8003526:	4602      	mov	r2, r0
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	091b      	lsrs	r3, r3, #4
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	490a      	ldr	r1, [pc, #40]	; (800355c <HAL_RCC_ClockConfig+0x1c0>)
 8003534:	5ccb      	ldrb	r3, [r1, r3]
 8003536:	fa22 f303 	lsr.w	r3, r2, r3
 800353a:	4a09      	ldr	r2, [pc, #36]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 800353c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800353e:	4b09      	ldr	r3, [pc, #36]	; (8003564 <HAL_RCC_ClockConfig+0x1c8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7fe fb0a 	bl	8001b5c <HAL_InitTick>

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40023c00 	.word	0x40023c00
 8003558:	40023800 	.word	0x40023800
 800355c:	080186f4 	.word	0x080186f4
 8003560:	20000004 	.word	0x20000004
 8003564:	20000008 	.word	0x20000008

08003568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800356c:	4b03      	ldr	r3, [pc, #12]	; (800357c <HAL_RCC_GetHCLKFreq+0x14>)
 800356e:	681b      	ldr	r3, [r3, #0]
}
 8003570:	4618      	mov	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	20000004 	.word	0x20000004

08003580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003584:	f7ff fff0 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 8003588:	4602      	mov	r2, r0
 800358a:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	0a9b      	lsrs	r3, r3, #10
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	4903      	ldr	r1, [pc, #12]	; (80035a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003596:	5ccb      	ldrb	r3, [r1, r3]
 8003598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800359c:	4618      	mov	r0, r3
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40023800 	.word	0x40023800
 80035a4:	08018704 	.word	0x08018704

080035a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035ac:	f7ff ffdc 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 80035b0:	4602      	mov	r2, r0
 80035b2:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	0b5b      	lsrs	r3, r3, #13
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	4903      	ldr	r1, [pc, #12]	; (80035cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80035be:	5ccb      	ldrb	r3, [r1, r3]
 80035c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40023800 	.word	0x40023800
 80035cc:	08018704 	.word	0x08018704

080035d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	220f      	movs	r2, #15
 80035de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035e0:	4b12      	ldr	r3, [pc, #72]	; (800362c <HAL_RCC_GetClockConfig+0x5c>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 0203 	and.w	r2, r3, #3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80035ec:	4b0f      	ldr	r3, [pc, #60]	; (800362c <HAL_RCC_GetClockConfig+0x5c>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80035f8:	4b0c      	ldr	r3, [pc, #48]	; (800362c <HAL_RCC_GetClockConfig+0x5c>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003604:	4b09      	ldr	r3, [pc, #36]	; (800362c <HAL_RCC_GetClockConfig+0x5c>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	08db      	lsrs	r3, r3, #3
 800360a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003612:	4b07      	ldr	r3, [pc, #28]	; (8003630 <HAL_RCC_GetClockConfig+0x60>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 020f 	and.w	r2, r3, #15
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	601a      	str	r2, [r3, #0]
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800
 8003630:	40023c00 	.word	0x40023c00

08003634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003638:	b0ae      	sub	sp, #184	; 0xb8
 800363a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800365a:	4bcb      	ldr	r3, [pc, #812]	; (8003988 <HAL_RCC_GetSysClockFreq+0x354>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b0c      	cmp	r3, #12
 8003664:	f200 8206 	bhi.w	8003a74 <HAL_RCC_GetSysClockFreq+0x440>
 8003668:	a201      	add	r2, pc, #4	; (adr r2, 8003670 <HAL_RCC_GetSysClockFreq+0x3c>)
 800366a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366e:	bf00      	nop
 8003670:	080036a5 	.word	0x080036a5
 8003674:	08003a75 	.word	0x08003a75
 8003678:	08003a75 	.word	0x08003a75
 800367c:	08003a75 	.word	0x08003a75
 8003680:	080036ad 	.word	0x080036ad
 8003684:	08003a75 	.word	0x08003a75
 8003688:	08003a75 	.word	0x08003a75
 800368c:	08003a75 	.word	0x08003a75
 8003690:	080036b5 	.word	0x080036b5
 8003694:	08003a75 	.word	0x08003a75
 8003698:	08003a75 	.word	0x08003a75
 800369c:	08003a75 	.word	0x08003a75
 80036a0:	080038a5 	.word	0x080038a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036a4:	4bb9      	ldr	r3, [pc, #740]	; (800398c <HAL_RCC_GetSysClockFreq+0x358>)
 80036a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80036aa:	e1e7      	b.n	8003a7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ac:	4bb8      	ldr	r3, [pc, #736]	; (8003990 <HAL_RCC_GetSysClockFreq+0x35c>)
 80036ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80036b2:	e1e3      	b.n	8003a7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036b4:	4bb4      	ldr	r3, [pc, #720]	; (8003988 <HAL_RCC_GetSysClockFreq+0x354>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036c0:	4bb1      	ldr	r3, [pc, #708]	; (8003988 <HAL_RCC_GetSysClockFreq+0x354>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d071      	beq.n	80037b0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036cc:	4bae      	ldr	r3, [pc, #696]	; (8003988 <HAL_RCC_GetSysClockFreq+0x354>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	099b      	lsrs	r3, r3, #6
 80036d2:	2200      	movs	r2, #0
 80036d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036d8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80036dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80036ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036f2:	4622      	mov	r2, r4
 80036f4:	462b      	mov	r3, r5
 80036f6:	f04f 0000 	mov.w	r0, #0
 80036fa:	f04f 0100 	mov.w	r1, #0
 80036fe:	0159      	lsls	r1, r3, #5
 8003700:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003704:	0150      	lsls	r0, r2, #5
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	4621      	mov	r1, r4
 800370c:	1a51      	subs	r1, r2, r1
 800370e:	6439      	str	r1, [r7, #64]	; 0x40
 8003710:	4629      	mov	r1, r5
 8003712:	eb63 0301 	sbc.w	r3, r3, r1
 8003716:	647b      	str	r3, [r7, #68]	; 0x44
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003724:	4649      	mov	r1, r9
 8003726:	018b      	lsls	r3, r1, #6
 8003728:	4641      	mov	r1, r8
 800372a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800372e:	4641      	mov	r1, r8
 8003730:	018a      	lsls	r2, r1, #6
 8003732:	4641      	mov	r1, r8
 8003734:	1a51      	subs	r1, r2, r1
 8003736:	63b9      	str	r1, [r7, #56]	; 0x38
 8003738:	4649      	mov	r1, r9
 800373a:	eb63 0301 	sbc.w	r3, r3, r1
 800373e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	f04f 0300 	mov.w	r3, #0
 8003748:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800374c:	4649      	mov	r1, r9
 800374e:	00cb      	lsls	r3, r1, #3
 8003750:	4641      	mov	r1, r8
 8003752:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003756:	4641      	mov	r1, r8
 8003758:	00ca      	lsls	r2, r1, #3
 800375a:	4610      	mov	r0, r2
 800375c:	4619      	mov	r1, r3
 800375e:	4603      	mov	r3, r0
 8003760:	4622      	mov	r2, r4
 8003762:	189b      	adds	r3, r3, r2
 8003764:	633b      	str	r3, [r7, #48]	; 0x30
 8003766:	462b      	mov	r3, r5
 8003768:	460a      	mov	r2, r1
 800376a:	eb42 0303 	adc.w	r3, r2, r3
 800376e:	637b      	str	r3, [r7, #52]	; 0x34
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800377c:	4629      	mov	r1, r5
 800377e:	024b      	lsls	r3, r1, #9
 8003780:	4621      	mov	r1, r4
 8003782:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003786:	4621      	mov	r1, r4
 8003788:	024a      	lsls	r2, r1, #9
 800378a:	4610      	mov	r0, r2
 800378c:	4619      	mov	r1, r3
 800378e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003792:	2200      	movs	r2, #0
 8003794:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003798:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800379c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80037a0:	f7fc fdee 	bl	8000380 <__aeabi_uldivmod>
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4613      	mov	r3, r2
 80037aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037ae:	e067      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037b0:	4b75      	ldr	r3, [pc, #468]	; (8003988 <HAL_RCC_GetSysClockFreq+0x354>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	099b      	lsrs	r3, r3, #6
 80037b6:	2200      	movs	r2, #0
 80037b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037bc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80037c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80037ca:	2300      	movs	r3, #0
 80037cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80037ce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80037d2:	4622      	mov	r2, r4
 80037d4:	462b      	mov	r3, r5
 80037d6:	f04f 0000 	mov.w	r0, #0
 80037da:	f04f 0100 	mov.w	r1, #0
 80037de:	0159      	lsls	r1, r3, #5
 80037e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037e4:	0150      	lsls	r0, r2, #5
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4621      	mov	r1, r4
 80037ec:	1a51      	subs	r1, r2, r1
 80037ee:	62b9      	str	r1, [r7, #40]	; 0x28
 80037f0:	4629      	mov	r1, r5
 80037f2:	eb63 0301 	sbc.w	r3, r3, r1
 80037f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003804:	4649      	mov	r1, r9
 8003806:	018b      	lsls	r3, r1, #6
 8003808:	4641      	mov	r1, r8
 800380a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800380e:	4641      	mov	r1, r8
 8003810:	018a      	lsls	r2, r1, #6
 8003812:	4641      	mov	r1, r8
 8003814:	ebb2 0a01 	subs.w	sl, r2, r1
 8003818:	4649      	mov	r1, r9
 800381a:	eb63 0b01 	sbc.w	fp, r3, r1
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800382a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800382e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003832:	4692      	mov	sl, r2
 8003834:	469b      	mov	fp, r3
 8003836:	4623      	mov	r3, r4
 8003838:	eb1a 0303 	adds.w	r3, sl, r3
 800383c:	623b      	str	r3, [r7, #32]
 800383e:	462b      	mov	r3, r5
 8003840:	eb4b 0303 	adc.w	r3, fp, r3
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003852:	4629      	mov	r1, r5
 8003854:	028b      	lsls	r3, r1, #10
 8003856:	4621      	mov	r1, r4
 8003858:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800385c:	4621      	mov	r1, r4
 800385e:	028a      	lsls	r2, r1, #10
 8003860:	4610      	mov	r0, r2
 8003862:	4619      	mov	r1, r3
 8003864:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003868:	2200      	movs	r2, #0
 800386a:	673b      	str	r3, [r7, #112]	; 0x70
 800386c:	677a      	str	r2, [r7, #116]	; 0x74
 800386e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003872:	f7fc fd85 	bl	8000380 <__aeabi_uldivmod>
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	4613      	mov	r3, r2
 800387c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003880:	4b41      	ldr	r3, [pc, #260]	; (8003988 <HAL_RCC_GetSysClockFreq+0x354>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	0c1b      	lsrs	r3, r3, #16
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	3301      	adds	r3, #1
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003892:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003896:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800389a:	fbb2 f3f3 	udiv	r3, r2, r3
 800389e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80038a2:	e0eb      	b.n	8003a7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038a4:	4b38      	ldr	r3, [pc, #224]	; (8003988 <HAL_RCC_GetSysClockFreq+0x354>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038b0:	4b35      	ldr	r3, [pc, #212]	; (8003988 <HAL_RCC_GetSysClockFreq+0x354>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d06b      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038bc:	4b32      	ldr	r3, [pc, #200]	; (8003988 <HAL_RCC_GetSysClockFreq+0x354>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	099b      	lsrs	r3, r3, #6
 80038c2:	2200      	movs	r2, #0
 80038c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80038c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ce:	663b      	str	r3, [r7, #96]	; 0x60
 80038d0:	2300      	movs	r3, #0
 80038d2:	667b      	str	r3, [r7, #100]	; 0x64
 80038d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80038d8:	4622      	mov	r2, r4
 80038da:	462b      	mov	r3, r5
 80038dc:	f04f 0000 	mov.w	r0, #0
 80038e0:	f04f 0100 	mov.w	r1, #0
 80038e4:	0159      	lsls	r1, r3, #5
 80038e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038ea:	0150      	lsls	r0, r2, #5
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4621      	mov	r1, r4
 80038f2:	1a51      	subs	r1, r2, r1
 80038f4:	61b9      	str	r1, [r7, #24]
 80038f6:	4629      	mov	r1, r5
 80038f8:	eb63 0301 	sbc.w	r3, r3, r1
 80038fc:	61fb      	str	r3, [r7, #28]
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800390a:	4659      	mov	r1, fp
 800390c:	018b      	lsls	r3, r1, #6
 800390e:	4651      	mov	r1, sl
 8003910:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003914:	4651      	mov	r1, sl
 8003916:	018a      	lsls	r2, r1, #6
 8003918:	4651      	mov	r1, sl
 800391a:	ebb2 0801 	subs.w	r8, r2, r1
 800391e:	4659      	mov	r1, fp
 8003920:	eb63 0901 	sbc.w	r9, r3, r1
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003930:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003934:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003938:	4690      	mov	r8, r2
 800393a:	4699      	mov	r9, r3
 800393c:	4623      	mov	r3, r4
 800393e:	eb18 0303 	adds.w	r3, r8, r3
 8003942:	613b      	str	r3, [r7, #16]
 8003944:	462b      	mov	r3, r5
 8003946:	eb49 0303 	adc.w	r3, r9, r3
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003958:	4629      	mov	r1, r5
 800395a:	024b      	lsls	r3, r1, #9
 800395c:	4621      	mov	r1, r4
 800395e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003962:	4621      	mov	r1, r4
 8003964:	024a      	lsls	r2, r1, #9
 8003966:	4610      	mov	r0, r2
 8003968:	4619      	mov	r1, r3
 800396a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800396e:	2200      	movs	r2, #0
 8003970:	65bb      	str	r3, [r7, #88]	; 0x58
 8003972:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003974:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003978:	f7fc fd02 	bl	8000380 <__aeabi_uldivmod>
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	4613      	mov	r3, r2
 8003982:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003986:	e065      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x420>
 8003988:	40023800 	.word	0x40023800
 800398c:	00f42400 	.word	0x00f42400
 8003990:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003994:	4b3d      	ldr	r3, [pc, #244]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x458>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	099b      	lsrs	r3, r3, #6
 800399a:	2200      	movs	r2, #0
 800399c:	4618      	mov	r0, r3
 800399e:	4611      	mov	r1, r2
 80039a0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039a4:	653b      	str	r3, [r7, #80]	; 0x50
 80039a6:	2300      	movs	r3, #0
 80039a8:	657b      	str	r3, [r7, #84]	; 0x54
 80039aa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80039ae:	4642      	mov	r2, r8
 80039b0:	464b      	mov	r3, r9
 80039b2:	f04f 0000 	mov.w	r0, #0
 80039b6:	f04f 0100 	mov.w	r1, #0
 80039ba:	0159      	lsls	r1, r3, #5
 80039bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039c0:	0150      	lsls	r0, r2, #5
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	4641      	mov	r1, r8
 80039c8:	1a51      	subs	r1, r2, r1
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	4649      	mov	r1, r9
 80039ce:	eb63 0301 	sbc.w	r3, r3, r1
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80039e0:	4659      	mov	r1, fp
 80039e2:	018b      	lsls	r3, r1, #6
 80039e4:	4651      	mov	r1, sl
 80039e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039ea:	4651      	mov	r1, sl
 80039ec:	018a      	lsls	r2, r1, #6
 80039ee:	4651      	mov	r1, sl
 80039f0:	1a54      	subs	r4, r2, r1
 80039f2:	4659      	mov	r1, fp
 80039f4:	eb63 0501 	sbc.w	r5, r3, r1
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	00eb      	lsls	r3, r5, #3
 8003a02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a06:	00e2      	lsls	r2, r4, #3
 8003a08:	4614      	mov	r4, r2
 8003a0a:	461d      	mov	r5, r3
 8003a0c:	4643      	mov	r3, r8
 8003a0e:	18e3      	adds	r3, r4, r3
 8003a10:	603b      	str	r3, [r7, #0]
 8003a12:	464b      	mov	r3, r9
 8003a14:	eb45 0303 	adc.w	r3, r5, r3
 8003a18:	607b      	str	r3, [r7, #4]
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a26:	4629      	mov	r1, r5
 8003a28:	028b      	lsls	r3, r1, #10
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a30:	4621      	mov	r1, r4
 8003a32:	028a      	lsls	r2, r1, #10
 8003a34:	4610      	mov	r0, r2
 8003a36:	4619      	mov	r1, r3
 8003a38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a40:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003a42:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a46:	f7fc fc9b 	bl	8000380 <__aeabi_uldivmod>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4613      	mov	r3, r2
 8003a50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003a54:	4b0d      	ldr	r3, [pc, #52]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x458>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	0f1b      	lsrs	r3, r3, #28
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003a62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a72:	e003      	b.n	8003a7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a74:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003a76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	37b8      	adds	r7, #184	; 0xb8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	00f42400 	.word	0x00f42400

08003a94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e28d      	b.n	8003fc2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 8083 	beq.w	8003bba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ab4:	4b94      	ldr	r3, [pc, #592]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 030c 	and.w	r3, r3, #12
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d019      	beq.n	8003af4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ac0:	4b91      	ldr	r3, [pc, #580]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d106      	bne.n	8003ada <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003acc:	4b8e      	ldr	r3, [pc, #568]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ad4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ad8:	d00c      	beq.n	8003af4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ada:	4b8b      	ldr	r3, [pc, #556]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ae2:	2b0c      	cmp	r3, #12
 8003ae4:	d112      	bne.n	8003b0c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ae6:	4b88      	ldr	r3, [pc, #544]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003af2:	d10b      	bne.n	8003b0c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af4:	4b84      	ldr	r3, [pc, #528]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d05b      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x124>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d157      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e25a      	b.n	8003fc2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b14:	d106      	bne.n	8003b24 <HAL_RCC_OscConfig+0x90>
 8003b16:	4b7c      	ldr	r3, [pc, #496]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a7b      	ldr	r2, [pc, #492]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	e01d      	b.n	8003b60 <HAL_RCC_OscConfig+0xcc>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b2c:	d10c      	bne.n	8003b48 <HAL_RCC_OscConfig+0xb4>
 8003b2e:	4b76      	ldr	r3, [pc, #472]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a75      	ldr	r2, [pc, #468]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	4b73      	ldr	r3, [pc, #460]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a72      	ldr	r2, [pc, #456]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	e00b      	b.n	8003b60 <HAL_RCC_OscConfig+0xcc>
 8003b48:	4b6f      	ldr	r3, [pc, #444]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a6e      	ldr	r2, [pc, #440]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	4b6c      	ldr	r3, [pc, #432]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a6b      	ldr	r2, [pc, #428]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d013      	beq.n	8003b90 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b68:	f7fe f9d2 	bl	8001f10 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b70:	f7fe f9ce 	bl	8001f10 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b64      	cmp	r3, #100	; 0x64
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e21f      	b.n	8003fc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b82:	4b61      	ldr	r3, [pc, #388]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0xdc>
 8003b8e:	e014      	b.n	8003bba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b90:	f7fe f9be 	bl	8001f10 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b98:	f7fe f9ba 	bl	8001f10 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	; 0x64
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e20b      	b.n	8003fc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003baa:	4b57      	ldr	r3, [pc, #348]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x104>
 8003bb6:	e000      	b.n	8003bba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d06f      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003bc6:	4b50      	ldr	r3, [pc, #320]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d017      	beq.n	8003c02 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003bd2:	4b4d      	ldr	r3, [pc, #308]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d105      	bne.n	8003bea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003bde:	4b4a      	ldr	r3, [pc, #296]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00b      	beq.n	8003c02 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bea:	4b47      	ldr	r3, [pc, #284]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003bf2:	2b0c      	cmp	r3, #12
 8003bf4:	d11c      	bne.n	8003c30 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bf6:	4b44      	ldr	r3, [pc, #272]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d116      	bne.n	8003c30 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c02:	4b41      	ldr	r3, [pc, #260]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <HAL_RCC_OscConfig+0x186>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d001      	beq.n	8003c1a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e1d3      	b.n	8003fc2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1a:	4b3b      	ldr	r3, [pc, #236]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4937      	ldr	r1, [pc, #220]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c2e:	e03a      	b.n	8003ca6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d020      	beq.n	8003c7a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c38:	4b34      	ldr	r3, [pc, #208]	; (8003d0c <HAL_RCC_OscConfig+0x278>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3e:	f7fe f967 	bl	8001f10 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c46:	f7fe f963 	bl	8001f10 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e1b4      	b.n	8003fc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c58:	4b2b      	ldr	r3, [pc, #172]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0f0      	beq.n	8003c46 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c64:	4b28      	ldr	r3, [pc, #160]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4925      	ldr	r1, [pc, #148]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	600b      	str	r3, [r1, #0]
 8003c78:	e015      	b.n	8003ca6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c7a:	4b24      	ldr	r3, [pc, #144]	; (8003d0c <HAL_RCC_OscConfig+0x278>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c80:	f7fe f946 	bl	8001f10 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c88:	f7fe f942 	bl	8001f10 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e193      	b.n	8003fc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c9a:	4b1b      	ldr	r3, [pc, #108]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d036      	beq.n	8003d20 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d016      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cba:	4b15      	ldr	r3, [pc, #84]	; (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc0:	f7fe f926 	bl	8001f10 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cc8:	f7fe f922 	bl	8001f10 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e173      	b.n	8003fc2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cda:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x234>
 8003ce6:	e01b      	b.n	8003d20 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce8:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cee:	f7fe f90f 	bl	8001f10 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf4:	e00e      	b.n	8003d14 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cf6:	f7fe f90b 	bl	8001f10 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d907      	bls.n	8003d14 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e15c      	b.n	8003fc2 <HAL_RCC_OscConfig+0x52e>
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	42470000 	.word	0x42470000
 8003d10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d14:	4b8a      	ldr	r3, [pc, #552]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1ea      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 8097 	beq.w	8003e5c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d32:	4b83      	ldr	r3, [pc, #524]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10f      	bne.n	8003d5e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	4b7f      	ldr	r3, [pc, #508]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	4a7e      	ldr	r2, [pc, #504]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d4e:	4b7c      	ldr	r3, [pc, #496]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d56:	60bb      	str	r3, [r7, #8]
 8003d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5e:	4b79      	ldr	r3, [pc, #484]	; (8003f44 <HAL_RCC_OscConfig+0x4b0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d118      	bne.n	8003d9c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d6a:	4b76      	ldr	r3, [pc, #472]	; (8003f44 <HAL_RCC_OscConfig+0x4b0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a75      	ldr	r2, [pc, #468]	; (8003f44 <HAL_RCC_OscConfig+0x4b0>)
 8003d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d76:	f7fe f8cb 	bl	8001f10 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7e:	f7fe f8c7 	bl	8001f10 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e118      	b.n	8003fc2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d90:	4b6c      	ldr	r3, [pc, #432]	; (8003f44 <HAL_RCC_OscConfig+0x4b0>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0f0      	beq.n	8003d7e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d106      	bne.n	8003db2 <HAL_RCC_OscConfig+0x31e>
 8003da4:	4b66      	ldr	r3, [pc, #408]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da8:	4a65      	ldr	r2, [pc, #404]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	6713      	str	r3, [r2, #112]	; 0x70
 8003db0:	e01c      	b.n	8003dec <HAL_RCC_OscConfig+0x358>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b05      	cmp	r3, #5
 8003db8:	d10c      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x340>
 8003dba:	4b61      	ldr	r3, [pc, #388]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbe:	4a60      	ldr	r2, [pc, #384]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003dc0:	f043 0304 	orr.w	r3, r3, #4
 8003dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc6:	4b5e      	ldr	r3, [pc, #376]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dca:	4a5d      	ldr	r2, [pc, #372]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd2:	e00b      	b.n	8003dec <HAL_RCC_OscConfig+0x358>
 8003dd4:	4b5a      	ldr	r3, [pc, #360]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd8:	4a59      	ldr	r2, [pc, #356]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003dda:	f023 0301 	bic.w	r3, r3, #1
 8003dde:	6713      	str	r3, [r2, #112]	; 0x70
 8003de0:	4b57      	ldr	r3, [pc, #348]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de4:	4a56      	ldr	r2, [pc, #344]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003de6:	f023 0304 	bic.w	r3, r3, #4
 8003dea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d015      	beq.n	8003e20 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df4:	f7fe f88c 	bl	8001f10 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfa:	e00a      	b.n	8003e12 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dfc:	f7fe f888 	bl	8001f10 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e0d7      	b.n	8003fc2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e12:	4b4b      	ldr	r3, [pc, #300]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0ee      	beq.n	8003dfc <HAL_RCC_OscConfig+0x368>
 8003e1e:	e014      	b.n	8003e4a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e20:	f7fe f876 	bl	8001f10 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e26:	e00a      	b.n	8003e3e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e28:	f7fe f872 	bl	8001f10 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e0c1      	b.n	8003fc2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e3e:	4b40      	ldr	r3, [pc, #256]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1ee      	bne.n	8003e28 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e4a:	7dfb      	ldrb	r3, [r7, #23]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d105      	bne.n	8003e5c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e50:	4b3b      	ldr	r3, [pc, #236]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	4a3a      	ldr	r2, [pc, #232]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 80ad 	beq.w	8003fc0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e66:	4b36      	ldr	r3, [pc, #216]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d060      	beq.n	8003f34 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d145      	bne.n	8003f06 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7a:	4b33      	ldr	r3, [pc, #204]	; (8003f48 <HAL_RCC_OscConfig+0x4b4>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7fe f846 	bl	8001f10 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e88:	f7fe f842 	bl	8001f10 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e093      	b.n	8003fc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9a:	4b29      	ldr	r3, [pc, #164]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69da      	ldr	r2, [r3, #28]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	019b      	lsls	r3, r3, #6
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebc:	085b      	lsrs	r3, r3, #1
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	041b      	lsls	r3, r3, #16
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec8:	061b      	lsls	r3, r3, #24
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed0:	071b      	lsls	r3, r3, #28
 8003ed2:	491b      	ldr	r1, [pc, #108]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ed8:	4b1b      	ldr	r3, [pc, #108]	; (8003f48 <HAL_RCC_OscConfig+0x4b4>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ede:	f7fe f817 	bl	8001f10 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee6:	f7fe f813 	bl	8001f10 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e064      	b.n	8003fc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef8:	4b11      	ldr	r3, [pc, #68]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x452>
 8003f04:	e05c      	b.n	8003fc0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f06:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <HAL_RCC_OscConfig+0x4b4>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7fe f800 	bl	8001f10 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f14:	f7fd fffc 	bl	8001f10 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e04d      	b.n	8003fc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f26:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x480>
 8003f32:	e045      	b.n	8003fc0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d107      	bne.n	8003f4c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e040      	b.n	8003fc2 <HAL_RCC_OscConfig+0x52e>
 8003f40:	40023800 	.word	0x40023800
 8003f44:	40007000 	.word	0x40007000
 8003f48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f4c:	4b1f      	ldr	r3, [pc, #124]	; (8003fcc <HAL_RCC_OscConfig+0x538>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d030      	beq.n	8003fbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d129      	bne.n	8003fbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d122      	bne.n	8003fbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d119      	bne.n	8003fbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	085b      	lsrs	r3, r3, #1
 8003f94:	3b01      	subs	r3, #1
 8003f96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d10f      	bne.n	8003fbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d107      	bne.n	8003fbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d001      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e000      	b.n	8003fc2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40023800 	.word	0x40023800

08003fd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e041      	b.n	8004066 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f839 	bl	800406e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3304      	adds	r3, #4
 800400c:	4619      	mov	r1, r3
 800400e:	4610      	mov	r0, r2
 8004010:	f000 f9d8 	bl	80043c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
	...

08004084 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b01      	cmp	r3, #1
 8004096:	d001      	beq.n	800409c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e04e      	b.n	800413a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0201 	orr.w	r2, r2, #1
 80040b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a23      	ldr	r2, [pc, #140]	; (8004148 <HAL_TIM_Base_Start_IT+0xc4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d022      	beq.n	8004104 <HAL_TIM_Base_Start_IT+0x80>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c6:	d01d      	beq.n	8004104 <HAL_TIM_Base_Start_IT+0x80>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a1f      	ldr	r2, [pc, #124]	; (800414c <HAL_TIM_Base_Start_IT+0xc8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d018      	beq.n	8004104 <HAL_TIM_Base_Start_IT+0x80>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a1e      	ldr	r2, [pc, #120]	; (8004150 <HAL_TIM_Base_Start_IT+0xcc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d013      	beq.n	8004104 <HAL_TIM_Base_Start_IT+0x80>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a1c      	ldr	r2, [pc, #112]	; (8004154 <HAL_TIM_Base_Start_IT+0xd0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d00e      	beq.n	8004104 <HAL_TIM_Base_Start_IT+0x80>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1b      	ldr	r2, [pc, #108]	; (8004158 <HAL_TIM_Base_Start_IT+0xd4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d009      	beq.n	8004104 <HAL_TIM_Base_Start_IT+0x80>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a19      	ldr	r2, [pc, #100]	; (800415c <HAL_TIM_Base_Start_IT+0xd8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d004      	beq.n	8004104 <HAL_TIM_Base_Start_IT+0x80>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a18      	ldr	r2, [pc, #96]	; (8004160 <HAL_TIM_Base_Start_IT+0xdc>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d111      	bne.n	8004128 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b06      	cmp	r3, #6
 8004114:	d010      	beq.n	8004138 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0201 	orr.w	r2, r2, #1
 8004124:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004126:	e007      	b.n	8004138 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0201 	orr.w	r2, r2, #1
 8004136:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40010000 	.word	0x40010000
 800414c:	40000400 	.word	0x40000400
 8004150:	40000800 	.word	0x40000800
 8004154:	40000c00 	.word	0x40000c00
 8004158:	40010400 	.word	0x40010400
 800415c:	40014000 	.word	0x40014000
 8004160:	40001800 	.word	0x40001800

08004164 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b02      	cmp	r3, #2
 8004178:	d122      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b02      	cmp	r3, #2
 8004186:	d11b      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0202 	mvn.w	r2, #2
 8004190:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f8ee 	bl	8004388 <HAL_TIM_IC_CaptureCallback>
 80041ac:	e005      	b.n	80041ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f8e0 	bl	8004374 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f8f1 	bl	800439c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d122      	bne.n	8004214 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b04      	cmp	r3, #4
 80041da:	d11b      	bne.n	8004214 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0204 	mvn.w	r2, #4
 80041e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2202      	movs	r2, #2
 80041ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f8c4 	bl	8004388 <HAL_TIM_IC_CaptureCallback>
 8004200:	e005      	b.n	800420e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f8b6 	bl	8004374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f8c7 	bl	800439c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b08      	cmp	r3, #8
 8004220:	d122      	bne.n	8004268 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b08      	cmp	r3, #8
 800422e:	d11b      	bne.n	8004268 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f06f 0208 	mvn.w	r2, #8
 8004238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2204      	movs	r2, #4
 800423e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f89a 	bl	8004388 <HAL_TIM_IC_CaptureCallback>
 8004254:	e005      	b.n	8004262 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f88c 	bl	8004374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f89d 	bl	800439c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b10      	cmp	r3, #16
 8004274:	d122      	bne.n	80042bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f003 0310 	and.w	r3, r3, #16
 8004280:	2b10      	cmp	r3, #16
 8004282:	d11b      	bne.n	80042bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0210 	mvn.w	r2, #16
 800428c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2208      	movs	r2, #8
 8004292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f870 	bl	8004388 <HAL_TIM_IC_CaptureCallback>
 80042a8:	e005      	b.n	80042b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f862 	bl	8004374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f873 	bl	800439c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d10e      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d107      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0201 	mvn.w	r2, #1
 80042e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7fd f98a 	bl	80015fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f2:	2b80      	cmp	r3, #128	; 0x80
 80042f4:	d10e      	bne.n	8004314 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004300:	2b80      	cmp	r3, #128	; 0x80
 8004302:	d107      	bne.n	8004314 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800430c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f902 	bl	8004518 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431e:	2b40      	cmp	r3, #64	; 0x40
 8004320:	d10e      	bne.n	8004340 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432c:	2b40      	cmp	r3, #64	; 0x40
 800432e:	d107      	bne.n	8004340 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f838 	bl	80043b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b20      	cmp	r3, #32
 800434c:	d10e      	bne.n	800436c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b20      	cmp	r3, #32
 800435a:	d107      	bne.n	800436c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0220 	mvn.w	r2, #32
 8004364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f8cc 	bl	8004504 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800436c:	bf00      	nop
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a40      	ldr	r2, [pc, #256]	; (80044d8 <TIM_Base_SetConfig+0x114>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d013      	beq.n	8004404 <TIM_Base_SetConfig+0x40>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e2:	d00f      	beq.n	8004404 <TIM_Base_SetConfig+0x40>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a3d      	ldr	r2, [pc, #244]	; (80044dc <TIM_Base_SetConfig+0x118>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d00b      	beq.n	8004404 <TIM_Base_SetConfig+0x40>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a3c      	ldr	r2, [pc, #240]	; (80044e0 <TIM_Base_SetConfig+0x11c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d007      	beq.n	8004404 <TIM_Base_SetConfig+0x40>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a3b      	ldr	r2, [pc, #236]	; (80044e4 <TIM_Base_SetConfig+0x120>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d003      	beq.n	8004404 <TIM_Base_SetConfig+0x40>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a3a      	ldr	r2, [pc, #232]	; (80044e8 <TIM_Base_SetConfig+0x124>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d108      	bne.n	8004416 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a2f      	ldr	r2, [pc, #188]	; (80044d8 <TIM_Base_SetConfig+0x114>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d02b      	beq.n	8004476 <TIM_Base_SetConfig+0xb2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004424:	d027      	beq.n	8004476 <TIM_Base_SetConfig+0xb2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a2c      	ldr	r2, [pc, #176]	; (80044dc <TIM_Base_SetConfig+0x118>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d023      	beq.n	8004476 <TIM_Base_SetConfig+0xb2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a2b      	ldr	r2, [pc, #172]	; (80044e0 <TIM_Base_SetConfig+0x11c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d01f      	beq.n	8004476 <TIM_Base_SetConfig+0xb2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a2a      	ldr	r2, [pc, #168]	; (80044e4 <TIM_Base_SetConfig+0x120>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d01b      	beq.n	8004476 <TIM_Base_SetConfig+0xb2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a29      	ldr	r2, [pc, #164]	; (80044e8 <TIM_Base_SetConfig+0x124>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d017      	beq.n	8004476 <TIM_Base_SetConfig+0xb2>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a28      	ldr	r2, [pc, #160]	; (80044ec <TIM_Base_SetConfig+0x128>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d013      	beq.n	8004476 <TIM_Base_SetConfig+0xb2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a27      	ldr	r2, [pc, #156]	; (80044f0 <TIM_Base_SetConfig+0x12c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00f      	beq.n	8004476 <TIM_Base_SetConfig+0xb2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a26      	ldr	r2, [pc, #152]	; (80044f4 <TIM_Base_SetConfig+0x130>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00b      	beq.n	8004476 <TIM_Base_SetConfig+0xb2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a25      	ldr	r2, [pc, #148]	; (80044f8 <TIM_Base_SetConfig+0x134>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d007      	beq.n	8004476 <TIM_Base_SetConfig+0xb2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a24      	ldr	r2, [pc, #144]	; (80044fc <TIM_Base_SetConfig+0x138>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d003      	beq.n	8004476 <TIM_Base_SetConfig+0xb2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a23      	ldr	r2, [pc, #140]	; (8004500 <TIM_Base_SetConfig+0x13c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d108      	bne.n	8004488 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800447c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4313      	orrs	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a0a      	ldr	r2, [pc, #40]	; (80044d8 <TIM_Base_SetConfig+0x114>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d003      	beq.n	80044bc <TIM_Base_SetConfig+0xf8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a0c      	ldr	r2, [pc, #48]	; (80044e8 <TIM_Base_SetConfig+0x124>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d103      	bne.n	80044c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	615a      	str	r2, [r3, #20]
}
 80044ca:	bf00      	nop
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	40010000 	.word	0x40010000
 80044dc:	40000400 	.word	0x40000400
 80044e0:	40000800 	.word	0x40000800
 80044e4:	40000c00 	.word	0x40000c00
 80044e8:	40010400 	.word	0x40010400
 80044ec:	40014000 	.word	0x40014000
 80044f0:	40014400 	.word	0x40014400
 80044f4:	40014800 	.word	0x40014800
 80044f8:	40001800 	.word	0x40001800
 80044fc:	40001c00 	.word	0x40001c00
 8004500:	40002000 	.word	0x40002000

08004504 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e03f      	b.n	80045be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7fd fa4c 	bl	80019f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2224      	movs	r2, #36	; 0x24
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800456e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 ffd7 	bl	8005524 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695a      	ldr	r2, [r3, #20]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004594:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08c      	sub	sp, #48	; 0x30
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	4613      	mov	r3, r2
 80045d4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b20      	cmp	r3, #32
 80045e0:	d165      	bne.n	80046ae <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <HAL_UART_Transmit_DMA+0x26>
 80045e8:	88fb      	ldrh	r3, [r7, #6]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e05e      	b.n	80046b0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_UART_Transmit_DMA+0x38>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e057      	b.n	80046b0 <HAL_UART_Transmit_DMA+0xe8>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	88fa      	ldrh	r2, [r7, #6]
 8004612:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	88fa      	ldrh	r2, [r7, #6]
 8004618:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2221      	movs	r2, #33	; 0x21
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462c:	4a22      	ldr	r2, [pc, #136]	; (80046b8 <HAL_UART_Transmit_DMA+0xf0>)
 800462e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004634:	4a21      	ldr	r2, [pc, #132]	; (80046bc <HAL_UART_Transmit_DMA+0xf4>)
 8004636:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463c:	4a20      	ldr	r2, [pc, #128]	; (80046c0 <HAL_UART_Transmit_DMA+0xf8>)
 800463e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004644:	2200      	movs	r2, #0
 8004646:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004648:	f107 0308 	add.w	r3, r7, #8
 800464c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004654:	6819      	ldr	r1, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3304      	adds	r3, #4
 800465c:	461a      	mov	r2, r3
 800465e:	88fb      	ldrh	r3, [r7, #6]
 8004660:	f7fe f94a 	bl	80028f8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800466c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3314      	adds	r3, #20
 800467c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	617b      	str	r3, [r7, #20]
   return(result);
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468c:	62bb      	str	r3, [r7, #40]	; 0x28
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3314      	adds	r3, #20
 8004694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004696:	627a      	str	r2, [r7, #36]	; 0x24
 8004698:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469a:	6a39      	ldr	r1, [r7, #32]
 800469c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800469e:	e841 2300 	strex	r3, r2, [r1]
 80046a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1e5      	bne.n	8004676 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	e000      	b.n	80046b0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80046ae:	2302      	movs	r3, #2
  }
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3730      	adds	r7, #48	; 0x30
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	08004dbd 	.word	0x08004dbd
 80046bc:	08004e57 	.word	0x08004e57
 80046c0:	08004fcf 	.word	0x08004fcf

080046c4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	4613      	mov	r3, r2
 80046d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b20      	cmp	r3, #32
 80046dc:	d11d      	bne.n	800471a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <HAL_UART_Receive_DMA+0x26>
 80046e4:	88fb      	ldrh	r3, [r7, #6]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e016      	b.n	800471c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <HAL_UART_Receive_DMA+0x38>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e00f      	b.n	800471c <HAL_UART_Receive_DMA+0x58>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800470a:	88fb      	ldrh	r3, [r7, #6]
 800470c:	461a      	mov	r2, r3
 800470e:	68b9      	ldr	r1, [r7, #8]
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 fca7 	bl	8005064 <UART_Start_Receive_DMA>
 8004716:	4603      	mov	r3, r0
 8004718:	e000      	b.n	800471c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800471a:	2302      	movs	r3, #2
  }
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b090      	sub	sp, #64	; 0x40
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800472c:	2300      	movs	r3, #0
 800472e:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473a:	2b80      	cmp	r3, #128	; 0x80
 800473c:	bf0c      	ite	eq
 800473e:	2301      	moveq	r3, #1
 8004740:	2300      	movne	r3, #0
 8004742:	b2db      	uxtb	r3, r3
 8004744:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b21      	cmp	r3, #33	; 0x21
 8004750:	d128      	bne.n	80047a4 <HAL_UART_DMAStop+0x80>
 8004752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004754:	2b00      	cmp	r3, #0
 8004756:	d025      	beq.n	80047a4 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3314      	adds	r3, #20
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	e853 3f00 	ldrex	r3, [r3]
 8004766:	623b      	str	r3, [r7, #32]
   return(result);
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800476e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3314      	adds	r3, #20
 8004776:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004778:	633a      	str	r2, [r7, #48]	; 0x30
 800477a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800477e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004780:	e841 2300 	strex	r3, r2, [r1]
 8004784:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1e5      	bne.n	8004758 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004790:	2b00      	cmp	r3, #0
 8004792:	d004      	beq.n	800479e <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004798:	4618      	mov	r0, r3
 800479a:	f7fe f905 	bl	80029a8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fcfe 	bl	80051a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ae:	2b40      	cmp	r3, #64	; 0x40
 80047b0:	bf0c      	ite	eq
 80047b2:	2301      	moveq	r3, #1
 80047b4:	2300      	movne	r3, #0
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b22      	cmp	r3, #34	; 0x22
 80047c4:	d128      	bne.n	8004818 <HAL_UART_DMAStop+0xf4>
 80047c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d025      	beq.n	8004818 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3314      	adds	r3, #20
 80047d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	e853 3f00 	ldrex	r3, [r3]
 80047da:	60fb      	str	r3, [r7, #12]
   return(result);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047e2:	637b      	str	r3, [r7, #52]	; 0x34
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3314      	adds	r3, #20
 80047ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047ec:	61fa      	str	r2, [r7, #28]
 80047ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f0:	69b9      	ldr	r1, [r7, #24]
 80047f2:	69fa      	ldr	r2, [r7, #28]
 80047f4:	e841 2300 	strex	r3, r2, [r1]
 80047f8:	617b      	str	r3, [r7, #20]
   return(result);
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1e5      	bne.n	80047cc <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004804:	2b00      	cmp	r3, #0
 8004806:	d004      	beq.n	8004812 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480c:	4618      	mov	r0, r3
 800480e:	f7fe f8cb 	bl	80029a8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fcec 	bl	80051f0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3740      	adds	r7, #64	; 0x40
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b0ba      	sub	sp, #232	; 0xe8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800484a:	2300      	movs	r3, #0
 800484c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004850:	2300      	movs	r3, #0
 8004852:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10f      	bne.n	800488a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800486a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b00      	cmp	r3, #0
 8004874:	d009      	beq.n	800488a <HAL_UART_IRQHandler+0x66>
 8004876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800487a:	f003 0320 	and.w	r3, r3, #32
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fd93 	bl	80053ae <UART_Receive_IT>
      return;
 8004888:	e256      	b.n	8004d38 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800488a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 80de 	beq.w	8004a50 <HAL_UART_IRQHandler+0x22c>
 8004894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d106      	bne.n	80048ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 80d1 	beq.w	8004a50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00b      	beq.n	80048d2 <HAL_UART_IRQHandler+0xae>
 80048ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f043 0201 	orr.w	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00b      	beq.n	80048f6 <HAL_UART_IRQHandler+0xd2>
 80048de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d005      	beq.n	80048f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f043 0202 	orr.w	r2, r3, #2
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00b      	beq.n	800491a <HAL_UART_IRQHandler+0xf6>
 8004902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	f043 0204 	orr.w	r2, r3, #4
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800491a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b00      	cmp	r3, #0
 8004924:	d011      	beq.n	800494a <HAL_UART_IRQHandler+0x126>
 8004926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	2b00      	cmp	r3, #0
 8004930:	d105      	bne.n	800493e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d005      	beq.n	800494a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	f043 0208 	orr.w	r2, r3, #8
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	2b00      	cmp	r3, #0
 8004950:	f000 81ed 	beq.w	8004d2e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004958:	f003 0320 	and.w	r3, r3, #32
 800495c:	2b00      	cmp	r3, #0
 800495e:	d008      	beq.n	8004972 <HAL_UART_IRQHandler+0x14e>
 8004960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004964:	f003 0320 	and.w	r3, r3, #32
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fd1e 	bl	80053ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497c:	2b40      	cmp	r3, #64	; 0x40
 800497e:	bf0c      	ite	eq
 8004980:	2301      	moveq	r3, #1
 8004982:	2300      	movne	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d103      	bne.n	800499e <HAL_UART_IRQHandler+0x17a>
 8004996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800499a:	2b00      	cmp	r3, #0
 800499c:	d04f      	beq.n	8004a3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fc26 	bl	80051f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ae:	2b40      	cmp	r3, #64	; 0x40
 80049b0:	d141      	bne.n	8004a36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3314      	adds	r3, #20
 80049b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049c0:	e853 3f00 	ldrex	r3, [r3]
 80049c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3314      	adds	r3, #20
 80049da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80049f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1d9      	bne.n	80049b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d013      	beq.n	8004a2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0a:	4a7d      	ldr	r2, [pc, #500]	; (8004c00 <HAL_UART_IRQHandler+0x3dc>)
 8004a0c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fe f838 	bl	8002a88 <HAL_DMA_Abort_IT>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d016      	beq.n	8004a4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a28:	4610      	mov	r0, r2
 8004a2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a2c:	e00e      	b.n	8004a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f9ae 	bl	8004d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a34:	e00a      	b.n	8004a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f9aa 	bl	8004d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a3c:	e006      	b.n	8004a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f9a6 	bl	8004d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004a4a:	e170      	b.n	8004d2e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a4c:	bf00      	nop
    return;
 8004a4e:	e16e      	b.n	8004d2e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	f040 814a 	bne.w	8004cee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5e:	f003 0310 	and.w	r3, r3, #16
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 8143 	beq.w	8004cee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a6c:	f003 0310 	and.w	r3, r3, #16
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 813c 	beq.w	8004cee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a76:	2300      	movs	r3, #0
 8004a78:	60bb      	str	r3, [r7, #8]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	60bb      	str	r3, [r7, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	60bb      	str	r3, [r7, #8]
 8004a8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a96:	2b40      	cmp	r3, #64	; 0x40
 8004a98:	f040 80b4 	bne.w	8004c04 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004aa8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 8140 	beq.w	8004d32 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ab6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004aba:	429a      	cmp	r2, r3
 8004abc:	f080 8139 	bcs.w	8004d32 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ac6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ad2:	f000 8088 	beq.w	8004be6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	330c      	adds	r3, #12
 8004adc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004aec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004af4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	330c      	adds	r3, #12
 8004afe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1d9      	bne.n	8004ad6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3314      	adds	r3, #20
 8004b28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b2c:	e853 3f00 	ldrex	r3, [r3]
 8004b30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b34:	f023 0301 	bic.w	r3, r3, #1
 8004b38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3314      	adds	r3, #20
 8004b42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1e1      	bne.n	8004b22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3314      	adds	r3, #20
 8004b64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b68:	e853 3f00 	ldrex	r3, [r3]
 8004b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3314      	adds	r3, #20
 8004b7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b8a:	e841 2300 	strex	r3, r2, [r1]
 8004b8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1e3      	bne.n	8004b5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	330c      	adds	r3, #12
 8004baa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bae:	e853 3f00 	ldrex	r3, [r3]
 8004bb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb6:	f023 0310 	bic.w	r3, r3, #16
 8004bba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	330c      	adds	r3, #12
 8004bc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004bc8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004bca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bd0:	e841 2300 	strex	r3, r2, [r1]
 8004bd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1e3      	bne.n	8004ba4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fd fee1 	bl	80029a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f8d4 	bl	8004da4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bfc:	e099      	b.n	8004d32 <HAL_UART_IRQHandler+0x50e>
 8004bfe:	bf00      	nop
 8004c00:	080052b7 	.word	0x080052b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 808b 	beq.w	8004d36 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004c20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 8086 	beq.w	8004d36 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	330c      	adds	r3, #12
 8004c30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c34:	e853 3f00 	ldrex	r3, [r3]
 8004c38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	330c      	adds	r3, #12
 8004c4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004c4e:	647a      	str	r2, [r7, #68]	; 0x44
 8004c50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c56:	e841 2300 	strex	r3, r2, [r1]
 8004c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1e3      	bne.n	8004c2a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	3314      	adds	r3, #20
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	e853 3f00 	ldrex	r3, [r3]
 8004c70:	623b      	str	r3, [r7, #32]
   return(result);
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	f023 0301 	bic.w	r3, r3, #1
 8004c78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3314      	adds	r3, #20
 8004c82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c86:	633a      	str	r2, [r7, #48]	; 0x30
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1e3      	bne.n	8004c62 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	330c      	adds	r3, #12
 8004cae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	e853 3f00 	ldrex	r3, [r3]
 8004cb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0310 	bic.w	r3, r3, #16
 8004cbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	330c      	adds	r3, #12
 8004cc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ccc:	61fa      	str	r2, [r7, #28]
 8004cce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd0:	69b9      	ldr	r1, [r7, #24]
 8004cd2:	69fa      	ldr	r2, [r7, #28]
 8004cd4:	e841 2300 	strex	r3, r2, [r1]
 8004cd8:	617b      	str	r3, [r7, #20]
   return(result);
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e3      	bne.n	8004ca8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ce0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f85c 	bl	8004da4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cec:	e023      	b.n	8004d36 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d009      	beq.n	8004d0e <HAL_UART_IRQHandler+0x4ea>
 8004cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fae9 	bl	80052de <UART_Transmit_IT>
    return;
 8004d0c:	e014      	b.n	8004d38 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00e      	beq.n	8004d38 <HAL_UART_IRQHandler+0x514>
 8004d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d008      	beq.n	8004d38 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fb29 	bl	800537e <UART_EndTransmit_IT>
    return;
 8004d2c:	e004      	b.n	8004d38 <HAL_UART_IRQHandler+0x514>
    return;
 8004d2e:	bf00      	nop
 8004d30:	e002      	b.n	8004d38 <HAL_UART_IRQHandler+0x514>
      return;
 8004d32:	bf00      	nop
 8004d34:	e000      	b.n	8004d38 <HAL_UART_IRQHandler+0x514>
      return;
 8004d36:	bf00      	nop
  }
}
 8004d38:	37e8      	adds	r7, #232	; 0xe8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop

08004d40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b090      	sub	sp, #64	; 0x40
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d137      	bne.n	8004e48 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dda:	2200      	movs	r2, #0
 8004ddc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3314      	adds	r3, #20
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	623b      	str	r3, [r7, #32]
   return(result);
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004df4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3314      	adds	r3, #20
 8004dfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dfe:	633a      	str	r2, [r7, #48]	; 0x30
 8004e00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e06:	e841 2300 	strex	r3, r2, [r1]
 8004e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e5      	bne.n	8004dde <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	330c      	adds	r3, #12
 8004e18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e28:	637b      	str	r3, [r7, #52]	; 0x34
 8004e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	330c      	adds	r3, #12
 8004e30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e32:	61fa      	str	r2, [r7, #28]
 8004e34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e36:	69b9      	ldr	r1, [r7, #24]
 8004e38:	69fa      	ldr	r2, [r7, #28]
 8004e3a:	e841 2300 	strex	r3, r2, [r1]
 8004e3e:	617b      	str	r3, [r7, #20]
   return(result);
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e5      	bne.n	8004e12 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e46:	e002      	b.n	8004e4e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004e48:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004e4a:	f7ff ff79 	bl	8004d40 <HAL_UART_TxCpltCallback>
}
 8004e4e:	bf00      	nop
 8004e50:	3740      	adds	r7, #64	; 0x40
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f7ff ff75 	bl	8004d54 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e6a:	bf00      	nop
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b09c      	sub	sp, #112	; 0x70
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d172      	bne.n	8004f74 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e90:	2200      	movs	r2, #0
 8004e92:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	330c      	adds	r3, #12
 8004e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ea6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	330c      	adds	r3, #12
 8004eb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004eb4:	65ba      	str	r2, [r7, #88]	; 0x58
 8004eb6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004eba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ebc:	e841 2300 	strex	r3, r2, [r1]
 8004ec0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1e5      	bne.n	8004e94 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3314      	adds	r3, #20
 8004ece:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed2:	e853 3f00 	ldrex	r3, [r3]
 8004ed6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eda:	f023 0301 	bic.w	r3, r3, #1
 8004ede:	667b      	str	r3, [r7, #100]	; 0x64
 8004ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3314      	adds	r3, #20
 8004ee6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ee8:	647a      	str	r2, [r7, #68]	; 0x44
 8004eea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004eee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ef0:	e841 2300 	strex	r3, r2, [r1]
 8004ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e5      	bne.n	8004ec8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3314      	adds	r3, #20
 8004f02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	e853 3f00 	ldrex	r3, [r3]
 8004f0a:	623b      	str	r3, [r7, #32]
   return(result);
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f12:	663b      	str	r3, [r7, #96]	; 0x60
 8004f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3314      	adds	r3, #20
 8004f1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f1c:	633a      	str	r2, [r7, #48]	; 0x30
 8004f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f24:	e841 2300 	strex	r3, r2, [r1]
 8004f28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1e5      	bne.n	8004efc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d119      	bne.n	8004f74 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	330c      	adds	r3, #12
 8004f46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0310 	bic.w	r3, r3, #16
 8004f56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	330c      	adds	r3, #12
 8004f5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f60:	61fa      	str	r2, [r7, #28]
 8004f62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	69b9      	ldr	r1, [r7, #24]
 8004f66:	69fa      	ldr	r2, [r7, #28]
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e5      	bne.n	8004f40 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d106      	bne.n	8004f8a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f80:	4619      	mov	r1, r3
 8004f82:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f84:	f7ff ff0e 	bl	8004da4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f88:	e002      	b.n	8004f90 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004f8a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f8c:	f7ff feec 	bl	8004d68 <HAL_UART_RxCpltCallback>
}
 8004f90:	bf00      	nop
 8004f92:	3770      	adds	r7, #112	; 0x70
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d108      	bne.n	8004fc0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fb2:	085b      	lsrs	r3, r3, #1
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f7ff fef3 	bl	8004da4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004fbe:	e002      	b.n	8004fc6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f7ff fedb 	bl	8004d7c <HAL_UART_RxHalfCpltCallback>
}
 8004fc6:	bf00      	nop
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b084      	sub	sp, #16
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fde:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fea:	2b80      	cmp	r3, #128	; 0x80
 8004fec:	bf0c      	ite	eq
 8004fee:	2301      	moveq	r3, #1
 8004ff0:	2300      	movne	r3, #0
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b21      	cmp	r3, #33	; 0x21
 8005000:	d108      	bne.n	8005014 <UART_DMAError+0x46>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d005      	beq.n	8005014 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2200      	movs	r2, #0
 800500c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800500e:	68b8      	ldr	r0, [r7, #8]
 8005010:	f000 f8c6 	bl	80051a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501e:	2b40      	cmp	r3, #64	; 0x40
 8005020:	bf0c      	ite	eq
 8005022:	2301      	moveq	r3, #1
 8005024:	2300      	movne	r3, #0
 8005026:	b2db      	uxtb	r3, r3
 8005028:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b22      	cmp	r3, #34	; 0x22
 8005034:	d108      	bne.n	8005048 <UART_DMAError+0x7a>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2200      	movs	r2, #0
 8005040:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005042:	68b8      	ldr	r0, [r7, #8]
 8005044:	f000 f8d4 	bl	80051f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504c:	f043 0210 	orr.w	r2, r3, #16
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005054:	68b8      	ldr	r0, [r7, #8]
 8005056:	f7ff fe9b 	bl	8004d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800505a:	bf00      	nop
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
	...

08005064 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b098      	sub	sp, #96	; 0x60
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	4613      	mov	r3, r2
 8005070:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	88fa      	ldrh	r2, [r7, #6]
 800507c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2222      	movs	r2, #34	; 0x22
 8005088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005090:	4a40      	ldr	r2, [pc, #256]	; (8005194 <UART_Start_Receive_DMA+0x130>)
 8005092:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005098:	4a3f      	ldr	r2, [pc, #252]	; (8005198 <UART_Start_Receive_DMA+0x134>)
 800509a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a0:	4a3e      	ldr	r2, [pc, #248]	; (800519c <UART_Start_Receive_DMA+0x138>)
 80050a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	2200      	movs	r2, #0
 80050aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80050ac:	f107 0308 	add.w	r3, r7, #8
 80050b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3304      	adds	r3, #4
 80050bc:	4619      	mov	r1, r3
 80050be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	88fb      	ldrh	r3, [r7, #6]
 80050c4:	f7fd fc18 	bl	80028f8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80050c8:	2300      	movs	r3, #0
 80050ca:	613b      	str	r3, [r7, #16]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d019      	beq.n	8005122 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	330c      	adds	r3, #12
 80050f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050f8:	e853 3f00 	ldrex	r3, [r3]
 80050fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005104:	65bb      	str	r3, [r7, #88]	; 0x58
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	330c      	adds	r3, #12
 800510c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800510e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005110:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005112:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005114:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005116:	e841 2300 	strex	r3, r2, [r1]
 800511a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800511c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1e5      	bne.n	80050ee <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3314      	adds	r3, #20
 8005128:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512c:	e853 3f00 	ldrex	r3, [r3]
 8005130:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005134:	f043 0301 	orr.w	r3, r3, #1
 8005138:	657b      	str	r3, [r7, #84]	; 0x54
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3314      	adds	r3, #20
 8005140:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005142:	63ba      	str	r2, [r7, #56]	; 0x38
 8005144:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005146:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005148:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800514a:	e841 2300 	strex	r3, r2, [r1]
 800514e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1e5      	bne.n	8005122 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3314      	adds	r3, #20
 800515c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	e853 3f00 	ldrex	r3, [r3]
 8005164:	617b      	str	r3, [r7, #20]
   return(result);
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800516c:	653b      	str	r3, [r7, #80]	; 0x50
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3314      	adds	r3, #20
 8005174:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005176:	627a      	str	r2, [r7, #36]	; 0x24
 8005178:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517a:	6a39      	ldr	r1, [r7, #32]
 800517c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517e:	e841 2300 	strex	r3, r2, [r1]
 8005182:	61fb      	str	r3, [r7, #28]
   return(result);
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1e5      	bne.n	8005156 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3760      	adds	r7, #96	; 0x60
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	08004e73 	.word	0x08004e73
 8005198:	08004f99 	.word	0x08004f99
 800519c:	08004fcf 	.word	0x08004fcf

080051a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b089      	sub	sp, #36	; 0x24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	330c      	adds	r3, #12
 80051ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	e853 3f00 	ldrex	r3, [r3]
 80051b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80051be:	61fb      	str	r3, [r7, #28]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	330c      	adds	r3, #12
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	61ba      	str	r2, [r7, #24]
 80051ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051cc:	6979      	ldr	r1, [r7, #20]
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	e841 2300 	strex	r3, r2, [r1]
 80051d4:	613b      	str	r3, [r7, #16]
   return(result);
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e5      	bne.n	80051a8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80051e4:	bf00      	nop
 80051e6:	3724      	adds	r7, #36	; 0x24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b095      	sub	sp, #84	; 0x54
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	330c      	adds	r3, #12
 80051fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005202:	e853 3f00 	ldrex	r3, [r3]
 8005206:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800520e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	330c      	adds	r3, #12
 8005216:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005218:	643a      	str	r2, [r7, #64]	; 0x40
 800521a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800521e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005220:	e841 2300 	strex	r3, r2, [r1]
 8005224:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1e5      	bne.n	80051f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3314      	adds	r3, #20
 8005232:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	e853 3f00 	ldrex	r3, [r3]
 800523a:	61fb      	str	r3, [r7, #28]
   return(result);
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	f023 0301 	bic.w	r3, r3, #1
 8005242:	64bb      	str	r3, [r7, #72]	; 0x48
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	3314      	adds	r3, #20
 800524a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800524c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800524e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005254:	e841 2300 	strex	r3, r2, [r1]
 8005258:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1e5      	bne.n	800522c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005264:	2b01      	cmp	r3, #1
 8005266:	d119      	bne.n	800529c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	330c      	adds	r3, #12
 800526e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	e853 3f00 	ldrex	r3, [r3]
 8005276:	60bb      	str	r3, [r7, #8]
   return(result);
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f023 0310 	bic.w	r3, r3, #16
 800527e:	647b      	str	r3, [r7, #68]	; 0x44
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	330c      	adds	r3, #12
 8005286:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005288:	61ba      	str	r2, [r7, #24]
 800528a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528c:	6979      	ldr	r1, [r7, #20]
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	e841 2300 	strex	r3, r2, [r1]
 8005294:	613b      	str	r3, [r7, #16]
   return(result);
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1e5      	bne.n	8005268 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80052aa:	bf00      	nop
 80052ac:	3754      	adds	r7, #84	; 0x54
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b084      	sub	sp, #16
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f7ff fd5d 	bl	8004d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052d6:	bf00      	nop
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80052de:	b480      	push	{r7}
 80052e0:	b085      	sub	sp, #20
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b21      	cmp	r3, #33	; 0x21
 80052f0:	d13e      	bne.n	8005370 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052fa:	d114      	bne.n	8005326 <UART_Transmit_IT+0x48>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d110      	bne.n	8005326 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005318:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	1c9a      	adds	r2, r3, #2
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	621a      	str	r2, [r3, #32]
 8005324:	e008      	b.n	8005338 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	1c59      	adds	r1, r3, #1
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6211      	str	r1, [r2, #32]
 8005330:	781a      	ldrb	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	b29b      	uxth	r3, r3
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	4619      	mov	r1, r3
 8005346:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10f      	bne.n	800536c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800535a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800536a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800536c:	2300      	movs	r3, #0
 800536e:	e000      	b.n	8005372 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005370:	2302      	movs	r3, #2
  }
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b082      	sub	sp, #8
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005394:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2220      	movs	r2, #32
 800539a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7ff fcce 	bl	8004d40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b08c      	sub	sp, #48	; 0x30
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b22      	cmp	r3, #34	; 0x22
 80053c0:	f040 80ab 	bne.w	800551a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053cc:	d117      	bne.n	80053fe <UART_Receive_IT+0x50>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d113      	bne.n	80053fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80053d6:	2300      	movs	r3, #0
 80053d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f6:	1c9a      	adds	r2, r3, #2
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	629a      	str	r2, [r3, #40]	; 0x28
 80053fc:	e026      	b.n	800544c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005402:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005404:	2300      	movs	r3, #0
 8005406:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005410:	d007      	beq.n	8005422 <UART_Receive_IT+0x74>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10a      	bne.n	8005430 <UART_Receive_IT+0x82>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d106      	bne.n	8005430 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	b2da      	uxtb	r2, r3
 800542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	e008      	b.n	8005442 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	b2db      	uxtb	r3, r3
 8005438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800543c:	b2da      	uxtb	r2, r3
 800543e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005440:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005446:	1c5a      	adds	r2, r3, #1
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005450:	b29b      	uxth	r3, r3
 8005452:	3b01      	subs	r3, #1
 8005454:	b29b      	uxth	r3, r3
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	4619      	mov	r1, r3
 800545a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800545c:	2b00      	cmp	r3, #0
 800545e:	d15a      	bne.n	8005516 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 0220 	bic.w	r2, r2, #32
 800546e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800547e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695a      	ldr	r2, [r3, #20]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0201 	bic.w	r2, r2, #1
 800548e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549c:	2b01      	cmp	r3, #1
 800549e:	d135      	bne.n	800550c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	330c      	adds	r3, #12
 80054ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	e853 3f00 	ldrex	r3, [r3]
 80054b4:	613b      	str	r3, [r7, #16]
   return(result);
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	f023 0310 	bic.w	r3, r3, #16
 80054bc:	627b      	str	r3, [r7, #36]	; 0x24
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	330c      	adds	r3, #12
 80054c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c6:	623a      	str	r2, [r7, #32]
 80054c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ca:	69f9      	ldr	r1, [r7, #28]
 80054cc:	6a3a      	ldr	r2, [r7, #32]
 80054ce:	e841 2300 	strex	r3, r2, [r1]
 80054d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1e5      	bne.n	80054a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0310 	and.w	r3, r3, #16
 80054e4:	2b10      	cmp	r3, #16
 80054e6:	d10a      	bne.n	80054fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054e8:	2300      	movs	r3, #0
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	60fb      	str	r3, [r7, #12]
 80054fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005502:	4619      	mov	r1, r3
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7ff fc4d 	bl	8004da4 <HAL_UARTEx_RxEventCallback>
 800550a:	e002      	b.n	8005512 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7ff fc2b 	bl	8004d68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	e002      	b.n	800551c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	e000      	b.n	800551c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800551a:	2302      	movs	r3, #2
  }
}
 800551c:	4618      	mov	r0, r3
 800551e:	3730      	adds	r7, #48	; 0x30
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005528:	b0c0      	sub	sp, #256	; 0x100
 800552a:	af00      	add	r7, sp, #0
 800552c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800553c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005540:	68d9      	ldr	r1, [r3, #12]
 8005542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	ea40 0301 	orr.w	r3, r0, r1
 800554c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800554e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	431a      	orrs	r2, r3
 800555c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	431a      	orrs	r2, r3
 8005564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	4313      	orrs	r3, r2
 800556c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800557c:	f021 010c 	bic.w	r1, r1, #12
 8005580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800558a:	430b      	orrs	r3, r1
 800558c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800558e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800559a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800559e:	6999      	ldr	r1, [r3, #24]
 80055a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	ea40 0301 	orr.w	r3, r0, r1
 80055aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	4b8f      	ldr	r3, [pc, #572]	; (80057f0 <UART_SetConfig+0x2cc>)
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d005      	beq.n	80055c4 <UART_SetConfig+0xa0>
 80055b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	4b8d      	ldr	r3, [pc, #564]	; (80057f4 <UART_SetConfig+0x2d0>)
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d104      	bne.n	80055ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055c4:	f7fd fff0 	bl	80035a8 <HAL_RCC_GetPCLK2Freq>
 80055c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80055cc:	e003      	b.n	80055d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055ce:	f7fd ffd7 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 80055d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e0:	f040 810c 	bne.w	80057fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055e8:	2200      	movs	r2, #0
 80055ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80055f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80055f6:	4622      	mov	r2, r4
 80055f8:	462b      	mov	r3, r5
 80055fa:	1891      	adds	r1, r2, r2
 80055fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80055fe:	415b      	adcs	r3, r3
 8005600:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005602:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005606:	4621      	mov	r1, r4
 8005608:	eb12 0801 	adds.w	r8, r2, r1
 800560c:	4629      	mov	r1, r5
 800560e:	eb43 0901 	adc.w	r9, r3, r1
 8005612:	f04f 0200 	mov.w	r2, #0
 8005616:	f04f 0300 	mov.w	r3, #0
 800561a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800561e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005622:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005626:	4690      	mov	r8, r2
 8005628:	4699      	mov	r9, r3
 800562a:	4623      	mov	r3, r4
 800562c:	eb18 0303 	adds.w	r3, r8, r3
 8005630:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005634:	462b      	mov	r3, r5
 8005636:	eb49 0303 	adc.w	r3, r9, r3
 800563a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800563e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800564a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800564e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005652:	460b      	mov	r3, r1
 8005654:	18db      	adds	r3, r3, r3
 8005656:	653b      	str	r3, [r7, #80]	; 0x50
 8005658:	4613      	mov	r3, r2
 800565a:	eb42 0303 	adc.w	r3, r2, r3
 800565e:	657b      	str	r3, [r7, #84]	; 0x54
 8005660:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005664:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005668:	f7fa fe8a 	bl	8000380 <__aeabi_uldivmod>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4b61      	ldr	r3, [pc, #388]	; (80057f8 <UART_SetConfig+0x2d4>)
 8005672:	fba3 2302 	umull	r2, r3, r3, r2
 8005676:	095b      	lsrs	r3, r3, #5
 8005678:	011c      	lsls	r4, r3, #4
 800567a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800567e:	2200      	movs	r2, #0
 8005680:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005684:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005688:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800568c:	4642      	mov	r2, r8
 800568e:	464b      	mov	r3, r9
 8005690:	1891      	adds	r1, r2, r2
 8005692:	64b9      	str	r1, [r7, #72]	; 0x48
 8005694:	415b      	adcs	r3, r3
 8005696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005698:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800569c:	4641      	mov	r1, r8
 800569e:	eb12 0a01 	adds.w	sl, r2, r1
 80056a2:	4649      	mov	r1, r9
 80056a4:	eb43 0b01 	adc.w	fp, r3, r1
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	f04f 0300 	mov.w	r3, #0
 80056b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056bc:	4692      	mov	sl, r2
 80056be:	469b      	mov	fp, r3
 80056c0:	4643      	mov	r3, r8
 80056c2:	eb1a 0303 	adds.w	r3, sl, r3
 80056c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056ca:	464b      	mov	r3, r9
 80056cc:	eb4b 0303 	adc.w	r3, fp, r3
 80056d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80056d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80056e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80056e8:	460b      	mov	r3, r1
 80056ea:	18db      	adds	r3, r3, r3
 80056ec:	643b      	str	r3, [r7, #64]	; 0x40
 80056ee:	4613      	mov	r3, r2
 80056f0:	eb42 0303 	adc.w	r3, r2, r3
 80056f4:	647b      	str	r3, [r7, #68]	; 0x44
 80056f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80056fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80056fe:	f7fa fe3f 	bl	8000380 <__aeabi_uldivmod>
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	4611      	mov	r1, r2
 8005708:	4b3b      	ldr	r3, [pc, #236]	; (80057f8 <UART_SetConfig+0x2d4>)
 800570a:	fba3 2301 	umull	r2, r3, r3, r1
 800570e:	095b      	lsrs	r3, r3, #5
 8005710:	2264      	movs	r2, #100	; 0x64
 8005712:	fb02 f303 	mul.w	r3, r2, r3
 8005716:	1acb      	subs	r3, r1, r3
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800571e:	4b36      	ldr	r3, [pc, #216]	; (80057f8 <UART_SetConfig+0x2d4>)
 8005720:	fba3 2302 	umull	r2, r3, r3, r2
 8005724:	095b      	lsrs	r3, r3, #5
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800572c:	441c      	add	r4, r3
 800572e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005732:	2200      	movs	r2, #0
 8005734:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005738:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800573c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005740:	4642      	mov	r2, r8
 8005742:	464b      	mov	r3, r9
 8005744:	1891      	adds	r1, r2, r2
 8005746:	63b9      	str	r1, [r7, #56]	; 0x38
 8005748:	415b      	adcs	r3, r3
 800574a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800574c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005750:	4641      	mov	r1, r8
 8005752:	1851      	adds	r1, r2, r1
 8005754:	6339      	str	r1, [r7, #48]	; 0x30
 8005756:	4649      	mov	r1, r9
 8005758:	414b      	adcs	r3, r1
 800575a:	637b      	str	r3, [r7, #52]	; 0x34
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005768:	4659      	mov	r1, fp
 800576a:	00cb      	lsls	r3, r1, #3
 800576c:	4651      	mov	r1, sl
 800576e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005772:	4651      	mov	r1, sl
 8005774:	00ca      	lsls	r2, r1, #3
 8005776:	4610      	mov	r0, r2
 8005778:	4619      	mov	r1, r3
 800577a:	4603      	mov	r3, r0
 800577c:	4642      	mov	r2, r8
 800577e:	189b      	adds	r3, r3, r2
 8005780:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005784:	464b      	mov	r3, r9
 8005786:	460a      	mov	r2, r1
 8005788:	eb42 0303 	adc.w	r3, r2, r3
 800578c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800579c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80057a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80057a4:	460b      	mov	r3, r1
 80057a6:	18db      	adds	r3, r3, r3
 80057a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057aa:	4613      	mov	r3, r2
 80057ac:	eb42 0303 	adc.w	r3, r2, r3
 80057b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80057ba:	f7fa fde1 	bl	8000380 <__aeabi_uldivmod>
 80057be:	4602      	mov	r2, r0
 80057c0:	460b      	mov	r3, r1
 80057c2:	4b0d      	ldr	r3, [pc, #52]	; (80057f8 <UART_SetConfig+0x2d4>)
 80057c4:	fba3 1302 	umull	r1, r3, r3, r2
 80057c8:	095b      	lsrs	r3, r3, #5
 80057ca:	2164      	movs	r1, #100	; 0x64
 80057cc:	fb01 f303 	mul.w	r3, r1, r3
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	3332      	adds	r3, #50	; 0x32
 80057d6:	4a08      	ldr	r2, [pc, #32]	; (80057f8 <UART_SetConfig+0x2d4>)
 80057d8:	fba2 2303 	umull	r2, r3, r2, r3
 80057dc:	095b      	lsrs	r3, r3, #5
 80057de:	f003 0207 	and.w	r2, r3, #7
 80057e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4422      	add	r2, r4
 80057ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057ec:	e106      	b.n	80059fc <UART_SetConfig+0x4d8>
 80057ee:	bf00      	nop
 80057f0:	40011000 	.word	0x40011000
 80057f4:	40011400 	.word	0x40011400
 80057f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005800:	2200      	movs	r2, #0
 8005802:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005806:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800580a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800580e:	4642      	mov	r2, r8
 8005810:	464b      	mov	r3, r9
 8005812:	1891      	adds	r1, r2, r2
 8005814:	6239      	str	r1, [r7, #32]
 8005816:	415b      	adcs	r3, r3
 8005818:	627b      	str	r3, [r7, #36]	; 0x24
 800581a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800581e:	4641      	mov	r1, r8
 8005820:	1854      	adds	r4, r2, r1
 8005822:	4649      	mov	r1, r9
 8005824:	eb43 0501 	adc.w	r5, r3, r1
 8005828:	f04f 0200 	mov.w	r2, #0
 800582c:	f04f 0300 	mov.w	r3, #0
 8005830:	00eb      	lsls	r3, r5, #3
 8005832:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005836:	00e2      	lsls	r2, r4, #3
 8005838:	4614      	mov	r4, r2
 800583a:	461d      	mov	r5, r3
 800583c:	4643      	mov	r3, r8
 800583e:	18e3      	adds	r3, r4, r3
 8005840:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005844:	464b      	mov	r3, r9
 8005846:	eb45 0303 	adc.w	r3, r5, r3
 800584a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800584e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800585a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800585e:	f04f 0200 	mov.w	r2, #0
 8005862:	f04f 0300 	mov.w	r3, #0
 8005866:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800586a:	4629      	mov	r1, r5
 800586c:	008b      	lsls	r3, r1, #2
 800586e:	4621      	mov	r1, r4
 8005870:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005874:	4621      	mov	r1, r4
 8005876:	008a      	lsls	r2, r1, #2
 8005878:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800587c:	f7fa fd80 	bl	8000380 <__aeabi_uldivmod>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4b60      	ldr	r3, [pc, #384]	; (8005a08 <UART_SetConfig+0x4e4>)
 8005886:	fba3 2302 	umull	r2, r3, r3, r2
 800588a:	095b      	lsrs	r3, r3, #5
 800588c:	011c      	lsls	r4, r3, #4
 800588e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005892:	2200      	movs	r2, #0
 8005894:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005898:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800589c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80058a0:	4642      	mov	r2, r8
 80058a2:	464b      	mov	r3, r9
 80058a4:	1891      	adds	r1, r2, r2
 80058a6:	61b9      	str	r1, [r7, #24]
 80058a8:	415b      	adcs	r3, r3
 80058aa:	61fb      	str	r3, [r7, #28]
 80058ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058b0:	4641      	mov	r1, r8
 80058b2:	1851      	adds	r1, r2, r1
 80058b4:	6139      	str	r1, [r7, #16]
 80058b6:	4649      	mov	r1, r9
 80058b8:	414b      	adcs	r3, r1
 80058ba:	617b      	str	r3, [r7, #20]
 80058bc:	f04f 0200 	mov.w	r2, #0
 80058c0:	f04f 0300 	mov.w	r3, #0
 80058c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058c8:	4659      	mov	r1, fp
 80058ca:	00cb      	lsls	r3, r1, #3
 80058cc:	4651      	mov	r1, sl
 80058ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058d2:	4651      	mov	r1, sl
 80058d4:	00ca      	lsls	r2, r1, #3
 80058d6:	4610      	mov	r0, r2
 80058d8:	4619      	mov	r1, r3
 80058da:	4603      	mov	r3, r0
 80058dc:	4642      	mov	r2, r8
 80058de:	189b      	adds	r3, r3, r2
 80058e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058e4:	464b      	mov	r3, r9
 80058e6:	460a      	mov	r2, r1
 80058e8:	eb42 0303 	adc.w	r3, r2, r3
 80058ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80058fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	f04f 0300 	mov.w	r3, #0
 8005904:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005908:	4649      	mov	r1, r9
 800590a:	008b      	lsls	r3, r1, #2
 800590c:	4641      	mov	r1, r8
 800590e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005912:	4641      	mov	r1, r8
 8005914:	008a      	lsls	r2, r1, #2
 8005916:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800591a:	f7fa fd31 	bl	8000380 <__aeabi_uldivmod>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	4611      	mov	r1, r2
 8005924:	4b38      	ldr	r3, [pc, #224]	; (8005a08 <UART_SetConfig+0x4e4>)
 8005926:	fba3 2301 	umull	r2, r3, r3, r1
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	2264      	movs	r2, #100	; 0x64
 800592e:	fb02 f303 	mul.w	r3, r2, r3
 8005932:	1acb      	subs	r3, r1, r3
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	3332      	adds	r3, #50	; 0x32
 8005938:	4a33      	ldr	r2, [pc, #204]	; (8005a08 <UART_SetConfig+0x4e4>)
 800593a:	fba2 2303 	umull	r2, r3, r2, r3
 800593e:	095b      	lsrs	r3, r3, #5
 8005940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005944:	441c      	add	r4, r3
 8005946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800594a:	2200      	movs	r2, #0
 800594c:	673b      	str	r3, [r7, #112]	; 0x70
 800594e:	677a      	str	r2, [r7, #116]	; 0x74
 8005950:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005954:	4642      	mov	r2, r8
 8005956:	464b      	mov	r3, r9
 8005958:	1891      	adds	r1, r2, r2
 800595a:	60b9      	str	r1, [r7, #8]
 800595c:	415b      	adcs	r3, r3
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005964:	4641      	mov	r1, r8
 8005966:	1851      	adds	r1, r2, r1
 8005968:	6039      	str	r1, [r7, #0]
 800596a:	4649      	mov	r1, r9
 800596c:	414b      	adcs	r3, r1
 800596e:	607b      	str	r3, [r7, #4]
 8005970:	f04f 0200 	mov.w	r2, #0
 8005974:	f04f 0300 	mov.w	r3, #0
 8005978:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800597c:	4659      	mov	r1, fp
 800597e:	00cb      	lsls	r3, r1, #3
 8005980:	4651      	mov	r1, sl
 8005982:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005986:	4651      	mov	r1, sl
 8005988:	00ca      	lsls	r2, r1, #3
 800598a:	4610      	mov	r0, r2
 800598c:	4619      	mov	r1, r3
 800598e:	4603      	mov	r3, r0
 8005990:	4642      	mov	r2, r8
 8005992:	189b      	adds	r3, r3, r2
 8005994:	66bb      	str	r3, [r7, #104]	; 0x68
 8005996:	464b      	mov	r3, r9
 8005998:	460a      	mov	r2, r1
 800599a:	eb42 0303 	adc.w	r3, r2, r3
 800599e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	663b      	str	r3, [r7, #96]	; 0x60
 80059aa:	667a      	str	r2, [r7, #100]	; 0x64
 80059ac:	f04f 0200 	mov.w	r2, #0
 80059b0:	f04f 0300 	mov.w	r3, #0
 80059b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80059b8:	4649      	mov	r1, r9
 80059ba:	008b      	lsls	r3, r1, #2
 80059bc:	4641      	mov	r1, r8
 80059be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059c2:	4641      	mov	r1, r8
 80059c4:	008a      	lsls	r2, r1, #2
 80059c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80059ca:	f7fa fcd9 	bl	8000380 <__aeabi_uldivmod>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	4b0d      	ldr	r3, [pc, #52]	; (8005a08 <UART_SetConfig+0x4e4>)
 80059d4:	fba3 1302 	umull	r1, r3, r3, r2
 80059d8:	095b      	lsrs	r3, r3, #5
 80059da:	2164      	movs	r1, #100	; 0x64
 80059dc:	fb01 f303 	mul.w	r3, r1, r3
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	011b      	lsls	r3, r3, #4
 80059e4:	3332      	adds	r3, #50	; 0x32
 80059e6:	4a08      	ldr	r2, [pc, #32]	; (8005a08 <UART_SetConfig+0x4e4>)
 80059e8:	fba2 2303 	umull	r2, r3, r2, r3
 80059ec:	095b      	lsrs	r3, r3, #5
 80059ee:	f003 020f 	and.w	r2, r3, #15
 80059f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4422      	add	r2, r4
 80059fa:	609a      	str	r2, [r3, #8]
}
 80059fc:	bf00      	nop
 80059fe:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a02:	46bd      	mov	sp, r7
 8005a04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a08:	51eb851f 	.word	0x51eb851f

08005a0c <__NVIC_SetPriority>:
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	4603      	mov	r3, r0
 8005a14:	6039      	str	r1, [r7, #0]
 8005a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	db0a      	blt.n	8005a36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	490c      	ldr	r1, [pc, #48]	; (8005a58 <__NVIC_SetPriority+0x4c>)
 8005a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a2a:	0112      	lsls	r2, r2, #4
 8005a2c:	b2d2      	uxtb	r2, r2
 8005a2e:	440b      	add	r3, r1
 8005a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005a34:	e00a      	b.n	8005a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	4908      	ldr	r1, [pc, #32]	; (8005a5c <__NVIC_SetPriority+0x50>)
 8005a3c:	79fb      	ldrb	r3, [r7, #7]
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	3b04      	subs	r3, #4
 8005a44:	0112      	lsls	r2, r2, #4
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	440b      	add	r3, r1
 8005a4a:	761a      	strb	r2, [r3, #24]
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	e000e100 	.word	0xe000e100
 8005a5c:	e000ed00 	.word	0xe000ed00

08005a60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005a64:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <SysTick_Handler+0x1c>)
 8005a66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005a68:	f001 fd4e 	bl	8007508 <xTaskGetSchedulerState>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d001      	beq.n	8005a76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005a72:	f002 fb39 	bl	80080e8 <xPortSysTickHandler>
  }
}
 8005a76:	bf00      	nop
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	e000e010 	.word	0xe000e010

08005a80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005a84:	2100      	movs	r1, #0
 8005a86:	f06f 0004 	mvn.w	r0, #4
 8005a8a:	f7ff ffbf 	bl	8005a0c <__NVIC_SetPriority>
#endif
}
 8005a8e:	bf00      	nop
 8005a90:	bd80      	pop	{r7, pc}
	...

08005a94 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a9a:	f3ef 8305 	mrs	r3, IPSR
 8005a9e:	603b      	str	r3, [r7, #0]
  return(result);
 8005aa0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005aa6:	f06f 0305 	mvn.w	r3, #5
 8005aaa:	607b      	str	r3, [r7, #4]
 8005aac:	e00c      	b.n	8005ac8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005aae:	4b0a      	ldr	r3, [pc, #40]	; (8005ad8 <osKernelInitialize+0x44>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d105      	bne.n	8005ac2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005ab6:	4b08      	ldr	r3, [pc, #32]	; (8005ad8 <osKernelInitialize+0x44>)
 8005ab8:	2201      	movs	r2, #1
 8005aba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005abc:	2300      	movs	r3, #0
 8005abe:	607b      	str	r3, [r7, #4]
 8005ac0:	e002      	b.n	8005ac8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ac6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ac8:	687b      	ldr	r3, [r7, #4]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	20005014 	.word	0x20005014

08005adc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ae2:	f3ef 8305 	mrs	r3, IPSR
 8005ae6:	603b      	str	r3, [r7, #0]
  return(result);
 8005ae8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005aee:	f06f 0305 	mvn.w	r3, #5
 8005af2:	607b      	str	r3, [r7, #4]
 8005af4:	e010      	b.n	8005b18 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005af6:	4b0b      	ldr	r3, [pc, #44]	; (8005b24 <osKernelStart+0x48>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d109      	bne.n	8005b12 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005afe:	f7ff ffbf 	bl	8005a80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005b02:	4b08      	ldr	r3, [pc, #32]	; (8005b24 <osKernelStart+0x48>)
 8005b04:	2202      	movs	r2, #2
 8005b06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005b08:	f001 f87c 	bl	8006c04 <vTaskStartScheduler>
      stat = osOK;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	607b      	str	r3, [r7, #4]
 8005b10:	e002      	b.n	8005b18 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005b18:	687b      	ldr	r3, [r7, #4]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20005014 	.word	0x20005014

08005b28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08e      	sub	sp, #56	; 0x38
 8005b2c:	af04      	add	r7, sp, #16
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005b34:	2300      	movs	r3, #0
 8005b36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b38:	f3ef 8305 	mrs	r3, IPSR
 8005b3c:	617b      	str	r3, [r7, #20]
  return(result);
 8005b3e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d17e      	bne.n	8005c42 <osThreadNew+0x11a>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d07b      	beq.n	8005c42 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005b4a:	2380      	movs	r3, #128	; 0x80
 8005b4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005b4e:	2318      	movs	r3, #24
 8005b50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d045      	beq.n	8005bee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <osThreadNew+0x48>
        name = attr->name;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d002      	beq.n	8005b7e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d008      	beq.n	8005b96 <osThreadNew+0x6e>
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	2b38      	cmp	r3, #56	; 0x38
 8005b88:	d805      	bhi.n	8005b96 <osThreadNew+0x6e>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <osThreadNew+0x72>
        return (NULL);
 8005b96:	2300      	movs	r3, #0
 8005b98:	e054      	b.n	8005c44 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	089b      	lsrs	r3, r3, #2
 8005ba8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00e      	beq.n	8005bd0 <osThreadNew+0xa8>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	2ba7      	cmp	r3, #167	; 0xa7
 8005bb8:	d90a      	bls.n	8005bd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d006      	beq.n	8005bd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <osThreadNew+0xa8>
        mem = 1;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	61bb      	str	r3, [r7, #24]
 8005bce:	e010      	b.n	8005bf2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10c      	bne.n	8005bf2 <osThreadNew+0xca>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d108      	bne.n	8005bf2 <osThreadNew+0xca>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d104      	bne.n	8005bf2 <osThreadNew+0xca>
          mem = 0;
 8005be8:	2300      	movs	r3, #0
 8005bea:	61bb      	str	r3, [r7, #24]
 8005bec:	e001      	b.n	8005bf2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d110      	bne.n	8005c1a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c00:	9202      	str	r2, [sp, #8]
 8005c02:	9301      	str	r3, [sp, #4]
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	6a3a      	ldr	r2, [r7, #32]
 8005c0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 fe0c 	bl	800682c <xTaskCreateStatic>
 8005c14:	4603      	mov	r3, r0
 8005c16:	613b      	str	r3, [r7, #16]
 8005c18:	e013      	b.n	8005c42 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d110      	bne.n	8005c42 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	f107 0310 	add.w	r3, r7, #16
 8005c28:	9301      	str	r3, [sp, #4]
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 fe57 	bl	80068e6 <xTaskCreate>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d001      	beq.n	8005c42 <osThreadNew+0x11a>
            hTask = NULL;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005c42:	693b      	ldr	r3, [r7, #16]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3728      	adds	r7, #40	; 0x28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c54:	f3ef 8305 	mrs	r3, IPSR
 8005c58:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c5a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <osDelay+0x1c>
    stat = osErrorISR;
 8005c60:	f06f 0305 	mvn.w	r3, #5
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	e007      	b.n	8005c78 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 ff92 	bl	8006b9c <vTaskDelay>
    }
  }

  return (stat);
 8005c78:	68fb      	ldr	r3, [r7, #12]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
	...

08005c84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4a07      	ldr	r2, [pc, #28]	; (8005cb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005c94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	4a06      	ldr	r2, [pc, #24]	; (8005cb4 <vApplicationGetIdleTaskMemory+0x30>)
 8005c9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2280      	movs	r2, #128	; 0x80
 8005ca0:	601a      	str	r2, [r3, #0]
}
 8005ca2:	bf00      	nop
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	20005018 	.word	0x20005018
 8005cb4:	200050c0 	.word	0x200050c0

08005cb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4a07      	ldr	r2, [pc, #28]	; (8005ce4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005cc8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	4a06      	ldr	r2, [pc, #24]	; (8005ce8 <vApplicationGetTimerTaskMemory+0x30>)
 8005cce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cd6:	601a      	str	r2, [r3, #0]
}
 8005cd8:	bf00      	nop
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	200052c0 	.word	0x200052c0
 8005ce8:	20005368 	.word	0x20005368

08005cec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f103 0208 	add.w	r2, r3, #8
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f103 0208 	add.w	r2, r3, #8
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f103 0208 	add.w	r2, r3, #8
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d3a:	bf00      	nop
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d46:	b480      	push	{r7}
 8005d48:	b085      	sub	sp, #20
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	601a      	str	r2, [r3, #0]
}
 8005d82:	bf00      	nop
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b085      	sub	sp, #20
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005da4:	d103      	bne.n	8005dae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	e00c      	b.n	8005dc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	3308      	adds	r3, #8
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	e002      	b.n	8005dbc <vListInsert+0x2e>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d2f6      	bcs.n	8005db6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	1c5a      	adds	r2, r3, #1
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	601a      	str	r2, [r3, #0]
}
 8005df4:	bf00      	nop
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	6892      	ldr	r2, [r2, #8]
 8005e16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6852      	ldr	r2, [r2, #4]
 8005e20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d103      	bne.n	8005e34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	1e5a      	subs	r2, r3, #1
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10a      	bne.n	8005e7e <xQueueGenericReset+0x2a>
	__asm volatile
 8005e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	60bb      	str	r3, [r7, #8]
}
 8005e7a:	bf00      	nop
 8005e7c:	e7fe      	b.n	8005e7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e7e:	f002 f8a1 	bl	8007fc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8a:	68f9      	ldr	r1, [r7, #12]
 8005e8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e8e:	fb01 f303 	mul.w	r3, r1, r3
 8005e92:	441a      	add	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	68f9      	ldr	r1, [r7, #12]
 8005eb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005eb4:	fb01 f303 	mul.w	r3, r1, r3
 8005eb8:	441a      	add	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	22ff      	movs	r2, #255	; 0xff
 8005ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	22ff      	movs	r2, #255	; 0xff
 8005eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d114      	bne.n	8005efe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01a      	beq.n	8005f12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3310      	adds	r3, #16
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f001 f929 	bl	8007138 <xTaskRemoveFromEventList>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d012      	beq.n	8005f12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005eec:	4b0c      	ldr	r3, [pc, #48]	; (8005f20 <xQueueGenericReset+0xcc>)
 8005eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	e009      	b.n	8005f12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3310      	adds	r3, #16
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7ff fef2 	bl	8005cec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	3324      	adds	r3, #36	; 0x24
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff feed 	bl	8005cec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f12:	f002 f887 	bl	8008024 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f16:	2301      	movs	r3, #1
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	e000ed04 	.word	0xe000ed04

08005f24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b08e      	sub	sp, #56	; 0x38
 8005f28:	af02      	add	r7, sp, #8
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
 8005f30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f4a:	bf00      	nop
 8005f4c:	e7fe      	b.n	8005f4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10a      	bne.n	8005f6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f66:	bf00      	nop
 8005f68:	e7fe      	b.n	8005f68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <xQueueGenericCreateStatic+0x52>
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <xQueueGenericCreateStatic+0x56>
 8005f76:	2301      	movs	r3, #1
 8005f78:	e000      	b.n	8005f7c <xQueueGenericCreateStatic+0x58>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10a      	bne.n	8005f96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	623b      	str	r3, [r7, #32]
}
 8005f92:	bf00      	nop
 8005f94:	e7fe      	b.n	8005f94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d102      	bne.n	8005fa2 <xQueueGenericCreateStatic+0x7e>
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <xQueueGenericCreateStatic+0x82>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e000      	b.n	8005fa8 <xQueueGenericCreateStatic+0x84>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10a      	bne.n	8005fc2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	61fb      	str	r3, [r7, #28]
}
 8005fbe:	bf00      	nop
 8005fc0:	e7fe      	b.n	8005fc0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005fc2:	2350      	movs	r3, #80	; 0x50
 8005fc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2b50      	cmp	r3, #80	; 0x50
 8005fca:	d00a      	beq.n	8005fe2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	61bb      	str	r3, [r7, #24]
}
 8005fde:	bf00      	nop
 8005fe0:	e7fe      	b.n	8005fe0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005fe2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00d      	beq.n	800600a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ff6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	4613      	mov	r3, r2
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	68b9      	ldr	r1, [r7, #8]
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 f805 	bl	8006014 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800600c:	4618      	mov	r0, r3
 800600e:	3730      	adds	r7, #48	; 0x30
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
 8006020:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d103      	bne.n	8006030 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	e002      	b.n	8006036 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006042:	2101      	movs	r1, #1
 8006044:	69b8      	ldr	r0, [r7, #24]
 8006046:	f7ff ff05 	bl	8005e54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	78fa      	ldrb	r2, [r7, #3]
 800604e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006052:	bf00      	nop
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08e      	sub	sp, #56	; 0x38
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800606a:	2300      	movs	r3, #0
 800606c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10a      	bne.n	800608e <xQueueGenericSend+0x32>
	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800608a:	bf00      	nop
 800608c:	e7fe      	b.n	800608c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d103      	bne.n	800609c <xQueueGenericSend+0x40>
 8006094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <xQueueGenericSend+0x44>
 800609c:	2301      	movs	r3, #1
 800609e:	e000      	b.n	80060a2 <xQueueGenericSend+0x46>
 80060a0:	2300      	movs	r3, #0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10a      	bne.n	80060bc <xQueueGenericSend+0x60>
	__asm volatile
 80060a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060aa:	f383 8811 	msr	BASEPRI, r3
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060b8:	bf00      	nop
 80060ba:	e7fe      	b.n	80060ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d103      	bne.n	80060ca <xQueueGenericSend+0x6e>
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d101      	bne.n	80060ce <xQueueGenericSend+0x72>
 80060ca:	2301      	movs	r3, #1
 80060cc:	e000      	b.n	80060d0 <xQueueGenericSend+0x74>
 80060ce:	2300      	movs	r3, #0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10a      	bne.n	80060ea <xQueueGenericSend+0x8e>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	623b      	str	r3, [r7, #32]
}
 80060e6:	bf00      	nop
 80060e8:	e7fe      	b.n	80060e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060ea:	f001 fa0d 	bl	8007508 <xTaskGetSchedulerState>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d102      	bne.n	80060fa <xQueueGenericSend+0x9e>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <xQueueGenericSend+0xa2>
 80060fa:	2301      	movs	r3, #1
 80060fc:	e000      	b.n	8006100 <xQueueGenericSend+0xa4>
 80060fe:	2300      	movs	r3, #0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10a      	bne.n	800611a <xQueueGenericSend+0xbe>
	__asm volatile
 8006104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006108:	f383 8811 	msr	BASEPRI, r3
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	61fb      	str	r3, [r7, #28]
}
 8006116:	bf00      	nop
 8006118:	e7fe      	b.n	8006118 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800611a:	f001 ff53 	bl	8007fc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800611e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006126:	429a      	cmp	r2, r3
 8006128:	d302      	bcc.n	8006130 <xQueueGenericSend+0xd4>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	2b02      	cmp	r3, #2
 800612e:	d129      	bne.n	8006184 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	68b9      	ldr	r1, [r7, #8]
 8006134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006136:	f000 fa0b 	bl	8006550 <prvCopyDataToQueue>
 800613a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800613c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	2b00      	cmp	r3, #0
 8006142:	d010      	beq.n	8006166 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006146:	3324      	adds	r3, #36	; 0x24
 8006148:	4618      	mov	r0, r3
 800614a:	f000 fff5 	bl	8007138 <xTaskRemoveFromEventList>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d013      	beq.n	800617c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006154:	4b3f      	ldr	r3, [pc, #252]	; (8006254 <xQueueGenericSend+0x1f8>)
 8006156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	e00a      	b.n	800617c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006168:	2b00      	cmp	r3, #0
 800616a:	d007      	beq.n	800617c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800616c:	4b39      	ldr	r3, [pc, #228]	; (8006254 <xQueueGenericSend+0x1f8>)
 800616e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800617c:	f001 ff52 	bl	8008024 <vPortExitCritical>
				return pdPASS;
 8006180:	2301      	movs	r3, #1
 8006182:	e063      	b.n	800624c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d103      	bne.n	8006192 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800618a:	f001 ff4b 	bl	8008024 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800618e:	2300      	movs	r3, #0
 8006190:	e05c      	b.n	800624c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006194:	2b00      	cmp	r3, #0
 8006196:	d106      	bne.n	80061a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006198:	f107 0314 	add.w	r3, r7, #20
 800619c:	4618      	mov	r0, r3
 800619e:	f001 f855 	bl	800724c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061a2:	2301      	movs	r3, #1
 80061a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061a6:	f001 ff3d 	bl	8008024 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061aa:	f000 fd9b 	bl	8006ce4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061ae:	f001 ff09 	bl	8007fc4 <vPortEnterCritical>
 80061b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061b8:	b25b      	sxtb	r3, r3
 80061ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061be:	d103      	bne.n	80061c8 <xQueueGenericSend+0x16c>
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061ce:	b25b      	sxtb	r3, r3
 80061d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061d4:	d103      	bne.n	80061de <xQueueGenericSend+0x182>
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061de:	f001 ff21 	bl	8008024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061e2:	1d3a      	adds	r2, r7, #4
 80061e4:	f107 0314 	add.w	r3, r7, #20
 80061e8:	4611      	mov	r1, r2
 80061ea:	4618      	mov	r0, r3
 80061ec:	f001 f844 	bl	8007278 <xTaskCheckForTimeOut>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d124      	bne.n	8006240 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80061f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061f8:	f000 faa2 	bl	8006740 <prvIsQueueFull>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d018      	beq.n	8006234 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	3310      	adds	r3, #16
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	4611      	mov	r1, r2
 800620a:	4618      	mov	r0, r3
 800620c:	f000 ff44 	bl	8007098 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006212:	f000 fa2d 	bl	8006670 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006216:	f000 fd73 	bl	8006d00 <xTaskResumeAll>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	f47f af7c 	bne.w	800611a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006222:	4b0c      	ldr	r3, [pc, #48]	; (8006254 <xQueueGenericSend+0x1f8>)
 8006224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	e772      	b.n	800611a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006236:	f000 fa1b 	bl	8006670 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800623a:	f000 fd61 	bl	8006d00 <xTaskResumeAll>
 800623e:	e76c      	b.n	800611a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006242:	f000 fa15 	bl	8006670 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006246:	f000 fd5b 	bl	8006d00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800624a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800624c:	4618      	mov	r0, r3
 800624e:	3738      	adds	r7, #56	; 0x38
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	e000ed04 	.word	0xe000ed04

08006258 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b090      	sub	sp, #64	; 0x40
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800626a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10a      	bne.n	8006286 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006282:	bf00      	nop
 8006284:	e7fe      	b.n	8006284 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d103      	bne.n	8006294 <xQueueGenericSendFromISR+0x3c>
 800628c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <xQueueGenericSendFromISR+0x40>
 8006294:	2301      	movs	r3, #1
 8006296:	e000      	b.n	800629a <xQueueGenericSendFromISR+0x42>
 8006298:	2300      	movs	r3, #0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10a      	bne.n	80062b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062b0:	bf00      	nop
 80062b2:	e7fe      	b.n	80062b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d103      	bne.n	80062c2 <xQueueGenericSendFromISR+0x6a>
 80062ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d101      	bne.n	80062c6 <xQueueGenericSendFromISR+0x6e>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e000      	b.n	80062c8 <xQueueGenericSendFromISR+0x70>
 80062c6:	2300      	movs	r3, #0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10a      	bne.n	80062e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	623b      	str	r3, [r7, #32]
}
 80062de:	bf00      	nop
 80062e0:	e7fe      	b.n	80062e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062e2:	f001 ff51 	bl	8008188 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80062e6:	f3ef 8211 	mrs	r2, BASEPRI
 80062ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	61fa      	str	r2, [r7, #28]
 80062fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80062fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006300:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630a:	429a      	cmp	r2, r3
 800630c:	d302      	bcc.n	8006314 <xQueueGenericSendFromISR+0xbc>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b02      	cmp	r3, #2
 8006312:	d12f      	bne.n	8006374 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006316:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800631a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800631e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006322:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	68b9      	ldr	r1, [r7, #8]
 8006328:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800632a:	f000 f911 	bl	8006550 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800632e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006332:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006336:	d112      	bne.n	800635e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	2b00      	cmp	r3, #0
 800633e:	d016      	beq.n	800636e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006342:	3324      	adds	r3, #36	; 0x24
 8006344:	4618      	mov	r0, r3
 8006346:	f000 fef7 	bl	8007138 <xTaskRemoveFromEventList>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00e      	beq.n	800636e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00b      	beq.n	800636e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	e007      	b.n	800636e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800635e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006362:	3301      	adds	r3, #1
 8006364:	b2db      	uxtb	r3, r3
 8006366:	b25a      	sxtb	r2, r3
 8006368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800636e:	2301      	movs	r3, #1
 8006370:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006372:	e001      	b.n	8006378 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006374:	2300      	movs	r3, #0
 8006376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006382:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006386:	4618      	mov	r0, r3
 8006388:	3740      	adds	r7, #64	; 0x40
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b08c      	sub	sp, #48	; 0x30
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800639c:	2300      	movs	r3, #0
 800639e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10a      	bne.n	80063c0 <xQueueReceive+0x30>
	__asm volatile
 80063aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	623b      	str	r3, [r7, #32]
}
 80063bc:	bf00      	nop
 80063be:	e7fe      	b.n	80063be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d103      	bne.n	80063ce <xQueueReceive+0x3e>
 80063c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <xQueueReceive+0x42>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e000      	b.n	80063d4 <xQueueReceive+0x44>
 80063d2:	2300      	movs	r3, #0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10a      	bne.n	80063ee <xQueueReceive+0x5e>
	__asm volatile
 80063d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	61fb      	str	r3, [r7, #28]
}
 80063ea:	bf00      	nop
 80063ec:	e7fe      	b.n	80063ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063ee:	f001 f88b 	bl	8007508 <xTaskGetSchedulerState>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d102      	bne.n	80063fe <xQueueReceive+0x6e>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <xQueueReceive+0x72>
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <xQueueReceive+0x74>
 8006402:	2300      	movs	r3, #0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10a      	bne.n	800641e <xQueueReceive+0x8e>
	__asm volatile
 8006408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	61bb      	str	r3, [r7, #24]
}
 800641a:	bf00      	nop
 800641c:	e7fe      	b.n	800641c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800641e:	f001 fdd1 	bl	8007fc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006426:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	2b00      	cmp	r3, #0
 800642c:	d01f      	beq.n	800646e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800642e:	68b9      	ldr	r1, [r7, #8]
 8006430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006432:	f000 f8f7 	bl	8006624 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	1e5a      	subs	r2, r3, #1
 800643a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800643e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00f      	beq.n	8006466 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006448:	3310      	adds	r3, #16
 800644a:	4618      	mov	r0, r3
 800644c:	f000 fe74 	bl	8007138 <xTaskRemoveFromEventList>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d007      	beq.n	8006466 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006456:	4b3d      	ldr	r3, [pc, #244]	; (800654c <xQueueReceive+0x1bc>)
 8006458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006466:	f001 fddd 	bl	8008024 <vPortExitCritical>
				return pdPASS;
 800646a:	2301      	movs	r3, #1
 800646c:	e069      	b.n	8006542 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d103      	bne.n	800647c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006474:	f001 fdd6 	bl	8008024 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006478:	2300      	movs	r3, #0
 800647a:	e062      	b.n	8006542 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800647c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d106      	bne.n	8006490 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006482:	f107 0310 	add.w	r3, r7, #16
 8006486:	4618      	mov	r0, r3
 8006488:	f000 fee0 	bl	800724c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800648c:	2301      	movs	r3, #1
 800648e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006490:	f001 fdc8 	bl	8008024 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006494:	f000 fc26 	bl	8006ce4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006498:	f001 fd94 	bl	8007fc4 <vPortEnterCritical>
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064a2:	b25b      	sxtb	r3, r3
 80064a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064a8:	d103      	bne.n	80064b2 <xQueueReceive+0x122>
 80064aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064b8:	b25b      	sxtb	r3, r3
 80064ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064be:	d103      	bne.n	80064c8 <xQueueReceive+0x138>
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064c8:	f001 fdac 	bl	8008024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064cc:	1d3a      	adds	r2, r7, #4
 80064ce:	f107 0310 	add.w	r3, r7, #16
 80064d2:	4611      	mov	r1, r2
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 fecf 	bl	8007278 <xTaskCheckForTimeOut>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d123      	bne.n	8006528 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064e2:	f000 f917 	bl	8006714 <prvIsQueueEmpty>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d017      	beq.n	800651c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	3324      	adds	r3, #36	; 0x24
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	4611      	mov	r1, r2
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 fdcf 	bl	8007098 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064fc:	f000 f8b8 	bl	8006670 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006500:	f000 fbfe 	bl	8006d00 <xTaskResumeAll>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d189      	bne.n	800641e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800650a:	4b10      	ldr	r3, [pc, #64]	; (800654c <xQueueReceive+0x1bc>)
 800650c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	e780      	b.n	800641e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800651c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800651e:	f000 f8a7 	bl	8006670 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006522:	f000 fbed 	bl	8006d00 <xTaskResumeAll>
 8006526:	e77a      	b.n	800641e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800652a:	f000 f8a1 	bl	8006670 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800652e:	f000 fbe7 	bl	8006d00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006534:	f000 f8ee 	bl	8006714 <prvIsQueueEmpty>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	f43f af6f 	beq.w	800641e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006540:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006542:	4618      	mov	r0, r3
 8006544:	3730      	adds	r7, #48	; 0x30
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	e000ed04 	.word	0xe000ed04

08006550 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800655c:	2300      	movs	r3, #0
 800655e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006564:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10d      	bne.n	800658a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d14d      	bne.n	8006612 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	4618      	mov	r0, r3
 800657c:	f000 ffe2 	bl	8007544 <xTaskPriorityDisinherit>
 8006580:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	609a      	str	r2, [r3, #8]
 8006588:	e043      	b.n	8006612 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d119      	bne.n	80065c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6858      	ldr	r0, [r3, #4]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006598:	461a      	mov	r2, r3
 800659a:	68b9      	ldr	r1, [r7, #8]
 800659c:	f011 f9a1 	bl	80178e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a8:	441a      	add	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	685a      	ldr	r2, [r3, #4]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d32b      	bcc.n	8006612 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	605a      	str	r2, [r3, #4]
 80065c2:	e026      	b.n	8006612 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	68d8      	ldr	r0, [r3, #12]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065cc:	461a      	mov	r2, r3
 80065ce:	68b9      	ldr	r1, [r7, #8]
 80065d0:	f011 f987 	bl	80178e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	68da      	ldr	r2, [r3, #12]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065dc:	425b      	negs	r3, r3
 80065de:	441a      	add	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	68da      	ldr	r2, [r3, #12]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d207      	bcs.n	8006600 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f8:	425b      	negs	r3, r3
 80065fa:	441a      	add	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b02      	cmp	r3, #2
 8006604:	d105      	bne.n	8006612 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	3b01      	subs	r3, #1
 8006610:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800661a:	697b      	ldr	r3, [r7, #20]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006632:	2b00      	cmp	r3, #0
 8006634:	d018      	beq.n	8006668 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	441a      	add	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	429a      	cmp	r2, r3
 800664e:	d303      	bcc.n	8006658 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68d9      	ldr	r1, [r3, #12]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006660:	461a      	mov	r2, r3
 8006662:	6838      	ldr	r0, [r7, #0]
 8006664:	f011 f93d 	bl	80178e2 <memcpy>
	}
}
 8006668:	bf00      	nop
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006678:	f001 fca4 	bl	8007fc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006682:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006684:	e011      	b.n	80066aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668a:	2b00      	cmp	r3, #0
 800668c:	d012      	beq.n	80066b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	3324      	adds	r3, #36	; 0x24
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fd50 	bl	8007138 <xTaskRemoveFromEventList>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800669e:	f000 fe4d 	bl	800733c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80066a2:	7bfb      	ldrb	r3, [r7, #15]
 80066a4:	3b01      	subs	r3, #1
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	dce9      	bgt.n	8006686 <prvUnlockQueue+0x16>
 80066b2:	e000      	b.n	80066b6 <prvUnlockQueue+0x46>
					break;
 80066b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	22ff      	movs	r2, #255	; 0xff
 80066ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80066be:	f001 fcb1 	bl	8008024 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80066c2:	f001 fc7f 	bl	8007fc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066ce:	e011      	b.n	80066f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d012      	beq.n	80066fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	3310      	adds	r3, #16
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 fd2b 	bl	8007138 <xTaskRemoveFromEventList>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d001      	beq.n	80066ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80066e8:	f000 fe28 	bl	800733c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80066ec:	7bbb      	ldrb	r3, [r7, #14]
 80066ee:	3b01      	subs	r3, #1
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	dce9      	bgt.n	80066d0 <prvUnlockQueue+0x60>
 80066fc:	e000      	b.n	8006700 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80066fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	22ff      	movs	r2, #255	; 0xff
 8006704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006708:	f001 fc8c 	bl	8008024 <vPortExitCritical>
}
 800670c:	bf00      	nop
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800671c:	f001 fc52 	bl	8007fc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006724:	2b00      	cmp	r3, #0
 8006726:	d102      	bne.n	800672e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006728:	2301      	movs	r3, #1
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	e001      	b.n	8006732 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800672e:	2300      	movs	r3, #0
 8006730:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006732:	f001 fc77 	bl	8008024 <vPortExitCritical>

	return xReturn;
 8006736:	68fb      	ldr	r3, [r7, #12]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006748:	f001 fc3c 	bl	8007fc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006754:	429a      	cmp	r2, r3
 8006756:	d102      	bne.n	800675e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006758:	2301      	movs	r3, #1
 800675a:	60fb      	str	r3, [r7, #12]
 800675c:	e001      	b.n	8006762 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800675e:	2300      	movs	r3, #0
 8006760:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006762:	f001 fc5f 	bl	8008024 <vPortExitCritical>

	return xReturn;
 8006766:	68fb      	ldr	r3, [r7, #12]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800677a:	2300      	movs	r3, #0
 800677c:	60fb      	str	r3, [r7, #12]
 800677e:	e014      	b.n	80067aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006780:	4a0f      	ldr	r2, [pc, #60]	; (80067c0 <vQueueAddToRegistry+0x50>)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10b      	bne.n	80067a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800678c:	490c      	ldr	r1, [pc, #48]	; (80067c0 <vQueueAddToRegistry+0x50>)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006796:	4a0a      	ldr	r2, [pc, #40]	; (80067c0 <vQueueAddToRegistry+0x50>)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	00db      	lsls	r3, r3, #3
 800679c:	4413      	add	r3, r2
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80067a2:	e006      	b.n	80067b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	3301      	adds	r3, #1
 80067a8:	60fb      	str	r3, [r7, #12]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2b07      	cmp	r3, #7
 80067ae:	d9e7      	bls.n	8006780 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80067b0:	bf00      	nop
 80067b2:	bf00      	nop
 80067b4:	3714      	adds	r7, #20
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	20005768 	.word	0x20005768

080067c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80067d4:	f001 fbf6 	bl	8007fc4 <vPortEnterCritical>
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067de:	b25b      	sxtb	r3, r3
 80067e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067e4:	d103      	bne.n	80067ee <vQueueWaitForMessageRestricted+0x2a>
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067f4:	b25b      	sxtb	r3, r3
 80067f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067fa:	d103      	bne.n	8006804 <vQueueWaitForMessageRestricted+0x40>
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006804:	f001 fc0e 	bl	8008024 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680c:	2b00      	cmp	r3, #0
 800680e:	d106      	bne.n	800681e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	3324      	adds	r3, #36	; 0x24
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	68b9      	ldr	r1, [r7, #8]
 8006818:	4618      	mov	r0, r3
 800681a:	f000 fc61 	bl	80070e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800681e:	6978      	ldr	r0, [r7, #20]
 8006820:	f7ff ff26 	bl	8006670 <prvUnlockQueue>
	}
 8006824:	bf00      	nop
 8006826:	3718      	adds	r7, #24
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800682c:	b580      	push	{r7, lr}
 800682e:	b08e      	sub	sp, #56	; 0x38
 8006830:	af04      	add	r7, sp, #16
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800683a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10a      	bne.n	8006856 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	623b      	str	r3, [r7, #32]
}
 8006852:	bf00      	nop
 8006854:	e7fe      	b.n	8006854 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10a      	bne.n	8006872 <xTaskCreateStatic+0x46>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	61fb      	str	r3, [r7, #28]
}
 800686e:	bf00      	nop
 8006870:	e7fe      	b.n	8006870 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006872:	23a8      	movs	r3, #168	; 0xa8
 8006874:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	2ba8      	cmp	r3, #168	; 0xa8
 800687a:	d00a      	beq.n	8006892 <xTaskCreateStatic+0x66>
	__asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	61bb      	str	r3, [r7, #24]
}
 800688e:	bf00      	nop
 8006890:	e7fe      	b.n	8006890 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006892:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006896:	2b00      	cmp	r3, #0
 8006898:	d01e      	beq.n	80068d8 <xTaskCreateStatic+0xac>
 800689a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800689c:	2b00      	cmp	r3, #0
 800689e:	d01b      	beq.n	80068d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80068a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	2202      	movs	r2, #2
 80068ae:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80068b2:	2300      	movs	r3, #0
 80068b4:	9303      	str	r3, [sp, #12]
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	9302      	str	r3, [sp, #8]
 80068ba:	f107 0314 	add.w	r3, r7, #20
 80068be:	9301      	str	r3, [sp, #4]
 80068c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	68b9      	ldr	r1, [r7, #8]
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 f850 	bl	8006970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068d2:	f000 f8f3 	bl	8006abc <prvAddNewTaskToReadyList>
 80068d6:	e001      	b.n	80068dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80068d8:	2300      	movs	r3, #0
 80068da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80068dc:	697b      	ldr	r3, [r7, #20]
	}
 80068de:	4618      	mov	r0, r3
 80068e0:	3728      	adds	r7, #40	; 0x28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b08c      	sub	sp, #48	; 0x30
 80068ea:	af04      	add	r7, sp, #16
 80068ec:	60f8      	str	r0, [r7, #12]
 80068ee:	60b9      	str	r1, [r7, #8]
 80068f0:	603b      	str	r3, [r7, #0]
 80068f2:	4613      	mov	r3, r2
 80068f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80068f6:	88fb      	ldrh	r3, [r7, #6]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4618      	mov	r0, r3
 80068fc:	f001 fc84 	bl	8008208 <pvPortMalloc>
 8006900:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00e      	beq.n	8006926 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006908:	20a8      	movs	r0, #168	; 0xa8
 800690a:	f001 fc7d 	bl	8008208 <pvPortMalloc>
 800690e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	631a      	str	r2, [r3, #48]	; 0x30
 800691c:	e005      	b.n	800692a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800691e:	6978      	ldr	r0, [r7, #20]
 8006920:	f001 fd3e 	bl	80083a0 <vPortFree>
 8006924:	e001      	b.n	800692a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006926:	2300      	movs	r3, #0
 8006928:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d017      	beq.n	8006960 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006938:	88fa      	ldrh	r2, [r7, #6]
 800693a:	2300      	movs	r3, #0
 800693c:	9303      	str	r3, [sp, #12]
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	9302      	str	r3, [sp, #8]
 8006942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006944:	9301      	str	r3, [sp, #4]
 8006946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	68b9      	ldr	r1, [r7, #8]
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f000 f80e 	bl	8006970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006954:	69f8      	ldr	r0, [r7, #28]
 8006956:	f000 f8b1 	bl	8006abc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800695a:	2301      	movs	r3, #1
 800695c:	61bb      	str	r3, [r7, #24]
 800695e:	e002      	b.n	8006966 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006964:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006966:	69bb      	ldr	r3, [r7, #24]
	}
 8006968:	4618      	mov	r0, r3
 800696a:	3720      	adds	r7, #32
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b088      	sub	sp, #32
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800697e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006980:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	461a      	mov	r2, r3
 8006988:	21a5      	movs	r1, #165	; 0xa5
 800698a:	f010 fe8b 	bl	80176a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006998:	3b01      	subs	r3, #1
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	f023 0307 	bic.w	r3, r3, #7
 80069a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00a      	beq.n	80069c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80069b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	617b      	str	r3, [r7, #20]
}
 80069c4:	bf00      	nop
 80069c6:	e7fe      	b.n	80069c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d01f      	beq.n	8006a0e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069ce:	2300      	movs	r3, #0
 80069d0:	61fb      	str	r3, [r7, #28]
 80069d2:	e012      	b.n	80069fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	4413      	add	r3, r2
 80069da:	7819      	ldrb	r1, [r3, #0]
 80069dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	4413      	add	r3, r2
 80069e2:	3334      	adds	r3, #52	; 0x34
 80069e4:	460a      	mov	r2, r1
 80069e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	4413      	add	r3, r2
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d006      	beq.n	8006a02 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	3301      	adds	r3, #1
 80069f8:	61fb      	str	r3, [r7, #28]
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	2b0f      	cmp	r3, #15
 80069fe:	d9e9      	bls.n	80069d4 <prvInitialiseNewTask+0x64>
 8006a00:	e000      	b.n	8006a04 <prvInitialiseNewTask+0x94>
			{
				break;
 8006a02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a0c:	e003      	b.n	8006a16 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a18:	2b37      	cmp	r3, #55	; 0x37
 8006a1a:	d901      	bls.n	8006a20 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a1c:	2337      	movs	r3, #55	; 0x37
 8006a1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2e:	2200      	movs	r2, #0
 8006a30:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	3304      	adds	r3, #4
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7ff f978 	bl	8005d2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3e:	3318      	adds	r3, #24
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7ff f973 	bl	8005d2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6e:	3354      	adds	r3, #84	; 0x54
 8006a70:	224c      	movs	r2, #76	; 0x4c
 8006a72:	2100      	movs	r1, #0
 8006a74:	4618      	mov	r0, r3
 8006a76:	f010 fe15 	bl	80176a4 <memset>
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7c:	4a0c      	ldr	r2, [pc, #48]	; (8006ab0 <prvInitialiseNewTask+0x140>)
 8006a7e:	659a      	str	r2, [r3, #88]	; 0x58
 8006a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a82:	4a0c      	ldr	r2, [pc, #48]	; (8006ab4 <prvInitialiseNewTask+0x144>)
 8006a84:	65da      	str	r2, [r3, #92]	; 0x5c
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	4a0b      	ldr	r2, [pc, #44]	; (8006ab8 <prvInitialiseNewTask+0x148>)
 8006a8a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	68f9      	ldr	r1, [r7, #12]
 8006a90:	69b8      	ldr	r0, [r7, #24]
 8006a92:	f001 f967 	bl	8007d64 <pxPortInitialiseStack>
 8006a96:	4602      	mov	r2, r0
 8006a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d002      	beq.n	8006aa8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006aa8:	bf00      	nop
 8006aaa:	3720      	adds	r7, #32
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	2000e584 	.word	0x2000e584
 8006ab4:	2000e5ec 	.word	0x2000e5ec
 8006ab8:	2000e654 	.word	0x2000e654

08006abc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ac4:	f001 fa7e 	bl	8007fc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ac8:	4b2d      	ldr	r3, [pc, #180]	; (8006b80 <prvAddNewTaskToReadyList+0xc4>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3301      	adds	r3, #1
 8006ace:	4a2c      	ldr	r2, [pc, #176]	; (8006b80 <prvAddNewTaskToReadyList+0xc4>)
 8006ad0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006ad2:	4b2c      	ldr	r3, [pc, #176]	; (8006b84 <prvAddNewTaskToReadyList+0xc8>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d109      	bne.n	8006aee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ada:	4a2a      	ldr	r2, [pc, #168]	; (8006b84 <prvAddNewTaskToReadyList+0xc8>)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ae0:	4b27      	ldr	r3, [pc, #156]	; (8006b80 <prvAddNewTaskToReadyList+0xc4>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d110      	bne.n	8006b0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ae8:	f000 fc4c 	bl	8007384 <prvInitialiseTaskLists>
 8006aec:	e00d      	b.n	8006b0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006aee:	4b26      	ldr	r3, [pc, #152]	; (8006b88 <prvAddNewTaskToReadyList+0xcc>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d109      	bne.n	8006b0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006af6:	4b23      	ldr	r3, [pc, #140]	; (8006b84 <prvAddNewTaskToReadyList+0xc8>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d802      	bhi.n	8006b0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b04:	4a1f      	ldr	r2, [pc, #124]	; (8006b84 <prvAddNewTaskToReadyList+0xc8>)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b0a:	4b20      	ldr	r3, [pc, #128]	; (8006b8c <prvAddNewTaskToReadyList+0xd0>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	4a1e      	ldr	r2, [pc, #120]	; (8006b8c <prvAddNewTaskToReadyList+0xd0>)
 8006b12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006b14:	4b1d      	ldr	r3, [pc, #116]	; (8006b8c <prvAddNewTaskToReadyList+0xd0>)
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b20:	4b1b      	ldr	r3, [pc, #108]	; (8006b90 <prvAddNewTaskToReadyList+0xd4>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d903      	bls.n	8006b30 <prvAddNewTaskToReadyList+0x74>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2c:	4a18      	ldr	r2, [pc, #96]	; (8006b90 <prvAddNewTaskToReadyList+0xd4>)
 8006b2e:	6013      	str	r3, [r2, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b34:	4613      	mov	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4a15      	ldr	r2, [pc, #84]	; (8006b94 <prvAddNewTaskToReadyList+0xd8>)
 8006b3e:	441a      	add	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	3304      	adds	r3, #4
 8006b44:	4619      	mov	r1, r3
 8006b46:	4610      	mov	r0, r2
 8006b48:	f7ff f8fd 	bl	8005d46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b4c:	f001 fa6a 	bl	8008024 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b50:	4b0d      	ldr	r3, [pc, #52]	; (8006b88 <prvAddNewTaskToReadyList+0xcc>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00e      	beq.n	8006b76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b58:	4b0a      	ldr	r3, [pc, #40]	; (8006b84 <prvAddNewTaskToReadyList+0xc8>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d207      	bcs.n	8006b76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b66:	4b0c      	ldr	r3, [pc, #48]	; (8006b98 <prvAddNewTaskToReadyList+0xdc>)
 8006b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b6c:	601a      	str	r2, [r3, #0]
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b76:	bf00      	nop
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20005c7c 	.word	0x20005c7c
 8006b84:	200057a8 	.word	0x200057a8
 8006b88:	20005c88 	.word	0x20005c88
 8006b8c:	20005c98 	.word	0x20005c98
 8006b90:	20005c84 	.word	0x20005c84
 8006b94:	200057ac 	.word	0x200057ac
 8006b98:	e000ed04 	.word	0xe000ed04

08006b9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d017      	beq.n	8006bde <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006bae:	4b13      	ldr	r3, [pc, #76]	; (8006bfc <vTaskDelay+0x60>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <vTaskDelay+0x30>
	__asm volatile
 8006bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	60bb      	str	r3, [r7, #8]
}
 8006bc8:	bf00      	nop
 8006bca:	e7fe      	b.n	8006bca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006bcc:	f000 f88a 	bl	8006ce4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fd24 	bl	8007620 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006bd8:	f000 f892 	bl	8006d00 <xTaskResumeAll>
 8006bdc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d107      	bne.n	8006bf4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006be4:	4b06      	ldr	r3, [pc, #24]	; (8006c00 <vTaskDelay+0x64>)
 8006be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bf4:	bf00      	nop
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	20005ca4 	.word	0x20005ca4
 8006c00:	e000ed04 	.word	0xe000ed04

08006c04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b08a      	sub	sp, #40	; 0x28
 8006c08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c12:	463a      	mov	r2, r7
 8006c14:	1d39      	adds	r1, r7, #4
 8006c16:	f107 0308 	add.w	r3, r7, #8
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7ff f832 	bl	8005c84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c20:	6839      	ldr	r1, [r7, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	9202      	str	r2, [sp, #8]
 8006c28:	9301      	str	r3, [sp, #4]
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	2300      	movs	r3, #0
 8006c30:	460a      	mov	r2, r1
 8006c32:	4924      	ldr	r1, [pc, #144]	; (8006cc4 <vTaskStartScheduler+0xc0>)
 8006c34:	4824      	ldr	r0, [pc, #144]	; (8006cc8 <vTaskStartScheduler+0xc4>)
 8006c36:	f7ff fdf9 	bl	800682c <xTaskCreateStatic>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	4a23      	ldr	r2, [pc, #140]	; (8006ccc <vTaskStartScheduler+0xc8>)
 8006c3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c40:	4b22      	ldr	r3, [pc, #136]	; (8006ccc <vTaskStartScheduler+0xc8>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d002      	beq.n	8006c4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	617b      	str	r3, [r7, #20]
 8006c4c:	e001      	b.n	8006c52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d102      	bne.n	8006c5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006c58:	f000 fd36 	bl	80076c8 <xTimerCreateTimerTask>
 8006c5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d11b      	bne.n	8006c9c <vTaskStartScheduler+0x98>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	613b      	str	r3, [r7, #16]
}
 8006c76:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c78:	4b15      	ldr	r3, [pc, #84]	; (8006cd0 <vTaskStartScheduler+0xcc>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3354      	adds	r3, #84	; 0x54
 8006c7e:	4a15      	ldr	r2, [pc, #84]	; (8006cd4 <vTaskStartScheduler+0xd0>)
 8006c80:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c82:	4b15      	ldr	r3, [pc, #84]	; (8006cd8 <vTaskStartScheduler+0xd4>)
 8006c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c88:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c8a:	4b14      	ldr	r3, [pc, #80]	; (8006cdc <vTaskStartScheduler+0xd8>)
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c90:	4b13      	ldr	r3, [pc, #76]	; (8006ce0 <vTaskStartScheduler+0xdc>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c96:	f001 f8f3 	bl	8007e80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c9a:	e00e      	b.n	8006cba <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ca2:	d10a      	bne.n	8006cba <vTaskStartScheduler+0xb6>
	__asm volatile
 8006ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca8:	f383 8811 	msr	BASEPRI, r3
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	60fb      	str	r3, [r7, #12]
}
 8006cb6:	bf00      	nop
 8006cb8:	e7fe      	b.n	8006cb8 <vTaskStartScheduler+0xb4>
}
 8006cba:	bf00      	nop
 8006cbc:	3718      	adds	r7, #24
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	0801869c 	.word	0x0801869c
 8006cc8:	08007355 	.word	0x08007355
 8006ccc:	20005ca0 	.word	0x20005ca0
 8006cd0:	200057a8 	.word	0x200057a8
 8006cd4:	200008b0 	.word	0x200008b0
 8006cd8:	20005c9c 	.word	0x20005c9c
 8006cdc:	20005c88 	.word	0x20005c88
 8006ce0:	20005c80 	.word	0x20005c80

08006ce4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ce8:	4b04      	ldr	r3, [pc, #16]	; (8006cfc <vTaskSuspendAll+0x18>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3301      	adds	r3, #1
 8006cee:	4a03      	ldr	r2, [pc, #12]	; (8006cfc <vTaskSuspendAll+0x18>)
 8006cf0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006cf2:	bf00      	nop
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	20005ca4 	.word	0x20005ca4

08006d00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d06:	2300      	movs	r3, #0
 8006d08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d0e:	4b42      	ldr	r3, [pc, #264]	; (8006e18 <xTaskResumeAll+0x118>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10a      	bne.n	8006d2c <xTaskResumeAll+0x2c>
	__asm volatile
 8006d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	603b      	str	r3, [r7, #0]
}
 8006d28:	bf00      	nop
 8006d2a:	e7fe      	b.n	8006d2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d2c:	f001 f94a 	bl	8007fc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d30:	4b39      	ldr	r3, [pc, #228]	; (8006e18 <xTaskResumeAll+0x118>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	3b01      	subs	r3, #1
 8006d36:	4a38      	ldr	r2, [pc, #224]	; (8006e18 <xTaskResumeAll+0x118>)
 8006d38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d3a:	4b37      	ldr	r3, [pc, #220]	; (8006e18 <xTaskResumeAll+0x118>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d162      	bne.n	8006e08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d42:	4b36      	ldr	r3, [pc, #216]	; (8006e1c <xTaskResumeAll+0x11c>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d05e      	beq.n	8006e08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d4a:	e02f      	b.n	8006dac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d4c:	4b34      	ldr	r3, [pc, #208]	; (8006e20 <xTaskResumeAll+0x120>)
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	3318      	adds	r3, #24
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7ff f851 	bl	8005e00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	3304      	adds	r3, #4
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7ff f84c 	bl	8005e00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d6c:	4b2d      	ldr	r3, [pc, #180]	; (8006e24 <xTaskResumeAll+0x124>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d903      	bls.n	8006d7c <xTaskResumeAll+0x7c>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d78:	4a2a      	ldr	r2, [pc, #168]	; (8006e24 <xTaskResumeAll+0x124>)
 8006d7a:	6013      	str	r3, [r2, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d80:	4613      	mov	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4a27      	ldr	r2, [pc, #156]	; (8006e28 <xTaskResumeAll+0x128>)
 8006d8a:	441a      	add	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	3304      	adds	r3, #4
 8006d90:	4619      	mov	r1, r3
 8006d92:	4610      	mov	r0, r2
 8006d94:	f7fe ffd7 	bl	8005d46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d9c:	4b23      	ldr	r3, [pc, #140]	; (8006e2c <xTaskResumeAll+0x12c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d302      	bcc.n	8006dac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006da6:	4b22      	ldr	r3, [pc, #136]	; (8006e30 <xTaskResumeAll+0x130>)
 8006da8:	2201      	movs	r2, #1
 8006daa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dac:	4b1c      	ldr	r3, [pc, #112]	; (8006e20 <xTaskResumeAll+0x120>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1cb      	bne.n	8006d4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d001      	beq.n	8006dbe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006dba:	f000 fb85 	bl	80074c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006dbe:	4b1d      	ldr	r3, [pc, #116]	; (8006e34 <xTaskResumeAll+0x134>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d010      	beq.n	8006dec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006dca:	f000 f847 	bl	8006e5c <xTaskIncrementTick>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d002      	beq.n	8006dda <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006dd4:	4b16      	ldr	r3, [pc, #88]	; (8006e30 <xTaskResumeAll+0x130>)
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1f1      	bne.n	8006dca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006de6:	4b13      	ldr	r3, [pc, #76]	; (8006e34 <xTaskResumeAll+0x134>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006dec:	4b10      	ldr	r3, [pc, #64]	; (8006e30 <xTaskResumeAll+0x130>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d009      	beq.n	8006e08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006df4:	2301      	movs	r3, #1
 8006df6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006df8:	4b0f      	ldr	r3, [pc, #60]	; (8006e38 <xTaskResumeAll+0x138>)
 8006dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e08:	f001 f90c 	bl	8008024 <vPortExitCritical>

	return xAlreadyYielded;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	20005ca4 	.word	0x20005ca4
 8006e1c:	20005c7c 	.word	0x20005c7c
 8006e20:	20005c3c 	.word	0x20005c3c
 8006e24:	20005c84 	.word	0x20005c84
 8006e28:	200057ac 	.word	0x200057ac
 8006e2c:	200057a8 	.word	0x200057a8
 8006e30:	20005c90 	.word	0x20005c90
 8006e34:	20005c8c 	.word	0x20005c8c
 8006e38:	e000ed04 	.word	0xe000ed04

08006e3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e42:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <xTaskGetTickCount+0x1c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e48:	687b      	ldr	r3, [r7, #4]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	20005c80 	.word	0x20005c80

08006e5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e62:	2300      	movs	r3, #0
 8006e64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e66:	4b4f      	ldr	r3, [pc, #316]	; (8006fa4 <xTaskIncrementTick+0x148>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f040 808f 	bne.w	8006f8e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e70:	4b4d      	ldr	r3, [pc, #308]	; (8006fa8 <xTaskIncrementTick+0x14c>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3301      	adds	r3, #1
 8006e76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e78:	4a4b      	ldr	r2, [pc, #300]	; (8006fa8 <xTaskIncrementTick+0x14c>)
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d120      	bne.n	8006ec6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e84:	4b49      	ldr	r3, [pc, #292]	; (8006fac <xTaskIncrementTick+0x150>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00a      	beq.n	8006ea4 <xTaskIncrementTick+0x48>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	603b      	str	r3, [r7, #0]
}
 8006ea0:	bf00      	nop
 8006ea2:	e7fe      	b.n	8006ea2 <xTaskIncrementTick+0x46>
 8006ea4:	4b41      	ldr	r3, [pc, #260]	; (8006fac <xTaskIncrementTick+0x150>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	60fb      	str	r3, [r7, #12]
 8006eaa:	4b41      	ldr	r3, [pc, #260]	; (8006fb0 <xTaskIncrementTick+0x154>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a3f      	ldr	r2, [pc, #252]	; (8006fac <xTaskIncrementTick+0x150>)
 8006eb0:	6013      	str	r3, [r2, #0]
 8006eb2:	4a3f      	ldr	r2, [pc, #252]	; (8006fb0 <xTaskIncrementTick+0x154>)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6013      	str	r3, [r2, #0]
 8006eb8:	4b3e      	ldr	r3, [pc, #248]	; (8006fb4 <xTaskIncrementTick+0x158>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	4a3d      	ldr	r2, [pc, #244]	; (8006fb4 <xTaskIncrementTick+0x158>)
 8006ec0:	6013      	str	r3, [r2, #0]
 8006ec2:	f000 fb01 	bl	80074c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ec6:	4b3c      	ldr	r3, [pc, #240]	; (8006fb8 <xTaskIncrementTick+0x15c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d349      	bcc.n	8006f64 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ed0:	4b36      	ldr	r3, [pc, #216]	; (8006fac <xTaskIncrementTick+0x150>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d104      	bne.n	8006ee4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eda:	4b37      	ldr	r3, [pc, #220]	; (8006fb8 <xTaskIncrementTick+0x15c>)
 8006edc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ee0:	601a      	str	r2, [r3, #0]
					break;
 8006ee2:	e03f      	b.n	8006f64 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ee4:	4b31      	ldr	r3, [pc, #196]	; (8006fac <xTaskIncrementTick+0x150>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d203      	bcs.n	8006f04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006efc:	4a2e      	ldr	r2, [pc, #184]	; (8006fb8 <xTaskIncrementTick+0x15c>)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f02:	e02f      	b.n	8006f64 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	3304      	adds	r3, #4
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7fe ff79 	bl	8005e00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d004      	beq.n	8006f20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	3318      	adds	r3, #24
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7fe ff70 	bl	8005e00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f24:	4b25      	ldr	r3, [pc, #148]	; (8006fbc <xTaskIncrementTick+0x160>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d903      	bls.n	8006f34 <xTaskIncrementTick+0xd8>
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f30:	4a22      	ldr	r2, [pc, #136]	; (8006fbc <xTaskIncrementTick+0x160>)
 8006f32:	6013      	str	r3, [r2, #0]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f38:	4613      	mov	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4a1f      	ldr	r2, [pc, #124]	; (8006fc0 <xTaskIncrementTick+0x164>)
 8006f42:	441a      	add	r2, r3
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	3304      	adds	r3, #4
 8006f48:	4619      	mov	r1, r3
 8006f4a:	4610      	mov	r0, r2
 8006f4c:	f7fe fefb 	bl	8005d46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f54:	4b1b      	ldr	r3, [pc, #108]	; (8006fc4 <xTaskIncrementTick+0x168>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d3b8      	bcc.n	8006ed0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f62:	e7b5      	b.n	8006ed0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f64:	4b17      	ldr	r3, [pc, #92]	; (8006fc4 <xTaskIncrementTick+0x168>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6a:	4915      	ldr	r1, [pc, #84]	; (8006fc0 <xTaskIncrementTick+0x164>)
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	440b      	add	r3, r1
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d901      	bls.n	8006f80 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006f80:	4b11      	ldr	r3, [pc, #68]	; (8006fc8 <xTaskIncrementTick+0x16c>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d007      	beq.n	8006f98 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	e004      	b.n	8006f98 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f8e:	4b0f      	ldr	r3, [pc, #60]	; (8006fcc <xTaskIncrementTick+0x170>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3301      	adds	r3, #1
 8006f94:	4a0d      	ldr	r2, [pc, #52]	; (8006fcc <xTaskIncrementTick+0x170>)
 8006f96:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f98:	697b      	ldr	r3, [r7, #20]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3718      	adds	r7, #24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	20005ca4 	.word	0x20005ca4
 8006fa8:	20005c80 	.word	0x20005c80
 8006fac:	20005c34 	.word	0x20005c34
 8006fb0:	20005c38 	.word	0x20005c38
 8006fb4:	20005c94 	.word	0x20005c94
 8006fb8:	20005c9c 	.word	0x20005c9c
 8006fbc:	20005c84 	.word	0x20005c84
 8006fc0:	200057ac 	.word	0x200057ac
 8006fc4:	200057a8 	.word	0x200057a8
 8006fc8:	20005c90 	.word	0x20005c90
 8006fcc:	20005c8c 	.word	0x20005c8c

08006fd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fd6:	4b2a      	ldr	r3, [pc, #168]	; (8007080 <vTaskSwitchContext+0xb0>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d003      	beq.n	8006fe6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fde:	4b29      	ldr	r3, [pc, #164]	; (8007084 <vTaskSwitchContext+0xb4>)
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fe4:	e046      	b.n	8007074 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006fe6:	4b27      	ldr	r3, [pc, #156]	; (8007084 <vTaskSwitchContext+0xb4>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fec:	4b26      	ldr	r3, [pc, #152]	; (8007088 <vTaskSwitchContext+0xb8>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	60fb      	str	r3, [r7, #12]
 8006ff2:	e010      	b.n	8007016 <vTaskSwitchContext+0x46>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10a      	bne.n	8007010 <vTaskSwitchContext+0x40>
	__asm volatile
 8006ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	607b      	str	r3, [r7, #4]
}
 800700c:	bf00      	nop
 800700e:	e7fe      	b.n	800700e <vTaskSwitchContext+0x3e>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	3b01      	subs	r3, #1
 8007014:	60fb      	str	r3, [r7, #12]
 8007016:	491d      	ldr	r1, [pc, #116]	; (800708c <vTaskSwitchContext+0xbc>)
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	4613      	mov	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4413      	add	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	440b      	add	r3, r1
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d0e4      	beq.n	8006ff4 <vTaskSwitchContext+0x24>
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	4613      	mov	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4a15      	ldr	r2, [pc, #84]	; (800708c <vTaskSwitchContext+0xbc>)
 8007036:	4413      	add	r3, r2
 8007038:	60bb      	str	r3, [r7, #8]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	605a      	str	r2, [r3, #4]
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	3308      	adds	r3, #8
 800704c:	429a      	cmp	r2, r3
 800704e:	d104      	bne.n	800705a <vTaskSwitchContext+0x8a>
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	605a      	str	r2, [r3, #4]
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	4a0b      	ldr	r2, [pc, #44]	; (8007090 <vTaskSwitchContext+0xc0>)
 8007062:	6013      	str	r3, [r2, #0]
 8007064:	4a08      	ldr	r2, [pc, #32]	; (8007088 <vTaskSwitchContext+0xb8>)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800706a:	4b09      	ldr	r3, [pc, #36]	; (8007090 <vTaskSwitchContext+0xc0>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3354      	adds	r3, #84	; 0x54
 8007070:	4a08      	ldr	r2, [pc, #32]	; (8007094 <vTaskSwitchContext+0xc4>)
 8007072:	6013      	str	r3, [r2, #0]
}
 8007074:	bf00      	nop
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	20005ca4 	.word	0x20005ca4
 8007084:	20005c90 	.word	0x20005c90
 8007088:	20005c84 	.word	0x20005c84
 800708c:	200057ac 	.word	0x200057ac
 8007090:	200057a8 	.word	0x200057a8
 8007094:	200008b0 	.word	0x200008b0

08007098 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10a      	bne.n	80070be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80070a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ac:	f383 8811 	msr	BASEPRI, r3
 80070b0:	f3bf 8f6f 	isb	sy
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	60fb      	str	r3, [r7, #12]
}
 80070ba:	bf00      	nop
 80070bc:	e7fe      	b.n	80070bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070be:	4b07      	ldr	r3, [pc, #28]	; (80070dc <vTaskPlaceOnEventList+0x44>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3318      	adds	r3, #24
 80070c4:	4619      	mov	r1, r3
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7fe fe61 	bl	8005d8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070cc:	2101      	movs	r1, #1
 80070ce:	6838      	ldr	r0, [r7, #0]
 80070d0:	f000 faa6 	bl	8007620 <prvAddCurrentTaskToDelayedList>
}
 80070d4:	bf00      	nop
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	200057a8 	.word	0x200057a8

080070e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10a      	bne.n	8007108 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80070f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	617b      	str	r3, [r7, #20]
}
 8007104:	bf00      	nop
 8007106:	e7fe      	b.n	8007106 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007108:	4b0a      	ldr	r3, [pc, #40]	; (8007134 <vTaskPlaceOnEventListRestricted+0x54>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	3318      	adds	r3, #24
 800710e:	4619      	mov	r1, r3
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f7fe fe18 	bl	8005d46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800711c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007120:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007122:	6879      	ldr	r1, [r7, #4]
 8007124:	68b8      	ldr	r0, [r7, #8]
 8007126:	f000 fa7b 	bl	8007620 <prvAddCurrentTaskToDelayedList>
	}
 800712a:	bf00      	nop
 800712c:	3718      	adds	r7, #24
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	200057a8 	.word	0x200057a8

08007138 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10a      	bne.n	8007164 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	60fb      	str	r3, [r7, #12]
}
 8007160:	bf00      	nop
 8007162:	e7fe      	b.n	8007162 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	3318      	adds	r3, #24
 8007168:	4618      	mov	r0, r3
 800716a:	f7fe fe49 	bl	8005e00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800716e:	4b1e      	ldr	r3, [pc, #120]	; (80071e8 <xTaskRemoveFromEventList+0xb0>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d11d      	bne.n	80071b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	3304      	adds	r3, #4
 800717a:	4618      	mov	r0, r3
 800717c:	f7fe fe40 	bl	8005e00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007184:	4b19      	ldr	r3, [pc, #100]	; (80071ec <xTaskRemoveFromEventList+0xb4>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	429a      	cmp	r2, r3
 800718a:	d903      	bls.n	8007194 <xTaskRemoveFromEventList+0x5c>
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007190:	4a16      	ldr	r2, [pc, #88]	; (80071ec <xTaskRemoveFromEventList+0xb4>)
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007198:	4613      	mov	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4a13      	ldr	r2, [pc, #76]	; (80071f0 <xTaskRemoveFromEventList+0xb8>)
 80071a2:	441a      	add	r2, r3
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	3304      	adds	r3, #4
 80071a8:	4619      	mov	r1, r3
 80071aa:	4610      	mov	r0, r2
 80071ac:	f7fe fdcb 	bl	8005d46 <vListInsertEnd>
 80071b0:	e005      	b.n	80071be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	3318      	adds	r3, #24
 80071b6:	4619      	mov	r1, r3
 80071b8:	480e      	ldr	r0, [pc, #56]	; (80071f4 <xTaskRemoveFromEventList+0xbc>)
 80071ba:	f7fe fdc4 	bl	8005d46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c2:	4b0d      	ldr	r3, [pc, #52]	; (80071f8 <xTaskRemoveFromEventList+0xc0>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d905      	bls.n	80071d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80071cc:	2301      	movs	r3, #1
 80071ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80071d0:	4b0a      	ldr	r3, [pc, #40]	; (80071fc <xTaskRemoveFromEventList+0xc4>)
 80071d2:	2201      	movs	r2, #1
 80071d4:	601a      	str	r2, [r3, #0]
 80071d6:	e001      	b.n	80071dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80071d8:	2300      	movs	r3, #0
 80071da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80071dc:	697b      	ldr	r3, [r7, #20]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3718      	adds	r7, #24
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	20005ca4 	.word	0x20005ca4
 80071ec:	20005c84 	.word	0x20005c84
 80071f0:	200057ac 	.word	0x200057ac
 80071f4:	20005c3c 	.word	0x20005c3c
 80071f8:	200057a8 	.word	0x200057a8
 80071fc:	20005c90 	.word	0x20005c90

08007200 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10a      	bne.n	8007224 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	60fb      	str	r3, [r7, #12]
}
 8007220:	bf00      	nop
 8007222:	e7fe      	b.n	8007222 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8007224:	f000 fece 	bl	8007fc4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007228:	4b06      	ldr	r3, [pc, #24]	; (8007244 <vTaskSetTimeOutState+0x44>)
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007230:	4b05      	ldr	r3, [pc, #20]	; (8007248 <vTaskSetTimeOutState+0x48>)
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007238:	f000 fef4 	bl	8008024 <vPortExitCritical>
}
 800723c:	bf00      	nop
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	20005c94 	.word	0x20005c94
 8007248:	20005c80 	.word	0x20005c80

0800724c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007254:	4b06      	ldr	r3, [pc, #24]	; (8007270 <vTaskInternalSetTimeOutState+0x24>)
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800725c:	4b05      	ldr	r3, [pc, #20]	; (8007274 <vTaskInternalSetTimeOutState+0x28>)
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	605a      	str	r2, [r3, #4]
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	20005c94 	.word	0x20005c94
 8007274:	20005c80 	.word	0x20005c80

08007278 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b088      	sub	sp, #32
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10a      	bne.n	800729e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	613b      	str	r3, [r7, #16]
}
 800729a:	bf00      	nop
 800729c:	e7fe      	b.n	800729c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10a      	bne.n	80072ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80072a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	60fb      	str	r3, [r7, #12]
}
 80072b6:	bf00      	nop
 80072b8:	e7fe      	b.n	80072b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80072ba:	f000 fe83 	bl	8007fc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80072be:	4b1d      	ldr	r3, [pc, #116]	; (8007334 <xTaskCheckForTimeOut+0xbc>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	69ba      	ldr	r2, [r7, #24]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072d6:	d102      	bne.n	80072de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80072d8:	2300      	movs	r3, #0
 80072da:	61fb      	str	r3, [r7, #28]
 80072dc:	e023      	b.n	8007326 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	4b15      	ldr	r3, [pc, #84]	; (8007338 <xTaskCheckForTimeOut+0xc0>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d007      	beq.n	80072fa <xTaskCheckForTimeOut+0x82>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	69ba      	ldr	r2, [r7, #24]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d302      	bcc.n	80072fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80072f4:	2301      	movs	r3, #1
 80072f6:	61fb      	str	r3, [r7, #28]
 80072f8:	e015      	b.n	8007326 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	429a      	cmp	r2, r3
 8007302:	d20b      	bcs.n	800731c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	1ad2      	subs	r2, r2, r3
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f7ff ff9b 	bl	800724c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007316:	2300      	movs	r3, #0
 8007318:	61fb      	str	r3, [r7, #28]
 800731a:	e004      	b.n	8007326 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	2200      	movs	r2, #0
 8007320:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007322:	2301      	movs	r3, #1
 8007324:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007326:	f000 fe7d 	bl	8008024 <vPortExitCritical>

	return xReturn;
 800732a:	69fb      	ldr	r3, [r7, #28]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3720      	adds	r7, #32
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	20005c80 	.word	0x20005c80
 8007338:	20005c94 	.word	0x20005c94

0800733c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800733c:	b480      	push	{r7}
 800733e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007340:	4b03      	ldr	r3, [pc, #12]	; (8007350 <vTaskMissedYield+0x14>)
 8007342:	2201      	movs	r2, #1
 8007344:	601a      	str	r2, [r3, #0]
}
 8007346:	bf00      	nop
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	20005c90 	.word	0x20005c90

08007354 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800735c:	f000 f852 	bl	8007404 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007360:	4b06      	ldr	r3, [pc, #24]	; (800737c <prvIdleTask+0x28>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d9f9      	bls.n	800735c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007368:	4b05      	ldr	r3, [pc, #20]	; (8007380 <prvIdleTask+0x2c>)
 800736a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800736e:	601a      	str	r2, [r3, #0]
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007378:	e7f0      	b.n	800735c <prvIdleTask+0x8>
 800737a:	bf00      	nop
 800737c:	200057ac 	.word	0x200057ac
 8007380:	e000ed04 	.word	0xe000ed04

08007384 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800738a:	2300      	movs	r3, #0
 800738c:	607b      	str	r3, [r7, #4]
 800738e:	e00c      	b.n	80073aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	4613      	mov	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4a12      	ldr	r2, [pc, #72]	; (80073e4 <prvInitialiseTaskLists+0x60>)
 800739c:	4413      	add	r3, r2
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fe fca4 	bl	8005cec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	3301      	adds	r3, #1
 80073a8:	607b      	str	r3, [r7, #4]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b37      	cmp	r3, #55	; 0x37
 80073ae:	d9ef      	bls.n	8007390 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80073b0:	480d      	ldr	r0, [pc, #52]	; (80073e8 <prvInitialiseTaskLists+0x64>)
 80073b2:	f7fe fc9b 	bl	8005cec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80073b6:	480d      	ldr	r0, [pc, #52]	; (80073ec <prvInitialiseTaskLists+0x68>)
 80073b8:	f7fe fc98 	bl	8005cec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80073bc:	480c      	ldr	r0, [pc, #48]	; (80073f0 <prvInitialiseTaskLists+0x6c>)
 80073be:	f7fe fc95 	bl	8005cec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80073c2:	480c      	ldr	r0, [pc, #48]	; (80073f4 <prvInitialiseTaskLists+0x70>)
 80073c4:	f7fe fc92 	bl	8005cec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80073c8:	480b      	ldr	r0, [pc, #44]	; (80073f8 <prvInitialiseTaskLists+0x74>)
 80073ca:	f7fe fc8f 	bl	8005cec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80073ce:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <prvInitialiseTaskLists+0x78>)
 80073d0:	4a05      	ldr	r2, [pc, #20]	; (80073e8 <prvInitialiseTaskLists+0x64>)
 80073d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80073d4:	4b0a      	ldr	r3, [pc, #40]	; (8007400 <prvInitialiseTaskLists+0x7c>)
 80073d6:	4a05      	ldr	r2, [pc, #20]	; (80073ec <prvInitialiseTaskLists+0x68>)
 80073d8:	601a      	str	r2, [r3, #0]
}
 80073da:	bf00      	nop
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	200057ac 	.word	0x200057ac
 80073e8:	20005c0c 	.word	0x20005c0c
 80073ec:	20005c20 	.word	0x20005c20
 80073f0:	20005c3c 	.word	0x20005c3c
 80073f4:	20005c50 	.word	0x20005c50
 80073f8:	20005c68 	.word	0x20005c68
 80073fc:	20005c34 	.word	0x20005c34
 8007400:	20005c38 	.word	0x20005c38

08007404 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800740a:	e019      	b.n	8007440 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800740c:	f000 fdda 	bl	8007fc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007410:	4b10      	ldr	r3, [pc, #64]	; (8007454 <prvCheckTasksWaitingTermination+0x50>)
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	3304      	adds	r3, #4
 800741c:	4618      	mov	r0, r3
 800741e:	f7fe fcef 	bl	8005e00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007422:	4b0d      	ldr	r3, [pc, #52]	; (8007458 <prvCheckTasksWaitingTermination+0x54>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3b01      	subs	r3, #1
 8007428:	4a0b      	ldr	r2, [pc, #44]	; (8007458 <prvCheckTasksWaitingTermination+0x54>)
 800742a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800742c:	4b0b      	ldr	r3, [pc, #44]	; (800745c <prvCheckTasksWaitingTermination+0x58>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3b01      	subs	r3, #1
 8007432:	4a0a      	ldr	r2, [pc, #40]	; (800745c <prvCheckTasksWaitingTermination+0x58>)
 8007434:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007436:	f000 fdf5 	bl	8008024 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f810 	bl	8007460 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007440:	4b06      	ldr	r3, [pc, #24]	; (800745c <prvCheckTasksWaitingTermination+0x58>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1e1      	bne.n	800740c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007448:	bf00      	nop
 800744a:	bf00      	nop
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	20005c50 	.word	0x20005c50
 8007458:	20005c7c 	.word	0x20005c7c
 800745c:	20005c64 	.word	0x20005c64

08007460 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	3354      	adds	r3, #84	; 0x54
 800746c:	4618      	mov	r0, r3
 800746e:	f010 f967 	bl	8017740 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007478:	2b00      	cmp	r3, #0
 800747a:	d108      	bne.n	800748e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007480:	4618      	mov	r0, r3
 8007482:	f000 ff8d 	bl	80083a0 <vPortFree>
				vPortFree( pxTCB );
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 ff8a 	bl	80083a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800748c:	e018      	b.n	80074c0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007494:	2b01      	cmp	r3, #1
 8007496:	d103      	bne.n	80074a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 ff81 	bl	80083a0 <vPortFree>
	}
 800749e:	e00f      	b.n	80074c0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d00a      	beq.n	80074c0 <prvDeleteTCB+0x60>
	__asm volatile
 80074aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	60fb      	str	r3, [r7, #12]
}
 80074bc:	bf00      	nop
 80074be:	e7fe      	b.n	80074be <prvDeleteTCB+0x5e>
	}
 80074c0:	bf00      	nop
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074ce:	4b0c      	ldr	r3, [pc, #48]	; (8007500 <prvResetNextTaskUnblockTime+0x38>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d104      	bne.n	80074e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80074d8:	4b0a      	ldr	r3, [pc, #40]	; (8007504 <prvResetNextTaskUnblockTime+0x3c>)
 80074da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80074e0:	e008      	b.n	80074f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074e2:	4b07      	ldr	r3, [pc, #28]	; (8007500 <prvResetNextTaskUnblockTime+0x38>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	4a04      	ldr	r2, [pc, #16]	; (8007504 <prvResetNextTaskUnblockTime+0x3c>)
 80074f2:	6013      	str	r3, [r2, #0]
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr
 8007500:	20005c34 	.word	0x20005c34
 8007504:	20005c9c 	.word	0x20005c9c

08007508 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800750e:	4b0b      	ldr	r3, [pc, #44]	; (800753c <xTaskGetSchedulerState+0x34>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d102      	bne.n	800751c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007516:	2301      	movs	r3, #1
 8007518:	607b      	str	r3, [r7, #4]
 800751a:	e008      	b.n	800752e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800751c:	4b08      	ldr	r3, [pc, #32]	; (8007540 <xTaskGetSchedulerState+0x38>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d102      	bne.n	800752a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007524:	2302      	movs	r3, #2
 8007526:	607b      	str	r3, [r7, #4]
 8007528:	e001      	b.n	800752e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800752a:	2300      	movs	r3, #0
 800752c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800752e:	687b      	ldr	r3, [r7, #4]
	}
 8007530:	4618      	mov	r0, r3
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	20005c88 	.word	0x20005c88
 8007540:	20005ca4 	.word	0x20005ca4

08007544 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007544:	b580      	push	{r7, lr}
 8007546:	b086      	sub	sp, #24
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007550:	2300      	movs	r3, #0
 8007552:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d056      	beq.n	8007608 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800755a:	4b2e      	ldr	r3, [pc, #184]	; (8007614 <xTaskPriorityDisinherit+0xd0>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	429a      	cmp	r2, r3
 8007562:	d00a      	beq.n	800757a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	60fb      	str	r3, [r7, #12]
}
 8007576:	bf00      	nop
 8007578:	e7fe      	b.n	8007578 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10a      	bne.n	8007598 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	60bb      	str	r3, [r7, #8]
}
 8007594:	bf00      	nop
 8007596:	e7fe      	b.n	8007596 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800759c:	1e5a      	subs	r2, r3, #1
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d02c      	beq.n	8007608 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d128      	bne.n	8007608 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	3304      	adds	r3, #4
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fe fc20 	bl	8005e00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d8:	4b0f      	ldr	r3, [pc, #60]	; (8007618 <xTaskPriorityDisinherit+0xd4>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d903      	bls.n	80075e8 <xTaskPriorityDisinherit+0xa4>
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e4:	4a0c      	ldr	r2, [pc, #48]	; (8007618 <xTaskPriorityDisinherit+0xd4>)
 80075e6:	6013      	str	r3, [r2, #0]
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ec:	4613      	mov	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4a09      	ldr	r2, [pc, #36]	; (800761c <xTaskPriorityDisinherit+0xd8>)
 80075f6:	441a      	add	r2, r3
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	3304      	adds	r3, #4
 80075fc:	4619      	mov	r1, r3
 80075fe:	4610      	mov	r0, r2
 8007600:	f7fe fba1 	bl	8005d46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007604:	2301      	movs	r3, #1
 8007606:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007608:	697b      	ldr	r3, [r7, #20]
	}
 800760a:	4618      	mov	r0, r3
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	200057a8 	.word	0x200057a8
 8007618:	20005c84 	.word	0x20005c84
 800761c:	200057ac 	.word	0x200057ac

08007620 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800762a:	4b21      	ldr	r3, [pc, #132]	; (80076b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007630:	4b20      	ldr	r3, [pc, #128]	; (80076b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3304      	adds	r3, #4
 8007636:	4618      	mov	r0, r3
 8007638:	f7fe fbe2 	bl	8005e00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007642:	d10a      	bne.n	800765a <prvAddCurrentTaskToDelayedList+0x3a>
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d007      	beq.n	800765a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800764a:	4b1a      	ldr	r3, [pc, #104]	; (80076b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	3304      	adds	r3, #4
 8007650:	4619      	mov	r1, r3
 8007652:	4819      	ldr	r0, [pc, #100]	; (80076b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007654:	f7fe fb77 	bl	8005d46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007658:	e026      	b.n	80076a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4413      	add	r3, r2
 8007660:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007662:	4b14      	ldr	r3, [pc, #80]	; (80076b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	429a      	cmp	r2, r3
 8007670:	d209      	bcs.n	8007686 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007672:	4b12      	ldr	r3, [pc, #72]	; (80076bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	4b0f      	ldr	r3, [pc, #60]	; (80076b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	3304      	adds	r3, #4
 800767c:	4619      	mov	r1, r3
 800767e:	4610      	mov	r0, r2
 8007680:	f7fe fb85 	bl	8005d8e <vListInsert>
}
 8007684:	e010      	b.n	80076a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007686:	4b0e      	ldr	r3, [pc, #56]	; (80076c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	4b0a      	ldr	r3, [pc, #40]	; (80076b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3304      	adds	r3, #4
 8007690:	4619      	mov	r1, r3
 8007692:	4610      	mov	r0, r2
 8007694:	f7fe fb7b 	bl	8005d8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007698:	4b0a      	ldr	r3, [pc, #40]	; (80076c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d202      	bcs.n	80076a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80076a2:	4a08      	ldr	r2, [pc, #32]	; (80076c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	6013      	str	r3, [r2, #0]
}
 80076a8:	bf00      	nop
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	20005c80 	.word	0x20005c80
 80076b4:	200057a8 	.word	0x200057a8
 80076b8:	20005c68 	.word	0x20005c68
 80076bc:	20005c38 	.word	0x20005c38
 80076c0:	20005c34 	.word	0x20005c34
 80076c4:	20005c9c 	.word	0x20005c9c

080076c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b08a      	sub	sp, #40	; 0x28
 80076cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80076ce:	2300      	movs	r3, #0
 80076d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80076d2:	f000 fb07 	bl	8007ce4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80076d6:	4b1c      	ldr	r3, [pc, #112]	; (8007748 <xTimerCreateTimerTask+0x80>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d021      	beq.n	8007722 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80076de:	2300      	movs	r3, #0
 80076e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80076e6:	1d3a      	adds	r2, r7, #4
 80076e8:	f107 0108 	add.w	r1, r7, #8
 80076ec:	f107 030c 	add.w	r3, r7, #12
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7fe fae1 	bl	8005cb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	9202      	str	r2, [sp, #8]
 80076fe:	9301      	str	r3, [sp, #4]
 8007700:	2302      	movs	r3, #2
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	2300      	movs	r3, #0
 8007706:	460a      	mov	r2, r1
 8007708:	4910      	ldr	r1, [pc, #64]	; (800774c <xTimerCreateTimerTask+0x84>)
 800770a:	4811      	ldr	r0, [pc, #68]	; (8007750 <xTimerCreateTimerTask+0x88>)
 800770c:	f7ff f88e 	bl	800682c <xTaskCreateStatic>
 8007710:	4603      	mov	r3, r0
 8007712:	4a10      	ldr	r2, [pc, #64]	; (8007754 <xTimerCreateTimerTask+0x8c>)
 8007714:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007716:	4b0f      	ldr	r3, [pc, #60]	; (8007754 <xTimerCreateTimerTask+0x8c>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d001      	beq.n	8007722 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800771e:	2301      	movs	r3, #1
 8007720:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10a      	bne.n	800773e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772c:	f383 8811 	msr	BASEPRI, r3
 8007730:	f3bf 8f6f 	isb	sy
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	613b      	str	r3, [r7, #16]
}
 800773a:	bf00      	nop
 800773c:	e7fe      	b.n	800773c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800773e:	697b      	ldr	r3, [r7, #20]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	20005cd8 	.word	0x20005cd8
 800774c:	080186a4 	.word	0x080186a4
 8007750:	0800788d 	.word	0x0800788d
 8007754:	20005cdc 	.word	0x20005cdc

08007758 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b08a      	sub	sp, #40	; 0x28
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
 8007764:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007766:	2300      	movs	r3, #0
 8007768:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10a      	bne.n	8007786 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	623b      	str	r3, [r7, #32]
}
 8007782:	bf00      	nop
 8007784:	e7fe      	b.n	8007784 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007786:	4b1a      	ldr	r3, [pc, #104]	; (80077f0 <xTimerGenericCommand+0x98>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d02a      	beq.n	80077e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	2b05      	cmp	r3, #5
 800779e:	dc18      	bgt.n	80077d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80077a0:	f7ff feb2 	bl	8007508 <xTaskGetSchedulerState>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d109      	bne.n	80077be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80077aa:	4b11      	ldr	r3, [pc, #68]	; (80077f0 <xTimerGenericCommand+0x98>)
 80077ac:	6818      	ldr	r0, [r3, #0]
 80077ae:	f107 0110 	add.w	r1, r7, #16
 80077b2:	2300      	movs	r3, #0
 80077b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077b6:	f7fe fc51 	bl	800605c <xQueueGenericSend>
 80077ba:	6278      	str	r0, [r7, #36]	; 0x24
 80077bc:	e012      	b.n	80077e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80077be:	4b0c      	ldr	r3, [pc, #48]	; (80077f0 <xTimerGenericCommand+0x98>)
 80077c0:	6818      	ldr	r0, [r3, #0]
 80077c2:	f107 0110 	add.w	r1, r7, #16
 80077c6:	2300      	movs	r3, #0
 80077c8:	2200      	movs	r2, #0
 80077ca:	f7fe fc47 	bl	800605c <xQueueGenericSend>
 80077ce:	6278      	str	r0, [r7, #36]	; 0x24
 80077d0:	e008      	b.n	80077e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80077d2:	4b07      	ldr	r3, [pc, #28]	; (80077f0 <xTimerGenericCommand+0x98>)
 80077d4:	6818      	ldr	r0, [r3, #0]
 80077d6:	f107 0110 	add.w	r1, r7, #16
 80077da:	2300      	movs	r3, #0
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	f7fe fd3b 	bl	8006258 <xQueueGenericSendFromISR>
 80077e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3728      	adds	r7, #40	; 0x28
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	20005cd8 	.word	0x20005cd8

080077f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b088      	sub	sp, #32
 80077f8:	af02      	add	r7, sp, #8
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077fe:	4b22      	ldr	r3, [pc, #136]	; (8007888 <prvProcessExpiredTimer+0x94>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	3304      	adds	r3, #4
 800780c:	4618      	mov	r0, r3
 800780e:	f7fe faf7 	bl	8005e00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007818:	f003 0304 	and.w	r3, r3, #4
 800781c:	2b00      	cmp	r3, #0
 800781e:	d022      	beq.n	8007866 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	699a      	ldr	r2, [r3, #24]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	18d1      	adds	r1, r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	6978      	ldr	r0, [r7, #20]
 800782e:	f000 f8d1 	bl	80079d4 <prvInsertTimerInActiveList>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d01f      	beq.n	8007878 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007838:	2300      	movs	r3, #0
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	2300      	movs	r3, #0
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	2100      	movs	r1, #0
 8007842:	6978      	ldr	r0, [r7, #20]
 8007844:	f7ff ff88 	bl	8007758 <xTimerGenericCommand>
 8007848:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d113      	bne.n	8007878 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	60fb      	str	r3, [r7, #12]
}
 8007862:	bf00      	nop
 8007864:	e7fe      	b.n	8007864 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800786c:	f023 0301 	bic.w	r3, r3, #1
 8007870:	b2da      	uxtb	r2, r3
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	6a1b      	ldr	r3, [r3, #32]
 800787c:	6978      	ldr	r0, [r7, #20]
 800787e:	4798      	blx	r3
}
 8007880:	bf00      	nop
 8007882:	3718      	adds	r7, #24
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	20005cd0 	.word	0x20005cd0

0800788c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007894:	f107 0308 	add.w	r3, r7, #8
 8007898:	4618      	mov	r0, r3
 800789a:	f000 f857 	bl	800794c <prvGetNextExpireTime>
 800789e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	4619      	mov	r1, r3
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 f803 	bl	80078b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80078aa:	f000 f8d5 	bl	8007a58 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078ae:	e7f1      	b.n	8007894 <prvTimerTask+0x8>

080078b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80078ba:	f7ff fa13 	bl	8006ce4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078be:	f107 0308 	add.w	r3, r7, #8
 80078c2:	4618      	mov	r0, r3
 80078c4:	f000 f866 	bl	8007994 <prvSampleTimeNow>
 80078c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d130      	bne.n	8007932 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10a      	bne.n	80078ec <prvProcessTimerOrBlockTask+0x3c>
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d806      	bhi.n	80078ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80078de:	f7ff fa0f 	bl	8006d00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80078e2:	68f9      	ldr	r1, [r7, #12]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7ff ff85 	bl	80077f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80078ea:	e024      	b.n	8007936 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d008      	beq.n	8007904 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80078f2:	4b13      	ldr	r3, [pc, #76]	; (8007940 <prvProcessTimerOrBlockTask+0x90>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <prvProcessTimerOrBlockTask+0x50>
 80078fc:	2301      	movs	r3, #1
 80078fe:	e000      	b.n	8007902 <prvProcessTimerOrBlockTask+0x52>
 8007900:	2300      	movs	r3, #0
 8007902:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007904:	4b0f      	ldr	r3, [pc, #60]	; (8007944 <prvProcessTimerOrBlockTask+0x94>)
 8007906:	6818      	ldr	r0, [r3, #0]
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	4619      	mov	r1, r3
 8007912:	f7fe ff57 	bl	80067c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007916:	f7ff f9f3 	bl	8006d00 <xTaskResumeAll>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10a      	bne.n	8007936 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007920:	4b09      	ldr	r3, [pc, #36]	; (8007948 <prvProcessTimerOrBlockTask+0x98>)
 8007922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007926:	601a      	str	r2, [r3, #0]
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	f3bf 8f6f 	isb	sy
}
 8007930:	e001      	b.n	8007936 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007932:	f7ff f9e5 	bl	8006d00 <xTaskResumeAll>
}
 8007936:	bf00      	nop
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	20005cd4 	.word	0x20005cd4
 8007944:	20005cd8 	.word	0x20005cd8
 8007948:	e000ed04 	.word	0xe000ed04

0800794c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007954:	4b0e      	ldr	r3, [pc, #56]	; (8007990 <prvGetNextExpireTime+0x44>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d101      	bne.n	8007962 <prvGetNextExpireTime+0x16>
 800795e:	2201      	movs	r2, #1
 8007960:	e000      	b.n	8007964 <prvGetNextExpireTime+0x18>
 8007962:	2200      	movs	r2, #0
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d105      	bne.n	800797c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007970:	4b07      	ldr	r3, [pc, #28]	; (8007990 <prvGetNextExpireTime+0x44>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	60fb      	str	r3, [r7, #12]
 800797a:	e001      	b.n	8007980 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800797c:	2300      	movs	r3, #0
 800797e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007980:	68fb      	ldr	r3, [r7, #12]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	20005cd0 	.word	0x20005cd0

08007994 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800799c:	f7ff fa4e 	bl	8006e3c <xTaskGetTickCount>
 80079a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80079a2:	4b0b      	ldr	r3, [pc, #44]	; (80079d0 <prvSampleTimeNow+0x3c>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d205      	bcs.n	80079b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80079ac:	f000 f936 	bl	8007c1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	e002      	b.n	80079be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80079be:	4a04      	ldr	r2, [pc, #16]	; (80079d0 <prvSampleTimeNow+0x3c>)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80079c4:	68fb      	ldr	r3, [r7, #12]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	20005ce0 	.word	0x20005ce0

080079d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
 80079e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80079e2:	2300      	movs	r3, #0
 80079e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d812      	bhi.n	8007a20 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	1ad2      	subs	r2, r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d302      	bcc.n	8007a0e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	617b      	str	r3, [r7, #20]
 8007a0c:	e01b      	b.n	8007a46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a0e:	4b10      	ldr	r3, [pc, #64]	; (8007a50 <prvInsertTimerInActiveList+0x7c>)
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	3304      	adds	r3, #4
 8007a16:	4619      	mov	r1, r3
 8007a18:	4610      	mov	r0, r2
 8007a1a:	f7fe f9b8 	bl	8005d8e <vListInsert>
 8007a1e:	e012      	b.n	8007a46 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d206      	bcs.n	8007a36 <prvInsertTimerInActiveList+0x62>
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d302      	bcc.n	8007a36 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a30:	2301      	movs	r3, #1
 8007a32:	617b      	str	r3, [r7, #20]
 8007a34:	e007      	b.n	8007a46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a36:	4b07      	ldr	r3, [pc, #28]	; (8007a54 <prvInsertTimerInActiveList+0x80>)
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	4619      	mov	r1, r3
 8007a40:	4610      	mov	r0, r2
 8007a42:	f7fe f9a4 	bl	8005d8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a46:	697b      	ldr	r3, [r7, #20]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3718      	adds	r7, #24
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	20005cd4 	.word	0x20005cd4
 8007a54:	20005cd0 	.word	0x20005cd0

08007a58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b08e      	sub	sp, #56	; 0x38
 8007a5c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a5e:	e0ca      	b.n	8007bf6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	da18      	bge.n	8007a98 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007a66:	1d3b      	adds	r3, r7, #4
 8007a68:	3304      	adds	r3, #4
 8007a6a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10a      	bne.n	8007a88 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	61fb      	str	r3, [r7, #28]
}
 8007a84:	bf00      	nop
 8007a86:	e7fe      	b.n	8007a86 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a8e:	6850      	ldr	r0, [r2, #4]
 8007a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a92:	6892      	ldr	r2, [r2, #8]
 8007a94:	4611      	mov	r1, r2
 8007a96:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f2c0 80ab 	blt.w	8007bf6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa6:	695b      	ldr	r3, [r3, #20]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d004      	beq.n	8007ab6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aae:	3304      	adds	r3, #4
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fe f9a5 	bl	8005e00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ab6:	463b      	mov	r3, r7
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7ff ff6b 	bl	8007994 <prvSampleTimeNow>
 8007abe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b09      	cmp	r3, #9
 8007ac4:	f200 8096 	bhi.w	8007bf4 <prvProcessReceivedCommands+0x19c>
 8007ac8:	a201      	add	r2, pc, #4	; (adr r2, 8007ad0 <prvProcessReceivedCommands+0x78>)
 8007aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ace:	bf00      	nop
 8007ad0:	08007af9 	.word	0x08007af9
 8007ad4:	08007af9 	.word	0x08007af9
 8007ad8:	08007af9 	.word	0x08007af9
 8007adc:	08007b6d 	.word	0x08007b6d
 8007ae0:	08007b81 	.word	0x08007b81
 8007ae4:	08007bcb 	.word	0x08007bcb
 8007ae8:	08007af9 	.word	0x08007af9
 8007aec:	08007af9 	.word	0x08007af9
 8007af0:	08007b6d 	.word	0x08007b6d
 8007af4:	08007b81 	.word	0x08007b81
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007afe:	f043 0301 	orr.w	r3, r3, #1
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	18d1      	adds	r1, r2, r3
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b18:	f7ff ff5c 	bl	80079d4 <prvInsertTimerInActiveList>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d069      	beq.n	8007bf6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b28:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b30:	f003 0304 	and.w	r3, r3, #4
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d05e      	beq.n	8007bf6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	441a      	add	r2, r3
 8007b40:	2300      	movs	r3, #0
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	2300      	movs	r3, #0
 8007b46:	2100      	movs	r1, #0
 8007b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b4a:	f7ff fe05 	bl	8007758 <xTimerGenericCommand>
 8007b4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b50:	6a3b      	ldr	r3, [r7, #32]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d14f      	bne.n	8007bf6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	61bb      	str	r3, [r7, #24]
}
 8007b68:	bf00      	nop
 8007b6a:	e7fe      	b.n	8007b6a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b72:	f023 0301 	bic.w	r3, r3, #1
 8007b76:	b2da      	uxtb	r2, r3
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007b7e:	e03a      	b.n	8007bf6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b86:	f043 0301 	orr.w	r3, r3, #1
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b96:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10a      	bne.n	8007bb6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	617b      	str	r3, [r7, #20]
}
 8007bb2:	bf00      	nop
 8007bb4:	e7fe      	b.n	8007bb4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb8:	699a      	ldr	r2, [r3, #24]
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbc:	18d1      	adds	r1, r2, r3
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bc4:	f7ff ff06 	bl	80079d4 <prvInsertTimerInActiveList>
					break;
 8007bc8:	e015      	b.n	8007bf6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bd0:	f003 0302 	and.w	r3, r3, #2
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d103      	bne.n	8007be0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007bd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bda:	f000 fbe1 	bl	80083a0 <vPortFree>
 8007bde:	e00a      	b.n	8007bf6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007be6:	f023 0301 	bic.w	r3, r3, #1
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007bf2:	e000      	b.n	8007bf6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007bf4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bf6:	4b08      	ldr	r3, [pc, #32]	; (8007c18 <prvProcessReceivedCommands+0x1c0>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	1d39      	adds	r1, r7, #4
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fe fbc6 	bl	8006390 <xQueueReceive>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f47f af2a 	bne.w	8007a60 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007c0c:	bf00      	nop
 8007c0e:	bf00      	nop
 8007c10:	3730      	adds	r7, #48	; 0x30
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	20005cd8 	.word	0x20005cd8

08007c1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b088      	sub	sp, #32
 8007c20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c22:	e048      	b.n	8007cb6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c24:	4b2d      	ldr	r3, [pc, #180]	; (8007cdc <prvSwitchTimerLists+0xc0>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c2e:	4b2b      	ldr	r3, [pc, #172]	; (8007cdc <prvSwitchTimerLists+0xc0>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fe f8df 	bl	8005e00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c50:	f003 0304 	and.w	r3, r3, #4
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d02e      	beq.n	8007cb6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	4413      	add	r3, r2
 8007c60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d90e      	bls.n	8007c88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c76:	4b19      	ldr	r3, [pc, #100]	; (8007cdc <prvSwitchTimerLists+0xc0>)
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	4619      	mov	r1, r3
 8007c80:	4610      	mov	r0, r2
 8007c82:	f7fe f884 	bl	8005d8e <vListInsert>
 8007c86:	e016      	b.n	8007cb6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c88:	2300      	movs	r3, #0
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	2100      	movs	r1, #0
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f7ff fd60 	bl	8007758 <xTimerGenericCommand>
 8007c98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10a      	bne.n	8007cb6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	603b      	str	r3, [r7, #0]
}
 8007cb2:	bf00      	nop
 8007cb4:	e7fe      	b.n	8007cb4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cb6:	4b09      	ldr	r3, [pc, #36]	; (8007cdc <prvSwitchTimerLists+0xc0>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1b1      	bne.n	8007c24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007cc0:	4b06      	ldr	r3, [pc, #24]	; (8007cdc <prvSwitchTimerLists+0xc0>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007cc6:	4b06      	ldr	r3, [pc, #24]	; (8007ce0 <prvSwitchTimerLists+0xc4>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a04      	ldr	r2, [pc, #16]	; (8007cdc <prvSwitchTimerLists+0xc0>)
 8007ccc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007cce:	4a04      	ldr	r2, [pc, #16]	; (8007ce0 <prvSwitchTimerLists+0xc4>)
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	6013      	str	r3, [r2, #0]
}
 8007cd4:	bf00      	nop
 8007cd6:	3718      	adds	r7, #24
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	20005cd0 	.word	0x20005cd0
 8007ce0:	20005cd4 	.word	0x20005cd4

08007ce4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007cea:	f000 f96b 	bl	8007fc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007cee:	4b15      	ldr	r3, [pc, #84]	; (8007d44 <prvCheckForValidListAndQueue+0x60>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d120      	bne.n	8007d38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007cf6:	4814      	ldr	r0, [pc, #80]	; (8007d48 <prvCheckForValidListAndQueue+0x64>)
 8007cf8:	f7fd fff8 	bl	8005cec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007cfc:	4813      	ldr	r0, [pc, #76]	; (8007d4c <prvCheckForValidListAndQueue+0x68>)
 8007cfe:	f7fd fff5 	bl	8005cec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007d02:	4b13      	ldr	r3, [pc, #76]	; (8007d50 <prvCheckForValidListAndQueue+0x6c>)
 8007d04:	4a10      	ldr	r2, [pc, #64]	; (8007d48 <prvCheckForValidListAndQueue+0x64>)
 8007d06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d08:	4b12      	ldr	r3, [pc, #72]	; (8007d54 <prvCheckForValidListAndQueue+0x70>)
 8007d0a:	4a10      	ldr	r2, [pc, #64]	; (8007d4c <prvCheckForValidListAndQueue+0x68>)
 8007d0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d0e:	2300      	movs	r3, #0
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	4b11      	ldr	r3, [pc, #68]	; (8007d58 <prvCheckForValidListAndQueue+0x74>)
 8007d14:	4a11      	ldr	r2, [pc, #68]	; (8007d5c <prvCheckForValidListAndQueue+0x78>)
 8007d16:	2110      	movs	r1, #16
 8007d18:	200a      	movs	r0, #10
 8007d1a:	f7fe f903 	bl	8005f24 <xQueueGenericCreateStatic>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	4a08      	ldr	r2, [pc, #32]	; (8007d44 <prvCheckForValidListAndQueue+0x60>)
 8007d22:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d24:	4b07      	ldr	r3, [pc, #28]	; (8007d44 <prvCheckForValidListAndQueue+0x60>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d005      	beq.n	8007d38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d2c:	4b05      	ldr	r3, [pc, #20]	; (8007d44 <prvCheckForValidListAndQueue+0x60>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	490b      	ldr	r1, [pc, #44]	; (8007d60 <prvCheckForValidListAndQueue+0x7c>)
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fe fd1c 	bl	8006770 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d38:	f000 f974 	bl	8008024 <vPortExitCritical>
}
 8007d3c:	bf00      	nop
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20005cd8 	.word	0x20005cd8
 8007d48:	20005ca8 	.word	0x20005ca8
 8007d4c:	20005cbc 	.word	0x20005cbc
 8007d50:	20005cd0 	.word	0x20005cd0
 8007d54:	20005cd4 	.word	0x20005cd4
 8007d58:	20005d84 	.word	0x20005d84
 8007d5c:	20005ce4 	.word	0x20005ce4
 8007d60:	080186ac 	.word	0x080186ac

08007d64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	3b04      	subs	r3, #4
 8007d74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	3b04      	subs	r3, #4
 8007d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	f023 0201 	bic.w	r2, r3, #1
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3b04      	subs	r3, #4
 8007d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d94:	4a0c      	ldr	r2, [pc, #48]	; (8007dc8 <pxPortInitialiseStack+0x64>)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	3b14      	subs	r3, #20
 8007d9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	3b04      	subs	r3, #4
 8007daa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f06f 0202 	mvn.w	r2, #2
 8007db2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	3b20      	subs	r3, #32
 8007db8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007dba:	68fb      	ldr	r3, [r7, #12]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3714      	adds	r7, #20
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr
 8007dc8:	08007dcd 	.word	0x08007dcd

08007dcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007dd6:	4b12      	ldr	r3, [pc, #72]	; (8007e20 <prvTaskExitError+0x54>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dde:	d00a      	beq.n	8007df6 <prvTaskExitError+0x2a>
	__asm volatile
 8007de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	60fb      	str	r3, [r7, #12]
}
 8007df2:	bf00      	nop
 8007df4:	e7fe      	b.n	8007df4 <prvTaskExitError+0x28>
	__asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	60bb      	str	r3, [r7, #8]
}
 8007e08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e0a:	bf00      	nop
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0fc      	beq.n	8007e0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e12:	bf00      	nop
 8007e14:	bf00      	nop
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	20000010 	.word	0x20000010
	...

08007e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e30:	4b07      	ldr	r3, [pc, #28]	; (8007e50 <pxCurrentTCBConst2>)
 8007e32:	6819      	ldr	r1, [r3, #0]
 8007e34:	6808      	ldr	r0, [r1, #0]
 8007e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3a:	f380 8809 	msr	PSP, r0
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f04f 0000 	mov.w	r0, #0
 8007e46:	f380 8811 	msr	BASEPRI, r0
 8007e4a:	4770      	bx	lr
 8007e4c:	f3af 8000 	nop.w

08007e50 <pxCurrentTCBConst2>:
 8007e50:	200057a8 	.word	0x200057a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop

08007e58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e58:	4808      	ldr	r0, [pc, #32]	; (8007e7c <prvPortStartFirstTask+0x24>)
 8007e5a:	6800      	ldr	r0, [r0, #0]
 8007e5c:	6800      	ldr	r0, [r0, #0]
 8007e5e:	f380 8808 	msr	MSP, r0
 8007e62:	f04f 0000 	mov.w	r0, #0
 8007e66:	f380 8814 	msr	CONTROL, r0
 8007e6a:	b662      	cpsie	i
 8007e6c:	b661      	cpsie	f
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	f3bf 8f6f 	isb	sy
 8007e76:	df00      	svc	0
 8007e78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e7a:	bf00      	nop
 8007e7c:	e000ed08 	.word	0xe000ed08

08007e80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e86:	4b46      	ldr	r3, [pc, #280]	; (8007fa0 <xPortStartScheduler+0x120>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a46      	ldr	r2, [pc, #280]	; (8007fa4 <xPortStartScheduler+0x124>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d10a      	bne.n	8007ea6 <xPortStartScheduler+0x26>
	__asm volatile
 8007e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	613b      	str	r3, [r7, #16]
}
 8007ea2:	bf00      	nop
 8007ea4:	e7fe      	b.n	8007ea4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ea6:	4b3e      	ldr	r3, [pc, #248]	; (8007fa0 <xPortStartScheduler+0x120>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a3f      	ldr	r2, [pc, #252]	; (8007fa8 <xPortStartScheduler+0x128>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d10a      	bne.n	8007ec6 <xPortStartScheduler+0x46>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb4:	f383 8811 	msr	BASEPRI, r3
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	60fb      	str	r3, [r7, #12]
}
 8007ec2:	bf00      	nop
 8007ec4:	e7fe      	b.n	8007ec4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ec6:	4b39      	ldr	r3, [pc, #228]	; (8007fac <xPortStartScheduler+0x12c>)
 8007ec8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	22ff      	movs	r2, #255	; 0xff
 8007ed6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ee0:	78fb      	ldrb	r3, [r7, #3]
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ee8:	b2da      	uxtb	r2, r3
 8007eea:	4b31      	ldr	r3, [pc, #196]	; (8007fb0 <xPortStartScheduler+0x130>)
 8007eec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007eee:	4b31      	ldr	r3, [pc, #196]	; (8007fb4 <xPortStartScheduler+0x134>)
 8007ef0:	2207      	movs	r2, #7
 8007ef2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ef4:	e009      	b.n	8007f0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007ef6:	4b2f      	ldr	r3, [pc, #188]	; (8007fb4 <xPortStartScheduler+0x134>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	3b01      	subs	r3, #1
 8007efc:	4a2d      	ldr	r2, [pc, #180]	; (8007fb4 <xPortStartScheduler+0x134>)
 8007efe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f00:	78fb      	ldrb	r3, [r7, #3]
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	005b      	lsls	r3, r3, #1
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f0a:	78fb      	ldrb	r3, [r7, #3]
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f12:	2b80      	cmp	r3, #128	; 0x80
 8007f14:	d0ef      	beq.n	8007ef6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f16:	4b27      	ldr	r3, [pc, #156]	; (8007fb4 <xPortStartScheduler+0x134>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f1c3 0307 	rsb	r3, r3, #7
 8007f1e:	2b04      	cmp	r3, #4
 8007f20:	d00a      	beq.n	8007f38 <xPortStartScheduler+0xb8>
	__asm volatile
 8007f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f26:	f383 8811 	msr	BASEPRI, r3
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	60bb      	str	r3, [r7, #8]
}
 8007f34:	bf00      	nop
 8007f36:	e7fe      	b.n	8007f36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f38:	4b1e      	ldr	r3, [pc, #120]	; (8007fb4 <xPortStartScheduler+0x134>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	021b      	lsls	r3, r3, #8
 8007f3e:	4a1d      	ldr	r2, [pc, #116]	; (8007fb4 <xPortStartScheduler+0x134>)
 8007f40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f42:	4b1c      	ldr	r3, [pc, #112]	; (8007fb4 <xPortStartScheduler+0x134>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f4a:	4a1a      	ldr	r2, [pc, #104]	; (8007fb4 <xPortStartScheduler+0x134>)
 8007f4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	b2da      	uxtb	r2, r3
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f56:	4b18      	ldr	r3, [pc, #96]	; (8007fb8 <xPortStartScheduler+0x138>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a17      	ldr	r2, [pc, #92]	; (8007fb8 <xPortStartScheduler+0x138>)
 8007f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f62:	4b15      	ldr	r3, [pc, #84]	; (8007fb8 <xPortStartScheduler+0x138>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a14      	ldr	r2, [pc, #80]	; (8007fb8 <xPortStartScheduler+0x138>)
 8007f68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f6e:	f000 f8dd 	bl	800812c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f72:	4b12      	ldr	r3, [pc, #72]	; (8007fbc <xPortStartScheduler+0x13c>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f78:	f000 f8fc 	bl	8008174 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f7c:	4b10      	ldr	r3, [pc, #64]	; (8007fc0 <xPortStartScheduler+0x140>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a0f      	ldr	r2, [pc, #60]	; (8007fc0 <xPortStartScheduler+0x140>)
 8007f82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f88:	f7ff ff66 	bl	8007e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f8c:	f7ff f820 	bl	8006fd0 <vTaskSwitchContext>
	prvTaskExitError();
 8007f90:	f7ff ff1c 	bl	8007dcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3718      	adds	r7, #24
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	e000ed00 	.word	0xe000ed00
 8007fa4:	410fc271 	.word	0x410fc271
 8007fa8:	410fc270 	.word	0x410fc270
 8007fac:	e000e400 	.word	0xe000e400
 8007fb0:	20005dd4 	.word	0x20005dd4
 8007fb4:	20005dd8 	.word	0x20005dd8
 8007fb8:	e000ed20 	.word	0xe000ed20
 8007fbc:	20000010 	.word	0x20000010
 8007fc0:	e000ef34 	.word	0xe000ef34

08007fc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	607b      	str	r3, [r7, #4]
}
 8007fdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007fde:	4b0f      	ldr	r3, [pc, #60]	; (800801c <vPortEnterCritical+0x58>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	4a0d      	ldr	r2, [pc, #52]	; (800801c <vPortEnterCritical+0x58>)
 8007fe6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007fe8:	4b0c      	ldr	r3, [pc, #48]	; (800801c <vPortEnterCritical+0x58>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d10f      	bne.n	8008010 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ff0:	4b0b      	ldr	r3, [pc, #44]	; (8008020 <vPortEnterCritical+0x5c>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00a      	beq.n	8008010 <vPortEnterCritical+0x4c>
	__asm volatile
 8007ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	603b      	str	r3, [r7, #0]
}
 800800c:	bf00      	nop
 800800e:	e7fe      	b.n	800800e <vPortEnterCritical+0x4a>
	}
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	20000010 	.word	0x20000010
 8008020:	e000ed04 	.word	0xe000ed04

08008024 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800802a:	4b12      	ldr	r3, [pc, #72]	; (8008074 <vPortExitCritical+0x50>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10a      	bne.n	8008048 <vPortExitCritical+0x24>
	__asm volatile
 8008032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008036:	f383 8811 	msr	BASEPRI, r3
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	607b      	str	r3, [r7, #4]
}
 8008044:	bf00      	nop
 8008046:	e7fe      	b.n	8008046 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008048:	4b0a      	ldr	r3, [pc, #40]	; (8008074 <vPortExitCritical+0x50>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3b01      	subs	r3, #1
 800804e:	4a09      	ldr	r2, [pc, #36]	; (8008074 <vPortExitCritical+0x50>)
 8008050:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008052:	4b08      	ldr	r3, [pc, #32]	; (8008074 <vPortExitCritical+0x50>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d105      	bne.n	8008066 <vPortExitCritical+0x42>
 800805a:	2300      	movs	r3, #0
 800805c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	f383 8811 	msr	BASEPRI, r3
}
 8008064:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008066:	bf00      	nop
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	20000010 	.word	0x20000010
	...

08008080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008080:	f3ef 8009 	mrs	r0, PSP
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	4b15      	ldr	r3, [pc, #84]	; (80080e0 <pxCurrentTCBConst>)
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	f01e 0f10 	tst.w	lr, #16
 8008090:	bf08      	it	eq
 8008092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809a:	6010      	str	r0, [r2, #0]
 800809c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80080a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80080a4:	f380 8811 	msr	BASEPRI, r0
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f7fe ff8e 	bl	8006fd0 <vTaskSwitchContext>
 80080b4:	f04f 0000 	mov.w	r0, #0
 80080b8:	f380 8811 	msr	BASEPRI, r0
 80080bc:	bc09      	pop	{r0, r3}
 80080be:	6819      	ldr	r1, [r3, #0]
 80080c0:	6808      	ldr	r0, [r1, #0]
 80080c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c6:	f01e 0f10 	tst.w	lr, #16
 80080ca:	bf08      	it	eq
 80080cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80080d0:	f380 8809 	msr	PSP, r0
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	f3af 8000 	nop.w

080080e0 <pxCurrentTCBConst>:
 80080e0:	200057a8 	.word	0x200057a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80080e4:	bf00      	nop
 80080e6:	bf00      	nop

080080e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
	__asm volatile
 80080ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f2:	f383 8811 	msr	BASEPRI, r3
 80080f6:	f3bf 8f6f 	isb	sy
 80080fa:	f3bf 8f4f 	dsb	sy
 80080fe:	607b      	str	r3, [r7, #4]
}
 8008100:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008102:	f7fe feab 	bl	8006e5c <xTaskIncrementTick>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d003      	beq.n	8008114 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800810c:	4b06      	ldr	r3, [pc, #24]	; (8008128 <xPortSysTickHandler+0x40>)
 800810e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	2300      	movs	r3, #0
 8008116:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	f383 8811 	msr	BASEPRI, r3
}
 800811e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008120:	bf00      	nop
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	e000ed04 	.word	0xe000ed04

0800812c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800812c:	b480      	push	{r7}
 800812e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008130:	4b0b      	ldr	r3, [pc, #44]	; (8008160 <vPortSetupTimerInterrupt+0x34>)
 8008132:	2200      	movs	r2, #0
 8008134:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008136:	4b0b      	ldr	r3, [pc, #44]	; (8008164 <vPortSetupTimerInterrupt+0x38>)
 8008138:	2200      	movs	r2, #0
 800813a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800813c:	4b0a      	ldr	r3, [pc, #40]	; (8008168 <vPortSetupTimerInterrupt+0x3c>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a0a      	ldr	r2, [pc, #40]	; (800816c <vPortSetupTimerInterrupt+0x40>)
 8008142:	fba2 2303 	umull	r2, r3, r2, r3
 8008146:	099b      	lsrs	r3, r3, #6
 8008148:	4a09      	ldr	r2, [pc, #36]	; (8008170 <vPortSetupTimerInterrupt+0x44>)
 800814a:	3b01      	subs	r3, #1
 800814c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800814e:	4b04      	ldr	r3, [pc, #16]	; (8008160 <vPortSetupTimerInterrupt+0x34>)
 8008150:	2207      	movs	r2, #7
 8008152:	601a      	str	r2, [r3, #0]
}
 8008154:	bf00      	nop
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	e000e010 	.word	0xe000e010
 8008164:	e000e018 	.word	0xe000e018
 8008168:	20000004 	.word	0x20000004
 800816c:	10624dd3 	.word	0x10624dd3
 8008170:	e000e014 	.word	0xe000e014

08008174 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008174:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008184 <vPortEnableVFP+0x10>
 8008178:	6801      	ldr	r1, [r0, #0]
 800817a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800817e:	6001      	str	r1, [r0, #0]
 8008180:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008182:	bf00      	nop
 8008184:	e000ed88 	.word	0xe000ed88

08008188 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800818e:	f3ef 8305 	mrs	r3, IPSR
 8008192:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2b0f      	cmp	r3, #15
 8008198:	d914      	bls.n	80081c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800819a:	4a17      	ldr	r2, [pc, #92]	; (80081f8 <vPortValidateInterruptPriority+0x70>)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	4413      	add	r3, r2
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80081a4:	4b15      	ldr	r3, [pc, #84]	; (80081fc <vPortValidateInterruptPriority+0x74>)
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	7afa      	ldrb	r2, [r7, #11]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d20a      	bcs.n	80081c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	607b      	str	r3, [r7, #4]
}
 80081c0:	bf00      	nop
 80081c2:	e7fe      	b.n	80081c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80081c4:	4b0e      	ldr	r3, [pc, #56]	; (8008200 <vPortValidateInterruptPriority+0x78>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80081cc:	4b0d      	ldr	r3, [pc, #52]	; (8008204 <vPortValidateInterruptPriority+0x7c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d90a      	bls.n	80081ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80081d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d8:	f383 8811 	msr	BASEPRI, r3
 80081dc:	f3bf 8f6f 	isb	sy
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	603b      	str	r3, [r7, #0]
}
 80081e6:	bf00      	nop
 80081e8:	e7fe      	b.n	80081e8 <vPortValidateInterruptPriority+0x60>
	}
 80081ea:	bf00      	nop
 80081ec:	3714      	adds	r7, #20
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	e000e3f0 	.word	0xe000e3f0
 80081fc:	20005dd4 	.word	0x20005dd4
 8008200:	e000ed0c 	.word	0xe000ed0c
 8008204:	20005dd8 	.word	0x20005dd8

08008208 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b08a      	sub	sp, #40	; 0x28
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008210:	2300      	movs	r3, #0
 8008212:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008214:	f7fe fd66 	bl	8006ce4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008218:	4b5b      	ldr	r3, [pc, #364]	; (8008388 <pvPortMalloc+0x180>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008220:	f000 f920 	bl	8008464 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008224:	4b59      	ldr	r3, [pc, #356]	; (800838c <pvPortMalloc+0x184>)
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4013      	ands	r3, r2
 800822c:	2b00      	cmp	r3, #0
 800822e:	f040 8093 	bne.w	8008358 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d01d      	beq.n	8008274 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008238:	2208      	movs	r2, #8
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4413      	add	r3, r2
 800823e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f003 0307 	and.w	r3, r3, #7
 8008246:	2b00      	cmp	r3, #0
 8008248:	d014      	beq.n	8008274 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f023 0307 	bic.w	r3, r3, #7
 8008250:	3308      	adds	r3, #8
 8008252:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f003 0307 	and.w	r3, r3, #7
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00a      	beq.n	8008274 <pvPortMalloc+0x6c>
	__asm volatile
 800825e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	617b      	str	r3, [r7, #20]
}
 8008270:	bf00      	nop
 8008272:	e7fe      	b.n	8008272 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d06e      	beq.n	8008358 <pvPortMalloc+0x150>
 800827a:	4b45      	ldr	r3, [pc, #276]	; (8008390 <pvPortMalloc+0x188>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	429a      	cmp	r2, r3
 8008282:	d869      	bhi.n	8008358 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008284:	4b43      	ldr	r3, [pc, #268]	; (8008394 <pvPortMalloc+0x18c>)
 8008286:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008288:	4b42      	ldr	r3, [pc, #264]	; (8008394 <pvPortMalloc+0x18c>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800828e:	e004      	b.n	800829a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008292:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800829a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d903      	bls.n	80082ac <pvPortMalloc+0xa4>
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1f1      	bne.n	8008290 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80082ac:	4b36      	ldr	r3, [pc, #216]	; (8008388 <pvPortMalloc+0x180>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d050      	beq.n	8008358 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2208      	movs	r2, #8
 80082bc:	4413      	add	r3, r2
 80082be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	6a3b      	ldr	r3, [r7, #32]
 80082c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	1ad2      	subs	r2, r2, r3
 80082d0:	2308      	movs	r3, #8
 80082d2:	005b      	lsls	r3, r3, #1
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d91f      	bls.n	8008318 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80082d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4413      	add	r3, r2
 80082de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	f003 0307 	and.w	r3, r3, #7
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00a      	beq.n	8008300 <pvPortMalloc+0xf8>
	__asm volatile
 80082ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	613b      	str	r3, [r7, #16]
}
 80082fc:	bf00      	nop
 80082fe:	e7fe      	b.n	80082fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	685a      	ldr	r2, [r3, #4]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	1ad2      	subs	r2, r2, r3
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008312:	69b8      	ldr	r0, [r7, #24]
 8008314:	f000 f908 	bl	8008528 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008318:	4b1d      	ldr	r3, [pc, #116]	; (8008390 <pvPortMalloc+0x188>)
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	4a1b      	ldr	r2, [pc, #108]	; (8008390 <pvPortMalloc+0x188>)
 8008324:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008326:	4b1a      	ldr	r3, [pc, #104]	; (8008390 <pvPortMalloc+0x188>)
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	4b1b      	ldr	r3, [pc, #108]	; (8008398 <pvPortMalloc+0x190>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	429a      	cmp	r2, r3
 8008330:	d203      	bcs.n	800833a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008332:	4b17      	ldr	r3, [pc, #92]	; (8008390 <pvPortMalloc+0x188>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a18      	ldr	r2, [pc, #96]	; (8008398 <pvPortMalloc+0x190>)
 8008338:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	685a      	ldr	r2, [r3, #4]
 800833e:	4b13      	ldr	r3, [pc, #76]	; (800838c <pvPortMalloc+0x184>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	431a      	orrs	r2, r3
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834a:	2200      	movs	r2, #0
 800834c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800834e:	4b13      	ldr	r3, [pc, #76]	; (800839c <pvPortMalloc+0x194>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	3301      	adds	r3, #1
 8008354:	4a11      	ldr	r2, [pc, #68]	; (800839c <pvPortMalloc+0x194>)
 8008356:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008358:	f7fe fcd2 	bl	8006d00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	f003 0307 	and.w	r3, r3, #7
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00a      	beq.n	800837c <pvPortMalloc+0x174>
	__asm volatile
 8008366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	60fb      	str	r3, [r7, #12]
}
 8008378:	bf00      	nop
 800837a:	e7fe      	b.n	800837a <pvPortMalloc+0x172>
	return pvReturn;
 800837c:	69fb      	ldr	r3, [r7, #28]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3728      	adds	r7, #40	; 0x28
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	200099e4 	.word	0x200099e4
 800838c:	200099f8 	.word	0x200099f8
 8008390:	200099e8 	.word	0x200099e8
 8008394:	200099dc 	.word	0x200099dc
 8008398:	200099ec 	.word	0x200099ec
 800839c:	200099f0 	.word	0x200099f0

080083a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d04d      	beq.n	800844e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80083b2:	2308      	movs	r3, #8
 80083b4:	425b      	negs	r3, r3
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	4413      	add	r3, r2
 80083ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	685a      	ldr	r2, [r3, #4]
 80083c4:	4b24      	ldr	r3, [pc, #144]	; (8008458 <vPortFree+0xb8>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4013      	ands	r3, r2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10a      	bne.n	80083e4 <vPortFree+0x44>
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	60fb      	str	r3, [r7, #12]
}
 80083e0:	bf00      	nop
 80083e2:	e7fe      	b.n	80083e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00a      	beq.n	8008402 <vPortFree+0x62>
	__asm volatile
 80083ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f0:	f383 8811 	msr	BASEPRI, r3
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	60bb      	str	r3, [r7, #8]
}
 80083fe:	bf00      	nop
 8008400:	e7fe      	b.n	8008400 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	685a      	ldr	r2, [r3, #4]
 8008406:	4b14      	ldr	r3, [pc, #80]	; (8008458 <vPortFree+0xb8>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4013      	ands	r3, r2
 800840c:	2b00      	cmp	r3, #0
 800840e:	d01e      	beq.n	800844e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d11a      	bne.n	800844e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	4b0e      	ldr	r3, [pc, #56]	; (8008458 <vPortFree+0xb8>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	43db      	mvns	r3, r3
 8008422:	401a      	ands	r2, r3
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008428:	f7fe fc5c 	bl	8006ce4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	685a      	ldr	r2, [r3, #4]
 8008430:	4b0a      	ldr	r3, [pc, #40]	; (800845c <vPortFree+0xbc>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4413      	add	r3, r2
 8008436:	4a09      	ldr	r2, [pc, #36]	; (800845c <vPortFree+0xbc>)
 8008438:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800843a:	6938      	ldr	r0, [r7, #16]
 800843c:	f000 f874 	bl	8008528 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008440:	4b07      	ldr	r3, [pc, #28]	; (8008460 <vPortFree+0xc0>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	3301      	adds	r3, #1
 8008446:	4a06      	ldr	r2, [pc, #24]	; (8008460 <vPortFree+0xc0>)
 8008448:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800844a:	f7fe fc59 	bl	8006d00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800844e:	bf00      	nop
 8008450:	3718      	adds	r7, #24
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	200099f8 	.word	0x200099f8
 800845c:	200099e8 	.word	0x200099e8
 8008460:	200099f4 	.word	0x200099f4

08008464 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008464:	b480      	push	{r7}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800846a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800846e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008470:	4b27      	ldr	r3, [pc, #156]	; (8008510 <prvHeapInit+0xac>)
 8008472:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f003 0307 	and.w	r3, r3, #7
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00c      	beq.n	8008498 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3307      	adds	r3, #7
 8008482:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f023 0307 	bic.w	r3, r3, #7
 800848a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800848c:	68ba      	ldr	r2, [r7, #8]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	4a1f      	ldr	r2, [pc, #124]	; (8008510 <prvHeapInit+0xac>)
 8008494:	4413      	add	r3, r2
 8008496:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800849c:	4a1d      	ldr	r2, [pc, #116]	; (8008514 <prvHeapInit+0xb0>)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80084a2:	4b1c      	ldr	r3, [pc, #112]	; (8008514 <prvHeapInit+0xb0>)
 80084a4:	2200      	movs	r2, #0
 80084a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	4413      	add	r3, r2
 80084ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80084b0:	2208      	movs	r2, #8
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	1a9b      	subs	r3, r3, r2
 80084b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f023 0307 	bic.w	r3, r3, #7
 80084be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4a15      	ldr	r2, [pc, #84]	; (8008518 <prvHeapInit+0xb4>)
 80084c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80084c6:	4b14      	ldr	r3, [pc, #80]	; (8008518 <prvHeapInit+0xb4>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2200      	movs	r2, #0
 80084cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80084ce:	4b12      	ldr	r3, [pc, #72]	; (8008518 <prvHeapInit+0xb4>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2200      	movs	r2, #0
 80084d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	1ad2      	subs	r2, r2, r3
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80084e4:	4b0c      	ldr	r3, [pc, #48]	; (8008518 <prvHeapInit+0xb4>)
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	4a0a      	ldr	r2, [pc, #40]	; (800851c <prvHeapInit+0xb8>)
 80084f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	4a09      	ldr	r2, [pc, #36]	; (8008520 <prvHeapInit+0xbc>)
 80084fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80084fc:	4b09      	ldr	r3, [pc, #36]	; (8008524 <prvHeapInit+0xc0>)
 80084fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008502:	601a      	str	r2, [r3, #0]
}
 8008504:	bf00      	nop
 8008506:	3714      	adds	r7, #20
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr
 8008510:	20005ddc 	.word	0x20005ddc
 8008514:	200099dc 	.word	0x200099dc
 8008518:	200099e4 	.word	0x200099e4
 800851c:	200099ec 	.word	0x200099ec
 8008520:	200099e8 	.word	0x200099e8
 8008524:	200099f8 	.word	0x200099f8

08008528 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008530:	4b28      	ldr	r3, [pc, #160]	; (80085d4 <prvInsertBlockIntoFreeList+0xac>)
 8008532:	60fb      	str	r3, [r7, #12]
 8008534:	e002      	b.n	800853c <prvInsertBlockIntoFreeList+0x14>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	60fb      	str	r3, [r7, #12]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	429a      	cmp	r2, r3
 8008544:	d8f7      	bhi.n	8008536 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	4413      	add	r3, r2
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	429a      	cmp	r2, r3
 8008556:	d108      	bne.n	800856a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	685a      	ldr	r2, [r3, #4]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	441a      	add	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	441a      	add	r2, r3
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	429a      	cmp	r2, r3
 800857c:	d118      	bne.n	80085b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	4b15      	ldr	r3, [pc, #84]	; (80085d8 <prvInsertBlockIntoFreeList+0xb0>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	429a      	cmp	r2, r3
 8008588:	d00d      	beq.n	80085a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	685a      	ldr	r2, [r3, #4]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	441a      	add	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	e008      	b.n	80085b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80085a6:	4b0c      	ldr	r3, [pc, #48]	; (80085d8 <prvInsertBlockIntoFreeList+0xb0>)
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	601a      	str	r2, [r3, #0]
 80085ae:	e003      	b.n	80085b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d002      	beq.n	80085c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085c6:	bf00      	nop
 80085c8:	3714      	adds	r7, #20
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	200099dc 	.word	0x200099dc
 80085d8:	200099e4 	.word	0x200099e4

080085dc <rcl_get_zero_initialized_node>:
 80085dc:	4a03      	ldr	r2, [pc, #12]	; (80085ec <rcl_get_zero_initialized_node+0x10>)
 80085de:	4603      	mov	r3, r0
 80085e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80085e4:	e883 0003 	stmia.w	r3, {r0, r1}
 80085e8:	4618      	mov	r0, r3
 80085ea:	4770      	bx	lr
 80085ec:	08018730 	.word	0x08018730

080085f0 <rcl_node_init>:
 80085f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f4:	b0a9      	sub	sp, #164	; 0xa4
 80085f6:	4604      	mov	r4, r0
 80085f8:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 80085fc:	a823      	add	r0, sp, #140	; 0x8c
 80085fe:	460e      	mov	r6, r1
 8008600:	4615      	mov	r5, r2
 8008602:	461f      	mov	r7, r3
 8008604:	f008 fec6 	bl	8011394 <rcl_guard_condition_get_default_options>
 8008608:	f1b8 0f00 	cmp.w	r8, #0
 800860c:	f000 80e6 	beq.w	80087dc <rcl_node_init+0x1ec>
 8008610:	4640      	mov	r0, r8
 8008612:	f001 fc15 	bl	8009e40 <rcutils_allocator_is_valid>
 8008616:	2800      	cmp	r0, #0
 8008618:	f000 80e0 	beq.w	80087dc <rcl_node_init+0x1ec>
 800861c:	2e00      	cmp	r6, #0
 800861e:	f000 80dd 	beq.w	80087dc <rcl_node_init+0x1ec>
 8008622:	2d00      	cmp	r5, #0
 8008624:	f000 80da 	beq.w	80087dc <rcl_node_init+0x1ec>
 8008628:	2c00      	cmp	r4, #0
 800862a:	f000 80d7 	beq.w	80087dc <rcl_node_init+0x1ec>
 800862e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8008632:	f1b9 0f00 	cmp.w	r9, #0
 8008636:	f040 80fd 	bne.w	8008834 <rcl_node_init+0x244>
 800863a:	2f00      	cmp	r7, #0
 800863c:	f000 80ce 	beq.w	80087dc <rcl_node_init+0x1ec>
 8008640:	4638      	mov	r0, r7
 8008642:	f008 fdb1 	bl	80111a8 <rcl_context_is_valid>
 8008646:	4682      	mov	sl, r0
 8008648:	2800      	cmp	r0, #0
 800864a:	f000 80cd 	beq.w	80087e8 <rcl_node_init+0x1f8>
 800864e:	464a      	mov	r2, r9
 8008650:	a922      	add	r1, sp, #136	; 0x88
 8008652:	4630      	mov	r0, r6
 8008654:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 8008658:	f001 fe8a 	bl	800a370 <rmw_validate_node_name>
 800865c:	4681      	mov	r9, r0
 800865e:	2800      	cmp	r0, #0
 8008660:	f040 80be 	bne.w	80087e0 <rcl_node_init+0x1f0>
 8008664:	9822      	ldr	r0, [sp, #136]	; 0x88
 8008666:	2800      	cmp	r0, #0
 8008668:	f040 80f0 	bne.w	800884c <rcl_node_init+0x25c>
 800866c:	4628      	mov	r0, r5
 800866e:	f7f7 fdd9 	bl	8000224 <strlen>
 8008672:	2800      	cmp	r0, #0
 8008674:	f040 80bb 	bne.w	80087ee <rcl_node_init+0x1fe>
 8008678:	4d7c      	ldr	r5, [pc, #496]	; (800886c <rcl_node_init+0x27c>)
 800867a:	a922      	add	r1, sp, #136	; 0x88
 800867c:	2200      	movs	r2, #0
 800867e:	4628      	mov	r0, r5
 8008680:	f001 fe58 	bl	800a334 <rmw_validate_namespace>
 8008684:	4681      	mov	r9, r0
 8008686:	2800      	cmp	r0, #0
 8008688:	f040 80aa 	bne.w	80087e0 <rcl_node_init+0x1f0>
 800868c:	4682      	mov	sl, r0
 800868e:	9822      	ldr	r0, [sp, #136]	; 0x88
 8008690:	2800      	cmp	r0, #0
 8008692:	f040 80e0 	bne.w	8008856 <rcl_node_init+0x266>
 8008696:	f8d8 3000 	ldr.w	r3, [r8]
 800869a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800869e:	2078      	movs	r0, #120	; 0x78
 80086a0:	4798      	blx	r3
 80086a2:	4681      	mov	r9, r0
 80086a4:	6060      	str	r0, [r4, #4]
 80086a6:	2800      	cmp	r0, #0
 80086a8:	f000 80ca 	beq.w	8008840 <rcl_node_init+0x250>
 80086ac:	2200      	movs	r2, #0
 80086ae:	2300      	movs	r3, #0
 80086b0:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 80086b4:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 80086b8:	a808      	add	r0, sp, #32
 80086ba:	f000 f939 	bl	8008930 <rcl_node_get_default_options>
 80086be:	a908      	add	r1, sp, #32
 80086c0:	4648      	mov	r0, r9
 80086c2:	2268      	movs	r2, #104	; 0x68
 80086c4:	f00f f90d 	bl	80178e2 <memcpy>
 80086c8:	6861      	ldr	r1, [r4, #4]
 80086ca:	6027      	str	r7, [r4, #0]
 80086cc:	4640      	mov	r0, r8
 80086ce:	f000 f93d 	bl	800894c <rcl_node_options_copy>
 80086d2:	2800      	cmp	r0, #0
 80086d4:	d158      	bne.n	8008788 <rcl_node_init+0x198>
 80086d6:	4628      	mov	r0, r5
 80086d8:	f7f7 fda4 	bl	8000224 <strlen>
 80086dc:	4428      	add	r0, r5
 80086de:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80086e2:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80086e6:	2b2f      	cmp	r3, #47	; 0x2f
 80086e8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80086ec:	9300      	str	r3, [sp, #0]
 80086ee:	bf0c      	ite	eq
 80086f0:	4b5f      	ldreq	r3, [pc, #380]	; (8008870 <rcl_node_init+0x280>)
 80086f2:	4b60      	ldrne	r3, [pc, #384]	; (8008874 <rcl_node_init+0x284>)
 80086f4:	9302      	str	r3, [sp, #8]
 80086f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086fa:	9301      	str	r3, [sp, #4]
 80086fc:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8008700:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8008704:	f001 fbf4 	bl	8009ef0 <rcutils_format_string_limit>
 8008708:	6823      	ldr	r3, [r4, #0]
 800870a:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 800870e:	6818      	ldr	r0, [r3, #0]
 8008710:	4631      	mov	r1, r6
 8008712:	3028      	adds	r0, #40	; 0x28
 8008714:	462a      	mov	r2, r5
 8008716:	6866      	ldr	r6, [r4, #4]
 8008718:	f001 ff18 	bl	800a54c <rmw_create_node>
 800871c:	6863      	ldr	r3, [r4, #4]
 800871e:	66b0      	str	r0, [r6, #104]	; 0x68
 8008720:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8008722:	2800      	cmp	r0, #0
 8008724:	d032      	beq.n	800878c <rcl_node_init+0x19c>
 8008726:	f001 ffa5 	bl	800a674 <rmw_node_get_graph_guard_condition>
 800872a:	4681      	mov	r9, r0
 800872c:	b360      	cbz	r0, 8008788 <rcl_node_init+0x198>
 800872e:	f8d8 3000 	ldr.w	r3, [r8]
 8008732:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8008736:	6866      	ldr	r6, [r4, #4]
 8008738:	2008      	movs	r0, #8
 800873a:	4798      	blx	r3
 800873c:	6863      	ldr	r3, [r4, #4]
 800873e:	66f0      	str	r0, [r6, #108]	; 0x6c
 8008740:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 8008744:	f1bb 0f00 	cmp.w	fp, #0
 8008748:	d020      	beq.n	800878c <rcl_node_init+0x19c>
 800874a:	a806      	add	r0, sp, #24
 800874c:	f008 fd92 	bl	8011274 <rcl_get_zero_initialized_guard_condition>
 8008750:	a806      	add	r0, sp, #24
 8008752:	c803      	ldmia	r0, {r0, r1}
 8008754:	6863      	ldr	r3, [r4, #4]
 8008756:	46c4      	mov	ip, r8
 8008758:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 800875c:	e88b 0003 	stmia.w	fp, {r0, r1}
 8008760:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008764:	ae23      	add	r6, sp, #140	; 0x8c
 8008766:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008768:	f8dc 3000 	ldr.w	r3, [ip]
 800876c:	6033      	str	r3, [r6, #0]
 800876e:	ab28      	add	r3, sp, #160	; 0xa0
 8008770:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8008774:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8008778:	4649      	mov	r1, r9
 800877a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800877c:	463a      	mov	r2, r7
 800877e:	4670      	mov	r0, lr
 8008780:	f008 fd82 	bl	8011288 <rcl_guard_condition_init_from_rmw>
 8008784:	4681      	mov	r9, r0
 8008786:	b328      	cbz	r0, 80087d4 <rcl_node_init+0x1e4>
 8008788:	6863      	ldr	r3, [r4, #4]
 800878a:	b1f3      	cbz	r3, 80087ca <rcl_node_init+0x1da>
 800878c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800878e:	b128      	cbz	r0, 800879c <rcl_node_init+0x1ac>
 8008790:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008794:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8008798:	4798      	blx	r3
 800879a:	6863      	ldr	r3, [r4, #4]
 800879c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800879e:	b110      	cbz	r0, 80087a6 <rcl_node_init+0x1b6>
 80087a0:	f001 feec 	bl	800a57c <rmw_destroy_node>
 80087a4:	6863      	ldr	r3, [r4, #4]
 80087a6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80087a8:	b148      	cbz	r0, 80087be <rcl_node_init+0x1ce>
 80087aa:	f008 fdcd 	bl	8011348 <rcl_guard_condition_fini>
 80087ae:	6863      	ldr	r3, [r4, #4]
 80087b0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80087b4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80087b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80087ba:	4798      	blx	r3
 80087bc:	6863      	ldr	r3, [r4, #4]
 80087be:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80087c8:	4798      	blx	r3
 80087ca:	2300      	movs	r3, #0
 80087cc:	e9c4 3300 	strd	r3, r3, [r4]
 80087d0:	f04f 0901 	mov.w	r9, #1
 80087d4:	f1ba 0f00 	cmp.w	sl, #0
 80087d8:	d125      	bne.n	8008826 <rcl_node_init+0x236>
 80087da:	e001      	b.n	80087e0 <rcl_node_init+0x1f0>
 80087dc:	f04f 090b 	mov.w	r9, #11
 80087e0:	4648      	mov	r0, r9
 80087e2:	b029      	add	sp, #164	; 0xa4
 80087e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e8:	f04f 0965 	mov.w	r9, #101	; 0x65
 80087ec:	e7f8      	b.n	80087e0 <rcl_node_init+0x1f0>
 80087ee:	782b      	ldrb	r3, [r5, #0]
 80087f0:	2b2f      	cmp	r3, #47	; 0x2f
 80087f2:	f43f af42 	beq.w	800867a <rcl_node_init+0x8a>
 80087f6:	9503      	str	r5, [sp, #12]
 80087f8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80087fc:	9300      	str	r3, [sp, #0]
 80087fe:	4b1e      	ldr	r3, [pc, #120]	; (8008878 <rcl_node_init+0x288>)
 8008800:	9302      	str	r3, [sp, #8]
 8008802:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008806:	9301      	str	r3, [sp, #4]
 8008808:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800880c:	f001 fb70 	bl	8009ef0 <rcutils_format_string_limit>
 8008810:	4605      	mov	r5, r0
 8008812:	b340      	cbz	r0, 8008866 <rcl_node_init+0x276>
 8008814:	2200      	movs	r2, #0
 8008816:	a922      	add	r1, sp, #136	; 0x88
 8008818:	9222      	str	r2, [sp, #136]	; 0x88
 800881a:	f001 fd8b 	bl	800a334 <rmw_validate_namespace>
 800881e:	4681      	mov	r9, r0
 8008820:	2800      	cmp	r0, #0
 8008822:	f43f af34 	beq.w	800868e <rcl_node_init+0x9e>
 8008826:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800882a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800882e:	4628      	mov	r0, r5
 8008830:	4798      	blx	r3
 8008832:	e7d5      	b.n	80087e0 <rcl_node_init+0x1f0>
 8008834:	f04f 0964 	mov.w	r9, #100	; 0x64
 8008838:	4648      	mov	r0, r9
 800883a:	b029      	add	sp, #164	; 0xa4
 800883c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008840:	f04f 090a 	mov.w	r9, #10
 8008844:	f1ba 0f00 	cmp.w	sl, #0
 8008848:	d1ed      	bne.n	8008826 <rcl_node_init+0x236>
 800884a:	e7c9      	b.n	80087e0 <rcl_node_init+0x1f0>
 800884c:	f001 fde2 	bl	800a414 <rmw_node_name_validation_result_string>
 8008850:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 8008854:	e7c4      	b.n	80087e0 <rcl_node_init+0x1f0>
 8008856:	f001 fd7f 	bl	800a358 <rmw_namespace_validation_result_string>
 800885a:	f04f 09ca 	mov.w	r9, #202	; 0xca
 800885e:	f1ba 0f00 	cmp.w	sl, #0
 8008862:	d1e0      	bne.n	8008826 <rcl_node_init+0x236>
 8008864:	e7bc      	b.n	80087e0 <rcl_node_init+0x1f0>
 8008866:	f04f 090a 	mov.w	r9, #10
 800886a:	e7b9      	b.n	80087e0 <rcl_node_init+0x1f0>
 800886c:	08018718 	.word	0x08018718
 8008870:	08018720 	.word	0x08018720
 8008874:	08018728 	.word	0x08018728
 8008878:	0801871c 	.word	0x0801871c

0800887c <rcl_node_fini>:
 800887c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800887e:	b320      	cbz	r0, 80088ca <rcl_node_fini+0x4e>
 8008880:	6845      	ldr	r5, [r0, #4]
 8008882:	4604      	mov	r4, r0
 8008884:	b1fd      	cbz	r5, 80088c6 <rcl_node_fini+0x4a>
 8008886:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8008888:	686f      	ldr	r7, [r5, #4]
 800888a:	692e      	ldr	r6, [r5, #16]
 800888c:	f001 fe76 	bl	800a57c <rmw_destroy_node>
 8008890:	6863      	ldr	r3, [r4, #4]
 8008892:	4605      	mov	r5, r0
 8008894:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008896:	f008 fd57 	bl	8011348 <rcl_guard_condition_fini>
 800889a:	ea55 0300 	orrs.w	r3, r5, r0
 800889e:	6863      	ldr	r3, [r4, #4]
 80088a0:	4631      	mov	r1, r6
 80088a2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80088a4:	bf14      	ite	ne
 80088a6:	2501      	movne	r5, #1
 80088a8:	2500      	moveq	r5, #0
 80088aa:	47b8      	blx	r7
 80088ac:	6863      	ldr	r3, [r4, #4]
 80088ae:	4631      	mov	r1, r6
 80088b0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80088b2:	47b8      	blx	r7
 80088b4:	6863      	ldr	r3, [r4, #4]
 80088b6:	4631      	mov	r1, r6
 80088b8:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80088ba:	47b8      	blx	r7
 80088bc:	6860      	ldr	r0, [r4, #4]
 80088be:	4631      	mov	r1, r6
 80088c0:	47b8      	blx	r7
 80088c2:	2300      	movs	r3, #0
 80088c4:	6063      	str	r3, [r4, #4]
 80088c6:	4628      	mov	r0, r5
 80088c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088ca:	25c8      	movs	r5, #200	; 0xc8
 80088cc:	4628      	mov	r0, r5
 80088ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080088d0 <rcl_node_is_valid_except_context>:
 80088d0:	b128      	cbz	r0, 80088de <rcl_node_is_valid_except_context+0xe>
 80088d2:	6840      	ldr	r0, [r0, #4]
 80088d4:	b118      	cbz	r0, 80088de <rcl_node_is_valid_except_context+0xe>
 80088d6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80088d8:	3800      	subs	r0, #0
 80088da:	bf18      	it	ne
 80088dc:	2001      	movne	r0, #1
 80088de:	4770      	bx	lr

080088e0 <rcl_node_is_valid>:
 80088e0:	b130      	cbz	r0, 80088f0 <rcl_node_is_valid+0x10>
 80088e2:	6843      	ldr	r3, [r0, #4]
 80088e4:	b123      	cbz	r3, 80088f0 <rcl_node_is_valid+0x10>
 80088e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088e8:	b113      	cbz	r3, 80088f0 <rcl_node_is_valid+0x10>
 80088ea:	6800      	ldr	r0, [r0, #0]
 80088ec:	f008 bc5c 	b.w	80111a8 <rcl_context_is_valid>
 80088f0:	2000      	movs	r0, #0
 80088f2:	4770      	bx	lr

080088f4 <rcl_node_get_name>:
 80088f4:	b120      	cbz	r0, 8008900 <rcl_node_get_name+0xc>
 80088f6:	6840      	ldr	r0, [r0, #4]
 80088f8:	b110      	cbz	r0, 8008900 <rcl_node_get_name+0xc>
 80088fa:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80088fc:	b100      	cbz	r0, 8008900 <rcl_node_get_name+0xc>
 80088fe:	6880      	ldr	r0, [r0, #8]
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop

08008904 <rcl_node_get_namespace>:
 8008904:	b120      	cbz	r0, 8008910 <rcl_node_get_namespace+0xc>
 8008906:	6840      	ldr	r0, [r0, #4]
 8008908:	b110      	cbz	r0, 8008910 <rcl_node_get_namespace+0xc>
 800890a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800890c:	b100      	cbz	r0, 8008910 <rcl_node_get_namespace+0xc>
 800890e:	68c0      	ldr	r0, [r0, #12]
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop

08008914 <rcl_node_get_options>:
 8008914:	b128      	cbz	r0, 8008922 <rcl_node_get_options+0xe>
 8008916:	6840      	ldr	r0, [r0, #4]
 8008918:	b118      	cbz	r0, 8008922 <rcl_node_get_options+0xe>
 800891a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800891c:	2b00      	cmp	r3, #0
 800891e:	bf08      	it	eq
 8008920:	2000      	moveq	r0, #0
 8008922:	4770      	bx	lr

08008924 <rcl_node_get_rmw_handle>:
 8008924:	b110      	cbz	r0, 800892c <rcl_node_get_rmw_handle+0x8>
 8008926:	6840      	ldr	r0, [r0, #4]
 8008928:	b100      	cbz	r0, 800892c <rcl_node_get_rmw_handle+0x8>
 800892a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop

08008930 <rcl_node_get_default_options>:
 8008930:	b510      	push	{r4, lr}
 8008932:	2268      	movs	r2, #104	; 0x68
 8008934:	4604      	mov	r4, r0
 8008936:	2100      	movs	r1, #0
 8008938:	f00e feb4 	bl	80176a4 <memset>
 800893c:	4620      	mov	r0, r4
 800893e:	f001 fa71 	bl	8009e24 <rcutils_get_default_allocator>
 8008942:	2301      	movs	r3, #1
 8008944:	7523      	strb	r3, [r4, #20]
 8008946:	4620      	mov	r0, r4
 8008948:	bd10      	pop	{r4, pc}
 800894a:	bf00      	nop

0800894c <rcl_node_options_copy>:
 800894c:	b1d0      	cbz	r0, 8008984 <rcl_node_options_copy+0x38>
 800894e:	b570      	push	{r4, r5, r6, lr}
 8008950:	460c      	mov	r4, r1
 8008952:	b1a9      	cbz	r1, 8008980 <rcl_node_options_copy+0x34>
 8008954:	4288      	cmp	r0, r1
 8008956:	4684      	mov	ip, r0
 8008958:	d012      	beq.n	8008980 <rcl_node_options_copy+0x34>
 800895a:	4605      	mov	r5, r0
 800895c:	8a86      	ldrh	r6, [r0, #20]
 800895e:	468e      	mov	lr, r1
 8008960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008962:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008966:	682b      	ldr	r3, [r5, #0]
 8008968:	f8ce 3000 	str.w	r3, [lr]
 800896c:	f10c 0118 	add.w	r1, ip, #24
 8008970:	2250      	movs	r2, #80	; 0x50
 8008972:	82a6      	strh	r6, [r4, #20]
 8008974:	f104 0018 	add.w	r0, r4, #24
 8008978:	f00e ffb3 	bl	80178e2 <memcpy>
 800897c:	2000      	movs	r0, #0
 800897e:	bd70      	pop	{r4, r5, r6, pc}
 8008980:	200b      	movs	r0, #11
 8008982:	bd70      	pop	{r4, r5, r6, pc}
 8008984:	200b      	movs	r0, #11
 8008986:	4770      	bx	lr

08008988 <rcl_get_zero_initialized_publisher>:
 8008988:	4b01      	ldr	r3, [pc, #4]	; (8008990 <rcl_get_zero_initialized_publisher+0x8>)
 800898a:	6818      	ldr	r0, [r3, #0]
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	08018738 	.word	0x08018738

08008994 <rcl_publisher_init>:
 8008994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008998:	b088      	sub	sp, #32
 800899a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800899c:	2d00      	cmp	r5, #0
 800899e:	d069      	beq.n	8008a74 <rcl_publisher_init+0xe0>
 80089a0:	f105 0950 	add.w	r9, r5, #80	; 0x50
 80089a4:	4604      	mov	r4, r0
 80089a6:	4648      	mov	r0, r9
 80089a8:	460e      	mov	r6, r1
 80089aa:	4690      	mov	r8, r2
 80089ac:	461f      	mov	r7, r3
 80089ae:	f001 fa47 	bl	8009e40 <rcutils_allocator_is_valid>
 80089b2:	2800      	cmp	r0, #0
 80089b4:	d05e      	beq.n	8008a74 <rcl_publisher_init+0xe0>
 80089b6:	2c00      	cmp	r4, #0
 80089b8:	d05c      	beq.n	8008a74 <rcl_publisher_init+0xe0>
 80089ba:	f8d4 a000 	ldr.w	sl, [r4]
 80089be:	f1ba 0f00 	cmp.w	sl, #0
 80089c2:	d004      	beq.n	80089ce <rcl_publisher_init+0x3a>
 80089c4:	2764      	movs	r7, #100	; 0x64
 80089c6:	4638      	mov	r0, r7
 80089c8:	b008      	add	sp, #32
 80089ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ce:	4630      	mov	r0, r6
 80089d0:	f7ff ff86 	bl	80088e0 <rcl_node_is_valid>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d052      	beq.n	8008a7e <rcl_publisher_init+0xea>
 80089d8:	f1b8 0f00 	cmp.w	r8, #0
 80089dc:	d04a      	beq.n	8008a74 <rcl_publisher_init+0xe0>
 80089de:	2f00      	cmp	r7, #0
 80089e0:	d048      	beq.n	8008a74 <rcl_publisher_init+0xe0>
 80089e2:	e9cd aa03 	strd	sl, sl, [sp, #12]
 80089e6:	aa07      	add	r2, sp, #28
 80089e8:	9205      	str	r2, [sp, #20]
 80089ea:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80089ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80089f2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80089f6:	f8cd a01c 	str.w	sl, [sp, #28]
 80089fa:	4639      	mov	r1, r7
 80089fc:	e899 000c 	ldmia.w	r9, {r2, r3}
 8008a00:	4630      	mov	r0, r6
 8008a02:	f008 ff0d 	bl	8011820 <rcl_node_resolve_name>
 8008a06:	4607      	mov	r7, r0
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d14f      	bne.n	8008aac <rcl_publisher_init+0x118>
 8008a0c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008a0e:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8008a10:	20c8      	movs	r0, #200	; 0xc8
 8008a12:	4798      	blx	r3
 8008a14:	6020      	str	r0, [r4, #0]
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d04e      	beq.n	8008ab8 <rcl_publisher_init+0x124>
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f7ff ff82 	bl	8008924 <rcl_node_get_rmw_handle>
 8008a20:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8008a24:	9300      	str	r3, [sp, #0]
 8008a26:	9a07      	ldr	r2, [sp, #28]
 8008a28:	6827      	ldr	r7, [r4, #0]
 8008a2a:	462b      	mov	r3, r5
 8008a2c:	4641      	mov	r1, r8
 8008a2e:	f001 fe8b 	bl	800a748 <rmw_create_publisher>
 8008a32:	6823      	ldr	r3, [r4, #0]
 8008a34:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8008a38:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8008a3c:	b370      	cbz	r0, 8008a9c <rcl_publisher_init+0x108>
 8008a3e:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8008a42:	f001 ff5f 	bl	800a904 <rmw_publisher_get_actual_qos>
 8008a46:	6823      	ldr	r3, [r4, #0]
 8008a48:	4607      	mov	r7, r0
 8008a4a:	b9d0      	cbnz	r0, 8008a82 <rcl_publisher_init+0xee>
 8008a4c:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 8008a50:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8008a54:	4629      	mov	r1, r5
 8008a56:	2270      	movs	r2, #112	; 0x70
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f00e ff42 	bl	80178e2 <memcpy>
 8008a5e:	6832      	ldr	r2, [r6, #0]
 8008a60:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 8008a64:	9807      	ldr	r0, [sp, #28]
 8008a66:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8008a68:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8008a6a:	4798      	blx	r3
 8008a6c:	4638      	mov	r0, r7
 8008a6e:	b008      	add	sp, #32
 8008a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a74:	270b      	movs	r7, #11
 8008a76:	4638      	mov	r0, r7
 8008a78:	b008      	add	sp, #32
 8008a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a7e:	27c8      	movs	r7, #200	; 0xc8
 8008a80:	e7a1      	b.n	80089c6 <rcl_publisher_init+0x32>
 8008a82:	b18b      	cbz	r3, 8008aa8 <rcl_publisher_init+0x114>
 8008a84:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008a88:	b142      	cbz	r2, 8008a9c <rcl_publisher_init+0x108>
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f7ff ff4a 	bl	8008924 <rcl_node_get_rmw_handle>
 8008a90:	6823      	ldr	r3, [r4, #0]
 8008a92:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8008a96:	f001 ff45 	bl	800a924 <rmw_destroy_publisher>
 8008a9a:	6823      	ldr	r3, [r4, #0]
 8008a9c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8008a9e:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	4790      	blx	r2
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	6023      	str	r3, [r4, #0]
 8008aa8:	2701      	movs	r7, #1
 8008aaa:	e7db      	b.n	8008a64 <rcl_publisher_init+0xd0>
 8008aac:	2867      	cmp	r0, #103	; 0x67
 8008aae:	d0d9      	beq.n	8008a64 <rcl_publisher_init+0xd0>
 8008ab0:	2869      	cmp	r0, #105	; 0x69
 8008ab2:	d003      	beq.n	8008abc <rcl_publisher_init+0x128>
 8008ab4:	280a      	cmp	r0, #10
 8008ab6:	d1f7      	bne.n	8008aa8 <rcl_publisher_init+0x114>
 8008ab8:	270a      	movs	r7, #10
 8008aba:	e7d3      	b.n	8008a64 <rcl_publisher_init+0xd0>
 8008abc:	2767      	movs	r7, #103	; 0x67
 8008abe:	e7d1      	b.n	8008a64 <rcl_publisher_init+0xd0>

08008ac0 <rcl_publisher_fini>:
 8008ac0:	b570      	push	{r4, r5, r6, lr}
 8008ac2:	b300      	cbz	r0, 8008b06 <rcl_publisher_fini+0x46>
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	4608      	mov	r0, r1
 8008ac8:	460d      	mov	r5, r1
 8008aca:	f7ff ff01 	bl	80088d0 <rcl_node_is_valid_except_context>
 8008ace:	b1f0      	cbz	r0, 8008b0e <rcl_publisher_fini+0x4e>
 8008ad0:	6823      	ldr	r3, [r4, #0]
 8008ad2:	b1ab      	cbz	r3, 8008b00 <rcl_publisher_fini+0x40>
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 8008ad8:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8008ada:	f7ff ff23 	bl	8008924 <rcl_node_get_rmw_handle>
 8008ade:	b1c8      	cbz	r0, 8008b14 <rcl_publisher_fini+0x54>
 8008ae0:	6823      	ldr	r3, [r4, #0]
 8008ae2:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8008ae6:	f001 ff1d 	bl	800a924 <rmw_destroy_publisher>
 8008aea:	4603      	mov	r3, r0
 8008aec:	4629      	mov	r1, r5
 8008aee:	6820      	ldr	r0, [r4, #0]
 8008af0:	1e1d      	subs	r5, r3, #0
 8008af2:	bf18      	it	ne
 8008af4:	2501      	movne	r5, #1
 8008af6:	47b0      	blx	r6
 8008af8:	2300      	movs	r3, #0
 8008afa:	6023      	str	r3, [r4, #0]
 8008afc:	4628      	mov	r0, r5
 8008afe:	bd70      	pop	{r4, r5, r6, pc}
 8008b00:	461d      	mov	r5, r3
 8008b02:	4628      	mov	r0, r5
 8008b04:	bd70      	pop	{r4, r5, r6, pc}
 8008b06:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	bd70      	pop	{r4, r5, r6, pc}
 8008b0e:	25c8      	movs	r5, #200	; 0xc8
 8008b10:	4628      	mov	r0, r5
 8008b12:	bd70      	pop	{r4, r5, r6, pc}
 8008b14:	250b      	movs	r5, #11
 8008b16:	e7f1      	b.n	8008afc <rcl_publisher_fini+0x3c>

08008b18 <rcl_publisher_get_default_options>:
 8008b18:	b570      	push	{r4, r5, r6, lr}
 8008b1a:	4d14      	ldr	r5, [pc, #80]	; (8008b6c <rcl_publisher_get_default_options+0x54>)
 8008b1c:	4914      	ldr	r1, [pc, #80]	; (8008b70 <rcl_publisher_get_default_options+0x58>)
 8008b1e:	b088      	sub	sp, #32
 8008b20:	4604      	mov	r4, r0
 8008b22:	2250      	movs	r2, #80	; 0x50
 8008b24:	4628      	mov	r0, r5
 8008b26:	f00e fedc 	bl	80178e2 <memcpy>
 8008b2a:	a802      	add	r0, sp, #8
 8008b2c:	f001 f97a 	bl	8009e24 <rcutils_get_default_allocator>
 8008b30:	f10d 0c08 	add.w	ip, sp, #8
 8008b34:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008b38:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8008b3c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008b40:	466e      	mov	r6, sp
 8008b42:	f8dc 3000 	ldr.w	r3, [ip]
 8008b46:	f8ce 3000 	str.w	r3, [lr]
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	f001 fb78 	bl	800a240 <rmw_get_default_publisher_options>
 8008b50:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008b54:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8008b58:	e883 0003 	stmia.w	r3, {r0, r1}
 8008b5c:	2270      	movs	r2, #112	; 0x70
 8008b5e:	4629      	mov	r1, r5
 8008b60:	4620      	mov	r0, r4
 8008b62:	f00e febe 	bl	80178e2 <memcpy>
 8008b66:	4620      	mov	r0, r4
 8008b68:	b008      	add	sp, #32
 8008b6a:	bd70      	pop	{r4, r5, r6, pc}
 8008b6c:	20009a00 	.word	0x20009a00
 8008b70:	08018740 	.word	0x08018740

08008b74 <rcl_publish>:
 8008b74:	b1f8      	cbz	r0, 8008bb6 <rcl_publish+0x42>
 8008b76:	6803      	ldr	r3, [r0, #0]
 8008b78:	b570      	push	{r4, r5, r6, lr}
 8008b7a:	4604      	mov	r4, r0
 8008b7c:	b1b3      	cbz	r3, 8008bac <rcl_publish+0x38>
 8008b7e:	4616      	mov	r6, r2
 8008b80:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008b84:	b192      	cbz	r2, 8008bac <rcl_publish+0x38>
 8008b86:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8008b8a:	460d      	mov	r5, r1
 8008b8c:	f008 fb0c 	bl	80111a8 <rcl_context_is_valid>
 8008b90:	b160      	cbz	r0, 8008bac <rcl_publish+0x38>
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8008b98:	b140      	cbz	r0, 8008bac <rcl_publish+0x38>
 8008b9a:	b155      	cbz	r5, 8008bb2 <rcl_publish+0x3e>
 8008b9c:	4632      	mov	r2, r6
 8008b9e:	4629      	mov	r1, r5
 8008ba0:	f001 fd72 	bl	800a688 <rmw_publish>
 8008ba4:	3800      	subs	r0, #0
 8008ba6:	bf18      	it	ne
 8008ba8:	2001      	movne	r0, #1
 8008baa:	bd70      	pop	{r4, r5, r6, pc}
 8008bac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008bb0:	bd70      	pop	{r4, r5, r6, pc}
 8008bb2:	200b      	movs	r0, #11
 8008bb4:	bd70      	pop	{r4, r5, r6, pc}
 8008bb6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008bba:	4770      	bx	lr

08008bbc <rcl_publisher_is_valid>:
 8008bbc:	b1a0      	cbz	r0, 8008be8 <rcl_publisher_is_valid+0x2c>
 8008bbe:	6803      	ldr	r3, [r0, #0]
 8008bc0:	b510      	push	{r4, lr}
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	b173      	cbz	r3, 8008be4 <rcl_publisher_is_valid+0x28>
 8008bc6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008bca:	b15a      	cbz	r2, 8008be4 <rcl_publisher_is_valid+0x28>
 8008bcc:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8008bd0:	f008 faea 	bl	80111a8 <rcl_context_is_valid>
 8008bd4:	b130      	cbz	r0, 8008be4 <rcl_publisher_is_valid+0x28>
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8008bdc:	3800      	subs	r0, #0
 8008bde:	bf18      	it	ne
 8008be0:	2001      	movne	r0, #1
 8008be2:	bd10      	pop	{r4, pc}
 8008be4:	2000      	movs	r0, #0
 8008be6:	bd10      	pop	{r4, pc}
 8008be8:	2000      	movs	r0, #0
 8008bea:	4770      	bx	lr

08008bec <rcl_publisher_is_valid_except_context>:
 8008bec:	b130      	cbz	r0, 8008bfc <rcl_publisher_is_valid_except_context+0x10>
 8008bee:	6800      	ldr	r0, [r0, #0]
 8008bf0:	b120      	cbz	r0, 8008bfc <rcl_publisher_is_valid_except_context+0x10>
 8008bf2:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8008bf6:	3800      	subs	r0, #0
 8008bf8:	bf18      	it	ne
 8008bfa:	2001      	movne	r0, #1
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop

08008c00 <rcl_get_zero_initialized_subscription>:
 8008c00:	4b01      	ldr	r3, [pc, #4]	; (8008c08 <rcl_get_zero_initialized_subscription+0x8>)
 8008c02:	6818      	ldr	r0, [r3, #0]
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop
 8008c08:	08018790 	.word	0x08018790

08008c0c <rcl_subscription_init>:
 8008c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c10:	b089      	sub	sp, #36	; 0x24
 8008c12:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8008c14:	b1d6      	cbz	r6, 8008c4c <rcl_subscription_init+0x40>
 8008c16:	f106 0950 	add.w	r9, r6, #80	; 0x50
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	4648      	mov	r0, r9
 8008c1e:	460d      	mov	r5, r1
 8008c20:	4690      	mov	r8, r2
 8008c22:	461f      	mov	r7, r3
 8008c24:	f001 f90c 	bl	8009e40 <rcutils_allocator_is_valid>
 8008c28:	b180      	cbz	r0, 8008c4c <rcl_subscription_init+0x40>
 8008c2a:	b17c      	cbz	r4, 8008c4c <rcl_subscription_init+0x40>
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	f7ff fe57 	bl	80088e0 <rcl_node_is_valid>
 8008c32:	2800      	cmp	r0, #0
 8008c34:	d054      	beq.n	8008ce0 <rcl_subscription_init+0xd4>
 8008c36:	f1b8 0f00 	cmp.w	r8, #0
 8008c3a:	d007      	beq.n	8008c4c <rcl_subscription_init+0x40>
 8008c3c:	b137      	cbz	r7, 8008c4c <rcl_subscription_init+0x40>
 8008c3e:	6823      	ldr	r3, [r4, #0]
 8008c40:	b14b      	cbz	r3, 8008c56 <rcl_subscription_init+0x4a>
 8008c42:	2764      	movs	r7, #100	; 0x64
 8008c44:	4638      	mov	r0, r7
 8008c46:	b009      	add	sp, #36	; 0x24
 8008c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c4c:	270b      	movs	r7, #11
 8008c4e:	4638      	mov	r0, r7
 8008c50:	b009      	add	sp, #36	; 0x24
 8008c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c56:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8008c5a:	aa07      	add	r2, sp, #28
 8008c5c:	9205      	str	r2, [sp, #20]
 8008c5e:	9307      	str	r3, [sp, #28]
 8008c60:	f106 0358 	add.w	r3, r6, #88	; 0x58
 8008c64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c68:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008c6c:	4639      	mov	r1, r7
 8008c6e:	e899 000c 	ldmia.w	r9, {r2, r3}
 8008c72:	4628      	mov	r0, r5
 8008c74:	f008 fdd4 	bl	8011820 <rcl_node_resolve_name>
 8008c78:	4607      	mov	r7, r0
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	d15f      	bne.n	8008d3e <rcl_subscription_init+0x132>
 8008c7e:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	; 0x5c
 8008c82:	21c8      	movs	r1, #200	; 0xc8
 8008c84:	2001      	movs	r0, #1
 8008c86:	4798      	blx	r3
 8008c88:	6020      	str	r0, [r4, #0]
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	d05d      	beq.n	8008d4a <rcl_subscription_init+0x13e>
 8008c8e:	4628      	mov	r0, r5
 8008c90:	f7ff fe48 	bl	8008924 <rcl_node_get_rmw_handle>
 8008c94:	f106 0364 	add.w	r3, r6, #100	; 0x64
 8008c98:	9300      	str	r3, [sp, #0]
 8008c9a:	9a07      	ldr	r2, [sp, #28]
 8008c9c:	6827      	ldr	r7, [r4, #0]
 8008c9e:	4641      	mov	r1, r8
 8008ca0:	4633      	mov	r3, r6
 8008ca2:	f001 fed5 	bl	800aa50 <rmw_create_subscription>
 8008ca6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8008caa:	6827      	ldr	r7, [r4, #0]
 8008cac:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8008cb0:	b348      	cbz	r0, 8008d06 <rcl_subscription_init+0xfa>
 8008cb2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8008cb6:	f001 ffad 	bl	800ac14 <rmw_subscription_get_actual_qos>
 8008cba:	4607      	mov	r7, r0
 8008cbc:	b9a8      	cbnz	r0, 8008cea <rcl_subscription_init+0xde>
 8008cbe:	6820      	ldr	r0, [r4, #0]
 8008cc0:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 8008cc4:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 8008cc8:	2270      	movs	r2, #112	; 0x70
 8008cca:	4631      	mov	r1, r6
 8008ccc:	f00e fe09 	bl	80178e2 <memcpy>
 8008cd0:	9807      	ldr	r0, [sp, #28]
 8008cd2:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8008cd4:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8008cd6:	4798      	blx	r3
 8008cd8:	4638      	mov	r0, r7
 8008cda:	b009      	add	sp, #36	; 0x24
 8008cdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ce0:	27c8      	movs	r7, #200	; 0xc8
 8008ce2:	4638      	mov	r0, r7
 8008ce4:	b009      	add	sp, #36	; 0x24
 8008ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cea:	6827      	ldr	r7, [r4, #0]
 8008cec:	b32f      	cbz	r7, 8008d3a <rcl_subscription_init+0x12e>
 8008cee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008cf2:	b14b      	cbz	r3, 8008d08 <rcl_subscription_init+0xfc>
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	f7ff fe15 	bl	8008924 <rcl_node_get_rmw_handle>
 8008cfa:	6823      	ldr	r3, [r4, #0]
 8008cfc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8008d00:	f001 ff98 	bl	800ac34 <rmw_destroy_subscription>
 8008d04:	6827      	ldr	r7, [r4, #0]
 8008d06:	b197      	cbz	r7, 8008d2e <rcl_subscription_init+0x122>
 8008d08:	f107 0550 	add.w	r5, r7, #80	; 0x50
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	f001 f897 	bl	8009e40 <rcutils_allocator_is_valid>
 8008d12:	b158      	cbz	r0, 8008d2c <rcl_subscription_init+0x120>
 8008d14:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008d16:	b148      	cbz	r0, 8008d2c <rcl_subscription_init+0x120>
 8008d18:	4629      	mov	r1, r5
 8008d1a:	f001 fa95 	bl	800a248 <rmw_subscription_content_filter_options_fini>
 8008d1e:	4605      	mov	r5, r0
 8008d20:	b9b8      	cbnz	r0, 8008d52 <rcl_subscription_init+0x146>
 8008d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d24:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008d26:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008d28:	4798      	blx	r3
 8008d2a:	66fd      	str	r5, [r7, #108]	; 0x6c
 8008d2c:	6827      	ldr	r7, [r4, #0]
 8008d2e:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8008d30:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8008d32:	4638      	mov	r0, r7
 8008d34:	4798      	blx	r3
 8008d36:	2300      	movs	r3, #0
 8008d38:	6023      	str	r3, [r4, #0]
 8008d3a:	2701      	movs	r7, #1
 8008d3c:	e7c8      	b.n	8008cd0 <rcl_subscription_init+0xc4>
 8008d3e:	2867      	cmp	r0, #103	; 0x67
 8008d40:	d0c6      	beq.n	8008cd0 <rcl_subscription_init+0xc4>
 8008d42:	2869      	cmp	r0, #105	; 0x69
 8008d44:	d003      	beq.n	8008d4e <rcl_subscription_init+0x142>
 8008d46:	280a      	cmp	r0, #10
 8008d48:	d1f7      	bne.n	8008d3a <rcl_subscription_init+0x12e>
 8008d4a:	270a      	movs	r7, #10
 8008d4c:	e7c0      	b.n	8008cd0 <rcl_subscription_init+0xc4>
 8008d4e:	2767      	movs	r7, #103	; 0x67
 8008d50:	e7be      	b.n	8008cd0 <rcl_subscription_init+0xc4>
 8008d52:	f008 fa0b 	bl	801116c <rcl_convert_rmw_ret_to_rcl_ret>
 8008d56:	6827      	ldr	r7, [r4, #0]
 8008d58:	e7e9      	b.n	8008d2e <rcl_subscription_init+0x122>
 8008d5a:	bf00      	nop

08008d5c <rcl_subscription_fini>:
 8008d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d039      	beq.n	8008dd8 <rcl_subscription_fini+0x7c>
 8008d64:	4604      	mov	r4, r0
 8008d66:	4608      	mov	r0, r1
 8008d68:	460d      	mov	r5, r1
 8008d6a:	f7ff fdb1 	bl	80088d0 <rcl_node_is_valid_except_context>
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	d037      	beq.n	8008de2 <rcl_subscription_fini+0x86>
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	b363      	cbz	r3, 8008dd0 <rcl_subscription_fini+0x74>
 8008d76:	4628      	mov	r0, r5
 8008d78:	6d5f      	ldr	r7, [r3, #84]	; 0x54
 8008d7a:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 8008d7e:	f7ff fdd1 	bl	8008924 <rcl_node_get_rmw_handle>
 8008d82:	b390      	cbz	r0, 8008dea <rcl_subscription_fini+0x8e>
 8008d84:	6823      	ldr	r3, [r4, #0]
 8008d86:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8008d8a:	f001 ff53 	bl	800ac34 <rmw_destroy_subscription>
 8008d8e:	6826      	ldr	r6, [r4, #0]
 8008d90:	1e05      	subs	r5, r0, #0
 8008d92:	bf18      	it	ne
 8008d94:	2501      	movne	r5, #1
 8008d96:	b37e      	cbz	r6, 8008df8 <rcl_subscription_fini+0x9c>
 8008d98:	f106 0950 	add.w	r9, r6, #80	; 0x50
 8008d9c:	4648      	mov	r0, r9
 8008d9e:	f001 f84f 	bl	8009e40 <rcutils_allocator_is_valid>
 8008da2:	b358      	cbz	r0, 8008dfc <rcl_subscription_fini+0xa0>
 8008da4:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 8008da6:	b150      	cbz	r0, 8008dbe <rcl_subscription_fini+0x62>
 8008da8:	4649      	mov	r1, r9
 8008daa:	f001 fa4d 	bl	800a248 <rmw_subscription_content_filter_options_fini>
 8008dae:	4681      	mov	r9, r0
 8008db0:	b9e8      	cbnz	r0, 8008dee <rcl_subscription_fini+0x92>
 8008db2:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8008db4:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8008db6:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 8008db8:	4798      	blx	r3
 8008dba:	f8c6 906c 	str.w	r9, [r6, #108]	; 0x6c
 8008dbe:	6826      	ldr	r6, [r4, #0]
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	4641      	mov	r1, r8
 8008dc4:	47b8      	blx	r7
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	6023      	str	r3, [r4, #0]
 8008dca:	4628      	mov	r0, r5
 8008dcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dd0:	461d      	mov	r5, r3
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dd8:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8008ddc:	4628      	mov	r0, r5
 8008dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008de2:	25c8      	movs	r5, #200	; 0xc8
 8008de4:	4628      	mov	r0, r5
 8008de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dea:	250b      	movs	r5, #11
 8008dec:	e7f1      	b.n	8008dd2 <rcl_subscription_fini+0x76>
 8008dee:	f008 f9bd 	bl	801116c <rcl_convert_rmw_ret_to_rcl_ret>
 8008df2:	6826      	ldr	r6, [r4, #0]
 8008df4:	2800      	cmp	r0, #0
 8008df6:	d0e3      	beq.n	8008dc0 <rcl_subscription_fini+0x64>
 8008df8:	2501      	movs	r5, #1
 8008dfa:	e7e1      	b.n	8008dc0 <rcl_subscription_fini+0x64>
 8008dfc:	6826      	ldr	r6, [r4, #0]
 8008dfe:	2501      	movs	r5, #1
 8008e00:	e7de      	b.n	8008dc0 <rcl_subscription_fini+0x64>
 8008e02:	bf00      	nop

08008e04 <rcl_subscription_get_default_options>:
 8008e04:	b570      	push	{r4, r5, r6, lr}
 8008e06:	4d14      	ldr	r5, [pc, #80]	; (8008e58 <rcl_subscription_get_default_options+0x54>)
 8008e08:	4914      	ldr	r1, [pc, #80]	; (8008e5c <rcl_subscription_get_default_options+0x58>)
 8008e0a:	b08a      	sub	sp, #40	; 0x28
 8008e0c:	4604      	mov	r4, r0
 8008e0e:	2250      	movs	r2, #80	; 0x50
 8008e10:	4628      	mov	r0, r5
 8008e12:	f00e fd66 	bl	80178e2 <memcpy>
 8008e16:	a804      	add	r0, sp, #16
 8008e18:	f001 f804 	bl	8009e24 <rcutils_get_default_allocator>
 8008e1c:	f10d 0c10 	add.w	ip, sp, #16
 8008e20:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008e24:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8008e28:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008e2c:	466e      	mov	r6, sp
 8008e2e:	f8dc 3000 	ldr.w	r3, [ip]
 8008e32:	f8ce 3000 	str.w	r3, [lr]
 8008e36:	4630      	mov	r0, r6
 8008e38:	f001 fa20 	bl	800a27c <rmw_get_default_subscription_options>
 8008e3c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8008e40:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8008e44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008e48:	2270      	movs	r2, #112	; 0x70
 8008e4a:	4629      	mov	r1, r5
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	f00e fd48 	bl	80178e2 <memcpy>
 8008e52:	4620      	mov	r0, r4
 8008e54:	b00a      	add	sp, #40	; 0x28
 8008e56:	bd70      	pop	{r4, r5, r6, pc}
 8008e58:	20009a70 	.word	0x20009a70
 8008e5c:	08018798 	.word	0x08018798

08008e60 <rcl_take>:
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d04a      	beq.n	8008efa <rcl_take+0x9a>
 8008e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e68:	4604      	mov	r4, r0
 8008e6a:	6800      	ldr	r0, [r0, #0]
 8008e6c:	b0a4      	sub	sp, #144	; 0x90
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d03b      	beq.n	8008eea <rcl_take+0x8a>
 8008e72:	461f      	mov	r7, r3
 8008e74:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d036      	beq.n	8008eea <rcl_take+0x8a>
 8008e7c:	460e      	mov	r6, r1
 8008e7e:	2900      	cmp	r1, #0
 8008e80:	d039      	beq.n	8008ef6 <rcl_take+0x96>
 8008e82:	4615      	mov	r5, r2
 8008e84:	2a00      	cmp	r2, #0
 8008e86:	d03c      	beq.n	8008f02 <rcl_take+0xa2>
 8008e88:	a802      	add	r0, sp, #8
 8008e8a:	f001 f9fd 	bl	800a288 <rmw_get_zero_initialized_message_info>
 8008e8e:	f10d 0c08 	add.w	ip, sp, #8
 8008e92:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008e96:	46ae      	mov	lr, r5
 8008e98:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008e9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008ea0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008ea4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008ea8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008eac:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8008eb0:	f04f 0800 	mov.w	r8, #0
 8008eb4:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8008eb8:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 8008ebc:	6822      	ldr	r2, [r4, #0]
 8008ebe:	462b      	mov	r3, r5
 8008ec0:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
 8008ec4:	9700      	str	r7, [sp, #0]
 8008ec6:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 8008eca:	4631      	mov	r1, r6
 8008ecc:	f001 ff12 	bl	800acf4 <rmw_take_with_info>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	b9c0      	cbnz	r0, 8008f06 <rcl_take+0xa6>
 8008ed4:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 8008ed8:	f240 1291 	movw	r2, #401	; 0x191
 8008edc:	2900      	cmp	r1, #0
 8008ede:	bf08      	it	eq
 8008ee0:	4613      	moveq	r3, r2
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	b024      	add	sp, #144	; 0x90
 8008ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eea:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008eee:	4618      	mov	r0, r3
 8008ef0:	b024      	add	sp, #144	; 0x90
 8008ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ef6:	230b      	movs	r3, #11
 8008ef8:	e7f3      	b.n	8008ee2 <rcl_take+0x82>
 8008efa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008efe:	4618      	mov	r0, r3
 8008f00:	4770      	bx	lr
 8008f02:	ad14      	add	r5, sp, #80	; 0x50
 8008f04:	e7c0      	b.n	8008e88 <rcl_take+0x28>
 8008f06:	f008 f931 	bl	801116c <rcl_convert_rmw_ret_to_rcl_ret>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	e7e9      	b.n	8008ee2 <rcl_take+0x82>
 8008f0e:	bf00      	nop

08008f10 <rcl_subscription_get_rmw_handle>:
 8008f10:	b118      	cbz	r0, 8008f1a <rcl_subscription_get_rmw_handle+0xa>
 8008f12:	6800      	ldr	r0, [r0, #0]
 8008f14:	b108      	cbz	r0, 8008f1a <rcl_subscription_get_rmw_handle+0xa>
 8008f16:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8008f1a:	4770      	bx	lr

08008f1c <rcl_subscription_is_valid>:
 8008f1c:	b130      	cbz	r0, 8008f2c <rcl_subscription_is_valid+0x10>
 8008f1e:	6800      	ldr	r0, [r0, #0]
 8008f20:	b120      	cbz	r0, 8008f2c <rcl_subscription_is_valid+0x10>
 8008f22:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8008f26:	3800      	subs	r0, #0
 8008f28:	bf18      	it	ne
 8008f2a:	2001      	movne	r0, #1
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop

08008f30 <_rclc_check_for_new_data>:
 8008f30:	2800      	cmp	r0, #0
 8008f32:	d046      	beq.n	8008fc2 <_rclc_check_for_new_data+0x92>
 8008f34:	b510      	push	{r4, lr}
 8008f36:	7802      	ldrb	r2, [r0, #0]
 8008f38:	b084      	sub	sp, #16
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2a0a      	cmp	r2, #10
 8008f3e:	d842      	bhi.n	8008fc6 <_rclc_check_for_new_data+0x96>
 8008f40:	e8df f002 	tbb	[pc, r2]
 8008f44:	14181212 	.word	0x14181212
 8008f48:	06060614 	.word	0x06060614
 8008f4c:	2e1a      	.short	0x2e1a
 8008f4e:	16          	.byte	0x16
 8008f4f:	00          	.byte	0x00
 8008f50:	6a0a      	ldr	r2, [r1, #32]
 8008f52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008f54:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008f58:	2000      	movs	r0, #0
 8008f5a:	1a12      	subs	r2, r2, r0
 8008f5c:	bf18      	it	ne
 8008f5e:	2201      	movne	r2, #1
 8008f60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008f64:	b004      	add	sp, #16
 8008f66:	bd10      	pop	{r4, pc}
 8008f68:	680a      	ldr	r2, [r1, #0]
 8008f6a:	e7f2      	b.n	8008f52 <_rclc_check_for_new_data+0x22>
 8008f6c:	698a      	ldr	r2, [r1, #24]
 8008f6e:	e7f0      	b.n	8008f52 <_rclc_check_for_new_data+0x22>
 8008f70:	688a      	ldr	r2, [r1, #8]
 8008f72:	e7ee      	b.n	8008f52 <_rclc_check_for_new_data+0x22>
 8008f74:	690a      	ldr	r2, [r1, #16]
 8008f76:	e7ec      	b.n	8008f52 <_rclc_check_for_new_data+0x22>
 8008f78:	685c      	ldr	r4, [r3, #4]
 8008f7a:	4608      	mov	r0, r1
 8008f7c:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8008f80:	f104 0143 	add.w	r1, r4, #67	; 0x43
 8008f84:	f104 0342 	add.w	r3, r4, #66	; 0x42
 8008f88:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8008f92:	f104 0341 	add.w	r3, r4, #65	; 0x41
 8008f96:	f104 0110 	add.w	r1, r4, #16
 8008f9a:	f009 ffc9 	bl	8012f30 <rcl_action_client_wait_set_get_entities_ready>
 8008f9e:	e7e1      	b.n	8008f64 <_rclc_check_for_new_data+0x34>
 8008fa0:	685c      	ldr	r4, [r3, #4]
 8008fa2:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8008fa6:	f104 0322 	add.w	r3, r4, #34	; 0x22
 8008faa:	e9cd 3200 	strd	r3, r2, [sp]
 8008fae:	4608      	mov	r0, r1
 8008fb0:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8008fb4:	f104 0220 	add.w	r2, r4, #32
 8008fb8:	f104 0110 	add.w	r1, r4, #16
 8008fbc:	f00a f9d0 	bl	8013360 <rcl_action_server_wait_set_get_entities_ready>
 8008fc0:	e7d0      	b.n	8008f64 <_rclc_check_for_new_data+0x34>
 8008fc2:	200b      	movs	r0, #11
 8008fc4:	4770      	bx	lr
 8008fc6:	2001      	movs	r0, #1
 8008fc8:	e7cc      	b.n	8008f64 <_rclc_check_for_new_data+0x34>
 8008fca:	bf00      	nop

08008fcc <_rclc_take_new_data>:
 8008fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fce:	b09b      	sub	sp, #108	; 0x6c
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	f000 8088 	beq.w	80090e6 <_rclc_take_new_data+0x11a>
 8008fd6:	7803      	ldrb	r3, [r0, #0]
 8008fd8:	4604      	mov	r4, r0
 8008fda:	2b0a      	cmp	r3, #10
 8008fdc:	f200 8167 	bhi.w	80092ae <_rclc_take_new_data+0x2e2>
 8008fe0:	e8df f003 	tbb	[pc, r3]
 8008fe4:	44152d2d 	.word	0x44152d2d
 8008fe8:	19191944 	.word	0x19191944
 8008fec:	065a      	.short	0x065a
 8008fee:	15          	.byte	0x15
 8008fef:	00          	.byte	0x00
 8008ff0:	6840      	ldr	r0, [r0, #4]
 8008ff2:	f890 3020 	ldrb.w	r3, [r0, #32]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f040 80b2 	bne.w	8009160 <_rclc_take_new_data+0x194>
 8008ffc:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8009000:	2b00      	cmp	r3, #0
 8009002:	f040 80e4 	bne.w	80091ce <_rclc_take_new_data+0x202>
 8009006:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800900a:	2b00      	cmp	r3, #0
 800900c:	d16f      	bne.n	80090ee <_rclc_take_new_data+0x122>
 800900e:	2500      	movs	r5, #0
 8009010:	4628      	mov	r0, r5
 8009012:	b01b      	add	sp, #108	; 0x6c
 8009014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009016:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009018:	6a0b      	ldr	r3, [r1, #32]
 800901a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d0f5      	beq.n	800900e <_rclc_take_new_data+0x42>
 8009022:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009026:	f104 0110 	add.w	r1, r4, #16
 800902a:	f008 fda3 	bl	8011b74 <rcl_take_request>
 800902e:	4605      	mov	r5, r0
 8009030:	2800      	cmp	r0, #0
 8009032:	d0ec      	beq.n	800900e <_rclc_take_new_data+0x42>
 8009034:	f240 2359 	movw	r3, #601	; 0x259
 8009038:	4298      	cmp	r0, r3
 800903a:	d013      	beq.n	8009064 <_rclc_take_new_data+0x98>
 800903c:	e029      	b.n	8009092 <_rclc_take_new_data+0xc6>
 800903e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009040:	680b      	ldr	r3, [r1, #0]
 8009042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d0e1      	beq.n	800900e <_rclc_take_new_data+0x42>
 800904a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800904e:	2300      	movs	r3, #0
 8009050:	aa0a      	add	r2, sp, #40	; 0x28
 8009052:	f7ff ff05 	bl	8008e60 <rcl_take>
 8009056:	4605      	mov	r5, r0
 8009058:	2800      	cmp	r0, #0
 800905a:	d0d9      	beq.n	8009010 <_rclc_take_new_data+0x44>
 800905c:	f240 1391 	movw	r3, #401	; 0x191
 8009060:	4298      	cmp	r0, r3
 8009062:	d116      	bne.n	8009092 <_rclc_take_new_data+0xc6>
 8009064:	2300      	movs	r3, #0
 8009066:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800906a:	e7d1      	b.n	8009010 <_rclc_take_new_data+0x44>
 800906c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800906e:	698b      	ldr	r3, [r1, #24]
 8009070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d0ca      	beq.n	800900e <_rclc_take_new_data+0x42>
 8009078:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800907c:	f104 0110 	add.w	r1, r4, #16
 8009080:	f008 f822 	bl	80110c8 <rcl_take_response>
 8009084:	4605      	mov	r5, r0
 8009086:	2800      	cmp	r0, #0
 8009088:	d0c1      	beq.n	800900e <_rclc_take_new_data+0x42>
 800908a:	f240 13f5 	movw	r3, #501	; 0x1f5
 800908e:	4298      	cmp	r0, r3
 8009090:	d0be      	beq.n	8009010 <_rclc_take_new_data+0x44>
 8009092:	f000 ff11 	bl	8009eb8 <rcutils_reset_error>
 8009096:	e7bb      	b.n	8009010 <_rclc_take_new_data+0x44>
 8009098:	6840      	ldr	r0, [r0, #4]
 800909a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d17d      	bne.n	800919e <_rclc_take_new_data+0x1d2>
 80090a2:	69c3      	ldr	r3, [r0, #28]
 80090a4:	b11b      	cbz	r3, 80090ae <_rclc_take_new_data+0xe2>
 80090a6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d144      	bne.n	8009138 <_rclc_take_new_data+0x16c>
 80090ae:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	f040 80ac 	bne.w	8009210 <_rclc_take_new_data+0x244>
 80090b8:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d0a6      	beq.n	800900e <_rclc_take_new_data+0x42>
 80090c0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80090c2:	a90a      	add	r1, sp, #40	; 0x28
 80090c4:	3010      	adds	r0, #16
 80090c6:	f009 fe0b 	bl	8012ce0 <rcl_action_take_result_response>
 80090ca:	4605      	mov	r5, r0
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d1e0      	bne.n	8009092 <_rclc_take_new_data+0xc6>
 80090d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80090d4:	6860      	ldr	r0, [r4, #4]
 80090d6:	f00a fa67 	bl	80135a8 <rclc_action_find_handle_by_result_request_sequence_number>
 80090da:	2800      	cmp	r0, #0
 80090dc:	d098      	beq.n	8009010 <_rclc_take_new_data+0x44>
 80090de:	2301      	movs	r3, #1
 80090e0:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 80090e4:	e794      	b.n	8009010 <_rclc_take_new_data+0x44>
 80090e6:	250b      	movs	r5, #11
 80090e8:	4628      	mov	r0, r5
 80090ea:	b01b      	add	sp, #108	; 0x6c
 80090ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090ee:	ae04      	add	r6, sp, #16
 80090f0:	aa0a      	add	r2, sp, #40	; 0x28
 80090f2:	3010      	adds	r0, #16
 80090f4:	4631      	mov	r1, r6
 80090f6:	f00a f867 	bl	80131c8 <rcl_action_take_cancel_request>
 80090fa:	4605      	mov	r5, r0
 80090fc:	2800      	cmp	r0, #0
 80090fe:	d1c8      	bne.n	8009092 <_rclc_take_new_data+0xc6>
 8009100:	6860      	ldr	r0, [r4, #4]
 8009102:	a90a      	add	r1, sp, #40	; 0x28
 8009104:	f00a fa0e 	bl	8013524 <rclc_action_find_goal_handle_by_uuid>
 8009108:	4607      	mov	r7, r0
 800910a:	2800      	cmp	r0, #0
 800910c:	f000 80bb 	beq.w	8009286 <_rclc_take_new_data+0x2ba>
 8009110:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8009114:	2101      	movs	r1, #1
 8009116:	f00a f98f 	bl	8013438 <rcl_action_transition_goal_state>
 800911a:	2803      	cmp	r0, #3
 800911c:	4684      	mov	ip, r0
 800911e:	f040 80a7 	bne.w	8009270 <_rclc_take_new_data+0x2a4>
 8009122:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009124:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8009128:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800912a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800912e:	e884 0003 	stmia.w	r4, {r0, r1}
 8009132:	f887 c008 	strb.w	ip, [r7, #8]
 8009136:	e76b      	b.n	8009010 <_rclc_take_new_data+0x44>
 8009138:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800913a:	3010      	adds	r0, #16
 800913c:	f009 fe50 	bl	8012de0 <rcl_action_take_feedback>
 8009140:	4605      	mov	r5, r0
 8009142:	2800      	cmp	r0, #0
 8009144:	d1a5      	bne.n	8009092 <_rclc_take_new_data+0xc6>
 8009146:	6860      	ldr	r0, [r4, #4]
 8009148:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800914a:	f00a f9eb 	bl	8013524 <rclc_action_find_goal_handle_by_uuid>
 800914e:	4603      	mov	r3, r0
 8009150:	2800      	cmp	r0, #0
 8009152:	f000 80a3 	beq.w	800929c <_rclc_take_new_data+0x2d0>
 8009156:	2201      	movs	r2, #1
 8009158:	6860      	ldr	r0, [r4, #4]
 800915a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800915e:	e7a6      	b.n	80090ae <_rclc_take_new_data+0xe2>
 8009160:	f00a f9ba 	bl	80134d8 <rclc_action_take_goal_handle>
 8009164:	4606      	mov	r6, r0
 8009166:	6860      	ldr	r0, [r4, #4]
 8009168:	2e00      	cmp	r6, #0
 800916a:	f43f af47 	beq.w	8008ffc <_rclc_take_new_data+0x30>
 800916e:	6070      	str	r0, [r6, #4]
 8009170:	69f2      	ldr	r2, [r6, #28]
 8009172:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8009176:	3010      	adds	r0, #16
 8009178:	f009 ff6e 	bl	8013058 <rcl_action_take_goal_request>
 800917c:	4605      	mov	r5, r0
 800917e:	2800      	cmp	r0, #0
 8009180:	f040 808e 	bne.w	80092a0 <_rclc_take_new_data+0x2d4>
 8009184:	69f7      	ldr	r7, [r6, #28]
 8009186:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009188:	7235      	strb	r5, [r6, #8]
 800918a:	f8c6 0009 	str.w	r0, [r6, #9]
 800918e:	f8c6 100d 	str.w	r1, [r6, #13]
 8009192:	6860      	ldr	r0, [r4, #4]
 8009194:	f8c6 2011 	str.w	r2, [r6, #17]
 8009198:	f8c6 3015 	str.w	r3, [r6, #21]
 800919c:	e72e      	b.n	8008ffc <_rclc_take_new_data+0x30>
 800919e:	aa04      	add	r2, sp, #16
 80091a0:	a90a      	add	r1, sp, #40	; 0x28
 80091a2:	3010      	adds	r0, #16
 80091a4:	f009 fd24 	bl	8012bf0 <rcl_action_take_goal_response>
 80091a8:	4605      	mov	r5, r0
 80091aa:	2800      	cmp	r0, #0
 80091ac:	f47f af71 	bne.w	8009092 <_rclc_take_new_data+0xc6>
 80091b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80091b4:	6860      	ldr	r0, [r4, #4]
 80091b6:	f00a f9e5 	bl	8013584 <rclc_action_find_handle_by_goal_request_sequence_number>
 80091ba:	b130      	cbz	r0, 80091ca <_rclc_take_new_data+0x1fe>
 80091bc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80091c0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 80091c4:	2201      	movs	r2, #1
 80091c6:	f880 2020 	strb.w	r2, [r0, #32]
 80091ca:	6860      	ldr	r0, [r4, #4]
 80091cc:	e769      	b.n	80090a2 <_rclc_take_new_data+0xd6>
 80091ce:	aa04      	add	r2, sp, #16
 80091d0:	3010      	adds	r0, #16
 80091d2:	a90a      	add	r1, sp, #40	; 0x28
 80091d4:	f009 ffb8 	bl	8013148 <rcl_action_take_result_request>
 80091d8:	4605      	mov	r5, r0
 80091da:	2800      	cmp	r0, #0
 80091dc:	f47f af59 	bne.w	8009092 <_rclc_take_new_data+0xc6>
 80091e0:	6860      	ldr	r0, [r4, #4]
 80091e2:	a904      	add	r1, sp, #16
 80091e4:	f00a f99e 	bl	8013524 <rclc_action_find_goal_handle_by_uuid>
 80091e8:	4607      	mov	r7, r0
 80091ea:	b160      	cbz	r0, 8009206 <_rclc_take_new_data+0x23a>
 80091ec:	ad0a      	add	r5, sp, #40	; 0x28
 80091ee:	f100 0640 	add.w	r6, r0, #64	; 0x40
 80091f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80091f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80091fa:	f04f 0c02 	mov.w	ip, #2
 80091fe:	e886 0003 	stmia.w	r6, {r0, r1}
 8009202:	f887 c008 	strb.w	ip, [r7, #8]
 8009206:	6860      	ldr	r0, [r4, #4]
 8009208:	2300      	movs	r3, #0
 800920a:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 800920e:	e6fa      	b.n	8009006 <_rclc_take_new_data+0x3a>
 8009210:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8009214:	a90a      	add	r1, sp, #40	; 0x28
 8009216:	3010      	adds	r0, #16
 8009218:	f009 fda2 	bl	8012d60 <rcl_action_take_cancel_response>
 800921c:	4605      	mov	r5, r0
 800921e:	2800      	cmp	r0, #0
 8009220:	f47f af37 	bne.w	8009092 <_rclc_take_new_data+0xc6>
 8009224:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009228:	6860      	ldr	r0, [r4, #4]
 800922a:	f00a f9cf 	bl	80135cc <rclc_action_find_handle_by_cancel_request_sequence_number>
 800922e:	4606      	mov	r6, r0
 8009230:	6860      	ldr	r0, [r4, #4]
 8009232:	2e00      	cmp	r6, #0
 8009234:	f43f af40 	beq.w	80090b8 <_rclc_take_new_data+0xec>
 8009238:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800923a:	2701      	movs	r7, #1
 800923c:	84b7      	strh	r7, [r6, #36]	; 0x24
 800923e:	2b00      	cmp	r3, #0
 8009240:	f43f af3a 	beq.w	80090b8 <_rclc_take_new_data+0xec>
 8009244:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009246:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800924a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800924e:	f00a f969 	bl	8013524 <rclc_action_find_goal_handle_by_uuid>
 8009252:	b138      	cbz	r0, 8009264 <_rclc_take_new_data+0x298>
 8009254:	6860      	ldr	r0, [r4, #4]
 8009256:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009258:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 800925c:	3501      	adds	r5, #1
 800925e:	42ab      	cmp	r3, r5
 8009260:	d8f0      	bhi.n	8009244 <_rclc_take_new_data+0x278>
 8009262:	e729      	b.n	80090b8 <_rclc_take_new_data+0xec>
 8009264:	6860      	ldr	r0, [r4, #4]
 8009266:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009268:	3501      	adds	r5, #1
 800926a:	42ab      	cmp	r3, r5
 800926c:	d8ea      	bhi.n	8009244 <_rclc_take_new_data+0x278>
 800926e:	e723      	b.n	80090b8 <_rclc_take_new_data+0xec>
 8009270:	ab06      	add	r3, sp, #24
 8009272:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009274:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009278:	2103      	movs	r1, #3
 800927a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800927e:	6860      	ldr	r0, [r4, #4]
 8009280:	f00a fa1a 	bl	80136b8 <rclc_action_server_goal_cancel_reject>
 8009284:	e6c4      	b.n	8009010 <_rclc_take_new_data+0x44>
 8009286:	ab06      	add	r3, sp, #24
 8009288:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800928a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800928e:	2102      	movs	r1, #2
 8009290:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009294:	6860      	ldr	r0, [r4, #4]
 8009296:	f00a fa0f 	bl	80136b8 <rclc_action_server_goal_cancel_reject>
 800929a:	e6b9      	b.n	8009010 <_rclc_take_new_data+0x44>
 800929c:	6860      	ldr	r0, [r4, #4]
 800929e:	e706      	b.n	80090ae <_rclc_take_new_data+0xe2>
 80092a0:	6860      	ldr	r0, [r4, #4]
 80092a2:	4631      	mov	r1, r6
 80092a4:	f00a f928 	bl	80134f8 <rclc_action_remove_used_goal_handle>
 80092a8:	f000 fe06 	bl	8009eb8 <rcutils_reset_error>
 80092ac:	e6b0      	b.n	8009010 <_rclc_take_new_data+0x44>
 80092ae:	2501      	movs	r5, #1
 80092b0:	e6ae      	b.n	8009010 <_rclc_take_new_data+0x44>
 80092b2:	bf00      	nop

080092b4 <_rclc_execute.part.0>:
 80092b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092b6:	7803      	ldrb	r3, [r0, #0]
 80092b8:	b087      	sub	sp, #28
 80092ba:	4604      	mov	r4, r0
 80092bc:	2b0a      	cmp	r3, #10
 80092be:	f200 8136 	bhi.w	800952e <_rclc_execute.part.0+0x27a>
 80092c2:	e8df f003 	tbb	[pc, r3]
 80092c6:	435e      	.short	0x435e
 80092c8:	06a1664f 	.word	0x06a1664f
 80092cc:	6c1e0606 	.word	0x6c1e0606
 80092d0:	59          	.byte	0x59
 80092d1:	00          	.byte	0x00
 80092d2:	2b06      	cmp	r3, #6
 80092d4:	f000 8122 	beq.w	800951c <_rclc_execute.part.0+0x268>
 80092d8:	2b07      	cmp	r3, #7
 80092da:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80092dc:	f040 8118 	bne.w	8009510 <_rclc_execute.part.0+0x25c>
 80092e0:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 80092e4:	6880      	ldr	r0, [r0, #8]
 80092e6:	4798      	blx	r3
 80092e8:	f104 0110 	add.w	r1, r4, #16
 80092ec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80092ee:	6860      	ldr	r0, [r4, #4]
 80092f0:	f008 fc80 	bl	8011bf4 <rcl_send_response>
 80092f4:	2800      	cmp	r0, #0
 80092f6:	d033      	beq.n	8009360 <_rclc_execute.part.0+0xac>
 80092f8:	9005      	str	r0, [sp, #20]
 80092fa:	f000 fddd 	bl	8009eb8 <rcutils_reset_error>
 80092fe:	9805      	ldr	r0, [sp, #20]
 8009300:	e02e      	b.n	8009360 <_rclc_execute.part.0+0xac>
 8009302:	6840      	ldr	r0, [r0, #4]
 8009304:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8009308:	2b00      	cmp	r3, #0
 800930a:	f000 8086 	beq.w	800941a <_rclc_execute.part.0+0x166>
 800930e:	2600      	movs	r6, #0
 8009310:	2701      	movs	r7, #1
 8009312:	e004      	b.n	800931e <_rclc_execute.part.0+0x6a>
 8009314:	f00a f8ba 	bl	801348c <rclc_action_send_result_request>
 8009318:	b998      	cbnz	r0, 8009342 <_rclc_execute.part.0+0x8e>
 800931a:	722f      	strb	r7, [r5, #8]
 800931c:	6860      	ldr	r0, [r4, #4]
 800931e:	f00a f967 	bl	80135f0 <rclc_action_find_first_handle_with_goal_response>
 8009322:	4605      	mov	r5, r0
 8009324:	2800      	cmp	r0, #0
 8009326:	d077      	beq.n	8009418 <_rclc_execute.part.0+0x164>
 8009328:	6863      	ldr	r3, [r4, #4]
 800932a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 8009332:	f885 6020 	strb.w	r6, [r5, #32]
 8009336:	4798      	blx	r3
 8009338:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800933c:	4628      	mov	r0, r5
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1e8      	bne.n	8009314 <_rclc_execute.part.0+0x60>
 8009342:	6860      	ldr	r0, [r4, #4]
 8009344:	4629      	mov	r1, r5
 8009346:	f00a f8d7 	bl	80134f8 <rclc_action_remove_used_goal_handle>
 800934a:	e7e7      	b.n	800931c <_rclc_execute.part.0+0x68>
 800934c:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 8009350:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 8009354:	2d00      	cmp	r5, #0
 8009356:	f000 80c9 	beq.w	80094ec <_rclc_execute.part.0+0x238>
 800935a:	6880      	ldr	r0, [r0, #8]
 800935c:	4798      	blx	r3
 800935e:	2000      	movs	r0, #0
 8009360:	b007      	add	sp, #28
 8009362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009364:	6840      	ldr	r0, [r0, #4]
 8009366:	f008 fd03 	bl	8011d70 <rcl_timer_call>
 800936a:	f240 3321 	movw	r3, #801	; 0x321
 800936e:	4298      	cmp	r0, r3
 8009370:	d004      	beq.n	800937c <_rclc_execute.part.0+0xc8>
 8009372:	2800      	cmp	r0, #0
 8009374:	d0f4      	beq.n	8009360 <_rclc_execute.part.0+0xac>
 8009376:	e7bf      	b.n	80092f8 <_rclc_execute.part.0+0x44>
 8009378:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800937a:	4798      	blx	r3
 800937c:	2000      	movs	r0, #0
 800937e:	b007      	add	sp, #28
 8009380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009382:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 8009386:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009388:	b925      	cbnz	r5, 8009394 <_rclc_execute.part.0+0xe0>
 800938a:	4628      	mov	r0, r5
 800938c:	4798      	blx	r3
 800938e:	4628      	mov	r0, r5
 8009390:	e7e6      	b.n	8009360 <_rclc_execute.part.0+0xac>
 8009392:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009394:	68a0      	ldr	r0, [r4, #8]
 8009396:	4798      	blx	r3
 8009398:	2000      	movs	r0, #0
 800939a:	b007      	add	sp, #28
 800939c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800939e:	6840      	ldr	r0, [r0, #4]
 80093a0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80093a4:	bb3b      	cbnz	r3, 80093f6 <_rclc_execute.part.0+0x142>
 80093a6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d07b      	beq.n	80094a6 <_rclc_execute.part.0+0x1f2>
 80093ae:	f640 0634 	movw	r6, #2100	; 0x834
 80093b2:	2701      	movs	r7, #1
 80093b4:	e007      	b.n	80093c6 <_rclc_execute.part.0+0x112>
 80093b6:	4628      	mov	r0, r5
 80093b8:	f00a f932 	bl	8013620 <rclc_action_server_response_goal_request>
 80093bc:	6860      	ldr	r0, [r4, #4]
 80093be:	4629      	mov	r1, r5
 80093c0:	f00a f89a 	bl	80134f8 <rclc_action_remove_used_goal_handle>
 80093c4:	6860      	ldr	r0, [r4, #4]
 80093c6:	2100      	movs	r1, #0
 80093c8:	f00a f8c4 	bl	8013554 <rclc_action_find_first_handle_by_status>
 80093cc:	4605      	mov	r5, r0
 80093ce:	2800      	cmp	r0, #0
 80093d0:	d066      	beq.n	80094a0 <_rclc_execute.part.0+0x1ec>
 80093d2:	6863      	ldr	r3, [r4, #4]
 80093d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	4798      	blx	r3
 80093da:	42b0      	cmp	r0, r6
 80093dc:	f04f 0100 	mov.w	r1, #0
 80093e0:	d1e9      	bne.n	80093b6 <_rclc_execute.part.0+0x102>
 80093e2:	2101      	movs	r1, #1
 80093e4:	4628      	mov	r0, r5
 80093e6:	f00a f91b 	bl	8013620 <rclc_action_server_response_goal_request>
 80093ea:	722f      	strb	r7, [r5, #8]
 80093ec:	e7ea      	b.n	80093c4 <_rclc_execute.part.0+0x110>
 80093ee:	6848      	ldr	r0, [r1, #4]
 80093f0:	f00a f882 	bl	80134f8 <rclc_action_remove_used_goal_handle>
 80093f4:	6860      	ldr	r0, [r4, #4]
 80093f6:	f00a f8b9 	bl	801356c <rclc_action_find_first_terminated_handle>
 80093fa:	4601      	mov	r1, r0
 80093fc:	2800      	cmp	r0, #0
 80093fe:	d1f6      	bne.n	80093ee <_rclc_execute.part.0+0x13a>
 8009400:	6860      	ldr	r0, [r4, #4]
 8009402:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8009406:	e7ce      	b.n	80093a6 <_rclc_execute.part.0+0xf2>
 8009408:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800940a:	6880      	ldr	r0, [r0, #8]
 800940c:	f104 0110 	add.w	r1, r4, #16
 8009410:	4798      	blx	r3
 8009412:	2000      	movs	r0, #0
 8009414:	b007      	add	sp, #28
 8009416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009418:	6860      	ldr	r0, [r4, #4]
 800941a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800941e:	b18b      	cbz	r3, 8009444 <_rclc_execute.part.0+0x190>
 8009420:	68c5      	ldr	r5, [r0, #12]
 8009422:	b32d      	cbz	r5, 8009470 <_rclc_execute.part.0+0x1bc>
 8009424:	2600      	movs	r6, #0
 8009426:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800942a:	b143      	cbz	r3, 800943e <_rclc_execute.part.0+0x18a>
 800942c:	69c3      	ldr	r3, [r0, #28]
 800942e:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 8009432:	b123      	cbz	r3, 800943e <_rclc_execute.part.0+0x18a>
 8009434:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009436:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009438:	4628      	mov	r0, r5
 800943a:	4798      	blx	r3
 800943c:	6860      	ldr	r0, [r4, #4]
 800943e:	682d      	ldr	r5, [r5, #0]
 8009440:	2d00      	cmp	r5, #0
 8009442:	d1f0      	bne.n	8009426 <_rclc_execute.part.0+0x172>
 8009444:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8009448:	b193      	cbz	r3, 8009470 <_rclc_execute.part.0+0x1bc>
 800944a:	68c5      	ldr	r5, [r0, #12]
 800944c:	b185      	cbz	r5, 8009470 <_rclc_execute.part.0+0x1bc>
 800944e:	2600      	movs	r6, #0
 8009450:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8009454:	b14b      	cbz	r3, 800946a <_rclc_execute.part.0+0x1b6>
 8009456:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009458:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 800945c:	b12b      	cbz	r3, 800946a <_rclc_execute.part.0+0x1b6>
 800945e:	4628      	mov	r0, r5
 8009460:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 8009464:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009466:	4798      	blx	r3
 8009468:	6860      	ldr	r0, [r4, #4]
 800946a:	682d      	ldr	r5, [r5, #0]
 800946c:	2d00      	cmp	r5, #0
 800946e:	d1ef      	bne.n	8009450 <_rclc_execute.part.0+0x19c>
 8009470:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8009474:	2b00      	cmp	r3, #0
 8009476:	d081      	beq.n	800937c <_rclc_execute.part.0+0xc8>
 8009478:	2700      	movs	r7, #0
 800947a:	e00b      	b.n	8009494 <_rclc_execute.part.0+0x1e0>
 800947c:	6863      	ldr	r3, [r4, #4]
 800947e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009480:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009482:	6a1e      	ldr	r6, [r3, #32]
 8009484:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 8009488:	47b0      	blx	r6
 800948a:	6860      	ldr	r0, [r4, #4]
 800948c:	4629      	mov	r1, r5
 800948e:	f00a f833 	bl	80134f8 <rclc_action_remove_used_goal_handle>
 8009492:	6860      	ldr	r0, [r4, #4]
 8009494:	f00a f8b8 	bl	8013608 <rclc_action_find_first_handle_with_result_response>
 8009498:	4605      	mov	r5, r0
 800949a:	2800      	cmp	r0, #0
 800949c:	d1ee      	bne.n	800947c <_rclc_execute.part.0+0x1c8>
 800949e:	e76d      	b.n	800937c <_rclc_execute.part.0+0xc8>
 80094a0:	6860      	ldr	r0, [r4, #4]
 80094a2:	f880 5020 	strb.w	r5, [r0, #32]
 80094a6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f43f af66 	beq.w	800937c <_rclc_execute.part.0+0xc8>
 80094b0:	68c5      	ldr	r5, [r0, #12]
 80094b2:	b1b5      	cbz	r5, 80094e2 <_rclc_execute.part.0+0x22e>
 80094b4:	2602      	movs	r6, #2
 80094b6:	e001      	b.n	80094bc <_rclc_execute.part.0+0x208>
 80094b8:	682d      	ldr	r5, [r5, #0]
 80094ba:	b195      	cbz	r5, 80094e2 <_rclc_execute.part.0+0x22e>
 80094bc:	f995 3008 	ldrsb.w	r3, [r5, #8]
 80094c0:	2b03      	cmp	r3, #3
 80094c2:	d1f9      	bne.n	80094b8 <_rclc_execute.part.0+0x204>
 80094c4:	69c3      	ldr	r3, [r0, #28]
 80094c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80094c8:	4628      	mov	r0, r5
 80094ca:	4798      	blx	r3
 80094cc:	4603      	mov	r3, r0
 80094ce:	f105 0260 	add.w	r2, r5, #96	; 0x60
 80094d2:	4628      	mov	r0, r5
 80094d4:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80094d8:	b163      	cbz	r3, 80094f4 <_rclc_execute.part.0+0x240>
 80094da:	f00a f8c1 	bl	8013660 <rclc_action_server_goal_cancel_accept>
 80094de:	6860      	ldr	r0, [r4, #4]
 80094e0:	e7ea      	b.n	80094b8 <_rclc_execute.part.0+0x204>
 80094e2:	2300      	movs	r3, #0
 80094e4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 80094e8:	4618      	mov	r0, r3
 80094ea:	e739      	b.n	8009360 <_rclc_execute.part.0+0xac>
 80094ec:	4628      	mov	r0, r5
 80094ee:	4798      	blx	r3
 80094f0:	4628      	mov	r0, r5
 80094f2:	e735      	b.n	8009360 <_rclc_execute.part.0+0xac>
 80094f4:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80094f6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80094fa:	f105 0758 	add.w	r7, r5, #88	; 0x58
 80094fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009502:	6860      	ldr	r0, [r4, #4]
 8009504:	2101      	movs	r1, #1
 8009506:	f00a f8d7 	bl	80136b8 <rclc_action_server_goal_cancel_reject>
 800950a:	722e      	strb	r6, [r5, #8]
 800950c:	6860      	ldr	r0, [r4, #4]
 800950e:	e7d3      	b.n	80094b8 <_rclc_execute.part.0+0x204>
 8009510:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009512:	6880      	ldr	r0, [r0, #8]
 8009514:	4798      	blx	r3
 8009516:	f104 0110 	add.w	r1, r4, #16
 800951a:	e6e7      	b.n	80092ec <_rclc_execute.part.0+0x38>
 800951c:	f100 0110 	add.w	r1, r0, #16
 8009520:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009522:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009524:	6880      	ldr	r0, [r0, #8]
 8009526:	9105      	str	r1, [sp, #20]
 8009528:	4798      	blx	r3
 800952a:	9905      	ldr	r1, [sp, #20]
 800952c:	e6de      	b.n	80092ec <_rclc_execute.part.0+0x38>
 800952e:	2001      	movs	r0, #1
 8009530:	e716      	b.n	8009360 <_rclc_execute.part.0+0xac>
 8009532:	bf00      	nop

08009534 <rclc_executor_trigger_any>:
 8009534:	2800      	cmp	r0, #0
 8009536:	d03f      	beq.n	80095b8 <rclc_executor_trigger_any+0x84>
 8009538:	2900      	cmp	r1, #0
 800953a:	d03e      	beq.n	80095ba <rclc_executor_trigger_any+0x86>
 800953c:	4603      	mov	r3, r0
 800953e:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 8009542:	2200      	movs	r2, #0
 8009544:	2800      	cmp	r0, #0
 8009546:	d037      	beq.n	80095b8 <rclc_executor_trigger_any+0x84>
 8009548:	b430      	push	{r4, r5}
 800954a:	f893 c000 	ldrb.w	ip, [r3]
 800954e:	f1bc 0f08 	cmp.w	ip, #8
 8009552:	d11e      	bne.n	8009592 <rclc_executor_trigger_any+0x5e>
 8009554:	685c      	ldr	r4, [r3, #4]
 8009556:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8009558:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800955c:	d105      	bne.n	800956a <rclc_executor_trigger_any+0x36>
 800955e:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8009562:	b910      	cbnz	r0, 800956a <rclc_executor_trigger_any+0x36>
 8009564:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 8009568:	b128      	cbz	r0, 8009576 <rclc_executor_trigger_any+0x42>
 800956a:	bc30      	pop	{r4, r5}
 800956c:	4770      	bx	lr
 800956e:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 8009572:	2800      	cmp	r0, #0
 8009574:	d1f9      	bne.n	800956a <rclc_executor_trigger_any+0x36>
 8009576:	3201      	adds	r2, #1
 8009578:	4291      	cmp	r1, r2
 800957a:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800957e:	d018      	beq.n	80095b2 <rclc_executor_trigger_any+0x7e>
 8009580:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 8009584:	2800      	cmp	r0, #0
 8009586:	d0f0      	beq.n	800956a <rclc_executor_trigger_any+0x36>
 8009588:	f893 c000 	ldrb.w	ip, [r3]
 800958c:	f1bc 0f08 	cmp.w	ip, #8
 8009590:	d0e0      	beq.n	8009554 <rclc_executor_trigger_any+0x20>
 8009592:	f1bc 0f09 	cmp.w	ip, #9
 8009596:	d1ea      	bne.n	800956e <rclc_executor_trigger_any+0x3a>
 8009598:	685c      	ldr	r4, [r3, #4]
 800959a:	6a25      	ldr	r5, [r4, #32]
 800959c:	2d00      	cmp	r5, #0
 800959e:	d1e4      	bne.n	800956a <rclc_executor_trigger_any+0x36>
 80095a0:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 80095a4:	2800      	cmp	r0, #0
 80095a6:	d1e0      	bne.n	800956a <rclc_executor_trigger_any+0x36>
 80095a8:	3201      	adds	r2, #1
 80095aa:	4291      	cmp	r1, r2
 80095ac:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80095b0:	d1e6      	bne.n	8009580 <rclc_executor_trigger_any+0x4c>
 80095b2:	2000      	movs	r0, #0
 80095b4:	bc30      	pop	{r4, r5}
 80095b6:	4770      	bx	lr
 80095b8:	4770      	bx	lr
 80095ba:	4608      	mov	r0, r1
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop

080095c0 <rclc_executor_get_zero_initialized_executor>:
 80095c0:	b510      	push	{r4, lr}
 80095c2:	4903      	ldr	r1, [pc, #12]	; (80095d0 <rclc_executor_get_zero_initialized_executor+0x10>)
 80095c4:	4604      	mov	r4, r0
 80095c6:	2288      	movs	r2, #136	; 0x88
 80095c8:	f00e f98b 	bl	80178e2 <memcpy>
 80095cc:	4620      	mov	r0, r4
 80095ce:	bd10      	pop	{r4, pc}
 80095d0:	080187e8 	.word	0x080187e8
 80095d4:	00000000 	.word	0x00000000

080095d8 <rclc_executor_init>:
 80095d8:	2800      	cmp	r0, #0
 80095da:	d05f      	beq.n	800969c <rclc_executor_init+0xc4>
 80095dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095e0:	460c      	mov	r4, r1
 80095e2:	b0b0      	sub	sp, #192	; 0xc0
 80095e4:	2900      	cmp	r1, #0
 80095e6:	d051      	beq.n	800968c <rclc_executor_init+0xb4>
 80095e8:	4605      	mov	r5, r0
 80095ea:	4618      	mov	r0, r3
 80095ec:	4616      	mov	r6, r2
 80095ee:	461f      	mov	r7, r3
 80095f0:	f000 fc26 	bl	8009e40 <rcutils_allocator_is_valid>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d049      	beq.n	800968c <rclc_executor_init+0xb4>
 80095f8:	2e00      	cmp	r6, #0
 80095fa:	d047      	beq.n	800968c <rclc_executor_init+0xb4>
 80095fc:	492c      	ldr	r1, [pc, #176]	; (80096b0 <rclc_executor_init+0xd8>)
 80095fe:	2288      	movs	r2, #136	; 0x88
 8009600:	a80e      	add	r0, sp, #56	; 0x38
 8009602:	f00e f96e 	bl	80178e2 <memcpy>
 8009606:	a90e      	add	r1, sp, #56	; 0x38
 8009608:	2288      	movs	r2, #136	; 0x88
 800960a:	4628      	mov	r0, r5
 800960c:	f00e f969 	bl	80178e2 <memcpy>
 8009610:	602c      	str	r4, [r5, #0]
 8009612:	4668      	mov	r0, sp
 8009614:	60ae      	str	r6, [r5, #8]
 8009616:	466c      	mov	r4, sp
 8009618:	f008 fd1c 	bl	8012054 <rcl_get_zero_initialized_wait_set>
 800961c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800961e:	f105 0c14 	add.w	ip, r5, #20
 8009622:	f8d7 8000 	ldr.w	r8, [r7]
 8009626:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800962a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800962c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009632:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009636:	ed9f 7b1c 	vldr	d7, [pc, #112]	; 80096a8 <rclc_executor_init+0xd0>
 800963a:	6823      	ldr	r3, [r4, #0]
 800963c:	f8cc 3000 	str.w	r3, [ip]
 8009640:	6939      	ldr	r1, [r7, #16]
 8009642:	612f      	str	r7, [r5, #16]
 8009644:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 8009648:	01b0      	lsls	r0, r6, #6
 800964a:	47c0      	blx	r8
 800964c:	6068      	str	r0, [r5, #4]
 800964e:	b338      	cbz	r0, 80096a0 <rclc_executor_init+0xc8>
 8009650:	2400      	movs	r4, #0
 8009652:	e000      	b.n	8009656 <rclc_executor_init+0x7e>
 8009654:	6868      	ldr	r0, [r5, #4]
 8009656:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800965a:	4631      	mov	r1, r6
 800965c:	3401      	adds	r4, #1
 800965e:	f000 fa73 	bl	8009b48 <rclc_executor_handle_init>
 8009662:	42a6      	cmp	r6, r4
 8009664:	d1f6      	bne.n	8009654 <rclc_executor_init+0x7c>
 8009666:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800966a:	f000 fa63 	bl	8009b34 <rclc_executor_handle_counters_zero_init>
 800966e:	4a11      	ldr	r2, [pc, #68]	; (80096b4 <rclc_executor_init+0xdc>)
 8009670:	686b      	ldr	r3, [r5, #4]
 8009672:	2000      	movs	r0, #0
 8009674:	e9c5 201e 	strd	r2, r0, [r5, #120]	; 0x78
 8009678:	b163      	cbz	r3, 8009694 <rclc_executor_init+0xbc>
 800967a:	692b      	ldr	r3, [r5, #16]
 800967c:	b153      	cbz	r3, 8009694 <rclc_executor_init+0xbc>
 800967e:	68ab      	ldr	r3, [r5, #8]
 8009680:	b143      	cbz	r3, 8009694 <rclc_executor_init+0xbc>
 8009682:	f885 0080 	strb.w	r0, [r5, #128]	; 0x80
 8009686:	b030      	add	sp, #192	; 0xc0
 8009688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800968c:	200b      	movs	r0, #11
 800968e:	b030      	add	sp, #192	; 0xc0
 8009690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009694:	4618      	mov	r0, r3
 8009696:	b030      	add	sp, #192	; 0xc0
 8009698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800969c:	200b      	movs	r0, #11
 800969e:	4770      	bx	lr
 80096a0:	200a      	movs	r0, #10
 80096a2:	e7f4      	b.n	800968e <rclc_executor_init+0xb6>
 80096a4:	f3af 8000 	nop.w
 80096a8:	3b9aca00 	.word	0x3b9aca00
 80096ac:	00000000 	.word	0x00000000
 80096b0:	080187e8 	.word	0x080187e8
 80096b4:	08009535 	.word	0x08009535

080096b8 <rclc_executor_add_subscription>:
 80096b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ba:	f89d e018 	ldrb.w	lr, [sp, #24]
 80096be:	b338      	cbz	r0, 8009710 <rclc_executor_add_subscription+0x58>
 80096c0:	b331      	cbz	r1, 8009710 <rclc_executor_add_subscription+0x58>
 80096c2:	b32a      	cbz	r2, 8009710 <rclc_executor_add_subscription+0x58>
 80096c4:	b323      	cbz	r3, 8009710 <rclc_executor_add_subscription+0x58>
 80096c6:	4604      	mov	r4, r0
 80096c8:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 80096cc:	42a8      	cmp	r0, r5
 80096ce:	d301      	bcc.n	80096d4 <rclc_executor_add_subscription+0x1c>
 80096d0:	2001      	movs	r0, #1
 80096d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096d4:	6866      	ldr	r6, [r4, #4]
 80096d6:	0187      	lsls	r7, r0, #6
 80096d8:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 80096dc:	2500      	movs	r5, #0
 80096de:	55f5      	strb	r5, [r6, r7]
 80096e0:	3001      	adds	r0, #1
 80096e2:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
 80096e6:	f8cc 502c 	str.w	r5, [ip, #44]	; 0x2c
 80096ea:	2301      	movs	r3, #1
 80096ec:	f104 0514 	add.w	r5, r4, #20
 80096f0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 80096f4:	f88c e001 	strb.w	lr, [ip, #1]
 80096f8:	f8ac 3038 	strh.w	r3, [ip, #56]	; 0x38
 80096fc:	60e0      	str	r0, [r4, #12]
 80096fe:	4628      	mov	r0, r5
 8009700:	f008 fcbc 	bl	801207c <rcl_wait_set_is_valid>
 8009704:	b930      	cbnz	r0, 8009714 <rclc_executor_add_subscription+0x5c>
 8009706:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009708:	3301      	adds	r3, #1
 800970a:	2000      	movs	r0, #0
 800970c:	64a3      	str	r3, [r4, #72]	; 0x48
 800970e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009710:	200b      	movs	r0, #11
 8009712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009714:	4628      	mov	r0, r5
 8009716:	f008 fcb7 	bl	8012088 <rcl_wait_set_fini>
 800971a:	2800      	cmp	r0, #0
 800971c:	d0f3      	beq.n	8009706 <rclc_executor_add_subscription+0x4e>
 800971e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009720 <rclc_executor_prepare>:
 8009720:	2800      	cmp	r0, #0
 8009722:	d044      	beq.n	80097ae <rclc_executor_prepare+0x8e>
 8009724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009726:	f100 0514 	add.w	r5, r0, #20
 800972a:	b09b      	sub	sp, #108	; 0x6c
 800972c:	4604      	mov	r4, r0
 800972e:	4628      	mov	r0, r5
 8009730:	f008 fca4 	bl	801207c <rcl_wait_set_is_valid>
 8009734:	b110      	cbz	r0, 800973c <rclc_executor_prepare+0x1c>
 8009736:	2000      	movs	r0, #0
 8009738:	b01b      	add	sp, #108	; 0x6c
 800973a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800973c:	4628      	mov	r0, r5
 800973e:	f008 fca3 	bl	8012088 <rcl_wait_set_fini>
 8009742:	2800      	cmp	r0, #0
 8009744:	d130      	bne.n	80097a8 <rclc_executor_prepare+0x88>
 8009746:	a80c      	add	r0, sp, #48	; 0x30
 8009748:	f008 fc84 	bl	8012054 <rcl_get_zero_initialized_wait_set>
 800974c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8009750:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009754:	46ae      	mov	lr, r5
 8009756:	6927      	ldr	r7, [r4, #16]
 8009758:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800975c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009760:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009764:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009768:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800976c:	f8dc 3000 	ldr.w	r3, [ip]
 8009770:	f8ce 3000 	str.w	r3, [lr]
 8009774:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009776:	ae04      	add	r6, sp, #16
 8009778:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	6822      	ldr	r2, [r4, #0]
 800977e:	6033      	str	r3, [r6, #0]
 8009780:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009782:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8009784:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8009788:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 800978c:	e9cd 2100 	strd	r2, r1, [sp]
 8009790:	4628      	mov	r0, r5
 8009792:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8009794:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009796:	f008 ff75 	bl	8012684 <rcl_wait_set_init>
 800979a:	2800      	cmp	r0, #0
 800979c:	d0cc      	beq.n	8009738 <rclc_executor_prepare+0x18>
 800979e:	900b      	str	r0, [sp, #44]	; 0x2c
 80097a0:	f000 fb8a 	bl	8009eb8 <rcutils_reset_error>
 80097a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80097a6:	e7c7      	b.n	8009738 <rclc_executor_prepare+0x18>
 80097a8:	f000 fb86 	bl	8009eb8 <rcutils_reset_error>
 80097ac:	e7cb      	b.n	8009746 <rclc_executor_prepare+0x26>
 80097ae:	200b      	movs	r0, #11
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop

080097b4 <rclc_executor_spin_some.part.0>:
 80097b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b8:	f100 0614 	add.w	r6, r0, #20
 80097bc:	b083      	sub	sp, #12
 80097be:	4691      	mov	r9, r2
 80097c0:	4698      	mov	r8, r3
 80097c2:	4605      	mov	r5, r0
 80097c4:	f7ff ffac 	bl	8009720 <rclc_executor_prepare>
 80097c8:	4630      	mov	r0, r6
 80097ca:	f008 fd29 	bl	8012220 <rcl_wait_set_clear>
 80097ce:	4607      	mov	r7, r0
 80097d0:	2800      	cmp	r0, #0
 80097d2:	f040 80ed 	bne.w	80099b0 <rclc_executor_spin_some.part.0+0x1fc>
 80097d6:	68ab      	ldr	r3, [r5, #8]
 80097d8:	4604      	mov	r4, r0
 80097da:	b303      	cbz	r3, 800981e <rclc_executor_spin_some.part.0+0x6a>
 80097dc:	6869      	ldr	r1, [r5, #4]
 80097de:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 80097e2:	01a2      	lsls	r2, r4, #6
 80097e4:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 80097e8:	b1cb      	cbz	r3, 800981e <rclc_executor_spin_some.part.0+0x6a>
 80097ea:	5c8b      	ldrb	r3, [r1, r2]
 80097ec:	2b0a      	cmp	r3, #10
 80097ee:	f200 80d8 	bhi.w	80099a2 <rclc_executor_spin_some.part.0+0x1ee>
 80097f2:	e8df f003 	tbb	[pc, r3]
 80097f6:	9c9c      	.short	0x9c9c
 80097f8:	068c8ca7 	.word	0x068c8ca7
 80097fc:	bdc90606 	.word	0xbdc90606
 8009800:	b2          	.byte	0xb2
 8009801:	00          	.byte	0x00
 8009802:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009806:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800980a:	4630      	mov	r0, r6
 800980c:	f009 f850 	bl	80128b0 <rcl_wait_set_add_service>
 8009810:	2800      	cmp	r0, #0
 8009812:	f040 8086 	bne.w	8009922 <rclc_executor_spin_some.part.0+0x16e>
 8009816:	68ab      	ldr	r3, [r5, #8]
 8009818:	3401      	adds	r4, #1
 800981a:	429c      	cmp	r4, r3
 800981c:	d3de      	bcc.n	80097dc <rclc_executor_spin_some.part.0+0x28>
 800981e:	4643      	mov	r3, r8
 8009820:	464a      	mov	r2, r9
 8009822:	4630      	mov	r0, r6
 8009824:	f009 f870 	bl	8012908 <rcl_wait>
 8009828:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 800982c:	2b00      	cmp	r3, #0
 800982e:	f000 80c7 	beq.w	80099c0 <rclc_executor_spin_some.part.0+0x20c>
 8009832:	2b01      	cmp	r3, #1
 8009834:	f040 80b5 	bne.w	80099a2 <rclc_executor_spin_some.part.0+0x1ee>
 8009838:	68ab      	ldr	r3, [r5, #8]
 800983a:	2b00      	cmp	r3, #0
 800983c:	f000 8159 	beq.w	8009af2 <rclc_executor_spin_some.part.0+0x33e>
 8009840:	2400      	movs	r4, #0
 8009842:	46a0      	mov	r8, r4
 8009844:	f240 1991 	movw	r9, #401	; 0x191
 8009848:	e00a      	b.n	8009860 <rclc_executor_spin_some.part.0+0xac>
 800984a:	f7ff fb71 	bl	8008f30 <_rclc_check_for_new_data>
 800984e:	4604      	mov	r4, r0
 8009850:	b110      	cbz	r0, 8009858 <rclc_executor_spin_some.part.0+0xa4>
 8009852:	4548      	cmp	r0, r9
 8009854:	f040 80b2 	bne.w	80099bc <rclc_executor_spin_some.part.0+0x208>
 8009858:	68ab      	ldr	r3, [r5, #8]
 800985a:	4598      	cmp	r8, r3
 800985c:	f080 8126 	bcs.w	8009aac <rclc_executor_spin_some.part.0+0x2f8>
 8009860:	686a      	ldr	r2, [r5, #4]
 8009862:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8009866:	4631      	mov	r1, r6
 8009868:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800986c:	f108 0801 	add.w	r8, r8, #1
 8009870:	f1bc 0f00 	cmp.w	ip, #0
 8009874:	d1e9      	bne.n	800984a <rclc_executor_spin_some.part.0+0x96>
 8009876:	4619      	mov	r1, r3
 8009878:	4610      	mov	r0, r2
 800987a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 800987e:	4798      	blx	r3
 8009880:	2800      	cmp	r0, #0
 8009882:	f000 809b 	beq.w	80099bc <rclc_executor_spin_some.part.0+0x208>
 8009886:	68ab      	ldr	r3, [r5, #8]
 8009888:	2b00      	cmp	r3, #0
 800988a:	f000 8097 	beq.w	80099bc <rclc_executor_spin_some.part.0+0x208>
 800988e:	f04f 0800 	mov.w	r8, #0
 8009892:	f240 1991 	movw	r9, #401	; 0x191
 8009896:	e009      	b.n	80098ac <rclc_executor_spin_some.part.0+0xf8>
 8009898:	f7ff fb98 	bl	8008fcc <_rclc_take_new_data>
 800989c:	4604      	mov	r4, r0
 800989e:	b110      	cbz	r0, 80098a6 <rclc_executor_spin_some.part.0+0xf2>
 80098a0:	4548      	cmp	r0, r9
 80098a2:	f040 808b 	bne.w	80099bc <rclc_executor_spin_some.part.0+0x208>
 80098a6:	68ab      	ldr	r3, [r5, #8]
 80098a8:	4598      	cmp	r8, r3
 80098aa:	d209      	bcs.n	80098c0 <rclc_executor_spin_some.part.0+0x10c>
 80098ac:	6868      	ldr	r0, [r5, #4]
 80098ae:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 80098b2:	4631      	mov	r1, r6
 80098b4:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 80098b8:	f108 0801 	add.w	r8, r8, #1
 80098bc:	2a00      	cmp	r2, #0
 80098be:	d1eb      	bne.n	8009898 <rclc_executor_spin_some.part.0+0xe4>
 80098c0:	2600      	movs	r6, #0
 80098c2:	b97b      	cbnz	r3, 80098e4 <rclc_executor_spin_some.part.0+0x130>
 80098c4:	e07a      	b.n	80099bc <rclc_executor_spin_some.part.0+0x208>
 80098c6:	f812 200c 	ldrb.w	r2, [r2, ip]
 80098ca:	2a08      	cmp	r2, #8
 80098cc:	f000 80fd 	beq.w	8009aca <rclc_executor_spin_some.part.0+0x316>
 80098d0:	2a09      	cmp	r2, #9
 80098d2:	f000 80ef 	beq.w	8009ab4 <rclc_executor_spin_some.part.0+0x300>
 80098d6:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 80098da:	b98a      	cbnz	r2, 8009900 <rclc_executor_spin_some.part.0+0x14c>
 80098dc:	3601      	adds	r6, #1
 80098de:	429e      	cmp	r6, r3
 80098e0:	d262      	bcs.n	80099a8 <rclc_executor_spin_some.part.0+0x1f4>
 80098e2:	2400      	movs	r4, #0
 80098e4:	686a      	ldr	r2, [r5, #4]
 80098e6:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 80098ea:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 80098ee:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 80098f2:	2900      	cmp	r1, #0
 80098f4:	d062      	beq.n	80099bc <rclc_executor_spin_some.part.0+0x208>
 80098f6:	7841      	ldrb	r1, [r0, #1]
 80098f8:	2900      	cmp	r1, #0
 80098fa:	d0e4      	beq.n	80098c6 <rclc_executor_spin_some.part.0+0x112>
 80098fc:	2901      	cmp	r1, #1
 80098fe:	d1ed      	bne.n	80098dc <rclc_executor_spin_some.part.0+0x128>
 8009900:	f7ff fcd8 	bl	80092b4 <_rclc_execute.part.0>
 8009904:	2800      	cmp	r0, #0
 8009906:	f040 80b6 	bne.w	8009a76 <rclc_executor_spin_some.part.0+0x2c2>
 800990a:	68ab      	ldr	r3, [r5, #8]
 800990c:	e7e6      	b.n	80098dc <rclc_executor_spin_some.part.0+0x128>
 800990e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009912:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8009916:	4630      	mov	r0, r6
 8009918:	f008 ff9e 	bl	8012858 <rcl_wait_set_add_client>
 800991c:	2800      	cmp	r0, #0
 800991e:	f43f af7a 	beq.w	8009816 <rclc_executor_spin_some.part.0+0x62>
 8009922:	9001      	str	r0, [sp, #4]
 8009924:	f000 fac8 	bl	8009eb8 <rcutils_reset_error>
 8009928:	9801      	ldr	r0, [sp, #4]
 800992a:	4607      	mov	r7, r0
 800992c:	e03c      	b.n	80099a8 <rclc_executor_spin_some.part.0+0x1f4>
 800992e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009932:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8009936:	4630      	mov	r0, r6
 8009938:	f008 fc46 	bl	80121c8 <rcl_wait_set_add_subscription>
 800993c:	2800      	cmp	r0, #0
 800993e:	f43f af6a 	beq.w	8009816 <rclc_executor_spin_some.part.0+0x62>
 8009942:	e7ee      	b.n	8009922 <rclc_executor_spin_some.part.0+0x16e>
 8009944:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009948:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800994c:	4630      	mov	r0, r6
 800994e:	f008 ff53 	bl	80127f8 <rcl_wait_set_add_timer>
 8009952:	2800      	cmp	r0, #0
 8009954:	f43f af5f 	beq.w	8009816 <rclc_executor_spin_some.part.0+0x62>
 8009958:	e7e3      	b.n	8009922 <rclc_executor_spin_some.part.0+0x16e>
 800995a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800995e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8009962:	4630      	mov	r0, r6
 8009964:	f008 ff1c 	bl	80127a0 <rcl_wait_set_add_guard_condition>
 8009968:	2800      	cmp	r0, #0
 800996a:	f43f af54 	beq.w	8009816 <rclc_executor_spin_some.part.0+0x62>
 800996e:	e7d8      	b.n	8009922 <rclc_executor_spin_some.part.0+0x16e>
 8009970:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009974:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8009978:	3110      	adds	r1, #16
 800997a:	4630      	mov	r0, r6
 800997c:	f009 fc9c 	bl	80132b8 <rcl_action_wait_set_add_action_server>
 8009980:	2800      	cmp	r0, #0
 8009982:	f43f af48 	beq.w	8009816 <rclc_executor_spin_some.part.0+0x62>
 8009986:	e7cc      	b.n	8009922 <rclc_executor_spin_some.part.0+0x16e>
 8009988:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800998c:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8009990:	3110      	adds	r1, #16
 8009992:	2300      	movs	r3, #0
 8009994:	4630      	mov	r0, r6
 8009996:	f009 fa67 	bl	8012e68 <rcl_action_wait_set_add_action_client>
 800999a:	2800      	cmp	r0, #0
 800999c:	f43f af3b 	beq.w	8009816 <rclc_executor_spin_some.part.0+0x62>
 80099a0:	e7bf      	b.n	8009922 <rclc_executor_spin_some.part.0+0x16e>
 80099a2:	f000 fa89 	bl	8009eb8 <rcutils_reset_error>
 80099a6:	2701      	movs	r7, #1
 80099a8:	4638      	mov	r0, r7
 80099aa:	b003      	add	sp, #12
 80099ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b0:	f000 fa82 	bl	8009eb8 <rcutils_reset_error>
 80099b4:	4638      	mov	r0, r7
 80099b6:	b003      	add	sp, #12
 80099b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099bc:	4627      	mov	r7, r4
 80099be:	e7f3      	b.n	80099a8 <rclc_executor_spin_some.part.0+0x1f4>
 80099c0:	68ab      	ldr	r3, [r5, #8]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f000 8092 	beq.w	8009aec <rclc_executor_spin_some.part.0+0x338>
 80099c8:	2400      	movs	r4, #0
 80099ca:	46a0      	mov	r8, r4
 80099cc:	f240 1991 	movw	r9, #401	; 0x191
 80099d0:	e008      	b.n	80099e4 <rclc_executor_spin_some.part.0+0x230>
 80099d2:	f7ff faad 	bl	8008f30 <_rclc_check_for_new_data>
 80099d6:	4604      	mov	r4, r0
 80099d8:	b108      	cbz	r0, 80099de <rclc_executor_spin_some.part.0+0x22a>
 80099da:	4548      	cmp	r0, r9
 80099dc:	d1ee      	bne.n	80099bc <rclc_executor_spin_some.part.0+0x208>
 80099de:	68ab      	ldr	r3, [r5, #8]
 80099e0:	4598      	cmp	r8, r3
 80099e2:	d265      	bcs.n	8009ab0 <rclc_executor_spin_some.part.0+0x2fc>
 80099e4:	686a      	ldr	r2, [r5, #4]
 80099e6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 80099ea:	4631      	mov	r1, r6
 80099ec:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 80099f0:	f108 0801 	add.w	r8, r8, #1
 80099f4:	f1bc 0f00 	cmp.w	ip, #0
 80099f8:	d1eb      	bne.n	80099d2 <rclc_executor_spin_some.part.0+0x21e>
 80099fa:	4619      	mov	r1, r3
 80099fc:	4610      	mov	r0, r2
 80099fe:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 8009a02:	4798      	blx	r3
 8009a04:	2800      	cmp	r0, #0
 8009a06:	d0d9      	beq.n	80099bc <rclc_executor_spin_some.part.0+0x208>
 8009a08:	68ab      	ldr	r3, [r5, #8]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d0d6      	beq.n	80099bc <rclc_executor_spin_some.part.0+0x208>
 8009a0e:	f04f 0800 	mov.w	r8, #0
 8009a12:	f240 1991 	movw	r9, #401	; 0x191
 8009a16:	f240 2a59 	movw	sl, #601	; 0x259
 8009a1a:	e00e      	b.n	8009a3a <rclc_executor_spin_some.part.0+0x286>
 8009a1c:	f813 300b 	ldrb.w	r3, [r3, fp]
 8009a20:	2b08      	cmp	r3, #8
 8009a22:	d033      	beq.n	8009a8c <rclc_executor_spin_some.part.0+0x2d8>
 8009a24:	2b09      	cmp	r3, #9
 8009a26:	d028      	beq.n	8009a7a <rclc_executor_spin_some.part.0+0x2c6>
 8009a28:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8009a2c:	b9fb      	cbnz	r3, 8009a6e <rclc_executor_spin_some.part.0+0x2ba>
 8009a2e:	68ab      	ldr	r3, [r5, #8]
 8009a30:	f108 0801 	add.w	r8, r8, #1
 8009a34:	4598      	cmp	r8, r3
 8009a36:	d2b7      	bcs.n	80099a8 <rclc_executor_spin_some.part.0+0x1f4>
 8009a38:	2400      	movs	r4, #0
 8009a3a:	6868      	ldr	r0, [r5, #4]
 8009a3c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8009a40:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8009a44:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d0b7      	beq.n	80099bc <rclc_executor_spin_some.part.0+0x208>
 8009a4c:	4631      	mov	r1, r6
 8009a4e:	f7ff fabd 	bl	8008fcc <_rclc_take_new_data>
 8009a52:	b118      	cbz	r0, 8009a5c <rclc_executor_spin_some.part.0+0x2a8>
 8009a54:	4548      	cmp	r0, r9
 8009a56:	d001      	beq.n	8009a5c <rclc_executor_spin_some.part.0+0x2a8>
 8009a58:	4550      	cmp	r0, sl
 8009a5a:	d10c      	bne.n	8009a76 <rclc_executor_spin_some.part.0+0x2c2>
 8009a5c:	686b      	ldr	r3, [r5, #4]
 8009a5e:	eb13 000b 	adds.w	r0, r3, fp
 8009a62:	d021      	beq.n	8009aa8 <rclc_executor_spin_some.part.0+0x2f4>
 8009a64:	7842      	ldrb	r2, [r0, #1]
 8009a66:	2a00      	cmp	r2, #0
 8009a68:	d0d8      	beq.n	8009a1c <rclc_executor_spin_some.part.0+0x268>
 8009a6a:	2a01      	cmp	r2, #1
 8009a6c:	d1df      	bne.n	8009a2e <rclc_executor_spin_some.part.0+0x27a>
 8009a6e:	f7ff fc21 	bl	80092b4 <_rclc_execute.part.0>
 8009a72:	2800      	cmp	r0, #0
 8009a74:	d0db      	beq.n	8009a2e <rclc_executor_spin_some.part.0+0x27a>
 8009a76:	4607      	mov	r7, r0
 8009a78:	e796      	b.n	80099a8 <rclc_executor_spin_some.part.0+0x1f4>
 8009a7a:	6843      	ldr	r3, [r0, #4]
 8009a7c:	6a1a      	ldr	r2, [r3, #32]
 8009a7e:	2a00      	cmp	r2, #0
 8009a80:	d1f5      	bne.n	8009a6e <rclc_executor_spin_some.part.0+0x2ba>
 8009a82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d0d1      	beq.n	8009a2e <rclc_executor_spin_some.part.0+0x27a>
 8009a8a:	e7f0      	b.n	8009a6e <rclc_executor_spin_some.part.0+0x2ba>
 8009a8c:	6843      	ldr	r3, [r0, #4]
 8009a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a90:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8009a94:	d1eb      	bne.n	8009a6e <rclc_executor_spin_some.part.0+0x2ba>
 8009a96:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009a9a:	2a00      	cmp	r2, #0
 8009a9c:	d1e7      	bne.n	8009a6e <rclc_executor_spin_some.part.0+0x2ba>
 8009a9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d0c3      	beq.n	8009a2e <rclc_executor_spin_some.part.0+0x27a>
 8009aa6:	e7e2      	b.n	8009a6e <rclc_executor_spin_some.part.0+0x2ba>
 8009aa8:	270b      	movs	r7, #11
 8009aaa:	e77d      	b.n	80099a8 <rclc_executor_spin_some.part.0+0x1f4>
 8009aac:	686a      	ldr	r2, [r5, #4]
 8009aae:	e6e2      	b.n	8009876 <rclc_executor_spin_some.part.0+0xc2>
 8009ab0:	686a      	ldr	r2, [r5, #4]
 8009ab2:	e7a2      	b.n	80099fa <rclc_executor_spin_some.part.0+0x246>
 8009ab4:	6842      	ldr	r2, [r0, #4]
 8009ab6:	6a11      	ldr	r1, [r2, #32]
 8009ab8:	2900      	cmp	r1, #0
 8009aba:	f47f af21 	bne.w	8009900 <rclc_executor_spin_some.part.0+0x14c>
 8009abe:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8009ac2:	2a00      	cmp	r2, #0
 8009ac4:	f43f af0a 	beq.w	80098dc <rclc_executor_spin_some.part.0+0x128>
 8009ac8:	e71a      	b.n	8009900 <rclc_executor_spin_some.part.0+0x14c>
 8009aca:	6842      	ldr	r2, [r0, #4]
 8009acc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8009ace:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 8009ad2:	f47f af15 	bne.w	8009900 <rclc_executor_spin_some.part.0+0x14c>
 8009ad6:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 8009ada:	2900      	cmp	r1, #0
 8009adc:	f47f af10 	bne.w	8009900 <rclc_executor_spin_some.part.0+0x14c>
 8009ae0:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 8009ae4:	2a00      	cmp	r2, #0
 8009ae6:	f43f aef9 	beq.w	80098dc <rclc_executor_spin_some.part.0+0x128>
 8009aea:	e709      	b.n	8009900 <rclc_executor_spin_some.part.0+0x14c>
 8009aec:	686a      	ldr	r2, [r5, #4]
 8009aee:	461c      	mov	r4, r3
 8009af0:	e783      	b.n	80099fa <rclc_executor_spin_some.part.0+0x246>
 8009af2:	686a      	ldr	r2, [r5, #4]
 8009af4:	461c      	mov	r4, r3
 8009af6:	e6be      	b.n	8009876 <rclc_executor_spin_some.part.0+0xc2>

08009af8 <rclc_executor_spin>:
 8009af8:	b1d0      	cbz	r0, 8009b30 <rclc_executor_spin+0x38>
 8009afa:	b510      	push	{r4, lr}
 8009afc:	4604      	mov	r4, r0
 8009afe:	b082      	sub	sp, #8
 8009b00:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 8009b04:	6820      	ldr	r0, [r4, #0]
 8009b06:	e9cd 2300 	strd	r2, r3, [sp]
 8009b0a:	f007 fb4d 	bl	80111a8 <rcl_context_is_valid>
 8009b0e:	4601      	mov	r1, r0
 8009b10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b14:	4620      	mov	r0, r4
 8009b16:	b131      	cbz	r1, 8009b26 <rclc_executor_spin+0x2e>
 8009b18:	f7ff fe4c 	bl	80097b4 <rclc_executor_spin_some.part.0>
 8009b1c:	f030 0302 	bics.w	r3, r0, #2
 8009b20:	d0ee      	beq.n	8009b00 <rclc_executor_spin+0x8>
 8009b22:	b002      	add	sp, #8
 8009b24:	bd10      	pop	{r4, pc}
 8009b26:	f000 f9c7 	bl	8009eb8 <rcutils_reset_error>
 8009b2a:	2001      	movs	r0, #1
 8009b2c:	b002      	add	sp, #8
 8009b2e:	bd10      	pop	{r4, pc}
 8009b30:	200b      	movs	r0, #11
 8009b32:	4770      	bx	lr

08009b34 <rclc_executor_handle_counters_zero_init>:
 8009b34:	b130      	cbz	r0, 8009b44 <rclc_executor_handle_counters_zero_init+0x10>
 8009b36:	b508      	push	{r3, lr}
 8009b38:	2220      	movs	r2, #32
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	f00d fdb2 	bl	80176a4 <memset>
 8009b40:	2000      	movs	r0, #0
 8009b42:	bd08      	pop	{r3, pc}
 8009b44:	200b      	movs	r0, #11
 8009b46:	4770      	bx	lr

08009b48 <rclc_executor_handle_init>:
 8009b48:	b168      	cbz	r0, 8009b66 <rclc_executor_handle_init+0x1e>
 8009b4a:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8009b70 <rclc_executor_handle_init+0x28>
 8009b4e:	2300      	movs	r3, #0
 8009b50:	220b      	movs	r2, #11
 8009b52:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
 8009b56:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8009b5a:	e9c0 310c 	strd	r3, r1, [r0, #48]	; 0x30
 8009b5e:	8002      	strh	r2, [r0, #0]
 8009b60:	8703      	strh	r3, [r0, #56]	; 0x38
 8009b62:	4618      	mov	r0, r3
 8009b64:	4770      	bx	lr
 8009b66:	200b      	movs	r0, #11
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	f3af 8000 	nop.w
	...

08009b78 <rclc_support_init>:
 8009b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b7c:	b086      	sub	sp, #24
 8009b7e:	b3b8      	cbz	r0, 8009bf0 <rclc_support_init+0x78>
 8009b80:	461c      	mov	r4, r3
 8009b82:	b3ab      	cbz	r3, 8009bf0 <rclc_support_init+0x78>
 8009b84:	460f      	mov	r7, r1
 8009b86:	4690      	mov	r8, r2
 8009b88:	4606      	mov	r6, r0
 8009b8a:	f007 fd29 	bl	80115e0 <rcl_get_zero_initialized_init_options>
 8009b8e:	f104 030c 	add.w	r3, r4, #12
 8009b92:	9005      	str	r0, [sp, #20]
 8009b94:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009b98:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009b9c:	a805      	add	r0, sp, #20
 8009b9e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8009ba2:	f007 fd1f 	bl	80115e4 <rcl_init_options_init>
 8009ba6:	4605      	mov	r5, r0
 8009ba8:	b9e0      	cbnz	r0, 8009be4 <rclc_support_init+0x6c>
 8009baa:	ad02      	add	r5, sp, #8
 8009bac:	4628      	mov	r0, r5
 8009bae:	f007 faf1 	bl	8011194 <rcl_get_zero_initialized_context>
 8009bb2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009bb6:	4633      	mov	r3, r6
 8009bb8:	e886 0003 	stmia.w	r6, {r0, r1}
 8009bbc:	aa05      	add	r2, sp, #20
 8009bbe:	4641      	mov	r1, r8
 8009bc0:	4638      	mov	r0, r7
 8009bc2:	f007 fc09 	bl	80113d8 <rcl_init>
 8009bc6:	4605      	mov	r5, r0
 8009bc8:	b9b8      	cbnz	r0, 8009bfa <rclc_support_init+0x82>
 8009bca:	60b4      	str	r4, [r6, #8]
 8009bcc:	4622      	mov	r2, r4
 8009bce:	f106 010c 	add.w	r1, r6, #12
 8009bd2:	2003      	movs	r0, #3
 8009bd4:	f008 f848 	bl	8011c68 <rcl_clock_init>
 8009bd8:	4605      	mov	r5, r0
 8009bda:	b970      	cbnz	r0, 8009bfa <rclc_support_init+0x82>
 8009bdc:	a805      	add	r0, sp, #20
 8009bde:	f007 fd67 	bl	80116b0 <rcl_init_options_fini>
 8009be2:	b108      	cbz	r0, 8009be8 <rclc_support_init+0x70>
 8009be4:	f000 f968 	bl	8009eb8 <rcutils_reset_error>
 8009be8:	4628      	mov	r0, r5
 8009bea:	b006      	add	sp, #24
 8009bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bf0:	250b      	movs	r5, #11
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	b006      	add	sp, #24
 8009bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bfa:	f000 f95d 	bl	8009eb8 <rcutils_reset_error>
 8009bfe:	a805      	add	r0, sp, #20
 8009c00:	f007 fd56 	bl	80116b0 <rcl_init_options_fini>
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d0ef      	beq.n	8009be8 <rclc_support_init+0x70>
 8009c08:	e7ec      	b.n	8009be4 <rclc_support_init+0x6c>
 8009c0a:	bf00      	nop

08009c0c <rclc_node_init_default>:
 8009c0c:	b3b8      	cbz	r0, 8009c7e <rclc_node_init_default+0x72>
 8009c0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c12:	460d      	mov	r5, r1
 8009c14:	b0a1      	sub	sp, #132	; 0x84
 8009c16:	b329      	cbz	r1, 8009c64 <rclc_node_init_default+0x58>
 8009c18:	4616      	mov	r6, r2
 8009c1a:	b31a      	cbz	r2, 8009c64 <rclc_node_init_default+0x58>
 8009c1c:	461f      	mov	r7, r3
 8009c1e:	b30b      	cbz	r3, 8009c64 <rclc_node_init_default+0x58>
 8009c20:	f10d 0810 	add.w	r8, sp, #16
 8009c24:	4604      	mov	r4, r0
 8009c26:	4640      	mov	r0, r8
 8009c28:	f7fe fcd8 	bl	80085dc <rcl_get_zero_initialized_node>
 8009c2c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009c30:	f10d 0918 	add.w	r9, sp, #24
 8009c34:	e884 0003 	stmia.w	r4, {r0, r1}
 8009c38:	4648      	mov	r0, r9
 8009c3a:	f7fe fe79 	bl	8008930 <rcl_node_get_default_options>
 8009c3e:	4640      	mov	r0, r8
 8009c40:	f7fe fccc 	bl	80085dc <rcl_get_zero_initialized_node>
 8009c44:	f8cd 9000 	str.w	r9, [sp]
 8009c48:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009c4c:	463b      	mov	r3, r7
 8009c4e:	e884 0003 	stmia.w	r4, {r0, r1}
 8009c52:	4632      	mov	r2, r6
 8009c54:	4629      	mov	r1, r5
 8009c56:	4620      	mov	r0, r4
 8009c58:	f7fe fcca 	bl	80085f0 <rcl_node_init>
 8009c5c:	b930      	cbnz	r0, 8009c6c <rclc_node_init_default+0x60>
 8009c5e:	b021      	add	sp, #132	; 0x84
 8009c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c64:	200b      	movs	r0, #11
 8009c66:	b021      	add	sp, #132	; 0x84
 8009c68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c6c:	9003      	str	r0, [sp, #12]
 8009c6e:	f000 f923 	bl	8009eb8 <rcutils_reset_error>
 8009c72:	f000 f921 	bl	8009eb8 <rcutils_reset_error>
 8009c76:	9803      	ldr	r0, [sp, #12]
 8009c78:	b021      	add	sp, #132	; 0x84
 8009c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c7e:	200b      	movs	r0, #11
 8009c80:	4770      	bx	lr
 8009c82:	bf00      	nop

08009c84 <rclc_publisher_init_best_effort>:
 8009c84:	b368      	cbz	r0, 8009ce2 <rclc_publisher_init_best_effort+0x5e>
 8009c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c8a:	460d      	mov	r5, r1
 8009c8c:	b0a0      	sub	sp, #128	; 0x80
 8009c8e:	b321      	cbz	r1, 8009cda <rclc_publisher_init_best_effort+0x56>
 8009c90:	4616      	mov	r6, r2
 8009c92:	b312      	cbz	r2, 8009cda <rclc_publisher_init_best_effort+0x56>
 8009c94:	461f      	mov	r7, r3
 8009c96:	b303      	cbz	r3, 8009cda <rclc_publisher_init_best_effort+0x56>
 8009c98:	4604      	mov	r4, r0
 8009c9a:	f7fe fe75 	bl	8008988 <rcl_get_zero_initialized_publisher>
 8009c9e:	f10d 0810 	add.w	r8, sp, #16
 8009ca2:	6020      	str	r0, [r4, #0]
 8009ca4:	4640      	mov	r0, r8
 8009ca6:	f7fe ff37 	bl	8008b18 <rcl_publisher_get_default_options>
 8009caa:	490f      	ldr	r1, [pc, #60]	; (8009ce8 <rclc_publisher_init_best_effort+0x64>)
 8009cac:	2250      	movs	r2, #80	; 0x50
 8009cae:	4640      	mov	r0, r8
 8009cb0:	f00d fe17 	bl	80178e2 <memcpy>
 8009cb4:	f8cd 8000 	str.w	r8, [sp]
 8009cb8:	463b      	mov	r3, r7
 8009cba:	4632      	mov	r2, r6
 8009cbc:	4629      	mov	r1, r5
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	f7fe fe68 	bl	8008994 <rcl_publisher_init>
 8009cc4:	b910      	cbnz	r0, 8009ccc <rclc_publisher_init_best_effort+0x48>
 8009cc6:	b020      	add	sp, #128	; 0x80
 8009cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ccc:	9003      	str	r0, [sp, #12]
 8009cce:	f000 f8f3 	bl	8009eb8 <rcutils_reset_error>
 8009cd2:	9803      	ldr	r0, [sp, #12]
 8009cd4:	b020      	add	sp, #128	; 0x80
 8009cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cda:	200b      	movs	r0, #11
 8009cdc:	b020      	add	sp, #128	; 0x80
 8009cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ce2:	200b      	movs	r0, #11
 8009ce4:	4770      	bx	lr
 8009ce6:	bf00      	nop
 8009ce8:	08018870 	.word	0x08018870

08009cec <rclc_subscription_init_default>:
 8009cec:	b368      	cbz	r0, 8009d4a <rclc_subscription_init_default+0x5e>
 8009cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf2:	460d      	mov	r5, r1
 8009cf4:	b0a0      	sub	sp, #128	; 0x80
 8009cf6:	b321      	cbz	r1, 8009d42 <rclc_subscription_init_default+0x56>
 8009cf8:	4616      	mov	r6, r2
 8009cfa:	b312      	cbz	r2, 8009d42 <rclc_subscription_init_default+0x56>
 8009cfc:	461f      	mov	r7, r3
 8009cfe:	b303      	cbz	r3, 8009d42 <rclc_subscription_init_default+0x56>
 8009d00:	4604      	mov	r4, r0
 8009d02:	f7fe ff7d 	bl	8008c00 <rcl_get_zero_initialized_subscription>
 8009d06:	f10d 0810 	add.w	r8, sp, #16
 8009d0a:	6020      	str	r0, [r4, #0]
 8009d0c:	4640      	mov	r0, r8
 8009d0e:	f7ff f879 	bl	8008e04 <rcl_subscription_get_default_options>
 8009d12:	490f      	ldr	r1, [pc, #60]	; (8009d50 <rclc_subscription_init_default+0x64>)
 8009d14:	2250      	movs	r2, #80	; 0x50
 8009d16:	4640      	mov	r0, r8
 8009d18:	f00d fde3 	bl	80178e2 <memcpy>
 8009d1c:	f8cd 8000 	str.w	r8, [sp]
 8009d20:	463b      	mov	r3, r7
 8009d22:	4632      	mov	r2, r6
 8009d24:	4629      	mov	r1, r5
 8009d26:	4620      	mov	r0, r4
 8009d28:	f7fe ff70 	bl	8008c0c <rcl_subscription_init>
 8009d2c:	b910      	cbnz	r0, 8009d34 <rclc_subscription_init_default+0x48>
 8009d2e:	b020      	add	sp, #128	; 0x80
 8009d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d34:	9003      	str	r0, [sp, #12]
 8009d36:	f000 f8bf 	bl	8009eb8 <rcutils_reset_error>
 8009d3a:	9803      	ldr	r0, [sp, #12]
 8009d3c:	b020      	add	sp, #128	; 0x80
 8009d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d42:	200b      	movs	r0, #11
 8009d44:	b020      	add	sp, #128	; 0x80
 8009d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d4a:	200b      	movs	r0, #11
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	080188c0 	.word	0x080188c0

08009d54 <rclc_subscription_init_best_effort>:
 8009d54:	b368      	cbz	r0, 8009db2 <rclc_subscription_init_best_effort+0x5e>
 8009d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d5a:	460d      	mov	r5, r1
 8009d5c:	b0a0      	sub	sp, #128	; 0x80
 8009d5e:	b321      	cbz	r1, 8009daa <rclc_subscription_init_best_effort+0x56>
 8009d60:	4616      	mov	r6, r2
 8009d62:	b312      	cbz	r2, 8009daa <rclc_subscription_init_best_effort+0x56>
 8009d64:	461f      	mov	r7, r3
 8009d66:	b303      	cbz	r3, 8009daa <rclc_subscription_init_best_effort+0x56>
 8009d68:	4604      	mov	r4, r0
 8009d6a:	f7fe ff49 	bl	8008c00 <rcl_get_zero_initialized_subscription>
 8009d6e:	f10d 0810 	add.w	r8, sp, #16
 8009d72:	6020      	str	r0, [r4, #0]
 8009d74:	4640      	mov	r0, r8
 8009d76:	f7ff f845 	bl	8008e04 <rcl_subscription_get_default_options>
 8009d7a:	490f      	ldr	r1, [pc, #60]	; (8009db8 <rclc_subscription_init_best_effort+0x64>)
 8009d7c:	2250      	movs	r2, #80	; 0x50
 8009d7e:	4640      	mov	r0, r8
 8009d80:	f00d fdaf 	bl	80178e2 <memcpy>
 8009d84:	f8cd 8000 	str.w	r8, [sp]
 8009d88:	463b      	mov	r3, r7
 8009d8a:	4632      	mov	r2, r6
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	4620      	mov	r0, r4
 8009d90:	f7fe ff3c 	bl	8008c0c <rcl_subscription_init>
 8009d94:	b910      	cbnz	r0, 8009d9c <rclc_subscription_init_best_effort+0x48>
 8009d96:	b020      	add	sp, #128	; 0x80
 8009d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d9c:	9003      	str	r0, [sp, #12]
 8009d9e:	f000 f88b 	bl	8009eb8 <rcutils_reset_error>
 8009da2:	9803      	ldr	r0, [sp, #12]
 8009da4:	b020      	add	sp, #128	; 0x80
 8009da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009daa:	200b      	movs	r0, #11
 8009dac:	b020      	add	sp, #128	; 0x80
 8009dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009db2:	200b      	movs	r0, #11
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	08018910 	.word	0x08018910

08009dbc <__default_zero_allocate>:
 8009dbc:	f00c bf60 	b.w	8016c80 <calloc>

08009dc0 <__default_reallocate>:
 8009dc0:	f00d b8fe 	b.w	8016fc0 <realloc>

08009dc4 <__default_deallocate>:
 8009dc4:	f00c bfdc 	b.w	8016d80 <free>

08009dc8 <__default_allocate>:
 8009dc8:	f00c bfd2 	b.w	8016d70 <malloc>

08009dcc <rcutils_get_zero_initialized_allocator>:
 8009dcc:	b510      	push	{r4, lr}
 8009dce:	4c05      	ldr	r4, [pc, #20]	; (8009de4 <rcutils_get_zero_initialized_allocator+0x18>)
 8009dd0:	4686      	mov	lr, r0
 8009dd2:	4684      	mov	ip, r0
 8009dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009dd6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	f8cc 3000 	str.w	r3, [ip]
 8009de0:	4670      	mov	r0, lr
 8009de2:	bd10      	pop	{r4, pc}
 8009de4:	08018960 	.word	0x08018960

08009de8 <rcutils_set_default_allocator>:
 8009de8:	b1a8      	cbz	r0, 8009e16 <rcutils_set_default_allocator+0x2e>
 8009dea:	6802      	ldr	r2, [r0, #0]
 8009dec:	b1a2      	cbz	r2, 8009e18 <rcutils_set_default_allocator+0x30>
 8009dee:	6841      	ldr	r1, [r0, #4]
 8009df0:	b1a1      	cbz	r1, 8009e1c <rcutils_set_default_allocator+0x34>
 8009df2:	b410      	push	{r4}
 8009df4:	68c4      	ldr	r4, [r0, #12]
 8009df6:	b164      	cbz	r4, 8009e12 <rcutils_set_default_allocator+0x2a>
 8009df8:	6880      	ldr	r0, [r0, #8]
 8009dfa:	b138      	cbz	r0, 8009e0c <rcutils_set_default_allocator+0x24>
 8009dfc:	4b08      	ldr	r3, [pc, #32]	; (8009e20 <rcutils_set_default_allocator+0x38>)
 8009dfe:	601a      	str	r2, [r3, #0]
 8009e00:	2200      	movs	r2, #0
 8009e02:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8009e06:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8009e0a:	2001      	movs	r0, #1
 8009e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e10:	4770      	bx	lr
 8009e12:	4620      	mov	r0, r4
 8009e14:	e7fa      	b.n	8009e0c <rcutils_set_default_allocator+0x24>
 8009e16:	4770      	bx	lr
 8009e18:	4610      	mov	r0, r2
 8009e1a:	4770      	bx	lr
 8009e1c:	4608      	mov	r0, r1
 8009e1e:	4770      	bx	lr
 8009e20:	20000014 	.word	0x20000014

08009e24 <rcutils_get_default_allocator>:
 8009e24:	b510      	push	{r4, lr}
 8009e26:	4c05      	ldr	r4, [pc, #20]	; (8009e3c <rcutils_get_default_allocator+0x18>)
 8009e28:	4686      	mov	lr, r0
 8009e2a:	4684      	mov	ip, r0
 8009e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009e2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009e32:	6823      	ldr	r3, [r4, #0]
 8009e34:	f8cc 3000 	str.w	r3, [ip]
 8009e38:	4670      	mov	r0, lr
 8009e3a:	bd10      	pop	{r4, pc}
 8009e3c:	20000014 	.word	0x20000014

08009e40 <rcutils_allocator_is_valid>:
 8009e40:	b158      	cbz	r0, 8009e5a <rcutils_allocator_is_valid+0x1a>
 8009e42:	6803      	ldr	r3, [r0, #0]
 8009e44:	b143      	cbz	r3, 8009e58 <rcutils_allocator_is_valid+0x18>
 8009e46:	6843      	ldr	r3, [r0, #4]
 8009e48:	b133      	cbz	r3, 8009e58 <rcutils_allocator_is_valid+0x18>
 8009e4a:	68c3      	ldr	r3, [r0, #12]
 8009e4c:	b123      	cbz	r3, 8009e58 <rcutils_allocator_is_valid+0x18>
 8009e4e:	6880      	ldr	r0, [r0, #8]
 8009e50:	3800      	subs	r0, #0
 8009e52:	bf18      	it	ne
 8009e54:	2001      	movne	r0, #1
 8009e56:	4770      	bx	lr
 8009e58:	4618      	mov	r0, r3
 8009e5a:	4770      	bx	lr

08009e5c <rcutils_get_env>:
 8009e5c:	b168      	cbz	r0, 8009e7a <rcutils_get_env+0x1e>
 8009e5e:	b510      	push	{r4, lr}
 8009e60:	460c      	mov	r4, r1
 8009e62:	b129      	cbz	r1, 8009e70 <rcutils_get_env+0x14>
 8009e64:	f00c ff3c 	bl	8016ce0 <getenv>
 8009e68:	b120      	cbz	r0, 8009e74 <rcutils_get_env+0x18>
 8009e6a:	6020      	str	r0, [r4, #0]
 8009e6c:	2000      	movs	r0, #0
 8009e6e:	bd10      	pop	{r4, pc}
 8009e70:	4803      	ldr	r0, [pc, #12]	; (8009e80 <rcutils_get_env+0x24>)
 8009e72:	bd10      	pop	{r4, pc}
 8009e74:	4b03      	ldr	r3, [pc, #12]	; (8009e84 <rcutils_get_env+0x28>)
 8009e76:	6023      	str	r3, [r4, #0]
 8009e78:	bd10      	pop	{r4, pc}
 8009e7a:	4803      	ldr	r0, [pc, #12]	; (8009e88 <rcutils_get_env+0x2c>)
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop
 8009e80:	08018990 	.word	0x08018990
 8009e84:	0801976c 	.word	0x0801976c
 8009e88:	08018974 	.word	0x08018974

08009e8c <rcutils_get_error_string>:
 8009e8c:	4b06      	ldr	r3, [pc, #24]	; (8009ea8 <rcutils_get_error_string+0x1c>)
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	b13b      	cbz	r3, 8009ea2 <rcutils_get_error_string+0x16>
 8009e92:	4b06      	ldr	r3, [pc, #24]	; (8009eac <rcutils_get_error_string+0x20>)
 8009e94:	781a      	ldrb	r2, [r3, #0]
 8009e96:	b90a      	cbnz	r2, 8009e9c <rcutils_get_error_string+0x10>
 8009e98:	2201      	movs	r2, #1
 8009e9a:	701a      	strb	r2, [r3, #0]
 8009e9c:	4b04      	ldr	r3, [pc, #16]	; (8009eb0 <rcutils_get_error_string+0x24>)
 8009e9e:	7818      	ldrb	r0, [r3, #0]
 8009ea0:	4770      	bx	lr
 8009ea2:	4b04      	ldr	r3, [pc, #16]	; (8009eb4 <rcutils_get_error_string+0x28>)
 8009ea4:	7818      	ldrb	r0, [r3, #0]
 8009ea6:	4770      	bx	lr
 8009ea8:	20009ae0 	.word	0x20009ae0
 8009eac:	20009af9 	.word	0x20009af9
 8009eb0:	20009af8 	.word	0x20009af8
 8009eb4:	080189ac 	.word	0x080189ac

08009eb8 <rcutils_reset_error>:
 8009eb8:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8009ed8 <rcutils_reset_error+0x20>
 8009ebc:	4a08      	ldr	r2, [pc, #32]	; (8009ee0 <rcutils_reset_error+0x28>)
 8009ebe:	4809      	ldr	r0, [pc, #36]	; (8009ee4 <rcutils_reset_error+0x2c>)
 8009ec0:	4909      	ldr	r1, [pc, #36]	; (8009ee8 <rcutils_reset_error+0x30>)
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	8013      	strh	r3, [r2, #0]
 8009ec6:	ed82 7b02 	vstr	d7, [r2, #8]
 8009eca:	4a08      	ldr	r2, [pc, #32]	; (8009eec <rcutils_reset_error+0x34>)
 8009ecc:	7003      	strb	r3, [r0, #0]
 8009ece:	700b      	strb	r3, [r1, #0]
 8009ed0:	7013      	strb	r3, [r2, #0]
 8009ed2:	4770      	bx	lr
 8009ed4:	f3af 8000 	nop.w
	...
 8009ee0:	20009ae8 	.word	0x20009ae8
 8009ee4:	20009af9 	.word	0x20009af9
 8009ee8:	20009af8 	.word	0x20009af8
 8009eec:	20009ae0 	.word	0x20009ae0

08009ef0 <rcutils_format_string_limit>:
 8009ef0:	b40f      	push	{r0, r1, r2, r3}
 8009ef2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ef4:	b083      	sub	sp, #12
 8009ef6:	ac08      	add	r4, sp, #32
 8009ef8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009efa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009efe:	b34e      	cbz	r6, 8009f54 <rcutils_format_string_limit+0x64>
 8009f00:	a808      	add	r0, sp, #32
 8009f02:	f7ff ff9d 	bl	8009e40 <rcutils_allocator_is_valid>
 8009f06:	b328      	cbz	r0, 8009f54 <rcutils_format_string_limit+0x64>
 8009f08:	2100      	movs	r1, #0
 8009f0a:	ab0f      	add	r3, sp, #60	; 0x3c
 8009f0c:	4632      	mov	r2, r6
 8009f0e:	4608      	mov	r0, r1
 8009f10:	e9cd 3300 	strd	r3, r3, [sp]
 8009f14:	f000 f8f4 	bl	800a100 <rcutils_vsnprintf>
 8009f18:	1c43      	adds	r3, r0, #1
 8009f1a:	4605      	mov	r5, r0
 8009f1c:	d01a      	beq.n	8009f54 <rcutils_format_string_limit+0x64>
 8009f1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f20:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009f22:	1c47      	adds	r7, r0, #1
 8009f24:	429f      	cmp	r7, r3
 8009f26:	bf84      	itt	hi
 8009f28:	461f      	movhi	r7, r3
 8009f2a:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8009f2e:	4638      	mov	r0, r7
 8009f30:	9b08      	ldr	r3, [sp, #32]
 8009f32:	4798      	blx	r3
 8009f34:	4604      	mov	r4, r0
 8009f36:	b168      	cbz	r0, 8009f54 <rcutils_format_string_limit+0x64>
 8009f38:	9b01      	ldr	r3, [sp, #4]
 8009f3a:	4632      	mov	r2, r6
 8009f3c:	4639      	mov	r1, r7
 8009f3e:	f000 f8df 	bl	800a100 <rcutils_vsnprintf>
 8009f42:	2800      	cmp	r0, #0
 8009f44:	db02      	blt.n	8009f4c <rcutils_format_string_limit+0x5c>
 8009f46:	2300      	movs	r3, #0
 8009f48:	5563      	strb	r3, [r4, r5]
 8009f4a:	e004      	b.n	8009f56 <rcutils_format_string_limit+0x66>
 8009f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009f50:	4620      	mov	r0, r4
 8009f52:	4798      	blx	r3
 8009f54:	2400      	movs	r4, #0
 8009f56:	4620      	mov	r0, r4
 8009f58:	b003      	add	sp, #12
 8009f5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009f5e:	b004      	add	sp, #16
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop

08009f64 <rcutils_repl_str>:
 8009f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f68:	ed2d 8b02 	vpush	{d8}
 8009f6c:	b087      	sub	sp, #28
 8009f6e:	4680      	mov	r8, r0
 8009f70:	4608      	mov	r0, r1
 8009f72:	f8cd 8004 	str.w	r8, [sp, #4]
 8009f76:	ee08 2a10 	vmov	s16, r2
 8009f7a:	468a      	mov	sl, r1
 8009f7c:	4699      	mov	r9, r3
 8009f7e:	f7f6 f951 	bl	8000224 <strlen>
 8009f82:	2600      	movs	r6, #0
 8009f84:	4647      	mov	r7, r8
 8009f86:	9002      	str	r0, [sp, #8]
 8009f88:	46b3      	mov	fp, r6
 8009f8a:	2510      	movs	r5, #16
 8009f8c:	46b0      	mov	r8, r6
 8009f8e:	e01d      	b.n	8009fcc <rcutils_repl_str+0x68>
 8009f90:	f10b 0b01 	add.w	fp, fp, #1
 8009f94:	455e      	cmp	r6, fp
 8009f96:	d211      	bcs.n	8009fbc <rcutils_repl_str+0x58>
 8009f98:	442e      	add	r6, r5
 8009f9a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8009f9e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8009fa2:	00b1      	lsls	r1, r6, #2
 8009fa4:	4798      	blx	r3
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	f000 8088 	beq.w	800a0bc <rcutils_repl_str+0x158>
 8009fac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fb0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8009fb4:	4680      	mov	r8, r0
 8009fb6:	bf28      	it	cs
 8009fb8:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8009fbc:	9a01      	ldr	r2, [sp, #4]
 8009fbe:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8009fc2:	1aa2      	subs	r2, r4, r2
 8009fc4:	f843 2c04 	str.w	r2, [r3, #-4]
 8009fc8:	9b02      	ldr	r3, [sp, #8]
 8009fca:	18e7      	adds	r7, r4, r3
 8009fcc:	4651      	mov	r1, sl
 8009fce:	4638      	mov	r0, r7
 8009fd0:	f00d fb8f 	bl	80176f2 <strstr>
 8009fd4:	4604      	mov	r4, r0
 8009fd6:	4640      	mov	r0, r8
 8009fd8:	2c00      	cmp	r4, #0
 8009fda:	d1d9      	bne.n	8009f90 <rcutils_repl_str+0x2c>
 8009fdc:	46b8      	mov	r8, r7
 8009fde:	4607      	mov	r7, r0
 8009fe0:	4640      	mov	r0, r8
 8009fe2:	f7f6 f91f 	bl	8000224 <strlen>
 8009fe6:	9b01      	ldr	r3, [sp, #4]
 8009fe8:	eba8 0303 	sub.w	r3, r8, r3
 8009fec:	181c      	adds	r4, r3, r0
 8009fee:	9404      	str	r4, [sp, #16]
 8009ff0:	f1bb 0f00 	cmp.w	fp, #0
 8009ff4:	d04a      	beq.n	800a08c <rcutils_repl_str+0x128>
 8009ff6:	ee18 0a10 	vmov	r0, s16
 8009ffa:	f7f6 f913 	bl	8000224 <strlen>
 8009ffe:	9b02      	ldr	r3, [sp, #8]
 800a000:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800a004:	1ac3      	subs	r3, r0, r3
 800a006:	fb0b 4303 	mla	r3, fp, r3, r4
 800a00a:	461a      	mov	r2, r3
 800a00c:	9305      	str	r3, [sp, #20]
 800a00e:	4606      	mov	r6, r0
 800a010:	f8d9 3000 	ldr.w	r3, [r9]
 800a014:	1c50      	adds	r0, r2, #1
 800a016:	4798      	blx	r3
 800a018:	9003      	str	r0, [sp, #12]
 800a01a:	2800      	cmp	r0, #0
 800a01c:	d04f      	beq.n	800a0be <rcutils_repl_str+0x15a>
 800a01e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a022:	683a      	ldr	r2, [r7, #0]
 800a024:	4641      	mov	r1, r8
 800a026:	f00d fc5c 	bl	80178e2 <memcpy>
 800a02a:	683d      	ldr	r5, [r7, #0]
 800a02c:	9b03      	ldr	r3, [sp, #12]
 800a02e:	9701      	str	r7, [sp, #4]
 800a030:	46ba      	mov	sl, r7
 800a032:	441d      	add	r5, r3
 800a034:	9f02      	ldr	r7, [sp, #8]
 800a036:	f8cd 9008 	str.w	r9, [sp, #8]
 800a03a:	2401      	movs	r4, #1
 800a03c:	46d1      	mov	r9, sl
 800a03e:	ee18 aa10 	vmov	sl, s16
 800a042:	e00a      	b.n	800a05a <rcutils_repl_str+0xf6>
 800a044:	f8d9 5000 	ldr.w	r5, [r9]
 800a048:	1aaa      	subs	r2, r5, r2
 800a04a:	1885      	adds	r5, r0, r2
 800a04c:	f00d fc49 	bl	80178e2 <memcpy>
 800a050:	45a3      	cmp	fp, r4
 800a052:	f104 0201 	add.w	r2, r4, #1
 800a056:	d935      	bls.n	800a0c4 <rcutils_repl_str+0x160>
 800a058:	4614      	mov	r4, r2
 800a05a:	4632      	mov	r2, r6
 800a05c:	4651      	mov	r1, sl
 800a05e:	4628      	mov	r0, r5
 800a060:	f00d fc3f 	bl	80178e2 <memcpy>
 800a064:	f859 2b04 	ldr.w	r2, [r9], #4
 800a068:	45a3      	cmp	fp, r4
 800a06a:	443a      	add	r2, r7
 800a06c:	eb05 0006 	add.w	r0, r5, r6
 800a070:	eb08 0102 	add.w	r1, r8, r2
 800a074:	d1e6      	bne.n	800a044 <rcutils_repl_str+0xe0>
 800a076:	9b04      	ldr	r3, [sp, #16]
 800a078:	1a9a      	subs	r2, r3, r2
 800a07a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800a07e:	f00d fc30 	bl	80178e2 <memcpy>
 800a082:	9a03      	ldr	r2, [sp, #12]
 800a084:	9905      	ldr	r1, [sp, #20]
 800a086:	2300      	movs	r3, #0
 800a088:	5453      	strb	r3, [r2, r1]
 800a08a:	e00b      	b.n	800a0a4 <rcutils_repl_str+0x140>
 800a08c:	4620      	mov	r0, r4
 800a08e:	f8d9 3000 	ldr.w	r3, [r9]
 800a092:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800a096:	3001      	adds	r0, #1
 800a098:	4798      	blx	r3
 800a09a:	9003      	str	r0, [sp, #12]
 800a09c:	b110      	cbz	r0, 800a0a4 <rcutils_repl_str+0x140>
 800a09e:	9901      	ldr	r1, [sp, #4]
 800a0a0:	f00d fc17 	bl	80178d2 <strcpy>
 800a0a4:	4638      	mov	r0, r7
 800a0a6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a0aa:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800a0ae:	4798      	blx	r3
 800a0b0:	9803      	ldr	r0, [sp, #12]
 800a0b2:	b007      	add	sp, #28
 800a0b4:	ecbd 8b02 	vpop	{d8}
 800a0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0bc:	4647      	mov	r7, r8
 800a0be:	2300      	movs	r3, #0
 800a0c0:	9303      	str	r3, [sp, #12]
 800a0c2:	e7ef      	b.n	800a0a4 <rcutils_repl_str+0x140>
 800a0c4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800a0c8:	e7db      	b.n	800a082 <rcutils_repl_str+0x11e>
 800a0ca:	bf00      	nop

0800a0cc <rcutils_snprintf>:
 800a0cc:	b40c      	push	{r2, r3}
 800a0ce:	b530      	push	{r4, r5, lr}
 800a0d0:	b083      	sub	sp, #12
 800a0d2:	ab06      	add	r3, sp, #24
 800a0d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0d8:	9301      	str	r3, [sp, #4]
 800a0da:	b152      	cbz	r2, 800a0f2 <rcutils_snprintf+0x26>
 800a0dc:	b138      	cbz	r0, 800a0ee <rcutils_snprintf+0x22>
 800a0de:	b141      	cbz	r1, 800a0f2 <rcutils_snprintf+0x26>
 800a0e0:	f00d fa12 	bl	8017508 <vsniprintf>
 800a0e4:	b003      	add	sp, #12
 800a0e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0ea:	b002      	add	sp, #8
 800a0ec:	4770      	bx	lr
 800a0ee:	2900      	cmp	r1, #0
 800a0f0:	d0f6      	beq.n	800a0e0 <rcutils_snprintf+0x14>
 800a0f2:	f00d fbc1 	bl	8017878 <__errno>
 800a0f6:	2316      	movs	r3, #22
 800a0f8:	6003      	str	r3, [r0, #0]
 800a0fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0fe:	e7f1      	b.n	800a0e4 <rcutils_snprintf+0x18>

0800a100 <rcutils_vsnprintf>:
 800a100:	b570      	push	{r4, r5, r6, lr}
 800a102:	b13a      	cbz	r2, 800a114 <rcutils_vsnprintf+0x14>
 800a104:	b120      	cbz	r0, 800a110 <rcutils_vsnprintf+0x10>
 800a106:	b129      	cbz	r1, 800a114 <rcutils_vsnprintf+0x14>
 800a108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a10c:	f00d b9fc 	b.w	8017508 <vsniprintf>
 800a110:	2900      	cmp	r1, #0
 800a112:	d0f9      	beq.n	800a108 <rcutils_vsnprintf+0x8>
 800a114:	f00d fbb0 	bl	8017878 <__errno>
 800a118:	2316      	movs	r3, #22
 800a11a:	6003      	str	r3, [r0, #0]
 800a11c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a120:	bd70      	pop	{r4, r5, r6, pc}
 800a122:	bf00      	nop

0800a124 <rcutils_strdup>:
 800a124:	b084      	sub	sp, #16
 800a126:	b570      	push	{r4, r5, r6, lr}
 800a128:	b082      	sub	sp, #8
 800a12a:	ac07      	add	r4, sp, #28
 800a12c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800a130:	4605      	mov	r5, r0
 800a132:	b1b0      	cbz	r0, 800a162 <rcutils_strdup+0x3e>
 800a134:	f7f6 f876 	bl	8000224 <strlen>
 800a138:	1c42      	adds	r2, r0, #1
 800a13a:	9b07      	ldr	r3, [sp, #28]
 800a13c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a13e:	9201      	str	r2, [sp, #4]
 800a140:	4606      	mov	r6, r0
 800a142:	4610      	mov	r0, r2
 800a144:	4798      	blx	r3
 800a146:	4604      	mov	r4, r0
 800a148:	b128      	cbz	r0, 800a156 <rcutils_strdup+0x32>
 800a14a:	9a01      	ldr	r2, [sp, #4]
 800a14c:	4629      	mov	r1, r5
 800a14e:	f00d fbc8 	bl	80178e2 <memcpy>
 800a152:	2300      	movs	r3, #0
 800a154:	55a3      	strb	r3, [r4, r6]
 800a156:	4620      	mov	r0, r4
 800a158:	b002      	add	sp, #8
 800a15a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a15e:	b004      	add	sp, #16
 800a160:	4770      	bx	lr
 800a162:	4604      	mov	r4, r0
 800a164:	e7f7      	b.n	800a156 <rcutils_strdup+0x32>
 800a166:	bf00      	nop

0800a168 <rcutils_strndup>:
 800a168:	b082      	sub	sp, #8
 800a16a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16c:	ac06      	add	r4, sp, #24
 800a16e:	e884 000c 	stmia.w	r4, {r2, r3}
 800a172:	4605      	mov	r5, r0
 800a174:	b188      	cbz	r0, 800a19a <rcutils_strndup+0x32>
 800a176:	1c4f      	adds	r7, r1, #1
 800a178:	460e      	mov	r6, r1
 800a17a:	4638      	mov	r0, r7
 800a17c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a17e:	4790      	blx	r2
 800a180:	4604      	mov	r4, r0
 800a182:	b128      	cbz	r0, 800a190 <rcutils_strndup+0x28>
 800a184:	463a      	mov	r2, r7
 800a186:	4629      	mov	r1, r5
 800a188:	f00d fbab 	bl	80178e2 <memcpy>
 800a18c:	2300      	movs	r3, #0
 800a18e:	55a3      	strb	r3, [r4, r6]
 800a190:	4620      	mov	r0, r4
 800a192:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a196:	b002      	add	sp, #8
 800a198:	4770      	bx	lr
 800a19a:	4604      	mov	r4, r0
 800a19c:	e7f8      	b.n	800a190 <rcutils_strndup+0x28>
 800a19e:	bf00      	nop

0800a1a0 <rcutils_system_time_now>:
 800a1a0:	b308      	cbz	r0, 800a1e6 <rcutils_system_time_now+0x46>
 800a1a2:	b570      	push	{r4, r5, r6, lr}
 800a1a4:	b084      	sub	sp, #16
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	4669      	mov	r1, sp
 800a1aa:	2001      	movs	r0, #1
 800a1ac:	f7f7 fb2c 	bl	8001808 <clock_gettime>
 800a1b0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a1b4:	2d00      	cmp	r5, #0
 800a1b6:	db13      	blt.n	800a1e0 <rcutils_system_time_now+0x40>
 800a1b8:	9902      	ldr	r1, [sp, #8]
 800a1ba:	2900      	cmp	r1, #0
 800a1bc:	db0d      	blt.n	800a1da <rcutils_system_time_now+0x3a>
 800a1be:	4e0b      	ldr	r6, [pc, #44]	; (800a1ec <rcutils_system_time_now+0x4c>)
 800a1c0:	fba3 3206 	umull	r3, r2, r3, r6
 800a1c4:	185b      	adds	r3, r3, r1
 800a1c6:	fb06 2205 	mla	r2, r6, r5, r2
 800a1ca:	f04f 0000 	mov.w	r0, #0
 800a1ce:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a1d2:	e9c4 3200 	strd	r3, r2, [r4]
 800a1d6:	b004      	add	sp, #16
 800a1d8:	bd70      	pop	{r4, r5, r6, pc}
 800a1da:	ea53 0205 	orrs.w	r2, r3, r5
 800a1de:	d1ee      	bne.n	800a1be <rcutils_system_time_now+0x1e>
 800a1e0:	2002      	movs	r0, #2
 800a1e2:	b004      	add	sp, #16
 800a1e4:	bd70      	pop	{r4, r5, r6, pc}
 800a1e6:	200b      	movs	r0, #11
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop
 800a1ec:	3b9aca00 	.word	0x3b9aca00

0800a1f0 <rcutils_steady_time_now>:
 800a1f0:	b308      	cbz	r0, 800a236 <rcutils_steady_time_now+0x46>
 800a1f2:	b570      	push	{r4, r5, r6, lr}
 800a1f4:	b084      	sub	sp, #16
 800a1f6:	4604      	mov	r4, r0
 800a1f8:	4669      	mov	r1, sp
 800a1fa:	2000      	movs	r0, #0
 800a1fc:	f7f7 fb04 	bl	8001808 <clock_gettime>
 800a200:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a204:	2d00      	cmp	r5, #0
 800a206:	db13      	blt.n	800a230 <rcutils_steady_time_now+0x40>
 800a208:	9902      	ldr	r1, [sp, #8]
 800a20a:	2900      	cmp	r1, #0
 800a20c:	db0d      	blt.n	800a22a <rcutils_steady_time_now+0x3a>
 800a20e:	4e0b      	ldr	r6, [pc, #44]	; (800a23c <rcutils_steady_time_now+0x4c>)
 800a210:	fba3 3206 	umull	r3, r2, r3, r6
 800a214:	185b      	adds	r3, r3, r1
 800a216:	fb06 2205 	mla	r2, r6, r5, r2
 800a21a:	f04f 0000 	mov.w	r0, #0
 800a21e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a222:	e9c4 3200 	strd	r3, r2, [r4]
 800a226:	b004      	add	sp, #16
 800a228:	bd70      	pop	{r4, r5, r6, pc}
 800a22a:	ea53 0205 	orrs.w	r2, r3, r5
 800a22e:	d1ee      	bne.n	800a20e <rcutils_steady_time_now+0x1e>
 800a230:	2002      	movs	r0, #2
 800a232:	b004      	add	sp, #16
 800a234:	bd70      	pop	{r4, r5, r6, pc}
 800a236:	200b      	movs	r0, #11
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	3b9aca00 	.word	0x3b9aca00

0800a240 <rmw_get_default_publisher_options>:
 800a240:	2200      	movs	r2, #0
 800a242:	6002      	str	r2, [r0, #0]
 800a244:	7102      	strb	r2, [r0, #4]
 800a246:	4770      	bx	lr

0800a248 <rmw_subscription_content_filter_options_fini>:
 800a248:	b1b0      	cbz	r0, 800a278 <rmw_subscription_content_filter_options_fini+0x30>
 800a24a:	b538      	push	{r3, r4, r5, lr}
 800a24c:	4604      	mov	r4, r0
 800a24e:	4608      	mov	r0, r1
 800a250:	460d      	mov	r5, r1
 800a252:	f7ff fdf5 	bl	8009e40 <rcutils_allocator_is_valid>
 800a256:	b168      	cbz	r0, 800a274 <rmw_subscription_content_filter_options_fini+0x2c>
 800a258:	6820      	ldr	r0, [r4, #0]
 800a25a:	b120      	cbz	r0, 800a266 <rmw_subscription_content_filter_options_fini+0x1e>
 800a25c:	686b      	ldr	r3, [r5, #4]
 800a25e:	6929      	ldr	r1, [r5, #16]
 800a260:	4798      	blx	r3
 800a262:	2300      	movs	r3, #0
 800a264:	6023      	str	r3, [r4, #0]
 800a266:	1d20      	adds	r0, r4, #4
 800a268:	f009 fafa 	bl	8013860 <rcutils_string_array_fini>
 800a26c:	3800      	subs	r0, #0
 800a26e:	bf18      	it	ne
 800a270:	2001      	movne	r0, #1
 800a272:	bd38      	pop	{r3, r4, r5, pc}
 800a274:	200b      	movs	r0, #11
 800a276:	bd38      	pop	{r3, r4, r5, pc}
 800a278:	200b      	movs	r0, #11
 800a27a:	4770      	bx	lr

0800a27c <rmw_get_default_subscription_options>:
 800a27c:	2200      	movs	r2, #0
 800a27e:	e9c0 2200 	strd	r2, r2, [r0]
 800a282:	6082      	str	r2, [r0, #8]
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop

0800a288 <rmw_get_zero_initialized_message_info>:
 800a288:	b510      	push	{r4, lr}
 800a28a:	2240      	movs	r2, #64	; 0x40
 800a28c:	4604      	mov	r4, r0
 800a28e:	2100      	movs	r1, #0
 800a290:	f00d fa08 	bl	80176a4 <memset>
 800a294:	4620      	mov	r0, r4
 800a296:	bd10      	pop	{r4, pc}

0800a298 <rmw_validate_namespace_with_size>:
 800a298:	b340      	cbz	r0, 800a2ec <rmw_validate_namespace_with_size+0x54>
 800a29a:	b570      	push	{r4, r5, r6, lr}
 800a29c:	4614      	mov	r4, r2
 800a29e:	b0c2      	sub	sp, #264	; 0x108
 800a2a0:	b332      	cbz	r2, 800a2f0 <rmw_validate_namespace_with_size+0x58>
 800a2a2:	2901      	cmp	r1, #1
 800a2a4:	460d      	mov	r5, r1
 800a2a6:	461e      	mov	r6, r3
 800a2a8:	d102      	bne.n	800a2b0 <rmw_validate_namespace_with_size+0x18>
 800a2aa:	7803      	ldrb	r3, [r0, #0]
 800a2ac:	2b2f      	cmp	r3, #47	; 0x2f
 800a2ae:	d012      	beq.n	800a2d6 <rmw_validate_namespace_with_size+0x3e>
 800a2b0:	aa01      	add	r2, sp, #4
 800a2b2:	4669      	mov	r1, sp
 800a2b4:	f009 fcd0 	bl	8013c58 <rmw_validate_full_topic_name>
 800a2b8:	b978      	cbnz	r0, 800a2da <rmw_validate_namespace_with_size+0x42>
 800a2ba:	9b00      	ldr	r3, [sp, #0]
 800a2bc:	b14b      	cbz	r3, 800a2d2 <rmw_validate_namespace_with_size+0x3a>
 800a2be:	2b07      	cmp	r3, #7
 800a2c0:	d007      	beq.n	800a2d2 <rmw_validate_namespace_with_size+0x3a>
 800a2c2:	1e5a      	subs	r2, r3, #1
 800a2c4:	2a05      	cmp	r2, #5
 800a2c6:	d82b      	bhi.n	800a320 <rmw_validate_namespace_with_size+0x88>
 800a2c8:	e8df f002 	tbb	[pc, r2]
 800a2cc:	1e212427 	.word	0x1e212427
 800a2d0:	141b      	.short	0x141b
 800a2d2:	2df5      	cmp	r5, #245	; 0xf5
 800a2d4:	d803      	bhi.n	800a2de <rmw_validate_namespace_with_size+0x46>
 800a2d6:	2000      	movs	r0, #0
 800a2d8:	6020      	str	r0, [r4, #0]
 800a2da:	b042      	add	sp, #264	; 0x108
 800a2dc:	bd70      	pop	{r4, r5, r6, pc}
 800a2de:	2307      	movs	r3, #7
 800a2e0:	6023      	str	r3, [r4, #0]
 800a2e2:	2e00      	cmp	r6, #0
 800a2e4:	d0f9      	beq.n	800a2da <rmw_validate_namespace_with_size+0x42>
 800a2e6:	23f4      	movs	r3, #244	; 0xf4
 800a2e8:	6033      	str	r3, [r6, #0]
 800a2ea:	e7f6      	b.n	800a2da <rmw_validate_namespace_with_size+0x42>
 800a2ec:	200b      	movs	r0, #11
 800a2ee:	4770      	bx	lr
 800a2f0:	200b      	movs	r0, #11
 800a2f2:	e7f2      	b.n	800a2da <rmw_validate_namespace_with_size+0x42>
 800a2f4:	2306      	movs	r3, #6
 800a2f6:	6023      	str	r3, [r4, #0]
 800a2f8:	2e00      	cmp	r6, #0
 800a2fa:	d0ee      	beq.n	800a2da <rmw_validate_namespace_with_size+0x42>
 800a2fc:	9b01      	ldr	r3, [sp, #4]
 800a2fe:	6033      	str	r3, [r6, #0]
 800a300:	e7eb      	b.n	800a2da <rmw_validate_namespace_with_size+0x42>
 800a302:	2305      	movs	r3, #5
 800a304:	6023      	str	r3, [r4, #0]
 800a306:	e7f7      	b.n	800a2f8 <rmw_validate_namespace_with_size+0x60>
 800a308:	2304      	movs	r3, #4
 800a30a:	6023      	str	r3, [r4, #0]
 800a30c:	e7f4      	b.n	800a2f8 <rmw_validate_namespace_with_size+0x60>
 800a30e:	2303      	movs	r3, #3
 800a310:	6023      	str	r3, [r4, #0]
 800a312:	e7f1      	b.n	800a2f8 <rmw_validate_namespace_with_size+0x60>
 800a314:	2302      	movs	r3, #2
 800a316:	6023      	str	r3, [r4, #0]
 800a318:	e7ee      	b.n	800a2f8 <rmw_validate_namespace_with_size+0x60>
 800a31a:	2301      	movs	r3, #1
 800a31c:	6023      	str	r3, [r4, #0]
 800a31e:	e7eb      	b.n	800a2f8 <rmw_validate_namespace_with_size+0x60>
 800a320:	4a03      	ldr	r2, [pc, #12]	; (800a330 <rmw_validate_namespace_with_size+0x98>)
 800a322:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a326:	a802      	add	r0, sp, #8
 800a328:	f7ff fed0 	bl	800a0cc <rcutils_snprintf>
 800a32c:	2001      	movs	r0, #1
 800a32e:	e7d4      	b.n	800a2da <rmw_validate_namespace_with_size+0x42>
 800a330:	080189b0 	.word	0x080189b0

0800a334 <rmw_validate_namespace>:
 800a334:	b168      	cbz	r0, 800a352 <rmw_validate_namespace+0x1e>
 800a336:	b570      	push	{r4, r5, r6, lr}
 800a338:	460d      	mov	r5, r1
 800a33a:	4616      	mov	r6, r2
 800a33c:	4604      	mov	r4, r0
 800a33e:	f7f5 ff71 	bl	8000224 <strlen>
 800a342:	4633      	mov	r3, r6
 800a344:	4601      	mov	r1, r0
 800a346:	462a      	mov	r2, r5
 800a348:	4620      	mov	r0, r4
 800a34a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a34e:	f7ff bfa3 	b.w	800a298 <rmw_validate_namespace_with_size>
 800a352:	200b      	movs	r0, #11
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop

0800a358 <rmw_namespace_validation_result_string>:
 800a358:	2807      	cmp	r0, #7
 800a35a:	bf9a      	itte	ls
 800a35c:	4b02      	ldrls	r3, [pc, #8]	; (800a368 <rmw_namespace_validation_result_string+0x10>)
 800a35e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800a362:	4802      	ldrhi	r0, [pc, #8]	; (800a36c <rmw_namespace_validation_result_string+0x14>)
 800a364:	4770      	bx	lr
 800a366:	bf00      	nop
 800a368:	08018ba8 	.word	0x08018ba8
 800a36c:	08018a00 	.word	0x08018a00

0800a370 <rmw_validate_node_name>:
 800a370:	2800      	cmp	r0, #0
 800a372:	d03b      	beq.n	800a3ec <rmw_validate_node_name+0x7c>
 800a374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a378:	460d      	mov	r5, r1
 800a37a:	2900      	cmp	r1, #0
 800a37c:	d038      	beq.n	800a3f0 <rmw_validate_node_name+0x80>
 800a37e:	4616      	mov	r6, r2
 800a380:	4604      	mov	r4, r0
 800a382:	f7f5 ff4f 	bl	8000224 <strlen>
 800a386:	b1e0      	cbz	r0, 800a3c2 <rmw_validate_node_name+0x52>
 800a388:	1e63      	subs	r3, r4, #1
 800a38a:	eb03 0800 	add.w	r8, r3, r0
 800a38e:	f1c4 0101 	rsb	r1, r4, #1
 800a392:	18cf      	adds	r7, r1, r3
 800a394:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800a398:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 800a39c:	f02e 0c20 	bic.w	ip, lr, #32
 800a3a0:	2a09      	cmp	r2, #9
 800a3a2:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 800a3a6:	d914      	bls.n	800a3d2 <rmw_validate_node_name+0x62>
 800a3a8:	f1bc 0f19 	cmp.w	ip, #25
 800a3ac:	d911      	bls.n	800a3d2 <rmw_validate_node_name+0x62>
 800a3ae:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800a3b2:	d00e      	beq.n	800a3d2 <rmw_validate_node_name+0x62>
 800a3b4:	2302      	movs	r3, #2
 800a3b6:	602b      	str	r3, [r5, #0]
 800a3b8:	b106      	cbz	r6, 800a3bc <rmw_validate_node_name+0x4c>
 800a3ba:	6037      	str	r7, [r6, #0]
 800a3bc:	2000      	movs	r0, #0
 800a3be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	602b      	str	r3, [r5, #0]
 800a3c6:	2e00      	cmp	r6, #0
 800a3c8:	d0f8      	beq.n	800a3bc <rmw_validate_node_name+0x4c>
 800a3ca:	2000      	movs	r0, #0
 800a3cc:	6030      	str	r0, [r6, #0]
 800a3ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3d2:	4543      	cmp	r3, r8
 800a3d4:	d1dd      	bne.n	800a392 <rmw_validate_node_name+0x22>
 800a3d6:	7822      	ldrb	r2, [r4, #0]
 800a3d8:	4b0d      	ldr	r3, [pc, #52]	; (800a410 <rmw_validate_node_name+0xa0>)
 800a3da:	5cd3      	ldrb	r3, [r2, r3]
 800a3dc:	f013 0304 	ands.w	r3, r3, #4
 800a3e0:	d110      	bne.n	800a404 <rmw_validate_node_name+0x94>
 800a3e2:	28ff      	cmp	r0, #255	; 0xff
 800a3e4:	d806      	bhi.n	800a3f4 <rmw_validate_node_name+0x84>
 800a3e6:	602b      	str	r3, [r5, #0]
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	e7e8      	b.n	800a3be <rmw_validate_node_name+0x4e>
 800a3ec:	200b      	movs	r0, #11
 800a3ee:	4770      	bx	lr
 800a3f0:	200b      	movs	r0, #11
 800a3f2:	e7e4      	b.n	800a3be <rmw_validate_node_name+0x4e>
 800a3f4:	2204      	movs	r2, #4
 800a3f6:	602a      	str	r2, [r5, #0]
 800a3f8:	2e00      	cmp	r6, #0
 800a3fa:	d0df      	beq.n	800a3bc <rmw_validate_node_name+0x4c>
 800a3fc:	22fe      	movs	r2, #254	; 0xfe
 800a3fe:	6032      	str	r2, [r6, #0]
 800a400:	4618      	mov	r0, r3
 800a402:	e7dc      	b.n	800a3be <rmw_validate_node_name+0x4e>
 800a404:	2303      	movs	r3, #3
 800a406:	602b      	str	r3, [r5, #0]
 800a408:	2e00      	cmp	r6, #0
 800a40a:	d1de      	bne.n	800a3ca <rmw_validate_node_name+0x5a>
 800a40c:	e7d6      	b.n	800a3bc <rmw_validate_node_name+0x4c>
 800a40e:	bf00      	nop
 800a410:	08019882 	.word	0x08019882

0800a414 <rmw_node_name_validation_result_string>:
 800a414:	2804      	cmp	r0, #4
 800a416:	bf9a      	itte	ls
 800a418:	4b02      	ldrls	r3, [pc, #8]	; (800a424 <rmw_node_name_validation_result_string+0x10>)
 800a41a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800a41e:	4802      	ldrhi	r0, [pc, #8]	; (800a428 <rmw_node_name_validation_result_string+0x14>)
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	08018cb4 	.word	0x08018cb4
 800a428:	08018bc8 	.word	0x08018bc8

0800a42c <rmw_uros_set_custom_transport>:
 800a42c:	b470      	push	{r4, r5, r6}
 800a42e:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800a432:	b162      	cbz	r2, 800a44e <rmw_uros_set_custom_transport+0x22>
 800a434:	b15b      	cbz	r3, 800a44e <rmw_uros_set_custom_transport+0x22>
 800a436:	b155      	cbz	r5, 800a44e <rmw_uros_set_custom_transport+0x22>
 800a438:	b14e      	cbz	r6, 800a44e <rmw_uros_set_custom_transport+0x22>
 800a43a:	4c06      	ldr	r4, [pc, #24]	; (800a454 <rmw_uros_set_custom_transport+0x28>)
 800a43c:	7020      	strb	r0, [r4, #0]
 800a43e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a442:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a446:	6166      	str	r6, [r4, #20]
 800a448:	2000      	movs	r0, #0
 800a44a:	bc70      	pop	{r4, r5, r6}
 800a44c:	4770      	bx	lr
 800a44e:	200b      	movs	r0, #11
 800a450:	bc70      	pop	{r4, r5, r6}
 800a452:	4770      	bx	lr
 800a454:	20009afc 	.word	0x20009afc

0800a458 <create_node>:
 800a458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a45c:	b083      	sub	sp, #12
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d05f      	beq.n	800a522 <create_node+0xca>
 800a462:	4606      	mov	r6, r0
 800a464:	4835      	ldr	r0, [pc, #212]	; (800a53c <create_node+0xe4>)
 800a466:	460f      	mov	r7, r1
 800a468:	4690      	mov	r8, r2
 800a46a:	461d      	mov	r5, r3
 800a46c:	f009 fc6a 	bl	8013d44 <get_memory>
 800a470:	2800      	cmp	r0, #0
 800a472:	d056      	beq.n	800a522 <create_node+0xca>
 800a474:	6884      	ldr	r4, [r0, #8]
 800a476:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800a478:	6123      	str	r3, [r4, #16]
 800a47a:	f009 fccb 	bl	8013e14 <rmw_get_implementation_identifier>
 800a47e:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800a482:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800a486:	f8c4 9020 	str.w	r9, [r4, #32]
 800a48a:	4630      	mov	r0, r6
 800a48c:	f7f5 feca 	bl	8000224 <strlen>
 800a490:	1c42      	adds	r2, r0, #1
 800a492:	2a3c      	cmp	r2, #60	; 0x3c
 800a494:	f104 0518 	add.w	r5, r4, #24
 800a498:	d840      	bhi.n	800a51c <create_node+0xc4>
 800a49a:	4648      	mov	r0, r9
 800a49c:	4631      	mov	r1, r6
 800a49e:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800a4a2:	f00d fa1e 	bl	80178e2 <memcpy>
 800a4a6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800a4aa:	4638      	mov	r0, r7
 800a4ac:	f7f5 feba 	bl	8000224 <strlen>
 800a4b0:	1c42      	adds	r2, r0, #1
 800a4b2:	2a3c      	cmp	r2, #60	; 0x3c
 800a4b4:	d832      	bhi.n	800a51c <create_node+0xc4>
 800a4b6:	4639      	mov	r1, r7
 800a4b8:	4648      	mov	r0, r9
 800a4ba:	f00d fa12 	bl	80178e2 <memcpy>
 800a4be:	6923      	ldr	r3, [r4, #16]
 800a4c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4c4:	2101      	movs	r1, #1
 800a4c6:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 800a4ca:	1842      	adds	r2, r0, r1
 800a4cc:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 800a4d0:	f004 f80c 	bl	800e4ec <uxr_object_id>
 800a4d4:	6160      	str	r0, [r4, #20]
 800a4d6:	783b      	ldrb	r3, [r7, #0]
 800a4d8:	2b2f      	cmp	r3, #47	; 0x2f
 800a4da:	d127      	bne.n	800a52c <create_node+0xd4>
 800a4dc:	787b      	ldrb	r3, [r7, #1]
 800a4de:	bb2b      	cbnz	r3, 800a52c <create_node+0xd4>
 800a4e0:	4a17      	ldr	r2, [pc, #92]	; (800a540 <create_node+0xe8>)
 800a4e2:	4818      	ldr	r0, [pc, #96]	; (800a544 <create_node+0xec>)
 800a4e4:	4633      	mov	r3, r6
 800a4e6:	213c      	movs	r1, #60	; 0x3c
 800a4e8:	f00c ff4c 	bl	8017384 <sniprintf>
 800a4ec:	6920      	ldr	r0, [r4, #16]
 800a4ee:	4915      	ldr	r1, [pc, #84]	; (800a544 <create_node+0xec>)
 800a4f0:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800a4f4:	9100      	str	r1, [sp, #0]
 800a4f6:	2106      	movs	r1, #6
 800a4f8:	9101      	str	r1, [sp, #4]
 800a4fa:	6811      	ldr	r1, [r2, #0]
 800a4fc:	6962      	ldr	r2, [r4, #20]
 800a4fe:	fa1f f388 	uxth.w	r3, r8
 800a502:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a506:	f003 fe3b 	bl	800e180 <uxr_buffer_create_participant_bin>
 800a50a:	4602      	mov	r2, r0
 800a50c:	6920      	ldr	r0, [r4, #16]
 800a50e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800a512:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800a516:	f000 ff19 	bl	800b34c <run_xrce_session>
 800a51a:	b918      	cbnz	r0, 800a524 <create_node+0xcc>
 800a51c:	4628      	mov	r0, r5
 800a51e:	f000 fda3 	bl	800b068 <rmw_uxrce_fini_node_memory>
 800a522:	2500      	movs	r5, #0
 800a524:	4628      	mov	r0, r5
 800a526:	b003      	add	sp, #12
 800a528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a52c:	4a06      	ldr	r2, [pc, #24]	; (800a548 <create_node+0xf0>)
 800a52e:	9600      	str	r6, [sp, #0]
 800a530:	463b      	mov	r3, r7
 800a532:	213c      	movs	r1, #60	; 0x3c
 800a534:	4803      	ldr	r0, [pc, #12]	; (800a544 <create_node+0xec>)
 800a536:	f00c ff25 	bl	8017384 <sniprintf>
 800a53a:	e7d7      	b.n	800a4ec <create_node+0x94>
 800a53c:	2000e424 	.word	0x2000e424
 800a540:	08018cfc 	.word	0x08018cfc
 800a544:	20009b18 	.word	0x20009b18
 800a548:	08018728 	.word	0x08018728

0800a54c <rmw_create_node>:
 800a54c:	b199      	cbz	r1, 800a576 <rmw_create_node+0x2a>
 800a54e:	780b      	ldrb	r3, [r1, #0]
 800a550:	468c      	mov	ip, r1
 800a552:	b183      	cbz	r3, 800a576 <rmw_create_node+0x2a>
 800a554:	b410      	push	{r4}
 800a556:	4614      	mov	r4, r2
 800a558:	b14a      	cbz	r2, 800a56e <rmw_create_node+0x22>
 800a55a:	7813      	ldrb	r3, [r2, #0]
 800a55c:	b13b      	cbz	r3, 800a56e <rmw_create_node+0x22>
 800a55e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800a560:	4603      	mov	r3, r0
 800a562:	4621      	mov	r1, r4
 800a564:	4660      	mov	r0, ip
 800a566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a56a:	f7ff bf75 	b.w	800a458 <create_node>
 800a56e:	2000      	movs	r0, #0
 800a570:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a574:	4770      	bx	lr
 800a576:	2000      	movs	r0, #0
 800a578:	4770      	bx	lr
 800a57a:	bf00      	nop

0800a57c <rmw_destroy_node>:
 800a57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a57e:	b328      	cbz	r0, 800a5cc <rmw_destroy_node+0x50>
 800a580:	4607      	mov	r7, r0
 800a582:	6800      	ldr	r0, [r0, #0]
 800a584:	b120      	cbz	r0, 800a590 <rmw_destroy_node+0x14>
 800a586:	4b36      	ldr	r3, [pc, #216]	; (800a660 <rmw_destroy_node+0xe4>)
 800a588:	6819      	ldr	r1, [r3, #0]
 800a58a:	f7f5 fe41 	bl	8000210 <strcmp>
 800a58e:	b9e8      	cbnz	r0, 800a5cc <rmw_destroy_node+0x50>
 800a590:	687d      	ldr	r5, [r7, #4]
 800a592:	b1dd      	cbz	r5, 800a5cc <rmw_destroy_node+0x50>
 800a594:	4b33      	ldr	r3, [pc, #204]	; (800a664 <rmw_destroy_node+0xe8>)
 800a596:	681c      	ldr	r4, [r3, #0]
 800a598:	2c00      	cmp	r4, #0
 800a59a:	d05f      	beq.n	800a65c <rmw_destroy_node+0xe0>
 800a59c:	2600      	movs	r6, #0
 800a59e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800a5a2:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800a5a6:	429d      	cmp	r5, r3
 800a5a8:	d013      	beq.n	800a5d2 <rmw_destroy_node+0x56>
 800a5aa:	2c00      	cmp	r4, #0
 800a5ac:	d1f7      	bne.n	800a59e <rmw_destroy_node+0x22>
 800a5ae:	4b2e      	ldr	r3, [pc, #184]	; (800a668 <rmw_destroy_node+0xec>)
 800a5b0:	681c      	ldr	r4, [r3, #0]
 800a5b2:	b1c4      	cbz	r4, 800a5e6 <rmw_destroy_node+0x6a>
 800a5b4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800a5b8:	6a0b      	ldr	r3, [r1, #32]
 800a5ba:	429d      	cmp	r5, r3
 800a5bc:	d1f9      	bne.n	800a5b2 <rmw_destroy_node+0x36>
 800a5be:	317c      	adds	r1, #124	; 0x7c
 800a5c0:	4638      	mov	r0, r7
 800a5c2:	f000 fb37 	bl	800ac34 <rmw_destroy_subscription>
 800a5c6:	2801      	cmp	r0, #1
 800a5c8:	4606      	mov	r6, r0
 800a5ca:	d1f2      	bne.n	800a5b2 <rmw_destroy_node+0x36>
 800a5cc:	2601      	movs	r6, #1
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5d2:	3184      	adds	r1, #132	; 0x84
 800a5d4:	4638      	mov	r0, r7
 800a5d6:	f000 f9a5 	bl	800a924 <rmw_destroy_publisher>
 800a5da:	2801      	cmp	r0, #1
 800a5dc:	4606      	mov	r6, r0
 800a5de:	d0f5      	beq.n	800a5cc <rmw_destroy_node+0x50>
 800a5e0:	2c00      	cmp	r4, #0
 800a5e2:	d1dc      	bne.n	800a59e <rmw_destroy_node+0x22>
 800a5e4:	e7e3      	b.n	800a5ae <rmw_destroy_node+0x32>
 800a5e6:	4b21      	ldr	r3, [pc, #132]	; (800a66c <rmw_destroy_node+0xf0>)
 800a5e8:	681c      	ldr	r4, [r3, #0]
 800a5ea:	b16c      	cbz	r4, 800a608 <rmw_destroy_node+0x8c>
 800a5ec:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800a5f0:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800a5f2:	429d      	cmp	r5, r3
 800a5f4:	d1f9      	bne.n	800a5ea <rmw_destroy_node+0x6e>
 800a5f6:	317c      	adds	r1, #124	; 0x7c
 800a5f8:	4638      	mov	r0, r7
 800a5fa:	f000 f9e5 	bl	800a9c8 <rmw_destroy_service>
 800a5fe:	2801      	cmp	r0, #1
 800a600:	4606      	mov	r6, r0
 800a602:	d0e3      	beq.n	800a5cc <rmw_destroy_node+0x50>
 800a604:	2c00      	cmp	r4, #0
 800a606:	d1f1      	bne.n	800a5ec <rmw_destroy_node+0x70>
 800a608:	4b19      	ldr	r3, [pc, #100]	; (800a670 <rmw_destroy_node+0xf4>)
 800a60a:	681c      	ldr	r4, [r3, #0]
 800a60c:	b16c      	cbz	r4, 800a62a <rmw_destroy_node+0xae>
 800a60e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800a612:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800a614:	429d      	cmp	r5, r3
 800a616:	d1f9      	bne.n	800a60c <rmw_destroy_node+0x90>
 800a618:	317c      	adds	r1, #124	; 0x7c
 800a61a:	4638      	mov	r0, r7
 800a61c:	f009 fbb6 	bl	8013d8c <rmw_destroy_client>
 800a620:	2801      	cmp	r0, #1
 800a622:	4606      	mov	r6, r0
 800a624:	d0d2      	beq.n	800a5cc <rmw_destroy_node+0x50>
 800a626:	2c00      	cmp	r4, #0
 800a628:	d1f1      	bne.n	800a60e <rmw_destroy_node+0x92>
 800a62a:	6928      	ldr	r0, [r5, #16]
 800a62c:	696a      	ldr	r2, [r5, #20]
 800a62e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800a632:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a636:	6819      	ldr	r1, [r3, #0]
 800a638:	f003 fd56 	bl	800e0e8 <uxr_buffer_delete_entity>
 800a63c:	4602      	mov	r2, r0
 800a63e:	6928      	ldr	r0, [r5, #16]
 800a640:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800a644:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800a648:	f000 fe80 	bl	800b34c <run_xrce_session>
 800a64c:	2800      	cmp	r0, #0
 800a64e:	bf08      	it	eq
 800a650:	2602      	moveq	r6, #2
 800a652:	4638      	mov	r0, r7
 800a654:	f000 fd08 	bl	800b068 <rmw_uxrce_fini_node_memory>
 800a658:	4630      	mov	r0, r6
 800a65a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a65c:	4626      	mov	r6, r4
 800a65e:	e7a6      	b.n	800a5ae <rmw_destroy_node+0x32>
 800a660:	08019488 	.word	0x08019488
 800a664:	2000e434 	.word	0x2000e434
 800a668:	2000e474 	.word	0x2000e474
 800a66c:	2000e444 	.word	0x2000e444
 800a670:	20009b54 	.word	0x20009b54

0800a674 <rmw_node_get_graph_guard_condition>:
 800a674:	6843      	ldr	r3, [r0, #4]
 800a676:	6918      	ldr	r0, [r3, #16]
 800a678:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800a67c:	4770      	bx	lr
 800a67e:	bf00      	nop

0800a680 <flush_session>:
 800a680:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800a682:	f004 bd71 	b.w	800f168 <uxr_run_session_until_confirm_delivery>
 800a686:	bf00      	nop

0800a688 <rmw_publish>:
 800a688:	2800      	cmp	r0, #0
 800a68a:	d053      	beq.n	800a734 <rmw_publish+0xac>
 800a68c:	b570      	push	{r4, r5, r6, lr}
 800a68e:	460d      	mov	r5, r1
 800a690:	b08e      	sub	sp, #56	; 0x38
 800a692:	2900      	cmp	r1, #0
 800a694:	d04b      	beq.n	800a72e <rmw_publish+0xa6>
 800a696:	4604      	mov	r4, r0
 800a698:	6800      	ldr	r0, [r0, #0]
 800a69a:	f000 fed7 	bl	800b44c <is_uxrce_rmw_identifier_valid>
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	d045      	beq.n	800a72e <rmw_publish+0xa6>
 800a6a2:	6866      	ldr	r6, [r4, #4]
 800a6a4:	2e00      	cmp	r6, #0
 800a6a6:	d042      	beq.n	800a72e <rmw_publish+0xa6>
 800a6a8:	69b4      	ldr	r4, [r6, #24]
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	6923      	ldr	r3, [r4, #16]
 800a6ae:	4798      	blx	r3
 800a6b0:	69f3      	ldr	r3, [r6, #28]
 800a6b2:	9005      	str	r0, [sp, #20]
 800a6b4:	b113      	cbz	r3, 800a6bc <rmw_publish+0x34>
 800a6b6:	a805      	add	r0, sp, #20
 800a6b8:	4798      	blx	r3
 800a6ba:	9805      	ldr	r0, [sp, #20]
 800a6bc:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	9000      	str	r0, [sp, #0]
 800a6c4:	6972      	ldr	r2, [r6, #20]
 800a6c6:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800a6c8:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800a6cc:	ab06      	add	r3, sp, #24
 800a6ce:	f005 fb37 	bl	800fd40 <uxr_prepare_output_stream>
 800a6d2:	b1d8      	cbz	r0, 800a70c <rmw_publish+0x84>
 800a6d4:	68a3      	ldr	r3, [r4, #8]
 800a6d6:	a906      	add	r1, sp, #24
 800a6d8:	4628      	mov	r0, r5
 800a6da:	4798      	blx	r3
 800a6dc:	6a33      	ldr	r3, [r6, #32]
 800a6de:	4604      	mov	r4, r0
 800a6e0:	b10b      	cbz	r3, 800a6e6 <rmw_publish+0x5e>
 800a6e2:	a806      	add	r0, sp, #24
 800a6e4:	4798      	blx	r3
 800a6e6:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800a6f0:	d022      	beq.n	800a738 <rmw_publish+0xb0>
 800a6f2:	6918      	ldr	r0, [r3, #16]
 800a6f4:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800a6f6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a6fa:	f004 fd35 	bl	800f168 <uxr_run_session_until_confirm_delivery>
 800a6fe:	4020      	ands	r0, r4
 800a700:	b2c4      	uxtb	r4, r0
 800a702:	f084 0001 	eor.w	r0, r4, #1
 800a706:	b2c0      	uxtb	r0, r0
 800a708:	b00e      	add	sp, #56	; 0x38
 800a70a:	bd70      	pop	{r4, r5, r6, pc}
 800a70c:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800a710:	6918      	ldr	r0, [r3, #16]
 800a712:	9b05      	ldr	r3, [sp, #20]
 800a714:	9300      	str	r3, [sp, #0]
 800a716:	4b0b      	ldr	r3, [pc, #44]	; (800a744 <rmw_publish+0xbc>)
 800a718:	9301      	str	r3, [sp, #4]
 800a71a:	9602      	str	r6, [sp, #8]
 800a71c:	6972      	ldr	r2, [r6, #20]
 800a71e:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800a720:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a724:	ab06      	add	r3, sp, #24
 800a726:	f005 fb3b 	bl	800fda0 <uxr_prepare_output_stream_fragmented>
 800a72a:	2800      	cmp	r0, #0
 800a72c:	d1d2      	bne.n	800a6d4 <rmw_publish+0x4c>
 800a72e:	2001      	movs	r0, #1
 800a730:	b00e      	add	sp, #56	; 0x38
 800a732:	bd70      	pop	{r4, r5, r6, pc}
 800a734:	2001      	movs	r0, #1
 800a736:	4770      	bx	lr
 800a738:	6918      	ldr	r0, [r3, #16]
 800a73a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a73e:	f004 f953 	bl	800e9e8 <uxr_flash_output_streams>
 800a742:	e7de      	b.n	800a702 <rmw_publish+0x7a>
 800a744:	0800a681 	.word	0x0800a681

0800a748 <rmw_create_publisher>:
 800a748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a74c:	b087      	sub	sp, #28
 800a74e:	2800      	cmp	r0, #0
 800a750:	f000 80cc 	beq.w	800a8ec <rmw_create_publisher+0x1a4>
 800a754:	460e      	mov	r6, r1
 800a756:	2900      	cmp	r1, #0
 800a758:	f000 80c8 	beq.w	800a8ec <rmw_create_publisher+0x1a4>
 800a75c:	4604      	mov	r4, r0
 800a75e:	6800      	ldr	r0, [r0, #0]
 800a760:	4615      	mov	r5, r2
 800a762:	4698      	mov	r8, r3
 800a764:	f000 fe72 	bl	800b44c <is_uxrce_rmw_identifier_valid>
 800a768:	2800      	cmp	r0, #0
 800a76a:	f000 80bf 	beq.w	800a8ec <rmw_create_publisher+0x1a4>
 800a76e:	2d00      	cmp	r5, #0
 800a770:	f000 80bc 	beq.w	800a8ec <rmw_create_publisher+0x1a4>
 800a774:	782b      	ldrb	r3, [r5, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	f000 80b8 	beq.w	800a8ec <rmw_create_publisher+0x1a4>
 800a77c:	f1b8 0f00 	cmp.w	r8, #0
 800a780:	f000 80b4 	beq.w	800a8ec <rmw_create_publisher+0x1a4>
 800a784:	485c      	ldr	r0, [pc, #368]	; (800a8f8 <rmw_create_publisher+0x1b0>)
 800a786:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a78a:	f009 fadb 	bl	8013d44 <get_memory>
 800a78e:	2800      	cmp	r0, #0
 800a790:	f000 80ac 	beq.w	800a8ec <rmw_create_publisher+0x1a4>
 800a794:	6884      	ldr	r4, [r0, #8]
 800a796:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800a79a:	f009 fb3b 	bl	8013e14 <rmw_get_implementation_identifier>
 800a79e:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800a7a2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800a7a6:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800a7aa:	4628      	mov	r0, r5
 800a7ac:	f7f5 fd3a 	bl	8000224 <strlen>
 800a7b0:	3001      	adds	r0, #1
 800a7b2:	283c      	cmp	r0, #60	; 0x3c
 800a7b4:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800a7b8:	f200 8091 	bhi.w	800a8de <rmw_create_publisher+0x196>
 800a7bc:	4a4f      	ldr	r2, [pc, #316]	; (800a8fc <rmw_create_publisher+0x1b4>)
 800a7be:	462b      	mov	r3, r5
 800a7c0:	213c      	movs	r1, #60	; 0x3c
 800a7c2:	4650      	mov	r0, sl
 800a7c4:	f00c fdde 	bl	8017384 <sniprintf>
 800a7c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a7cc:	67e3      	str	r3, [r4, #124]	; 0x7c
 800a7ce:	4641      	mov	r1, r8
 800a7d0:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800a7d4:	2250      	movs	r2, #80	; 0x50
 800a7d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a7da:	f00d f882 	bl	80178e2 <memcpy>
 800a7de:	f898 3008 	ldrb.w	r3, [r8, #8]
 800a7e2:	4947      	ldr	r1, [pc, #284]	; (800a900 <rmw_create_publisher+0x1b8>)
 800a7e4:	2b02      	cmp	r3, #2
 800a7e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a7ea:	bf0c      	ite	eq
 800a7ec:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800a7f0:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800a7f4:	67a3      	str	r3, [r4, #120]	; 0x78
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	f000 fe33 	bl	800b468 <get_message_typesupport_handle>
 800a802:	2800      	cmp	r0, #0
 800a804:	d06b      	beq.n	800a8de <rmw_create_publisher+0x196>
 800a806:	6842      	ldr	r2, [r0, #4]
 800a808:	61a2      	str	r2, [r4, #24]
 800a80a:	2a00      	cmp	r2, #0
 800a80c:	d067      	beq.n	800a8de <rmw_create_publisher+0x196>
 800a80e:	4629      	mov	r1, r5
 800a810:	4643      	mov	r3, r8
 800a812:	4648      	mov	r0, r9
 800a814:	f009 fd8c 	bl	8014330 <create_topic>
 800a818:	6260      	str	r0, [r4, #36]	; 0x24
 800a81a:	2800      	cmp	r0, #0
 800a81c:	d063      	beq.n	800a8e6 <rmw_create_publisher+0x19e>
 800a81e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a826:	2103      	movs	r1, #3
 800a828:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800a82c:	1c42      	adds	r2, r0, #1
 800a82e:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 800a832:	f003 fe5b 	bl	800e4ec <uxr_object_id>
 800a836:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800a83a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a83e:	6120      	str	r0, [r4, #16]
 800a840:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800a844:	6910      	ldr	r0, [r2, #16]
 800a846:	2506      	movs	r5, #6
 800a848:	9500      	str	r5, [sp, #0]
 800a84a:	6819      	ldr	r1, [r3, #0]
 800a84c:	6922      	ldr	r2, [r4, #16]
 800a84e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a852:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a856:	f003 fcfb 	bl	800e250 <uxr_buffer_create_publisher_bin>
 800a85a:	4602      	mov	r2, r0
 800a85c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a860:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800a864:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800a868:	f000 fd70 	bl	800b34c <run_xrce_session>
 800a86c:	b3b8      	cbz	r0, 800a8de <rmw_create_publisher+0x196>
 800a86e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a876:	2105      	movs	r1, #5
 800a878:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 800a87c:	1c42      	adds	r2, r0, #1
 800a87e:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800a882:	f003 fe33 	bl	800e4ec <uxr_object_id>
 800a886:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800a88a:	6160      	str	r0, [r4, #20]
 800a88c:	691e      	ldr	r6, [r3, #16]
 800a88e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a892:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800a896:	f10d 0a10 	add.w	sl, sp, #16
 800a89a:	4641      	mov	r1, r8
 800a89c:	4650      	mov	r0, sl
 800a89e:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800a8a2:	f000 fd6f 	bl	800b384 <convert_qos_profile>
 800a8a6:	9503      	str	r5, [sp, #12]
 800a8a8:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800a8ac:	9001      	str	r0, [sp, #4]
 800a8ae:	f8ad 1008 	strh.w	r1, [sp, #8]
 800a8b2:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a8b6:	9300      	str	r3, [sp, #0]
 800a8b8:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 800a8bc:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800a8c0:	f8d8 1000 	ldr.w	r1, [r8]
 800a8c4:	4630      	mov	r0, r6
 800a8c6:	f003 fd23 	bl	800e310 <uxr_buffer_create_datawriter_bin>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a8d0:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800a8d4:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800a8d8:	f000 fd38 	bl	800b34c <run_xrce_session>
 800a8dc:	b938      	cbnz	r0, 800a8ee <rmw_create_publisher+0x1a6>
 800a8de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a8e0:	b108      	cbz	r0, 800a8e6 <rmw_create_publisher+0x19e>
 800a8e2:	f000 fc31 	bl	800b148 <rmw_uxrce_fini_topic_memory>
 800a8e6:	4638      	mov	r0, r7
 800a8e8:	f000 fbd6 	bl	800b098 <rmw_uxrce_fini_publisher_memory>
 800a8ec:	2700      	movs	r7, #0
 800a8ee:	4638      	mov	r0, r7
 800a8f0:	b007      	add	sp, #28
 800a8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f6:	bf00      	nop
 800a8f8:	2000e434 	.word	0x2000e434
 800a8fc:	08018cfc 	.word	0x08018cfc
 800a900:	08018cc8 	.word	0x08018cc8

0800a904 <rmw_publisher_get_actual_qos>:
 800a904:	b150      	cbz	r0, 800a91c <rmw_publisher_get_actual_qos+0x18>
 800a906:	b508      	push	{r3, lr}
 800a908:	460b      	mov	r3, r1
 800a90a:	b149      	cbz	r1, 800a920 <rmw_publisher_get_actual_qos+0x1c>
 800a90c:	6841      	ldr	r1, [r0, #4]
 800a90e:	2250      	movs	r2, #80	; 0x50
 800a910:	3128      	adds	r1, #40	; 0x28
 800a912:	4618      	mov	r0, r3
 800a914:	f00c ffe5 	bl	80178e2 <memcpy>
 800a918:	2000      	movs	r0, #0
 800a91a:	bd08      	pop	{r3, pc}
 800a91c:	200b      	movs	r0, #11
 800a91e:	4770      	bx	lr
 800a920:	200b      	movs	r0, #11
 800a922:	bd08      	pop	{r3, pc}

0800a924 <rmw_destroy_publisher>:
 800a924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a926:	b128      	cbz	r0, 800a934 <rmw_destroy_publisher+0x10>
 800a928:	4604      	mov	r4, r0
 800a92a:	6800      	ldr	r0, [r0, #0]
 800a92c:	460d      	mov	r5, r1
 800a92e:	f000 fd8d 	bl	800b44c <is_uxrce_rmw_identifier_valid>
 800a932:	b910      	cbnz	r0, 800a93a <rmw_destroy_publisher+0x16>
 800a934:	2401      	movs	r4, #1
 800a936:	4620      	mov	r0, r4
 800a938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a93a:	6863      	ldr	r3, [r4, #4]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d0f9      	beq.n	800a934 <rmw_destroy_publisher+0x10>
 800a940:	2d00      	cmp	r5, #0
 800a942:	d0f7      	beq.n	800a934 <rmw_destroy_publisher+0x10>
 800a944:	6828      	ldr	r0, [r5, #0]
 800a946:	f000 fd81 	bl	800b44c <is_uxrce_rmw_identifier_valid>
 800a94a:	2800      	cmp	r0, #0
 800a94c:	d0f2      	beq.n	800a934 <rmw_destroy_publisher+0x10>
 800a94e:	686c      	ldr	r4, [r5, #4]
 800a950:	2c00      	cmp	r4, #0
 800a952:	d0ef      	beq.n	800a934 <rmw_destroy_publisher+0x10>
 800a954:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a956:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800a95a:	f009 fd39 	bl	80143d0 <destroy_topic>
 800a95e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800a962:	6962      	ldr	r2, [r4, #20]
 800a964:	6918      	ldr	r0, [r3, #16]
 800a966:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800a96a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a96e:	6819      	ldr	r1, [r3, #0]
 800a970:	f003 fbba 	bl	800e0e8 <uxr_buffer_delete_entity>
 800a974:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800a978:	6922      	ldr	r2, [r4, #16]
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800a980:	4604      	mov	r4, r0
 800a982:	6809      	ldr	r1, [r1, #0]
 800a984:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800a988:	f003 fbae 	bl	800e0e8 <uxr_buffer_delete_entity>
 800a98c:	693e      	ldr	r6, [r7, #16]
 800a98e:	4622      	mov	r2, r4
 800a990:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800a994:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800a998:	4604      	mov	r4, r0
 800a99a:	4630      	mov	r0, r6
 800a99c:	f000 fcd6 	bl	800b34c <run_xrce_session>
 800a9a0:	693e      	ldr	r6, [r7, #16]
 800a9a2:	4622      	mov	r2, r4
 800a9a4:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800a9a8:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800a9ac:	4604      	mov	r4, r0
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	f000 fccc 	bl	800b34c <run_xrce_session>
 800a9b4:	b12c      	cbz	r4, 800a9c2 <rmw_destroy_publisher+0x9e>
 800a9b6:	b120      	cbz	r0, 800a9c2 <rmw_destroy_publisher+0x9e>
 800a9b8:	2400      	movs	r4, #0
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	f000 fb6c 	bl	800b098 <rmw_uxrce_fini_publisher_memory>
 800a9c0:	e7b9      	b.n	800a936 <rmw_destroy_publisher+0x12>
 800a9c2:	2402      	movs	r4, #2
 800a9c4:	e7f9      	b.n	800a9ba <rmw_destroy_publisher+0x96>
 800a9c6:	bf00      	nop

0800a9c8 <rmw_destroy_service>:
 800a9c8:	b570      	push	{r4, r5, r6, lr}
 800a9ca:	b128      	cbz	r0, 800a9d8 <rmw_destroy_service+0x10>
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	6800      	ldr	r0, [r0, #0]
 800a9d0:	460d      	mov	r5, r1
 800a9d2:	f000 fd3b 	bl	800b44c <is_uxrce_rmw_identifier_valid>
 800a9d6:	b910      	cbnz	r0, 800a9de <rmw_destroy_service+0x16>
 800a9d8:	2401      	movs	r4, #1
 800a9da:	4620      	mov	r0, r4
 800a9dc:	bd70      	pop	{r4, r5, r6, pc}
 800a9de:	6863      	ldr	r3, [r4, #4]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d0f9      	beq.n	800a9d8 <rmw_destroy_service+0x10>
 800a9e4:	2d00      	cmp	r5, #0
 800a9e6:	d0f7      	beq.n	800a9d8 <rmw_destroy_service+0x10>
 800a9e8:	6828      	ldr	r0, [r5, #0]
 800a9ea:	f000 fd2f 	bl	800b44c <is_uxrce_rmw_identifier_valid>
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	d0f2      	beq.n	800a9d8 <rmw_destroy_service+0x10>
 800a9f2:	686e      	ldr	r6, [r5, #4]
 800a9f4:	2e00      	cmp	r6, #0
 800a9f6:	d0ef      	beq.n	800a9d8 <rmw_destroy_service+0x10>
 800a9f8:	6864      	ldr	r4, [r4, #4]
 800a9fa:	6932      	ldr	r2, [r6, #16]
 800a9fc:	6920      	ldr	r0, [r4, #16]
 800a9fe:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800aa02:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800aa06:	6819      	ldr	r1, [r3, #0]
 800aa08:	f003 fdda 	bl	800e5c0 <uxr_buffer_cancel_data>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	6920      	ldr	r0, [r4, #16]
 800aa10:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800aa14:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800aa18:	f000 fc98 	bl	800b34c <run_xrce_session>
 800aa1c:	6920      	ldr	r0, [r4, #16]
 800aa1e:	6932      	ldr	r2, [r6, #16]
 800aa20:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800aa24:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800aa28:	6819      	ldr	r1, [r3, #0]
 800aa2a:	f003 fb5d 	bl	800e0e8 <uxr_buffer_delete_entity>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	6920      	ldr	r0, [r4, #16]
 800aa32:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800aa36:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800aa3a:	f000 fc87 	bl	800b34c <run_xrce_session>
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	4628      	mov	r0, r5
 800aa42:	bf14      	ite	ne
 800aa44:	2400      	movne	r4, #0
 800aa46:	2402      	moveq	r4, #2
 800aa48:	f000 fb52 	bl	800b0f0 <rmw_uxrce_fini_service_memory>
 800aa4c:	e7c5      	b.n	800a9da <rmw_destroy_service+0x12>
 800aa4e:	bf00      	nop

0800aa50 <rmw_create_subscription>:
 800aa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa54:	b08d      	sub	sp, #52	; 0x34
 800aa56:	2800      	cmp	r0, #0
 800aa58:	f000 80d1 	beq.w	800abfe <rmw_create_subscription+0x1ae>
 800aa5c:	460e      	mov	r6, r1
 800aa5e:	2900      	cmp	r1, #0
 800aa60:	f000 80cd 	beq.w	800abfe <rmw_create_subscription+0x1ae>
 800aa64:	4604      	mov	r4, r0
 800aa66:	6800      	ldr	r0, [r0, #0]
 800aa68:	4615      	mov	r5, r2
 800aa6a:	4698      	mov	r8, r3
 800aa6c:	f000 fcee 	bl	800b44c <is_uxrce_rmw_identifier_valid>
 800aa70:	2800      	cmp	r0, #0
 800aa72:	f000 80c4 	beq.w	800abfe <rmw_create_subscription+0x1ae>
 800aa76:	2d00      	cmp	r5, #0
 800aa78:	f000 80c1 	beq.w	800abfe <rmw_create_subscription+0x1ae>
 800aa7c:	782b      	ldrb	r3, [r5, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	f000 80bd 	beq.w	800abfe <rmw_create_subscription+0x1ae>
 800aa84:	f1b8 0f00 	cmp.w	r8, #0
 800aa88:	f000 80b9 	beq.w	800abfe <rmw_create_subscription+0x1ae>
 800aa8c:	485e      	ldr	r0, [pc, #376]	; (800ac08 <rmw_create_subscription+0x1b8>)
 800aa8e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800aa92:	f009 f957 	bl	8013d44 <get_memory>
 800aa96:	4604      	mov	r4, r0
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	f000 80b1 	beq.w	800ac00 <rmw_create_subscription+0x1b0>
 800aa9e:	6887      	ldr	r7, [r0, #8]
 800aaa0:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 800aaa4:	f009 f9b6 	bl	8013e14 <rmw_get_implementation_identifier>
 800aaa8:	f107 0a98 	add.w	sl, r7, #152	; 0x98
 800aaac:	67f8      	str	r0, [r7, #124]	; 0x7c
 800aaae:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800aab2:	4628      	mov	r0, r5
 800aab4:	f7f5 fbb6 	bl	8000224 <strlen>
 800aab8:	3001      	adds	r0, #1
 800aaba:	283c      	cmp	r0, #60	; 0x3c
 800aabc:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800aac0:	f200 8096 	bhi.w	800abf0 <rmw_create_subscription+0x1a0>
 800aac4:	4a51      	ldr	r2, [pc, #324]	; (800ac0c <rmw_create_subscription+0x1bc>)
 800aac6:	462b      	mov	r3, r5
 800aac8:	213c      	movs	r1, #60	; 0x3c
 800aaca:	4650      	mov	r0, sl
 800aacc:	f00c fc5a 	bl	8017384 <sniprintf>
 800aad0:	4641      	mov	r1, r8
 800aad2:	f8c7 9020 	str.w	r9, [r7, #32]
 800aad6:	2250      	movs	r2, #80	; 0x50
 800aad8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800aadc:	f00c ff01 	bl	80178e2 <memcpy>
 800aae0:	494b      	ldr	r1, [pc, #300]	; (800ac10 <rmw_create_subscription+0x1c0>)
 800aae2:	4630      	mov	r0, r6
 800aae4:	f000 fcc0 	bl	800b468 <get_message_typesupport_handle>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	f000 8081 	beq.w	800abf0 <rmw_create_subscription+0x1a0>
 800aaee:	6842      	ldr	r2, [r0, #4]
 800aaf0:	61ba      	str	r2, [r7, #24]
 800aaf2:	2a00      	cmp	r2, #0
 800aaf4:	d07c      	beq.n	800abf0 <rmw_create_subscription+0x1a0>
 800aaf6:	4629      	mov	r1, r5
 800aaf8:	4643      	mov	r3, r8
 800aafa:	4648      	mov	r0, r9
 800aafc:	f009 fc18 	bl	8014330 <create_topic>
 800ab00:	61f8      	str	r0, [r7, #28]
 800ab02:	2800      	cmp	r0, #0
 800ab04:	d078      	beq.n	800abf8 <rmw_create_subscription+0x1a8>
 800ab06:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab0e:	2104      	movs	r1, #4
 800ab10:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 800ab14:	1c42      	adds	r2, r0, #1
 800ab16:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 800ab1a:	f003 fce7 	bl	800e4ec <uxr_object_id>
 800ab1e:	6138      	str	r0, [r7, #16]
 800ab20:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ab24:	2506      	movs	r5, #6
 800ab26:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 800ab2a:	9500      	str	r5, [sp, #0]
 800ab2c:	6819      	ldr	r1, [r3, #0]
 800ab2e:	693a      	ldr	r2, [r7, #16]
 800ab30:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ab34:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ab38:	f003 fbba 	bl	800e2b0 <uxr_buffer_create_subscriber_bin>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ab42:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ab46:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ab4a:	f000 fbff 	bl	800b34c <run_xrce_session>
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	d04e      	beq.n	800abf0 <rmw_create_subscription+0x1a0>
 800ab52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab5a:	4629      	mov	r1, r5
 800ab5c:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 800ab60:	1c42      	adds	r2, r0, #1
 800ab62:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 800ab66:	f003 fcc1 	bl	800e4ec <uxr_object_id>
 800ab6a:	ae08      	add	r6, sp, #32
 800ab6c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	6178      	str	r0, [r7, #20]
 800ab74:	4641      	mov	r1, r8
 800ab76:	4630      	mov	r0, r6
 800ab78:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 800ab7c:	9305      	str	r3, [sp, #20]
 800ab7e:	f000 fc01 	bl	800b384 <convert_qos_profile>
 800ab82:	9503      	str	r5, [sp, #12]
 800ab84:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ab88:	9b05      	ldr	r3, [sp, #20]
 800ab8a:	9001      	str	r0, [sp, #4]
 800ab8c:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ab90:	691b      	ldr	r3, [r3, #16]
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800ab98:	f8db 1000 	ldr.w	r1, [fp]
 800ab9c:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 800aba0:	f003 fc2c 	bl	800e3fc <uxr_buffer_create_datareader_bin>
 800aba4:	4602      	mov	r2, r0
 800aba6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800abaa:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800abae:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800abb2:	f000 fbcb 	bl	800b34c <run_xrce_session>
 800abb6:	b1d8      	cbz	r0, 800abf0 <rmw_create_subscription+0x1a0>
 800abb8:	f898 3008 	ldrb.w	r3, [r8, #8]
 800abbc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800abc0:	2b02      	cmp	r3, #2
 800abc2:	bf0c      	ite	eq
 800abc4:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 800abc8:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 800abcc:	9307      	str	r3, [sp, #28]
 800abce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800abd2:	2200      	movs	r2, #0
 800abd4:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 800abd8:	ab0a      	add	r3, sp, #40	; 0x28
 800abda:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800abde:	9300      	str	r3, [sp, #0]
 800abe0:	697a      	ldr	r2, [r7, #20]
 800abe2:	9b07      	ldr	r3, [sp, #28]
 800abe4:	6809      	ldr	r1, [r1, #0]
 800abe6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800abea:	f003 fcaf 	bl	800e54c <uxr_buffer_request_data>
 800abee:	e007      	b.n	800ac00 <rmw_create_subscription+0x1b0>
 800abf0:	69f8      	ldr	r0, [r7, #28]
 800abf2:	b108      	cbz	r0, 800abf8 <rmw_create_subscription+0x1a8>
 800abf4:	f000 faa8 	bl	800b148 <rmw_uxrce_fini_topic_memory>
 800abf8:	4620      	mov	r0, r4
 800abfa:	f000 fa63 	bl	800b0c4 <rmw_uxrce_fini_subscription_memory>
 800abfe:	2400      	movs	r4, #0
 800ac00:	4620      	mov	r0, r4
 800ac02:	b00d      	add	sp, #52	; 0x34
 800ac04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac08:	2000e474 	.word	0x2000e474
 800ac0c:	08018cfc 	.word	0x08018cfc
 800ac10:	08018cc8 	.word	0x08018cc8

0800ac14 <rmw_subscription_get_actual_qos>:
 800ac14:	b150      	cbz	r0, 800ac2c <rmw_subscription_get_actual_qos+0x18>
 800ac16:	b508      	push	{r3, lr}
 800ac18:	460b      	mov	r3, r1
 800ac1a:	b149      	cbz	r1, 800ac30 <rmw_subscription_get_actual_qos+0x1c>
 800ac1c:	6841      	ldr	r1, [r0, #4]
 800ac1e:	2250      	movs	r2, #80	; 0x50
 800ac20:	3128      	adds	r1, #40	; 0x28
 800ac22:	4618      	mov	r0, r3
 800ac24:	f00c fe5d 	bl	80178e2 <memcpy>
 800ac28:	2000      	movs	r0, #0
 800ac2a:	bd08      	pop	{r3, pc}
 800ac2c:	200b      	movs	r0, #11
 800ac2e:	4770      	bx	lr
 800ac30:	200b      	movs	r0, #11
 800ac32:	bd08      	pop	{r3, pc}

0800ac34 <rmw_destroy_subscription>:
 800ac34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac36:	b128      	cbz	r0, 800ac44 <rmw_destroy_subscription+0x10>
 800ac38:	4604      	mov	r4, r0
 800ac3a:	6800      	ldr	r0, [r0, #0]
 800ac3c:	460d      	mov	r5, r1
 800ac3e:	f000 fc05 	bl	800b44c <is_uxrce_rmw_identifier_valid>
 800ac42:	b910      	cbnz	r0, 800ac4a <rmw_destroy_subscription+0x16>
 800ac44:	2401      	movs	r4, #1
 800ac46:	4620      	mov	r0, r4
 800ac48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac4a:	6863      	ldr	r3, [r4, #4]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d0f9      	beq.n	800ac44 <rmw_destroy_subscription+0x10>
 800ac50:	2d00      	cmp	r5, #0
 800ac52:	d0f7      	beq.n	800ac44 <rmw_destroy_subscription+0x10>
 800ac54:	6828      	ldr	r0, [r5, #0]
 800ac56:	f000 fbf9 	bl	800b44c <is_uxrce_rmw_identifier_valid>
 800ac5a:	2800      	cmp	r0, #0
 800ac5c:	d0f2      	beq.n	800ac44 <rmw_destroy_subscription+0x10>
 800ac5e:	686c      	ldr	r4, [r5, #4]
 800ac60:	2c00      	cmp	r4, #0
 800ac62:	d0ef      	beq.n	800ac44 <rmw_destroy_subscription+0x10>
 800ac64:	6a26      	ldr	r6, [r4, #32]
 800ac66:	6962      	ldr	r2, [r4, #20]
 800ac68:	6930      	ldr	r0, [r6, #16]
 800ac6a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800ac6e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ac72:	6819      	ldr	r1, [r3, #0]
 800ac74:	f003 fca4 	bl	800e5c0 <uxr_buffer_cancel_data>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	6930      	ldr	r0, [r6, #16]
 800ac7c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800ac80:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800ac84:	f000 fb62 	bl	800b34c <run_xrce_session>
 800ac88:	69e0      	ldr	r0, [r4, #28]
 800ac8a:	f009 fba1 	bl	80143d0 <destroy_topic>
 800ac8e:	6a23      	ldr	r3, [r4, #32]
 800ac90:	6962      	ldr	r2, [r4, #20]
 800ac92:	6918      	ldr	r0, [r3, #16]
 800ac94:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800ac98:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ac9c:	6819      	ldr	r1, [r3, #0]
 800ac9e:	f003 fa23 	bl	800e0e8 <uxr_buffer_delete_entity>
 800aca2:	6a23      	ldr	r3, [r4, #32]
 800aca4:	6922      	ldr	r2, [r4, #16]
 800aca6:	691b      	ldr	r3, [r3, #16]
 800aca8:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800acac:	4604      	mov	r4, r0
 800acae:	6809      	ldr	r1, [r1, #0]
 800acb0:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800acb4:	f003 fa18 	bl	800e0e8 <uxr_buffer_delete_entity>
 800acb8:	6937      	ldr	r7, [r6, #16]
 800acba:	4622      	mov	r2, r4
 800acbc:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800acc0:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800acc4:	4604      	mov	r4, r0
 800acc6:	4638      	mov	r0, r7
 800acc8:	f000 fb40 	bl	800b34c <run_xrce_session>
 800accc:	6936      	ldr	r6, [r6, #16]
 800acce:	4622      	mov	r2, r4
 800acd0:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800acd4:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800acd8:	4604      	mov	r4, r0
 800acda:	4630      	mov	r0, r6
 800acdc:	f000 fb36 	bl	800b34c <run_xrce_session>
 800ace0:	b12c      	cbz	r4, 800acee <rmw_destroy_subscription+0xba>
 800ace2:	b120      	cbz	r0, 800acee <rmw_destroy_subscription+0xba>
 800ace4:	2400      	movs	r4, #0
 800ace6:	4628      	mov	r0, r5
 800ace8:	f000 f9ec 	bl	800b0c4 <rmw_uxrce_fini_subscription_memory>
 800acec:	e7ab      	b.n	800ac46 <rmw_destroy_subscription+0x12>
 800acee:	2402      	movs	r4, #2
 800acf0:	e7f9      	b.n	800ace6 <rmw_destroy_subscription+0xb2>
 800acf2:	bf00      	nop

0800acf4 <rmw_take_with_info>:
 800acf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acf6:	4604      	mov	r4, r0
 800acf8:	6800      	ldr	r0, [r0, #0]
 800acfa:	b089      	sub	sp, #36	; 0x24
 800acfc:	460f      	mov	r7, r1
 800acfe:	4615      	mov	r5, r2
 800ad00:	b128      	cbz	r0, 800ad0e <rmw_take_with_info+0x1a>
 800ad02:	4b24      	ldr	r3, [pc, #144]	; (800ad94 <rmw_take_with_info+0xa0>)
 800ad04:	6819      	ldr	r1, [r3, #0]
 800ad06:	f7f5 fa83 	bl	8000210 <strcmp>
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	d13e      	bne.n	800ad8c <rmw_take_with_info+0x98>
 800ad0e:	b305      	cbz	r5, 800ad52 <rmw_take_with_info+0x5e>
 800ad10:	6864      	ldr	r4, [r4, #4]
 800ad12:	2300      	movs	r3, #0
 800ad14:	702b      	strb	r3, [r5, #0]
 800ad16:	f000 fa9b 	bl	800b250 <rmw_uxrce_clean_expired_static_input_buffer>
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	f000 fa70 	bl	800b200 <rmw_uxrce_find_static_input_buffer_by_owner>
 800ad20:	4606      	mov	r6, r0
 800ad22:	b1f0      	cbz	r0, 800ad62 <rmw_take_with_info+0x6e>
 800ad24:	6881      	ldr	r1, [r0, #8]
 800ad26:	4668      	mov	r0, sp
 800ad28:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800ad2c:	3110      	adds	r1, #16
 800ad2e:	f003 f8e7 	bl	800df00 <ucdr_init_buffer>
 800ad32:	69a3      	ldr	r3, [r4, #24]
 800ad34:	4639      	mov	r1, r7
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	4668      	mov	r0, sp
 800ad3a:	4798      	blx	r3
 800ad3c:	4631      	mov	r1, r6
 800ad3e:	4604      	mov	r4, r0
 800ad40:	4815      	ldr	r0, [pc, #84]	; (800ad98 <rmw_take_with_info+0xa4>)
 800ad42:	f009 f80f 	bl	8013d64 <put_memory>
 800ad46:	702c      	strb	r4, [r5, #0]
 800ad48:	f084 0001 	eor.w	r0, r4, #1
 800ad4c:	b2c0      	uxtb	r0, r0
 800ad4e:	b009      	add	sp, #36	; 0x24
 800ad50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad52:	6864      	ldr	r4, [r4, #4]
 800ad54:	f000 fa7c 	bl	800b250 <rmw_uxrce_clean_expired_static_input_buffer>
 800ad58:	4620      	mov	r0, r4
 800ad5a:	f000 fa51 	bl	800b200 <rmw_uxrce_find_static_input_buffer_by_owner>
 800ad5e:	4605      	mov	r5, r0
 800ad60:	b910      	cbnz	r0, 800ad68 <rmw_take_with_info+0x74>
 800ad62:	2001      	movs	r0, #1
 800ad64:	b009      	add	sp, #36	; 0x24
 800ad66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad68:	68a9      	ldr	r1, [r5, #8]
 800ad6a:	4668      	mov	r0, sp
 800ad6c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800ad70:	3110      	adds	r1, #16
 800ad72:	f003 f8c5 	bl	800df00 <ucdr_init_buffer>
 800ad76:	69a3      	ldr	r3, [r4, #24]
 800ad78:	4639      	mov	r1, r7
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	4668      	mov	r0, sp
 800ad7e:	4798      	blx	r3
 800ad80:	4629      	mov	r1, r5
 800ad82:	4604      	mov	r4, r0
 800ad84:	4804      	ldr	r0, [pc, #16]	; (800ad98 <rmw_take_with_info+0xa4>)
 800ad86:	f008 ffed 	bl	8013d64 <put_memory>
 800ad8a:	e7dd      	b.n	800ad48 <rmw_take_with_info+0x54>
 800ad8c:	200c      	movs	r0, #12
 800ad8e:	b009      	add	sp, #36	; 0x24
 800ad90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad92:	bf00      	nop
 800ad94:	08019488 	.word	0x08019488
 800ad98:	2000e464 	.word	0x2000e464

0800ad9c <rmw_uxrce_init_service_memory>:
 800ad9c:	b1e2      	cbz	r2, 800add8 <rmw_uxrce_init_service_memory+0x3c>
 800ad9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ada2:	7b05      	ldrb	r5, [r0, #12]
 800ada4:	4606      	mov	r6, r0
 800ada6:	b9ad      	cbnz	r5, 800add4 <rmw_uxrce_init_service_memory+0x38>
 800ada8:	23c8      	movs	r3, #200	; 0xc8
 800adaa:	e9c0 5500 	strd	r5, r5, [r0]
 800adae:	6083      	str	r3, [r0, #8]
 800adb0:	f240 1301 	movw	r3, #257	; 0x101
 800adb4:	4617      	mov	r7, r2
 800adb6:	8183      	strh	r3, [r0, #12]
 800adb8:	460c      	mov	r4, r1
 800adba:	46a8      	mov	r8, r5
 800adbc:	4621      	mov	r1, r4
 800adbe:	4630      	mov	r0, r6
 800adc0:	3501      	adds	r5, #1
 800adc2:	f008 ffcf 	bl	8013d64 <put_memory>
 800adc6:	42af      	cmp	r7, r5
 800adc8:	60a4      	str	r4, [r4, #8]
 800adca:	f884 800c 	strb.w	r8, [r4, #12]
 800adce:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800add2:	d1f3      	bne.n	800adbc <rmw_uxrce_init_service_memory+0x20>
 800add4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop

0800addc <rmw_uxrce_init_client_memory>:
 800addc:	b1e2      	cbz	r2, 800ae18 <rmw_uxrce_init_client_memory+0x3c>
 800adde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade2:	7b05      	ldrb	r5, [r0, #12]
 800ade4:	4606      	mov	r6, r0
 800ade6:	b9ad      	cbnz	r5, 800ae14 <rmw_uxrce_init_client_memory+0x38>
 800ade8:	23c8      	movs	r3, #200	; 0xc8
 800adea:	e9c0 5500 	strd	r5, r5, [r0]
 800adee:	6083      	str	r3, [r0, #8]
 800adf0:	f240 1301 	movw	r3, #257	; 0x101
 800adf4:	4617      	mov	r7, r2
 800adf6:	8183      	strh	r3, [r0, #12]
 800adf8:	460c      	mov	r4, r1
 800adfa:	46a8      	mov	r8, r5
 800adfc:	4621      	mov	r1, r4
 800adfe:	4630      	mov	r0, r6
 800ae00:	3501      	adds	r5, #1
 800ae02:	f008 ffaf 	bl	8013d64 <put_memory>
 800ae06:	42af      	cmp	r7, r5
 800ae08:	60a4      	str	r4, [r4, #8]
 800ae0a:	f884 800c 	strb.w	r8, [r4, #12]
 800ae0e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800ae12:	d1f3      	bne.n	800adfc <rmw_uxrce_init_client_memory+0x20>
 800ae14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop

0800ae1c <rmw_uxrce_init_publisher_memory>:
 800ae1c:	b1e2      	cbz	r2, 800ae58 <rmw_uxrce_init_publisher_memory+0x3c>
 800ae1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae22:	7b05      	ldrb	r5, [r0, #12]
 800ae24:	4606      	mov	r6, r0
 800ae26:	b9ad      	cbnz	r5, 800ae54 <rmw_uxrce_init_publisher_memory+0x38>
 800ae28:	23d8      	movs	r3, #216	; 0xd8
 800ae2a:	e9c0 5500 	strd	r5, r5, [r0]
 800ae2e:	6083      	str	r3, [r0, #8]
 800ae30:	f240 1301 	movw	r3, #257	; 0x101
 800ae34:	4617      	mov	r7, r2
 800ae36:	8183      	strh	r3, [r0, #12]
 800ae38:	460c      	mov	r4, r1
 800ae3a:	46a8      	mov	r8, r5
 800ae3c:	4621      	mov	r1, r4
 800ae3e:	4630      	mov	r0, r6
 800ae40:	3501      	adds	r5, #1
 800ae42:	f008 ff8f 	bl	8013d64 <put_memory>
 800ae46:	42af      	cmp	r7, r5
 800ae48:	60a4      	str	r4, [r4, #8]
 800ae4a:	f884 800c 	strb.w	r8, [r4, #12]
 800ae4e:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800ae52:	d1f3      	bne.n	800ae3c <rmw_uxrce_init_publisher_memory+0x20>
 800ae54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop

0800ae5c <rmw_uxrce_init_subscription_memory>:
 800ae5c:	b1e2      	cbz	r2, 800ae98 <rmw_uxrce_init_subscription_memory+0x3c>
 800ae5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae62:	7b05      	ldrb	r5, [r0, #12]
 800ae64:	4606      	mov	r6, r0
 800ae66:	b9ad      	cbnz	r5, 800ae94 <rmw_uxrce_init_subscription_memory+0x38>
 800ae68:	23d8      	movs	r3, #216	; 0xd8
 800ae6a:	e9c0 5500 	strd	r5, r5, [r0]
 800ae6e:	6083      	str	r3, [r0, #8]
 800ae70:	f240 1301 	movw	r3, #257	; 0x101
 800ae74:	4617      	mov	r7, r2
 800ae76:	8183      	strh	r3, [r0, #12]
 800ae78:	460c      	mov	r4, r1
 800ae7a:	46a8      	mov	r8, r5
 800ae7c:	4621      	mov	r1, r4
 800ae7e:	4630      	mov	r0, r6
 800ae80:	3501      	adds	r5, #1
 800ae82:	f008 ff6f 	bl	8013d64 <put_memory>
 800ae86:	42af      	cmp	r7, r5
 800ae88:	60a4      	str	r4, [r4, #8]
 800ae8a:	f884 800c 	strb.w	r8, [r4, #12]
 800ae8e:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800ae92:	d1f3      	bne.n	800ae7c <rmw_uxrce_init_subscription_memory+0x20>
 800ae94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop

0800ae9c <rmw_uxrce_init_node_memory>:
 800ae9c:	b1e2      	cbz	r2, 800aed8 <rmw_uxrce_init_node_memory+0x3c>
 800ae9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aea2:	7b05      	ldrb	r5, [r0, #12]
 800aea4:	4606      	mov	r6, r0
 800aea6:	b9ad      	cbnz	r5, 800aed4 <rmw_uxrce_init_node_memory+0x38>
 800aea8:	23a4      	movs	r3, #164	; 0xa4
 800aeaa:	e9c0 5500 	strd	r5, r5, [r0]
 800aeae:	6083      	str	r3, [r0, #8]
 800aeb0:	f240 1301 	movw	r3, #257	; 0x101
 800aeb4:	4617      	mov	r7, r2
 800aeb6:	8183      	strh	r3, [r0, #12]
 800aeb8:	460c      	mov	r4, r1
 800aeba:	46a8      	mov	r8, r5
 800aebc:	4621      	mov	r1, r4
 800aebe:	4630      	mov	r0, r6
 800aec0:	3501      	adds	r5, #1
 800aec2:	f008 ff4f 	bl	8013d64 <put_memory>
 800aec6:	42af      	cmp	r7, r5
 800aec8:	60a4      	str	r4, [r4, #8]
 800aeca:	f884 800c 	strb.w	r8, [r4, #12]
 800aece:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800aed2:	d1f3      	bne.n	800aebc <rmw_uxrce_init_node_memory+0x20>
 800aed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aed8:	4770      	bx	lr
 800aeda:	bf00      	nop

0800aedc <rmw_uxrce_init_session_memory>:
 800aedc:	b1ea      	cbz	r2, 800af1a <rmw_uxrce_init_session_memory+0x3e>
 800aede:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aee2:	7b05      	ldrb	r5, [r0, #12]
 800aee4:	4606      	mov	r6, r0
 800aee6:	b9b5      	cbnz	r5, 800af16 <rmw_uxrce_init_session_memory+0x3a>
 800aee8:	e9c0 5500 	strd	r5, r5, [r0]
 800aeec:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800aef0:	f240 1301 	movw	r3, #257	; 0x101
 800aef4:	4617      	mov	r7, r2
 800aef6:	f8c0 8008 	str.w	r8, [r0, #8]
 800aefa:	460c      	mov	r4, r1
 800aefc:	8183      	strh	r3, [r0, #12]
 800aefe:	46a9      	mov	r9, r5
 800af00:	4621      	mov	r1, r4
 800af02:	4630      	mov	r0, r6
 800af04:	3501      	adds	r5, #1
 800af06:	f008 ff2d 	bl	8013d64 <put_memory>
 800af0a:	42af      	cmp	r7, r5
 800af0c:	60a4      	str	r4, [r4, #8]
 800af0e:	f884 900c 	strb.w	r9, [r4, #12]
 800af12:	4444      	add	r4, r8
 800af14:	d1f4      	bne.n	800af00 <rmw_uxrce_init_session_memory+0x24>
 800af16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af1a:	4770      	bx	lr

0800af1c <rmw_uxrce_init_topic_memory>:
 800af1c:	b1e2      	cbz	r2, 800af58 <rmw_uxrce_init_topic_memory+0x3c>
 800af1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af22:	7b05      	ldrb	r5, [r0, #12]
 800af24:	4606      	mov	r6, r0
 800af26:	b9ad      	cbnz	r5, 800af54 <rmw_uxrce_init_topic_memory+0x38>
 800af28:	231c      	movs	r3, #28
 800af2a:	e9c0 5500 	strd	r5, r5, [r0]
 800af2e:	6083      	str	r3, [r0, #8]
 800af30:	f240 1301 	movw	r3, #257	; 0x101
 800af34:	4617      	mov	r7, r2
 800af36:	8183      	strh	r3, [r0, #12]
 800af38:	460c      	mov	r4, r1
 800af3a:	46a8      	mov	r8, r5
 800af3c:	4621      	mov	r1, r4
 800af3e:	4630      	mov	r0, r6
 800af40:	3501      	adds	r5, #1
 800af42:	f008 ff0f 	bl	8013d64 <put_memory>
 800af46:	42af      	cmp	r7, r5
 800af48:	60a4      	str	r4, [r4, #8]
 800af4a:	f884 800c 	strb.w	r8, [r4, #12]
 800af4e:	f104 041c 	add.w	r4, r4, #28
 800af52:	d1f3      	bne.n	800af3c <rmw_uxrce_init_topic_memory+0x20>
 800af54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af58:	4770      	bx	lr
 800af5a:	bf00      	nop

0800af5c <rmw_uxrce_init_static_input_buffer_memory>:
 800af5c:	b1ea      	cbz	r2, 800af9a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800af5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af62:	7b05      	ldrb	r5, [r0, #12]
 800af64:	4606      	mov	r6, r0
 800af66:	b9b5      	cbnz	r5, 800af96 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800af68:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800af6c:	e9c0 5500 	strd	r5, r5, [r0]
 800af70:	6083      	str	r3, [r0, #8]
 800af72:	f240 1301 	movw	r3, #257	; 0x101
 800af76:	4617      	mov	r7, r2
 800af78:	8183      	strh	r3, [r0, #12]
 800af7a:	460c      	mov	r4, r1
 800af7c:	46a8      	mov	r8, r5
 800af7e:	4621      	mov	r1, r4
 800af80:	4630      	mov	r0, r6
 800af82:	3501      	adds	r5, #1
 800af84:	f008 feee 	bl	8013d64 <put_memory>
 800af88:	42af      	cmp	r7, r5
 800af8a:	60a4      	str	r4, [r4, #8]
 800af8c:	f884 800c 	strb.w	r8, [r4, #12]
 800af90:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800af94:	d1f3      	bne.n	800af7e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800af96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af9a:	4770      	bx	lr

0800af9c <rmw_uxrce_init_init_options_impl_memory>:
 800af9c:	b1e2      	cbz	r2, 800afd8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800af9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afa2:	7b05      	ldrb	r5, [r0, #12]
 800afa4:	4606      	mov	r6, r0
 800afa6:	b9ad      	cbnz	r5, 800afd4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800afa8:	232c      	movs	r3, #44	; 0x2c
 800afaa:	e9c0 5500 	strd	r5, r5, [r0]
 800afae:	6083      	str	r3, [r0, #8]
 800afb0:	f240 1301 	movw	r3, #257	; 0x101
 800afb4:	4617      	mov	r7, r2
 800afb6:	8183      	strh	r3, [r0, #12]
 800afb8:	460c      	mov	r4, r1
 800afba:	46a8      	mov	r8, r5
 800afbc:	4621      	mov	r1, r4
 800afbe:	4630      	mov	r0, r6
 800afc0:	3501      	adds	r5, #1
 800afc2:	f008 fecf 	bl	8013d64 <put_memory>
 800afc6:	42af      	cmp	r7, r5
 800afc8:	60a4      	str	r4, [r4, #8]
 800afca:	f884 800c 	strb.w	r8, [r4, #12]
 800afce:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800afd2:	d1f3      	bne.n	800afbc <rmw_uxrce_init_init_options_impl_memory+0x20>
 800afd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop

0800afdc <rmw_uxrce_init_wait_set_memory>:
 800afdc:	b1e2      	cbz	r2, 800b018 <rmw_uxrce_init_wait_set_memory+0x3c>
 800afde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afe2:	7b05      	ldrb	r5, [r0, #12]
 800afe4:	4606      	mov	r6, r0
 800afe6:	b9ad      	cbnz	r5, 800b014 <rmw_uxrce_init_wait_set_memory+0x38>
 800afe8:	231c      	movs	r3, #28
 800afea:	e9c0 5500 	strd	r5, r5, [r0]
 800afee:	6083      	str	r3, [r0, #8]
 800aff0:	f240 1301 	movw	r3, #257	; 0x101
 800aff4:	4617      	mov	r7, r2
 800aff6:	8183      	strh	r3, [r0, #12]
 800aff8:	460c      	mov	r4, r1
 800affa:	46a8      	mov	r8, r5
 800affc:	4621      	mov	r1, r4
 800affe:	4630      	mov	r0, r6
 800b000:	3501      	adds	r5, #1
 800b002:	f008 feaf 	bl	8013d64 <put_memory>
 800b006:	42af      	cmp	r7, r5
 800b008:	60a4      	str	r4, [r4, #8]
 800b00a:	f884 800c 	strb.w	r8, [r4, #12]
 800b00e:	f104 041c 	add.w	r4, r4, #28
 800b012:	d1f3      	bne.n	800affc <rmw_uxrce_init_wait_set_memory+0x20>
 800b014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b018:	4770      	bx	lr
 800b01a:	bf00      	nop

0800b01c <rmw_uxrce_init_guard_condition_memory>:
 800b01c:	b1e2      	cbz	r2, 800b058 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800b01e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b022:	7b05      	ldrb	r5, [r0, #12]
 800b024:	4606      	mov	r6, r0
 800b026:	b9ad      	cbnz	r5, 800b054 <rmw_uxrce_init_guard_condition_memory+0x38>
 800b028:	2320      	movs	r3, #32
 800b02a:	e9c0 5500 	strd	r5, r5, [r0]
 800b02e:	6083      	str	r3, [r0, #8]
 800b030:	f240 1301 	movw	r3, #257	; 0x101
 800b034:	4617      	mov	r7, r2
 800b036:	8183      	strh	r3, [r0, #12]
 800b038:	460c      	mov	r4, r1
 800b03a:	46a8      	mov	r8, r5
 800b03c:	4621      	mov	r1, r4
 800b03e:	4630      	mov	r0, r6
 800b040:	3501      	adds	r5, #1
 800b042:	f008 fe8f 	bl	8013d64 <put_memory>
 800b046:	42af      	cmp	r7, r5
 800b048:	60a4      	str	r4, [r4, #8]
 800b04a:	f884 800c 	strb.w	r8, [r4, #12]
 800b04e:	f104 0420 	add.w	r4, r4, #32
 800b052:	d1f3      	bne.n	800b03c <rmw_uxrce_init_guard_condition_memory+0x20>
 800b054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop

0800b05c <rmw_uxrce_fini_session_memory>:
 800b05c:	4601      	mov	r1, r0
 800b05e:	4801      	ldr	r0, [pc, #4]	; (800b064 <rmw_uxrce_fini_session_memory+0x8>)
 800b060:	f008 be80 	b.w	8013d64 <put_memory>
 800b064:	2000e454 	.word	0x2000e454

0800b068 <rmw_uxrce_fini_node_memory>:
 800b068:	b538      	push	{r3, r4, r5, lr}
 800b06a:	4604      	mov	r4, r0
 800b06c:	6800      	ldr	r0, [r0, #0]
 800b06e:	b128      	cbz	r0, 800b07c <rmw_uxrce_fini_node_memory+0x14>
 800b070:	4b07      	ldr	r3, [pc, #28]	; (800b090 <rmw_uxrce_fini_node_memory+0x28>)
 800b072:	6819      	ldr	r1, [r3, #0]
 800b074:	f7f5 f8cc 	bl	8000210 <strcmp>
 800b078:	b940      	cbnz	r0, 800b08c <rmw_uxrce_fini_node_memory+0x24>
 800b07a:	6020      	str	r0, [r4, #0]
 800b07c:	6861      	ldr	r1, [r4, #4]
 800b07e:	b129      	cbz	r1, 800b08c <rmw_uxrce_fini_node_memory+0x24>
 800b080:	2500      	movs	r5, #0
 800b082:	4804      	ldr	r0, [pc, #16]	; (800b094 <rmw_uxrce_fini_node_memory+0x2c>)
 800b084:	610d      	str	r5, [r1, #16]
 800b086:	f008 fe6d 	bl	8013d64 <put_memory>
 800b08a:	6065      	str	r5, [r4, #4]
 800b08c:	bd38      	pop	{r3, r4, r5, pc}
 800b08e:	bf00      	nop
 800b090:	08019488 	.word	0x08019488
 800b094:	2000e424 	.word	0x2000e424

0800b098 <rmw_uxrce_fini_publisher_memory>:
 800b098:	b510      	push	{r4, lr}
 800b09a:	4604      	mov	r4, r0
 800b09c:	6800      	ldr	r0, [r0, #0]
 800b09e:	b128      	cbz	r0, 800b0ac <rmw_uxrce_fini_publisher_memory+0x14>
 800b0a0:	4b06      	ldr	r3, [pc, #24]	; (800b0bc <rmw_uxrce_fini_publisher_memory+0x24>)
 800b0a2:	6819      	ldr	r1, [r3, #0]
 800b0a4:	f7f5 f8b4 	bl	8000210 <strcmp>
 800b0a8:	b938      	cbnz	r0, 800b0ba <rmw_uxrce_fini_publisher_memory+0x22>
 800b0aa:	6020      	str	r0, [r4, #0]
 800b0ac:	6861      	ldr	r1, [r4, #4]
 800b0ae:	b121      	cbz	r1, 800b0ba <rmw_uxrce_fini_publisher_memory+0x22>
 800b0b0:	4803      	ldr	r0, [pc, #12]	; (800b0c0 <rmw_uxrce_fini_publisher_memory+0x28>)
 800b0b2:	f008 fe57 	bl	8013d64 <put_memory>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	6063      	str	r3, [r4, #4]
 800b0ba:	bd10      	pop	{r4, pc}
 800b0bc:	08019488 	.word	0x08019488
 800b0c0:	2000e434 	.word	0x2000e434

0800b0c4 <rmw_uxrce_fini_subscription_memory>:
 800b0c4:	b510      	push	{r4, lr}
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	6800      	ldr	r0, [r0, #0]
 800b0ca:	b128      	cbz	r0, 800b0d8 <rmw_uxrce_fini_subscription_memory+0x14>
 800b0cc:	4b06      	ldr	r3, [pc, #24]	; (800b0e8 <rmw_uxrce_fini_subscription_memory+0x24>)
 800b0ce:	6819      	ldr	r1, [r3, #0]
 800b0d0:	f7f5 f89e 	bl	8000210 <strcmp>
 800b0d4:	b938      	cbnz	r0, 800b0e6 <rmw_uxrce_fini_subscription_memory+0x22>
 800b0d6:	6020      	str	r0, [r4, #0]
 800b0d8:	6861      	ldr	r1, [r4, #4]
 800b0da:	b121      	cbz	r1, 800b0e6 <rmw_uxrce_fini_subscription_memory+0x22>
 800b0dc:	4803      	ldr	r0, [pc, #12]	; (800b0ec <rmw_uxrce_fini_subscription_memory+0x28>)
 800b0de:	f008 fe41 	bl	8013d64 <put_memory>
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	6063      	str	r3, [r4, #4]
 800b0e6:	bd10      	pop	{r4, pc}
 800b0e8:	08019488 	.word	0x08019488
 800b0ec:	2000e474 	.word	0x2000e474

0800b0f0 <rmw_uxrce_fini_service_memory>:
 800b0f0:	b510      	push	{r4, lr}
 800b0f2:	4604      	mov	r4, r0
 800b0f4:	6800      	ldr	r0, [r0, #0]
 800b0f6:	b128      	cbz	r0, 800b104 <rmw_uxrce_fini_service_memory+0x14>
 800b0f8:	4b06      	ldr	r3, [pc, #24]	; (800b114 <rmw_uxrce_fini_service_memory+0x24>)
 800b0fa:	6819      	ldr	r1, [r3, #0]
 800b0fc:	f7f5 f888 	bl	8000210 <strcmp>
 800b100:	b938      	cbnz	r0, 800b112 <rmw_uxrce_fini_service_memory+0x22>
 800b102:	6020      	str	r0, [r4, #0]
 800b104:	6861      	ldr	r1, [r4, #4]
 800b106:	b121      	cbz	r1, 800b112 <rmw_uxrce_fini_service_memory+0x22>
 800b108:	4803      	ldr	r0, [pc, #12]	; (800b118 <rmw_uxrce_fini_service_memory+0x28>)
 800b10a:	f008 fe2b 	bl	8013d64 <put_memory>
 800b10e:	2300      	movs	r3, #0
 800b110:	6063      	str	r3, [r4, #4]
 800b112:	bd10      	pop	{r4, pc}
 800b114:	08019488 	.word	0x08019488
 800b118:	2000e444 	.word	0x2000e444

0800b11c <rmw_uxrce_fini_client_memory>:
 800b11c:	b510      	push	{r4, lr}
 800b11e:	4604      	mov	r4, r0
 800b120:	6800      	ldr	r0, [r0, #0]
 800b122:	b128      	cbz	r0, 800b130 <rmw_uxrce_fini_client_memory+0x14>
 800b124:	4b06      	ldr	r3, [pc, #24]	; (800b140 <rmw_uxrce_fini_client_memory+0x24>)
 800b126:	6819      	ldr	r1, [r3, #0]
 800b128:	f7f5 f872 	bl	8000210 <strcmp>
 800b12c:	b938      	cbnz	r0, 800b13e <rmw_uxrce_fini_client_memory+0x22>
 800b12e:	6020      	str	r0, [r4, #0]
 800b130:	6861      	ldr	r1, [r4, #4]
 800b132:	b121      	cbz	r1, 800b13e <rmw_uxrce_fini_client_memory+0x22>
 800b134:	4803      	ldr	r0, [pc, #12]	; (800b144 <rmw_uxrce_fini_client_memory+0x28>)
 800b136:	f008 fe15 	bl	8013d64 <put_memory>
 800b13a:	2300      	movs	r3, #0
 800b13c:	6063      	str	r3, [r4, #4]
 800b13e:	bd10      	pop	{r4, pc}
 800b140:	08019488 	.word	0x08019488
 800b144:	20009b54 	.word	0x20009b54

0800b148 <rmw_uxrce_fini_topic_memory>:
 800b148:	b510      	push	{r4, lr}
 800b14a:	4604      	mov	r4, r0
 800b14c:	4621      	mov	r1, r4
 800b14e:	4803      	ldr	r0, [pc, #12]	; (800b15c <rmw_uxrce_fini_topic_memory+0x14>)
 800b150:	f008 fe08 	bl	8013d64 <put_memory>
 800b154:	2300      	movs	r3, #0
 800b156:	61a3      	str	r3, [r4, #24]
 800b158:	bd10      	pop	{r4, pc}
 800b15a:	bf00      	nop
 800b15c:	2000e484 	.word	0x2000e484

0800b160 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800b160:	b082      	sub	sp, #8
 800b162:	b530      	push	{r4, r5, lr}
 800b164:	4925      	ldr	r1, [pc, #148]	; (800b1fc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800b166:	680d      	ldr	r5, [r1, #0]
 800b168:	ac03      	add	r4, sp, #12
 800b16a:	e884 000c 	stmia.w	r4, {r2, r3}
 800b16e:	461c      	mov	r4, r3
 800b170:	2d00      	cmp	r5, #0
 800b172:	d041      	beq.n	800b1f8 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800b174:	462b      	mov	r3, r5
 800b176:	2100      	movs	r1, #0
 800b178:	689a      	ldr	r2, [r3, #8]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800b180:	4290      	cmp	r0, r2
 800b182:	bf08      	it	eq
 800b184:	3101      	addeq	r1, #1
 800b186:	2b00      	cmp	r3, #0
 800b188:	d1f6      	bne.n	800b178 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800b18a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800b18e:	2b02      	cmp	r3, #2
 800b190:	d029      	beq.n	800b1e6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b192:	d907      	bls.n	800b1a4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800b194:	2b03      	cmp	r3, #3
 800b196:	d005      	beq.n	800b1a4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800b198:	2100      	movs	r1, #0
 800b19a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b19e:	4608      	mov	r0, r1
 800b1a0:	b002      	add	sp, #8
 800b1a2:	4770      	bx	lr
 800b1a4:	b314      	cbz	r4, 800b1ec <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b1a6:	428c      	cmp	r4, r1
 800b1a8:	d820      	bhi.n	800b1ec <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b1aa:	2d00      	cmp	r5, #0
 800b1ac:	d0f4      	beq.n	800b198 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800b1b4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800b1b8:	e002      	b.n	800b1c0 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800b1ba:	686d      	ldr	r5, [r5, #4]
 800b1bc:	2d00      	cmp	r5, #0
 800b1be:	d0ec      	beq.n	800b19a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800b1c0:	68ab      	ldr	r3, [r5, #8]
 800b1c2:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800b1c6:	4290      	cmp	r0, r2
 800b1c8:	d1f7      	bne.n	800b1ba <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b1ca:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800b1ce:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800b1d2:	4562      	cmp	r2, ip
 800b1d4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800b1d8:	eb73 0e04 	sbcs.w	lr, r3, r4
 800b1dc:	daed      	bge.n	800b1ba <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b1de:	4694      	mov	ip, r2
 800b1e0:	461c      	mov	r4, r3
 800b1e2:	4629      	mov	r1, r5
 800b1e4:	e7e9      	b.n	800b1ba <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b1e6:	b10c      	cbz	r4, 800b1ec <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b1e8:	428c      	cmp	r4, r1
 800b1ea:	d9d5      	bls.n	800b198 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800b1ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1f0:	4802      	ldr	r0, [pc, #8]	; (800b1fc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800b1f2:	b002      	add	sp, #8
 800b1f4:	f008 bda6 	b.w	8013d44 <get_memory>
 800b1f8:	4629      	mov	r1, r5
 800b1fa:	e7c6      	b.n	800b18a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800b1fc:	2000e464 	.word	0x2000e464

0800b200 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800b200:	4b11      	ldr	r3, [pc, #68]	; (800b248 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	b530      	push	{r4, r5, lr}
 800b206:	b1e3      	cbz	r3, 800b242 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800b208:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800b20c:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 800b210:	2400      	movs	r4, #0
 800b212:	e001      	b.n	800b218 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	b193      	cbz	r3, 800b23e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800b218:	689a      	ldr	r2, [r3, #8]
 800b21a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800b21e:	4288      	cmp	r0, r1
 800b220:	d1f8      	bne.n	800b214 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800b222:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 800b226:	f8d2 281c 	ldr.w	r2, [r2, #2076]	; 0x81c
 800b22a:	4571      	cmp	r1, lr
 800b22c:	eb72 050c 	sbcs.w	r5, r2, ip
 800b230:	daf0      	bge.n	800b214 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800b232:	461c      	mov	r4, r3
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	468e      	mov	lr, r1
 800b238:	4694      	mov	ip, r2
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1ec      	bne.n	800b218 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800b23e:	4620      	mov	r0, r4
 800b240:	bd30      	pop	{r4, r5, pc}
 800b242:	461c      	mov	r4, r3
 800b244:	4620      	mov	r0, r4
 800b246:	bd30      	pop	{r4, r5, pc}
 800b248:	2000e464 	.word	0x2000e464
 800b24c:	00000000 	.word	0x00000000

0800b250 <rmw_uxrce_clean_expired_static_input_buffer>:
 800b250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b254:	4b3c      	ldr	r3, [pc, #240]	; (800b348 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b256:	ed2d 8b06 	vpush	{d8-d10}
 800b25a:	681f      	ldr	r7, [r3, #0]
 800b25c:	b08d      	sub	sp, #52	; 0x34
 800b25e:	f009 fbd9 	bl	8014a14 <rmw_uros_epoch_nanos>
 800b262:	2f00      	cmp	r7, #0
 800b264:	d05d      	beq.n	800b322 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800b266:	46b8      	mov	r8, r7
 800b268:	ed9f 8b31 	vldr	d8, [pc, #196]	; 800b330 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800b26c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b270:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800b274:	2b04      	cmp	r3, #4
 800b276:	ed9f ab30 	vldr	d10, [pc, #192]	; 800b338 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800b27a:	ed9f 9b31 	vldr	d9, [pc, #196]	; 800b340 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800b27e:	4681      	mov	r9, r0
 800b280:	468a      	mov	sl, r1
 800b282:	ac04      	add	r4, sp, #16
 800b284:	d03f      	beq.n	800b306 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800b286:	2b05      	cmp	r3, #5
 800b288:	d044      	beq.n	800b314 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800b28a:	2b03      	cmp	r3, #3
 800b28c:	d03b      	beq.n	800b306 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800b28e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b292:	ed8d ab06 	vstr	d10, [sp, #24]
 800b296:	ed8d 8b08 	vstr	d8, [sp, #32]
 800b29a:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 800b29e:	ab08      	add	r3, sp, #32
 800b2a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b2a2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b2a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b2aa:	f008 fc51 	bl	8013b50 <rmw_time_equal>
 800b2ae:	b118      	cbz	r0, 800b2b8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800b2b0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800b2b4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b2b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b2bc:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 800b2c0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	; 0x81c
 800b2c4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800b2c8:	f008 fc96 	bl	8013bf8 <rmw_time_total_nsec>
 800b2cc:	1830      	adds	r0, r6, r0
 800b2ce:	eb47 0101 	adc.w	r1, r7, r1
 800b2d2:	4548      	cmp	r0, r9
 800b2d4:	eb71 030a 	sbcs.w	r3, r1, sl
 800b2d8:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 800b2dc:	db05      	blt.n	800b2ea <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800b2de:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800b2e2:	4591      	cmp	r9, r2
 800b2e4:	eb7a 0303 	sbcs.w	r3, sl, r3
 800b2e8:	da03      	bge.n	800b2f2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800b2ea:	4817      	ldr	r0, [pc, #92]	; (800b348 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b2ec:	4641      	mov	r1, r8
 800b2ee:	f008 fd39 	bl	8013d64 <put_memory>
 800b2f2:	f1bb 0f00 	cmp.w	fp, #0
 800b2f6:	d014      	beq.n	800b322 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800b2f8:	46d8      	mov	r8, fp
 800b2fa:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b2fe:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800b302:	2b04      	cmp	r3, #4
 800b304:	d1bf      	bne.n	800b286 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800b306:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800b30a:	3340      	adds	r3, #64	; 0x40
 800b30c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b30e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b312:	e7c0      	b.n	800b296 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b314:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800b318:	3348      	adds	r3, #72	; 0x48
 800b31a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b31c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b320:	e7b9      	b.n	800b296 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b322:	b00d      	add	sp, #52	; 0x34
 800b324:	ecbd 8b06 	vpop	{d8-d10}
 800b328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b32c:	f3af 8000 	nop.w
	...
 800b338:	00000001 	.word	0x00000001
 800b33c:	00000000 	.word	0x00000000
 800b340:	0000001e 	.word	0x0000001e
 800b344:	00000000 	.word	0x00000000
 800b348:	2000e464 	.word	0x2000e464

0800b34c <run_xrce_session>:
 800b34c:	b510      	push	{r4, lr}
 800b34e:	788c      	ldrb	r4, [r1, #2]
 800b350:	b086      	sub	sp, #24
 800b352:	2c01      	cmp	r4, #1
 800b354:	f8ad 200e 	strh.w	r2, [sp, #14]
 800b358:	d00c      	beq.n	800b374 <run_xrce_session+0x28>
 800b35a:	4619      	mov	r1, r3
 800b35c:	2301      	movs	r3, #1
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	f10d 020e 	add.w	r2, sp, #14
 800b364:	f10d 0317 	add.w	r3, sp, #23
 800b368:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b36c:	f003 ff22 	bl	800f1b4 <uxr_run_session_until_all_status>
 800b370:	b006      	add	sp, #24
 800b372:	bd10      	pop	{r4, pc}
 800b374:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b378:	f003 fb36 	bl	800e9e8 <uxr_flash_output_streams>
 800b37c:	4620      	mov	r0, r4
 800b37e:	b006      	add	sp, #24
 800b380:	bd10      	pop	{r4, pc}
 800b382:	bf00      	nop

0800b384 <convert_qos_profile>:
 800b384:	7a4a      	ldrb	r2, [r1, #9]
 800b386:	f891 c008 	ldrb.w	ip, [r1, #8]
 800b38a:	2a02      	cmp	r2, #2
 800b38c:	bf18      	it	ne
 800b38e:	2200      	movne	r2, #0
 800b390:	7002      	strb	r2, [r0, #0]
 800b392:	780a      	ldrb	r2, [r1, #0]
 800b394:	8889      	ldrh	r1, [r1, #4]
 800b396:	8081      	strh	r1, [r0, #4]
 800b398:	f1ac 0c02 	sub.w	ip, ip, #2
 800b39c:	f1a2 0202 	sub.w	r2, r2, #2
 800b3a0:	fabc fc8c 	clz	ip, ip
 800b3a4:	fab2 f282 	clz	r2, r2
 800b3a8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800b3ac:	0952      	lsrs	r2, r2, #5
 800b3ae:	f880 c001 	strb.w	ip, [r0, #1]
 800b3b2:	7082      	strb	r2, [r0, #2]
 800b3b4:	4770      	bx	lr
 800b3b6:	bf00      	nop

0800b3b8 <generate_type_name>:
 800b3b8:	b530      	push	{r4, r5, lr}
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	700b      	strb	r3, [r1, #0]
 800b3be:	6803      	ldr	r3, [r0, #0]
 800b3c0:	b087      	sub	sp, #28
 800b3c2:	4614      	mov	r4, r2
 800b3c4:	b1d3      	cbz	r3, 800b3fc <generate_type_name+0x44>
 800b3c6:	4a0f      	ldr	r2, [pc, #60]	; (800b404 <generate_type_name+0x4c>)
 800b3c8:	4615      	mov	r5, r2
 800b3ca:	9203      	str	r2, [sp, #12]
 800b3cc:	9500      	str	r5, [sp, #0]
 800b3ce:	6842      	ldr	r2, [r0, #4]
 800b3d0:	480d      	ldr	r0, [pc, #52]	; (800b408 <generate_type_name+0x50>)
 800b3d2:	9001      	str	r0, [sp, #4]
 800b3d4:	4608      	mov	r0, r1
 800b3d6:	490d      	ldr	r1, [pc, #52]	; (800b40c <generate_type_name+0x54>)
 800b3d8:	9204      	str	r2, [sp, #16]
 800b3da:	9105      	str	r1, [sp, #20]
 800b3dc:	9102      	str	r1, [sp, #8]
 800b3de:	4a0c      	ldr	r2, [pc, #48]	; (800b410 <generate_type_name+0x58>)
 800b3e0:	4621      	mov	r1, r4
 800b3e2:	f00b ffcf 	bl	8017384 <sniprintf>
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	db05      	blt.n	800b3f6 <generate_type_name+0x3e>
 800b3ea:	4284      	cmp	r4, r0
 800b3ec:	bfd4      	ite	le
 800b3ee:	2000      	movle	r0, #0
 800b3f0:	2001      	movgt	r0, #1
 800b3f2:	b007      	add	sp, #28
 800b3f4:	bd30      	pop	{r4, r5, pc}
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	b007      	add	sp, #28
 800b3fa:	bd30      	pop	{r4, r5, pc}
 800b3fc:	4b05      	ldr	r3, [pc, #20]	; (800b414 <generate_type_name+0x5c>)
 800b3fe:	4a01      	ldr	r2, [pc, #4]	; (800b404 <generate_type_name+0x4c>)
 800b400:	461d      	mov	r5, r3
 800b402:	e7e2      	b.n	800b3ca <generate_type_name+0x12>
 800b404:	08018cec 	.word	0x08018cec
 800b408:	08018d04 	.word	0x08018d04
 800b40c:	08018d00 	.word	0x08018d00
 800b410:	08018cf0 	.word	0x08018cf0
 800b414:	0801976c 	.word	0x0801976c

0800b418 <generate_topic_name>:
 800b418:	b510      	push	{r4, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	4614      	mov	r4, r2
 800b41e:	9000      	str	r0, [sp, #0]
 800b420:	4b08      	ldr	r3, [pc, #32]	; (800b444 <generate_topic_name+0x2c>)
 800b422:	4a09      	ldr	r2, [pc, #36]	; (800b448 <generate_topic_name+0x30>)
 800b424:	4608      	mov	r0, r1
 800b426:	4621      	mov	r1, r4
 800b428:	f00b ffac 	bl	8017384 <sniprintf>
 800b42c:	2800      	cmp	r0, #0
 800b42e:	db05      	blt.n	800b43c <generate_topic_name+0x24>
 800b430:	4284      	cmp	r4, r0
 800b432:	bfd4      	ite	le
 800b434:	2000      	movle	r0, #0
 800b436:	2001      	movgt	r0, #1
 800b438:	b002      	add	sp, #8
 800b43a:	bd10      	pop	{r4, pc}
 800b43c:	2000      	movs	r0, #0
 800b43e:	b002      	add	sp, #8
 800b440:	bd10      	pop	{r4, pc}
 800b442:	bf00      	nop
 800b444:	08018d08 	.word	0x08018d08
 800b448:	08018720 	.word	0x08018720

0800b44c <is_uxrce_rmw_identifier_valid>:
 800b44c:	b510      	push	{r4, lr}
 800b44e:	4604      	mov	r4, r0
 800b450:	b140      	cbz	r0, 800b464 <is_uxrce_rmw_identifier_valid+0x18>
 800b452:	f008 fcdf 	bl	8013e14 <rmw_get_implementation_identifier>
 800b456:	4601      	mov	r1, r0
 800b458:	4620      	mov	r0, r4
 800b45a:	f7f4 fed9 	bl	8000210 <strcmp>
 800b45e:	fab0 f080 	clz	r0, r0
 800b462:	0940      	lsrs	r0, r0, #5
 800b464:	bd10      	pop	{r4, pc}
 800b466:	bf00      	nop

0800b468 <get_message_typesupport_handle>:
 800b468:	6883      	ldr	r3, [r0, #8]
 800b46a:	4718      	bx	r3

0800b46c <get_message_typesupport_handle_function>:
 800b46c:	b510      	push	{r4, lr}
 800b46e:	4604      	mov	r4, r0
 800b470:	6800      	ldr	r0, [r0, #0]
 800b472:	f7f4 fecd 	bl	8000210 <strcmp>
 800b476:	2800      	cmp	r0, #0
 800b478:	bf0c      	ite	eq
 800b47a:	4620      	moveq	r0, r4
 800b47c:	2000      	movne	r0, #0
 800b47e:	bd10      	pop	{r4, pc}

0800b480 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800b480:	4b04      	ldr	r3, [pc, #16]	; (800b494 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	b10a      	cbz	r2, 800b48a <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 800b486:	4803      	ldr	r0, [pc, #12]	; (800b494 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800b488:	4770      	bx	lr
 800b48a:	4a03      	ldr	r2, [pc, #12]	; (800b498 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 800b48c:	4801      	ldr	r0, [pc, #4]	; (800b494 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800b48e:	6812      	ldr	r2, [r2, #0]
 800b490:	601a      	str	r2, [r3, #0]
 800b492:	4770      	bx	lr
 800b494:	20000030 	.word	0x20000030
 800b498:	20000768 	.word	0x20000768

0800b49c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800b49c:	4a02      	ldr	r2, [pc, #8]	; (800b4a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 800b49e:	4b03      	ldr	r3, [pc, #12]	; (800b4ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 800b4a0:	6812      	ldr	r2, [r2, #0]
 800b4a2:	601a      	str	r2, [r3, #0]
 800b4a4:	4770      	bx	lr
 800b4a6:	bf00      	nop
 800b4a8:	20000768 	.word	0x20000768
 800b4ac:	20000030 	.word	0x20000030

0800b4b0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 800b4b0:	2009      	movs	r0, #9
 800b4b2:	4770      	bx	lr

0800b4b4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 800b4b4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b4b8:	4770      	bx	lr
 800b4ba:	bf00      	nop

0800b4bc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 800b4bc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800b4c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4c4:	e9c2 0100 	strd	r0, r1, [r2]
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop

0800b4cc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 800b4cc:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b4d0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800b4d4:	e9c1 2300 	strd	r2, r3, [r1]
 800b4d8:	4770      	bx	lr
 800b4da:	bf00      	nop

0800b4dc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 800b4dc:	f009 bb02 	b.w	8014ae4 <sensor_msgs__msg__Imu__init>

0800b4e0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 800b4e0:	f009 bb56 	b.w	8014b90 <sensor_msgs__msg__Imu__fini>

0800b4e4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 800b4e4:	2009      	movs	r0, #9
 800b4e6:	4770      	bx	lr

0800b4e8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 800b4e8:	2009      	movs	r0, #9
 800b4ea:	4770      	bx	lr

0800b4ec <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 800b4ec:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop

0800b4f4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 800b4f4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop

0800b4fc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 800b4fc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop

0800b504 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 800b504:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop

0800b50c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 800b50c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b510:	4770      	bx	lr
 800b512:	bf00      	nop

0800b514 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 800b514:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800b518:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b51c:	e9c2 0100 	strd	r0, r1, [r2]
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop

0800b524 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 800b524:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b528:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800b52c:	e9c1 2300 	strd	r2, r3, [r1]
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop

0800b534 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 800b534:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800b538:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b53c:	e9c2 0100 	strd	r0, r1, [r2]
 800b540:	4770      	bx	lr
 800b542:	bf00      	nop

0800b544 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 800b544:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b548:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800b54c:	e9c1 2300 	strd	r2, r3, [r1]
 800b550:	4770      	bx	lr
 800b552:	bf00      	nop

0800b554 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800b554:	b510      	push	{r4, lr}
 800b556:	f000 f97d 	bl	800b854 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800b55a:	4c0b      	ldr	r4, [pc, #44]	; (800b588 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 800b55c:	60e0      	str	r0, [r4, #12]
 800b55e:	f000 fca7 	bl	800beb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800b562:	64a0      	str	r0, [r4, #72]	; 0x48
 800b564:	f000 fcb6 	bl	800bed4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b568:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
 800b56c:	f000 fcb2 	bl	800bed4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b570:	4b06      	ldr	r3, [pc, #24]	; (800b58c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800b572:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
 800b576:	681a      	ldr	r2, [r3, #0]
 800b578:	b10a      	cbz	r2, 800b57e <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 800b57a:	4804      	ldr	r0, [pc, #16]	; (800b58c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800b57c:	bd10      	pop	{r4, pc}
 800b57e:	4a04      	ldr	r2, [pc, #16]	; (800b590 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 800b580:	4802      	ldr	r0, [pc, #8]	; (800b58c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800b582:	6812      	ldr	r2, [r2, #0]
 800b584:	601a      	str	r2, [r3, #0]
 800b586:	bd10      	pop	{r4, pc}
 800b588:	2000003c 	.word	0x2000003c
 800b58c:	200001e0 	.word	0x200001e0
 800b590:	2000076c 	.word	0x2000076c

0800b594 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800b594:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800b598:	4680      	mov	r8, r0
 800b59a:	460f      	mov	r7, r1
 800b59c:	f000 fa78 	bl	800ba90 <get_serialized_size_std_msgs__msg__Header>
 800b5a0:	183c      	adds	r4, r7, r0
 800b5a2:	4621      	mov	r1, r4
 800b5a4:	f108 0018 	add.w	r0, r8, #24
 800b5a8:	f000 fca2 	bl	800bef0 <get_serialized_size_geometry_msgs__msg__Quaternion>
 800b5ac:	4404      	add	r4, r0
 800b5ae:	2108      	movs	r1, #8
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	f002 fca9 	bl	800df08 <ucdr_alignment>
 800b5b6:	f100 0548 	add.w	r5, r0, #72	; 0x48
 800b5ba:	4425      	add	r5, r4
 800b5bc:	4629      	mov	r1, r5
 800b5be:	f108 0080 	add.w	r0, r8, #128	; 0x80
 800b5c2:	f000 fd4d 	bl	800c060 <get_serialized_size_geometry_msgs__msg__Vector3>
 800b5c6:	4405      	add	r5, r0
 800b5c8:	2108      	movs	r1, #8
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	f002 fc9c 	bl	800df08 <ucdr_alignment>
 800b5d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b5d4:	4425      	add	r5, r4
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	f108 00e0 	add.w	r0, r8, #224	; 0xe0
 800b5dc:	f000 fd40 	bl	800c060 <get_serialized_size_geometry_msgs__msg__Vector3>
 800b5e0:	4405      	add	r5, r0
 800b5e2:	2108      	movs	r1, #8
 800b5e4:	4628      	mov	r0, r5
 800b5e6:	f002 fc8f 	bl	800df08 <ucdr_alignment>
 800b5ea:	f1c7 0748 	rsb	r7, r7, #72	; 0x48
 800b5ee:	4438      	add	r0, r7
 800b5f0:	4428      	add	r0, r5
 800b5f2:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800b5f6:	bf00      	nop

0800b5f8 <get_serialized_size_sensor_msgs__msg__Imu>:
 800b5f8:	b108      	cbz	r0, 800b5fe <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800b5fa:	f7ff bfcb 	b.w	800b594 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800b5fe:	4770      	bx	lr

0800b600 <_Imu__get_serialized_size>:
 800b600:	b110      	cbz	r0, 800b608 <_Imu__get_serialized_size+0x8>
 800b602:	2100      	movs	r1, #0
 800b604:	f7ff bfc6 	b.w	800b594 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800b608:	4770      	bx	lr
 800b60a:	bf00      	nop

0800b60c <_Imu__cdr_deserialize>:
 800b60c:	b538      	push	{r3, r4, r5, lr}
 800b60e:	460c      	mov	r4, r1
 800b610:	b399      	cbz	r1, 800b67a <_Imu__cdr_deserialize+0x6e>
 800b612:	4605      	mov	r5, r0
 800b614:	f000 fabe 	bl	800bb94 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800b618:	6843      	ldr	r3, [r0, #4]
 800b61a:	4621      	mov	r1, r4
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	4628      	mov	r0, r5
 800b620:	4798      	blx	r3
 800b622:	f000 fd19 	bl	800c058 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800b626:	6843      	ldr	r3, [r0, #4]
 800b628:	f104 0118 	add.w	r1, r4, #24
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	4628      	mov	r0, r5
 800b630:	4798      	blx	r3
 800b632:	2209      	movs	r2, #9
 800b634:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800b638:	4628      	mov	r0, r5
 800b63a:	f000 ffcb 	bl	800c5d4 <ucdr_deserialize_array_double>
 800b63e:	f000 fd9b 	bl	800c178 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b642:	6843      	ldr	r3, [r0, #4]
 800b644:	f104 0180 	add.w	r1, r4, #128	; 0x80
 800b648:	68db      	ldr	r3, [r3, #12]
 800b64a:	4628      	mov	r0, r5
 800b64c:	4798      	blx	r3
 800b64e:	2209      	movs	r2, #9
 800b650:	f104 0198 	add.w	r1, r4, #152	; 0x98
 800b654:	4628      	mov	r0, r5
 800b656:	f000 ffbd 	bl	800c5d4 <ucdr_deserialize_array_double>
 800b65a:	f000 fd8d 	bl	800c178 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b65e:	6843      	ldr	r3, [r0, #4]
 800b660:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	4628      	mov	r0, r5
 800b668:	4798      	blx	r3
 800b66a:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
 800b66e:	4628      	mov	r0, r5
 800b670:	2209      	movs	r2, #9
 800b672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b676:	f000 bfad 	b.w	800c5d4 <ucdr_deserialize_array_double>
 800b67a:	4608      	mov	r0, r1
 800b67c:	bd38      	pop	{r3, r4, r5, pc}
 800b67e:	bf00      	nop

0800b680 <_Imu__cdr_serialize>:
 800b680:	2800      	cmp	r0, #0
 800b682:	d035      	beq.n	800b6f0 <_Imu__cdr_serialize+0x70>
 800b684:	b538      	push	{r3, r4, r5, lr}
 800b686:	460d      	mov	r5, r1
 800b688:	4604      	mov	r4, r0
 800b68a:	f000 fa83 	bl	800bb94 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800b68e:	6843      	ldr	r3, [r0, #4]
 800b690:	4629      	mov	r1, r5
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	4620      	mov	r0, r4
 800b696:	4798      	blx	r3
 800b698:	f000 fcde 	bl	800c058 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800b69c:	6843      	ldr	r3, [r0, #4]
 800b69e:	4629      	mov	r1, r5
 800b6a0:	689b      	ldr	r3, [r3, #8]
 800b6a2:	f104 0018 	add.w	r0, r4, #24
 800b6a6:	4798      	blx	r3
 800b6a8:	2209      	movs	r2, #9
 800b6aa:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	f000 ff3c 	bl	800c52c <ucdr_serialize_array_double>
 800b6b4:	f000 fd60 	bl	800c178 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b6b8:	6843      	ldr	r3, [r0, #4]
 800b6ba:	4629      	mov	r1, r5
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800b6c2:	4798      	blx	r3
 800b6c4:	2209      	movs	r2, #9
 800b6c6:	f104 0198 	add.w	r1, r4, #152	; 0x98
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	f000 ff2e 	bl	800c52c <ucdr_serialize_array_double>
 800b6d0:	f000 fd52 	bl	800c178 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b6d4:	6843      	ldr	r3, [r0, #4]
 800b6d6:	4629      	mov	r1, r5
 800b6d8:	689b      	ldr	r3, [r3, #8]
 800b6da:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 800b6de:	4798      	blx	r3
 800b6e0:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	2209      	movs	r2, #9
 800b6e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6ec:	f000 bf1e 	b.w	800c52c <ucdr_serialize_array_double>
 800b6f0:	4770      	bx	lr
 800b6f2:	bf00      	nop

0800b6f4 <max_serialized_size_sensor_msgs__msg__Imu>:
 800b6f4:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	7003      	strb	r3, [r0, #0]
 800b6fc:	4680      	mov	r8, r0
 800b6fe:	460f      	mov	r7, r1
 800b700:	f000 fa3e 	bl	800bb80 <max_serialized_size_std_msgs__msg__Header>
 800b704:	183c      	adds	r4, r7, r0
 800b706:	4621      	mov	r1, r4
 800b708:	4640      	mov	r0, r8
 800b70a:	f000 fc83 	bl	800c014 <max_serialized_size_geometry_msgs__msg__Quaternion>
 800b70e:	4404      	add	r4, r0
 800b710:	2108      	movs	r1, #8
 800b712:	4620      	mov	r0, r4
 800b714:	f002 fbf8 	bl	800df08 <ucdr_alignment>
 800b718:	f100 0548 	add.w	r5, r0, #72	; 0x48
 800b71c:	4425      	add	r5, r4
 800b71e:	4629      	mov	r1, r5
 800b720:	4640      	mov	r0, r8
 800b722:	f000 fd0d 	bl	800c140 <max_serialized_size_geometry_msgs__msg__Vector3>
 800b726:	4405      	add	r5, r0
 800b728:	2108      	movs	r1, #8
 800b72a:	4628      	mov	r0, r5
 800b72c:	f002 fbec 	bl	800df08 <ucdr_alignment>
 800b730:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b734:	4425      	add	r5, r4
 800b736:	4629      	mov	r1, r5
 800b738:	4640      	mov	r0, r8
 800b73a:	f000 fd01 	bl	800c140 <max_serialized_size_geometry_msgs__msg__Vector3>
 800b73e:	4405      	add	r5, r0
 800b740:	2108      	movs	r1, #8
 800b742:	4628      	mov	r0, r5
 800b744:	f002 fbe0 	bl	800df08 <ucdr_alignment>
 800b748:	f1c7 0748 	rsb	r7, r7, #72	; 0x48
 800b74c:	4438      	add	r0, r7
 800b74e:	4428      	add	r0, r5
 800b750:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}

0800b754 <_Imu__max_serialized_size>:
 800b754:	b500      	push	{lr}
 800b756:	b083      	sub	sp, #12
 800b758:	2100      	movs	r1, #0
 800b75a:	f10d 0007 	add.w	r0, sp, #7
 800b75e:	f7ff ffc9 	bl	800b6f4 <max_serialized_size_sensor_msgs__msg__Imu>
 800b762:	b003      	add	sp, #12
 800b764:	f85d fb04 	ldr.w	pc, [sp], #4

0800b768 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800b768:	4800      	ldr	r0, [pc, #0]	; (800b76c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800b76a:	4770      	bx	lr
 800b76c:	200001ec 	.word	0x200001ec

0800b770 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800b770:	4b04      	ldr	r3, [pc, #16]	; (800b784 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x14>)
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	b10a      	cbz	r2, 800b77a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0xa>
 800b776:	4803      	ldr	r0, [pc, #12]	; (800b784 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x14>)
 800b778:	4770      	bx	lr
 800b77a:	4a03      	ldr	r2, [pc, #12]	; (800b788 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x18>)
 800b77c:	4801      	ldr	r0, [pc, #4]	; (800b784 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x14>)
 800b77e:	6812      	ldr	r2, [r2, #0]
 800b780:	601a      	str	r2, [r3, #0]
 800b782:	4770      	bx	lr
 800b784:	2000021c 	.word	0x2000021c
 800b788:	20000768 	.word	0x20000768

0800b78c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800b78c:	4a02      	ldr	r2, [pc, #8]	; (800b798 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0xc>)
 800b78e:	4b03      	ldr	r3, [pc, #12]	; (800b79c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x10>)
 800b790:	6812      	ldr	r2, [r2, #0]
 800b792:	601a      	str	r2, [r3, #0]
 800b794:	4770      	bx	lr
 800b796:	bf00      	nop
 800b798:	20000768 	.word	0x20000768
 800b79c:	2000021c 	.word	0x2000021c

0800b7a0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 800b7a0:	4b04      	ldr	r3, [pc, #16]	; (800b7b4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	b10a      	cbz	r2, 800b7aa <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 800b7a6:	4803      	ldr	r0, [pc, #12]	; (800b7b4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800b7a8:	4770      	bx	lr
 800b7aa:	4a03      	ldr	r2, [pc, #12]	; (800b7b8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 800b7ac:	4801      	ldr	r0, [pc, #4]	; (800b7b4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800b7ae:	6812      	ldr	r2, [r2, #0]
 800b7b0:	601a      	str	r2, [r3, #0]
 800b7b2:	4770      	bx	lr
 800b7b4:	20000230 	.word	0x20000230
 800b7b8:	20000768 	.word	0x20000768

0800b7bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 800b7bc:	4a02      	ldr	r2, [pc, #8]	; (800b7c8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xc>)
 800b7be:	4b03      	ldr	r3, [pc, #12]	; (800b7cc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x10>)
 800b7c0:	6812      	ldr	r2, [r2, #0]
 800b7c2:	601a      	str	r2, [r3, #0]
 800b7c4:	4770      	bx	lr
 800b7c6:	bf00      	nop
 800b7c8:	20000768 	.word	0x20000768
 800b7cc:	20000230 	.word	0x20000230

0800b7d0 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__size_function__Float32MultiArray__data>:
 800b7d0:	6840      	ldr	r0, [r0, #4]
 800b7d2:	4770      	bx	lr

0800b7d4 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__get_const_function__Float32MultiArray__data>:
 800b7d4:	6800      	ldr	r0, [r0, #0]
 800b7d6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b7da:	4770      	bx	lr

0800b7dc <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__fetch_function__Float32MultiArray__data>:
 800b7dc:	6803      	ldr	r3, [r0, #0]
 800b7de:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b7e2:	680b      	ldr	r3, [r1, #0]
 800b7e4:	6013      	str	r3, [r2, #0]
 800b7e6:	4770      	bx	lr

0800b7e8 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__assign_function__Float32MultiArray__data>:
 800b7e8:	6803      	ldr	r3, [r0, #0]
 800b7ea:	6812      	ldr	r2, [r2, #0]
 800b7ec:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b7f0:	600a      	str	r2, [r1, #0]
 800b7f2:	4770      	bx	lr

0800b7f4 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__Float32MultiArray_init_function>:
 800b7f4:	f009 b9e0 	b.w	8014bb8 <std_msgs__msg__Float32MultiArray__init>

0800b7f8 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__Float32MultiArray_fini_function>:
 800b7f8:	f009 ba02 	b.w	8014c00 <std_msgs__msg__Float32MultiArray__fini>

0800b7fc <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__resize_function__Float32MultiArray__data>:
 800b7fc:	b510      	push	{r4, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	4604      	mov	r4, r0
 800b802:	9101      	str	r1, [sp, #4]
 800b804:	f009 f92c 	bl	8014a60 <rosidl_runtime_c__float__Sequence__fini>
 800b808:	9901      	ldr	r1, [sp, #4]
 800b80a:	4620      	mov	r0, r4
 800b80c:	b002      	add	sp, #8
 800b80e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b812:	f009 b90d 	b.w	8014a30 <rosidl_runtime_c__float__Sequence__init>
 800b816:	bf00      	nop

0800b818 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__get_function__Float32MultiArray__data>:
 800b818:	6800      	ldr	r0, [r0, #0]
 800b81a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b81e:	4770      	bx	lr

0800b820 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800b820:	b508      	push	{r3, lr}
 800b822:	f000 f871 	bl	800b908 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800b826:	4b06      	ldr	r3, [pc, #24]	; (800b840 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x20>)
 800b828:	4906      	ldr	r1, [pc, #24]	; (800b844 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x24>)
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	60c8      	str	r0, [r1, #12]
 800b82e:	b10a      	cbz	r2, 800b834 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x14>
 800b830:	4803      	ldr	r0, [pc, #12]	; (800b840 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x20>)
 800b832:	bd08      	pop	{r3, pc}
 800b834:	4a04      	ldr	r2, [pc, #16]	; (800b848 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x28>)
 800b836:	4802      	ldr	r0, [pc, #8]	; (800b840 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x20>)
 800b838:	6812      	ldr	r2, [r2, #0]
 800b83a:	601a      	str	r2, [r3, #0]
 800b83c:	bd08      	pop	{r3, pc}
 800b83e:	bf00      	nop
 800b840:	200002b4 	.word	0x200002b4
 800b844:	2000023c 	.word	0x2000023c
 800b848:	2000076c 	.word	0x2000076c

0800b84c <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800b84c:	f009 b9e4 	b.w	8014c18 <std_msgs__msg__Header__init>

0800b850 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800b850:	f009 ba06 	b.w	8014c60 <std_msgs__msg__Header__fini>

0800b854 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800b854:	b508      	push	{r3, lr}
 800b856:	f000 fab1 	bl	800bdbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800b85a:	4b06      	ldr	r3, [pc, #24]	; (800b874 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800b85c:	4906      	ldr	r1, [pc, #24]	; (800b878 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	60c8      	str	r0, [r1, #12]
 800b862:	b10a      	cbz	r2, 800b868 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800b864:	4803      	ldr	r0, [pc, #12]	; (800b874 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800b866:	bd08      	pop	{r3, pc}
 800b868:	4a04      	ldr	r2, [pc, #16]	; (800b87c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800b86a:	4802      	ldr	r0, [pc, #8]	; (800b874 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800b86c:	6812      	ldr	r2, [r2, #0]
 800b86e:	601a      	str	r2, [r3, #0]
 800b870:	bd08      	pop	{r3, pc}
 800b872:	bf00      	nop
 800b874:	20000338 	.word	0x20000338
 800b878:	200002c0 	.word	0x200002c0
 800b87c:	2000076c 	.word	0x2000076c

0800b880 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 800b880:	6840      	ldr	r0, [r0, #4]
 800b882:	4770      	bx	lr

0800b884 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 800b884:	6800      	ldr	r0, [r0, #0]
 800b886:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b88a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b88e:	4770      	bx	lr

0800b890 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 800b890:	6803      	ldr	r3, [r0, #0]
 800b892:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b896:	b500      	push	{lr}
 800b898:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800b89c:	4694      	mov	ip, r2
 800b89e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b8a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b8a6:	f8de 3000 	ldr.w	r3, [lr]
 800b8aa:	f8cc 3000 	str.w	r3, [ip]
 800b8ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800b8b2:	bf00      	nop

0800b8b4 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 800b8b4:	6803      	ldr	r3, [r0, #0]
 800b8b6:	b500      	push	{lr}
 800b8b8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b8bc:	4696      	mov	lr, r2
 800b8be:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800b8c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b8c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b8ca:	f8de 3000 	ldr.w	r3, [lr]
 800b8ce:	f8cc 3000 	str.w	r3, [ip]
 800b8d2:	f85d fb04 	ldr.w	pc, [sp], #4
 800b8d6:	bf00      	nop

0800b8d8 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 800b8d8:	f009 ba58 	b.w	8014d8c <std_msgs__msg__MultiArrayLayout__init>

0800b8dc <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 800b8dc:	f009 ba68 	b.w	8014db0 <std_msgs__msg__MultiArrayLayout__fini>

0800b8e0 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 800b8e0:	b510      	push	{r4, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	9101      	str	r1, [sp, #4]
 800b8e8:	f009 fa28 	bl	8014d3c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800b8ec:	9901      	ldr	r1, [sp, #4]
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	b002      	add	sp, #8
 800b8f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8f6:	f009 ba1d 	b.w	8014d34 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 800b8fa:	bf00      	nop

0800b8fc <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 800b8fc:	6800      	ldr	r0, [r0, #0]
 800b8fe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b902:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b906:	4770      	bx	lr

0800b908 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800b908:	b508      	push	{r3, lr}
 800b90a:	f009 fa6f 	bl	8014dec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800b90e:	4b06      	ldr	r3, [pc, #24]	; (800b928 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800b910:	4906      	ldr	r1, [pc, #24]	; (800b92c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	60c8      	str	r0, [r1, #12]
 800b916:	b10a      	cbz	r2, 800b91c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 800b918:	4803      	ldr	r0, [pc, #12]	; (800b928 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800b91a:	bd08      	pop	{r3, pc}
 800b91c:	4a04      	ldr	r2, [pc, #16]	; (800b930 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 800b91e:	4802      	ldr	r0, [pc, #8]	; (800b928 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800b920:	6812      	ldr	r2, [r2, #0]
 800b922:	601a      	str	r2, [r3, #0]
 800b924:	bd08      	pop	{r3, pc}
 800b926:	bf00      	nop
 800b928:	200003bc 	.word	0x200003bc
 800b92c:	20000344 	.word	0x20000344
 800b930:	2000076c 	.word	0x2000076c

0800b934 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function>:
 800b934:	f009 ba40 	b.w	8014db8 <std_msgs__msg__String__init>

0800b938 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function>:
 800b938:	f009 ba50 	b.w	8014ddc <std_msgs__msg__String__fini>

0800b93c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String>:
 800b93c:	4b04      	ldr	r3, [pc, #16]	; (800b950 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	b10a      	cbz	r2, 800b946 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 800b942:	4803      	ldr	r0, [pc, #12]	; (800b950 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800b944:	4770      	bx	lr
 800b946:	4a03      	ldr	r2, [pc, #12]	; (800b954 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 800b948:	4801      	ldr	r0, [pc, #4]	; (800b950 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800b94a:	6812      	ldr	r2, [r2, #0]
 800b94c:	601a      	str	r2, [r3, #0]
 800b94e:	4770      	bx	lr
 800b950:	20000404 	.word	0x20000404
 800b954:	2000076c 	.word	0x2000076c

0800b958 <_Float32MultiArray__max_serialized_size>:
 800b958:	b500      	push	{lr}
 800b95a:	b083      	sub	sp, #12
 800b95c:	2301      	movs	r3, #1
 800b95e:	2100      	movs	r1, #0
 800b960:	f10d 0007 	add.w	r0, sp, #7
 800b964:	f88d 3007 	strb.w	r3, [sp, #7]
 800b968:	f000 f9b0 	bl	800bccc <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800b96c:	b003      	add	sp, #12
 800b96e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b972:	bf00      	nop

0800b974 <get_serialized_size_std_msgs__msg__Float32MultiArray>:
 800b974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b976:	4604      	mov	r4, r0
 800b978:	b160      	cbz	r0, 800b994 <get_serialized_size_std_msgs__msg__Float32MultiArray+0x20>
 800b97a:	460d      	mov	r5, r1
 800b97c:	f000 f94a 	bl	800bc14 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800b980:	182e      	adds	r6, r5, r0
 800b982:	4630      	mov	r0, r6
 800b984:	2104      	movs	r1, #4
 800b986:	6967      	ldr	r7, [r4, #20]
 800b988:	f002 fabe 	bl	800df08 <ucdr_alignment>
 800b98c:	1d03      	adds	r3, r0, #4
 800b98e:	441e      	add	r6, r3
 800b990:	b90f      	cbnz	r7, 800b996 <get_serialized_size_std_msgs__msg__Float32MultiArray+0x22>
 800b992:	1b70      	subs	r0, r6, r5
 800b994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b996:	4630      	mov	r0, r6
 800b998:	2104      	movs	r1, #4
 800b99a:	f002 fab5 	bl	800df08 <ucdr_alignment>
 800b99e:	eb06 0387 	add.w	r3, r6, r7, lsl #2
 800b9a2:	181e      	adds	r6, r3, r0
 800b9a4:	1b70      	subs	r0, r6, r5
 800b9a6:	e7f5      	b.n	800b994 <get_serialized_size_std_msgs__msg__Float32MultiArray+0x20>

0800b9a8 <_Float32MultiArray__cdr_deserialize>:
 800b9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9aa:	460c      	mov	r4, r1
 800b9ac:	b083      	sub	sp, #12
 800b9ae:	b1d1      	cbz	r1, 800b9e6 <_Float32MultiArray__cdr_deserialize+0x3e>
 800b9b0:	4606      	mov	r6, r0
 800b9b2:	f000 f995 	bl	800bce0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800b9b6:	6843      	ldr	r3, [r0, #4]
 800b9b8:	4621      	mov	r1, r4
 800b9ba:	68db      	ldr	r3, [r3, #12]
 800b9bc:	4630      	mov	r0, r6
 800b9be:	4798      	blx	r3
 800b9c0:	69a7      	ldr	r7, [r4, #24]
 800b9c2:	6921      	ldr	r1, [r4, #16]
 800b9c4:	ab01      	add	r3, sp, #4
 800b9c6:	463a      	mov	r2, r7
 800b9c8:	4630      	mov	r0, r6
 800b9ca:	f002 fb73 	bl	800e0b4 <ucdr_deserialize_sequence_float>
 800b9ce:	9b01      	ldr	r3, [sp, #4]
 800b9d0:	4605      	mov	r5, r0
 800b9d2:	b920      	cbnz	r0, 800b9de <_Float32MultiArray__cdr_deserialize+0x36>
 800b9d4:	429f      	cmp	r7, r3
 800b9d6:	d30a      	bcc.n	800b9ee <_Float32MultiArray__cdr_deserialize+0x46>
 800b9d8:	4628      	mov	r0, r5
 800b9da:	b003      	add	sp, #12
 800b9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9de:	4628      	mov	r0, r5
 800b9e0:	6163      	str	r3, [r4, #20]
 800b9e2:	b003      	add	sp, #12
 800b9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9e6:	460d      	mov	r5, r1
 800b9e8:	4628      	mov	r0, r5
 800b9ea:	b003      	add	sp, #12
 800b9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	75b0      	strb	r0, [r6, #22]
 800b9f2:	7573      	strb	r3, [r6, #21]
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	6165      	str	r5, [r4, #20]
 800b9f8:	2104      	movs	r1, #4
 800b9fa:	f002 fa9b 	bl	800df34 <ucdr_align_to>
 800b9fe:	9901      	ldr	r1, [sp, #4]
 800ba00:	4630      	mov	r0, r6
 800ba02:	0089      	lsls	r1, r1, #2
 800ba04:	f002 facc 	bl	800dfa0 <ucdr_advance_buffer>
 800ba08:	4628      	mov	r0, r5
 800ba0a:	b003      	add	sp, #12
 800ba0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba0e:	bf00      	nop

0800ba10 <_Float32MultiArray__cdr_serialize>:
 800ba10:	b180      	cbz	r0, 800ba34 <_Float32MultiArray__cdr_serialize+0x24>
 800ba12:	b538      	push	{r3, r4, r5, lr}
 800ba14:	460d      	mov	r5, r1
 800ba16:	4604      	mov	r4, r0
 800ba18:	f000 f962 	bl	800bce0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800ba1c:	6843      	ldr	r3, [r0, #4]
 800ba1e:	4629      	mov	r1, r5
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	4620      	mov	r0, r4
 800ba24:	4798      	blx	r3
 800ba26:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba30:	f002 bb2e 	b.w	800e090 <ucdr_serialize_sequence_float>
 800ba34:	4770      	bx	lr
 800ba36:	bf00      	nop

0800ba38 <_Float32MultiArray__get_serialized_size>:
 800ba38:	b570      	push	{r4, r5, r6, lr}
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	b150      	cbz	r0, 800ba54 <_Float32MultiArray__get_serialized_size+0x1c>
 800ba3e:	2100      	movs	r1, #0
 800ba40:	f000 f8e8 	bl	800bc14 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800ba44:	2104      	movs	r1, #4
 800ba46:	6966      	ldr	r6, [r4, #20]
 800ba48:	4605      	mov	r5, r0
 800ba4a:	f002 fa5d 	bl	800df08 <ucdr_alignment>
 800ba4e:	4428      	add	r0, r5
 800ba50:	1d04      	adds	r4, r0, #4
 800ba52:	b90e      	cbnz	r6, 800ba58 <_Float32MultiArray__get_serialized_size+0x20>
 800ba54:	4620      	mov	r0, r4
 800ba56:	bd70      	pop	{r4, r5, r6, pc}
 800ba58:	4620      	mov	r0, r4
 800ba5a:	2104      	movs	r1, #4
 800ba5c:	f002 fa54 	bl	800df08 <ucdr_alignment>
 800ba60:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800ba64:	4404      	add	r4, r0
 800ba66:	4620      	mov	r0, r4
 800ba68:	bd70      	pop	{r4, r5, r6, pc}
 800ba6a:	bf00      	nop

0800ba6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800ba6c:	4800      	ldr	r0, [pc, #0]	; (800ba70 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x4>)
 800ba6e:	4770      	bx	lr
 800ba70:	20000410 	.word	0x20000410

0800ba74 <_Header__max_serialized_size>:
 800ba74:	b500      	push	{lr}
 800ba76:	b083      	sub	sp, #12
 800ba78:	2301      	movs	r3, #1
 800ba7a:	2100      	movs	r1, #0
 800ba7c:	f10d 0007 	add.w	r0, sp, #7
 800ba80:	f88d 3007 	strb.w	r3, [sp, #7]
 800ba84:	f000 f9f8 	bl	800be78 <max_serialized_size_builtin_interfaces__msg__Time>
 800ba88:	b003      	add	sp, #12
 800ba8a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ba8e:	bf00      	nop

0800ba90 <get_serialized_size_std_msgs__msg__Header>:
 800ba90:	b570      	push	{r4, r5, r6, lr}
 800ba92:	4605      	mov	r5, r0
 800ba94:	b168      	cbz	r0, 800bab2 <get_serialized_size_std_msgs__msg__Header+0x22>
 800ba96:	460c      	mov	r4, r1
 800ba98:	f000 f99e 	bl	800bdd8 <get_serialized_size_builtin_interfaces__msg__Time>
 800ba9c:	1826      	adds	r6, r4, r0
 800ba9e:	2104      	movs	r1, #4
 800baa0:	4630      	mov	r0, r6
 800baa2:	f002 fa31 	bl	800df08 <ucdr_alignment>
 800baa6:	68e9      	ldr	r1, [r5, #12]
 800baa8:	f1c4 0405 	rsb	r4, r4, #5
 800baac:	440c      	add	r4, r1
 800baae:	4404      	add	r4, r0
 800bab0:	19a0      	adds	r0, r4, r6
 800bab2:	bd70      	pop	{r4, r5, r6, pc}

0800bab4 <_Header__cdr_deserialize>:
 800bab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bab6:	460c      	mov	r4, r1
 800bab8:	b083      	sub	sp, #12
 800baba:	b1e1      	cbz	r1, 800baf6 <_Header__cdr_deserialize+0x42>
 800babc:	4606      	mov	r6, r0
 800babe:	f000 f9ef 	bl	800bea0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800bac2:	6843      	ldr	r3, [r0, #4]
 800bac4:	4621      	mov	r1, r4
 800bac6:	68db      	ldr	r3, [r3, #12]
 800bac8:	4630      	mov	r0, r6
 800baca:	4798      	blx	r3
 800bacc:	6927      	ldr	r7, [r4, #16]
 800bace:	68a1      	ldr	r1, [r4, #8]
 800bad0:	ab01      	add	r3, sp, #4
 800bad2:	463a      	mov	r2, r7
 800bad4:	4630      	mov	r0, r6
 800bad6:	f002 fa95 	bl	800e004 <ucdr_deserialize_sequence_char>
 800bada:	9b01      	ldr	r3, [sp, #4]
 800badc:	4605      	mov	r5, r0
 800bade:	b920      	cbnz	r0, 800baea <_Header__cdr_deserialize+0x36>
 800bae0:	429f      	cmp	r7, r3
 800bae2:	d30c      	bcc.n	800bafe <_Header__cdr_deserialize+0x4a>
 800bae4:	4628      	mov	r0, r5
 800bae6:	b003      	add	sp, #12
 800bae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baea:	b103      	cbz	r3, 800baee <_Header__cdr_deserialize+0x3a>
 800baec:	3b01      	subs	r3, #1
 800baee:	4628      	mov	r0, r5
 800baf0:	60e3      	str	r3, [r4, #12]
 800baf2:	b003      	add	sp, #12
 800baf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baf6:	460d      	mov	r5, r1
 800baf8:	4628      	mov	r0, r5
 800bafa:	b003      	add	sp, #12
 800bafc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bafe:	2101      	movs	r1, #1
 800bb00:	75b0      	strb	r0, [r6, #22]
 800bb02:	7571      	strb	r1, [r6, #21]
 800bb04:	4630      	mov	r0, r6
 800bb06:	60e5      	str	r5, [r4, #12]
 800bb08:	f002 fa14 	bl	800df34 <ucdr_align_to>
 800bb0c:	4630      	mov	r0, r6
 800bb0e:	9901      	ldr	r1, [sp, #4]
 800bb10:	f002 fa46 	bl	800dfa0 <ucdr_advance_buffer>
 800bb14:	4628      	mov	r0, r5
 800bb16:	b003      	add	sp, #12
 800bb18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb1a:	bf00      	nop

0800bb1c <_Header__cdr_serialize>:
 800bb1c:	b1f8      	cbz	r0, 800bb5e <_Header__cdr_serialize+0x42>
 800bb1e:	b570      	push	{r4, r5, r6, lr}
 800bb20:	4604      	mov	r4, r0
 800bb22:	460d      	mov	r5, r1
 800bb24:	f000 f9bc 	bl	800bea0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800bb28:	6843      	ldr	r3, [r0, #4]
 800bb2a:	4629      	mov	r1, r5
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	4620      	mov	r0, r4
 800bb30:	4798      	blx	r3
 800bb32:	68a6      	ldr	r6, [r4, #8]
 800bb34:	b156      	cbz	r6, 800bb4c <_Header__cdr_serialize+0x30>
 800bb36:	4630      	mov	r0, r6
 800bb38:	f7f4 fb74 	bl	8000224 <strlen>
 800bb3c:	4631      	mov	r1, r6
 800bb3e:	60e0      	str	r0, [r4, #12]
 800bb40:	1c42      	adds	r2, r0, #1
 800bb42:	4628      	mov	r0, r5
 800bb44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb48:	f002 ba4a 	b.w	800dfe0 <ucdr_serialize_sequence_char>
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	60e0      	str	r0, [r4, #12]
 800bb50:	4632      	mov	r2, r6
 800bb52:	4631      	mov	r1, r6
 800bb54:	4628      	mov	r0, r5
 800bb56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb5a:	f002 ba41 	b.w	800dfe0 <ucdr_serialize_sequence_char>
 800bb5e:	4770      	bx	lr

0800bb60 <_Header__get_serialized_size>:
 800bb60:	b538      	push	{r3, r4, r5, lr}
 800bb62:	4604      	mov	r4, r0
 800bb64:	b150      	cbz	r0, 800bb7c <_Header__get_serialized_size+0x1c>
 800bb66:	2100      	movs	r1, #0
 800bb68:	f000 f936 	bl	800bdd8 <get_serialized_size_builtin_interfaces__msg__Time>
 800bb6c:	2104      	movs	r1, #4
 800bb6e:	4605      	mov	r5, r0
 800bb70:	f002 f9ca 	bl	800df08 <ucdr_alignment>
 800bb74:	68e2      	ldr	r2, [r4, #12]
 800bb76:	3205      	adds	r2, #5
 800bb78:	1953      	adds	r3, r2, r5
 800bb7a:	4418      	add	r0, r3
 800bb7c:	bd38      	pop	{r3, r4, r5, pc}
 800bb7e:	bf00      	nop

0800bb80 <max_serialized_size_std_msgs__msg__Header>:
 800bb80:	b510      	push	{r4, lr}
 800bb82:	2301      	movs	r3, #1
 800bb84:	4604      	mov	r4, r0
 800bb86:	7003      	strb	r3, [r0, #0]
 800bb88:	f000 f976 	bl	800be78 <max_serialized_size_builtin_interfaces__msg__Time>
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	7023      	strb	r3, [r4, #0]
 800bb90:	bd10      	pop	{r4, pc}
 800bb92:	bf00      	nop

0800bb94 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800bb94:	4800      	ldr	r0, [pc, #0]	; (800bb98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800bb96:	4770      	bx	lr
 800bb98:	20000438 	.word	0x20000438

0800bb9c <_MultiArrayLayout__max_serialized_size>:
 800bb9c:	b508      	push	{r3, lr}
 800bb9e:	2104      	movs	r1, #4
 800bba0:	2000      	movs	r0, #0
 800bba2:	f002 f9b1 	bl	800df08 <ucdr_alignment>
 800bba6:	3004      	adds	r0, #4
 800bba8:	bd08      	pop	{r3, pc}
 800bbaa:	bf00      	nop

0800bbac <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 800bbac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbb0:	4689      	mov	r9, r1
 800bbb2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800bbb6:	4607      	mov	r7, r0
 800bbb8:	2104      	movs	r1, #4
 800bbba:	4648      	mov	r0, r9
 800bbbc:	f002 f9a4 	bl	800df08 <ucdr_alignment>
 800bbc0:	f109 0304 	add.w	r3, r9, #4
 800bbc4:	18c6      	adds	r6, r0, r3
 800bbc6:	f1b8 0f00 	cmp.w	r8, #0
 800bbca:	d018      	beq.n	800bbfe <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 800bbcc:	2500      	movs	r5, #0
 800bbce:	f009 f9ab 	bl	8014f28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800bbd2:	683a      	ldr	r2, [r7, #0]
 800bbd4:	6843      	ldr	r3, [r0, #4]
 800bbd6:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800bbda:	4631      	mov	r1, r6
 800bbdc:	695b      	ldr	r3, [r3, #20]
 800bbde:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800bbe2:	4798      	blx	r3
 800bbe4:	4604      	mov	r4, r0
 800bbe6:	2c04      	cmp	r4, #4
 800bbe8:	4621      	mov	r1, r4
 800bbea:	4630      	mov	r0, r6
 800bbec:	bf28      	it	cs
 800bbee:	2104      	movcs	r1, #4
 800bbf0:	f002 f98a 	bl	800df08 <ucdr_alignment>
 800bbf4:	3501      	adds	r5, #1
 800bbf6:	4404      	add	r4, r0
 800bbf8:	45a8      	cmp	r8, r5
 800bbfa:	4426      	add	r6, r4
 800bbfc:	d1e7      	bne.n	800bbce <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 800bbfe:	2104      	movs	r1, #4
 800bc00:	4630      	mov	r0, r6
 800bc02:	f002 f981 	bl	800df08 <ucdr_alignment>
 800bc06:	f1c9 0904 	rsb	r9, r9, #4
 800bc0a:	444e      	add	r6, r9
 800bc0c:	4430      	add	r0, r6
 800bc0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc12:	bf00      	nop

0800bc14 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800bc14:	b108      	cbz	r0, 800bc1a <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 800bc16:	f7ff bfc9 	b.w	800bbac <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800bc1a:	4770      	bx	lr

0800bc1c <_MultiArrayLayout__get_serialized_size>:
 800bc1c:	b110      	cbz	r0, 800bc24 <_MultiArrayLayout__get_serialized_size+0x8>
 800bc1e:	2100      	movs	r1, #0
 800bc20:	f7ff bfc4 	b.w	800bbac <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800bc24:	4770      	bx	lr
 800bc26:	bf00      	nop

0800bc28 <_MultiArrayLayout__cdr_deserialize>:
 800bc28:	b349      	cbz	r1, 800bc7e <_MultiArrayLayout__cdr_deserialize+0x56>
 800bc2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc2c:	460e      	mov	r6, r1
 800bc2e:	b083      	sub	sp, #12
 800bc30:	a901      	add	r1, sp, #4
 800bc32:	4607      	mov	r7, r0
 800bc34:	f001 f898 	bl	800cd68 <ucdr_deserialize_uint32_t>
 800bc38:	9b01      	ldr	r3, [sp, #4]
 800bc3a:	68b2      	ldr	r2, [r6, #8]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d31b      	bcc.n	800bc78 <_MultiArrayLayout__cdr_deserialize+0x50>
 800bc40:	6073      	str	r3, [r6, #4]
 800bc42:	b18b      	cbz	r3, 800bc68 <_MultiArrayLayout__cdr_deserialize+0x40>
 800bc44:	2400      	movs	r4, #0
 800bc46:	4625      	mov	r5, r4
 800bc48:	e002      	b.n	800bc50 <_MultiArrayLayout__cdr_deserialize+0x28>
 800bc4a:	9b01      	ldr	r3, [sp, #4]
 800bc4c:	429d      	cmp	r5, r3
 800bc4e:	d20b      	bcs.n	800bc68 <_MultiArrayLayout__cdr_deserialize+0x40>
 800bc50:	f009 f96a 	bl	8014f28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800bc54:	6831      	ldr	r1, [r6, #0]
 800bc56:	6843      	ldr	r3, [r0, #4]
 800bc58:	4421      	add	r1, r4
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	4638      	mov	r0, r7
 800bc5e:	4798      	blx	r3
 800bc60:	3501      	adds	r5, #1
 800bc62:	3414      	adds	r4, #20
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d1f0      	bne.n	800bc4a <_MultiArrayLayout__cdr_deserialize+0x22>
 800bc68:	f106 010c 	add.w	r1, r6, #12
 800bc6c:	4638      	mov	r0, r7
 800bc6e:	b003      	add	sp, #12
 800bc70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bc74:	f001 b878 	b.w	800cd68 <ucdr_deserialize_uint32_t>
 800bc78:	2000      	movs	r0, #0
 800bc7a:	b003      	add	sp, #12
 800bc7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc7e:	2000      	movs	r0, #0
 800bc80:	4770      	bx	lr
 800bc82:	bf00      	nop

0800bc84 <_MultiArrayLayout__cdr_serialize>:
 800bc84:	b308      	cbz	r0, 800bcca <_MultiArrayLayout__cdr_serialize+0x46>
 800bc86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc88:	6847      	ldr	r7, [r0, #4]
 800bc8a:	460e      	mov	r6, r1
 800bc8c:	4605      	mov	r5, r0
 800bc8e:	4608      	mov	r0, r1
 800bc90:	4639      	mov	r1, r7
 800bc92:	f000 ff39 	bl	800cb08 <ucdr_serialize_uint32_t>
 800bc96:	b190      	cbz	r0, 800bcbe <_MultiArrayLayout__cdr_serialize+0x3a>
 800bc98:	b18f      	cbz	r7, 800bcbe <_MultiArrayLayout__cdr_serialize+0x3a>
 800bc9a:	2400      	movs	r4, #0
 800bc9c:	e001      	b.n	800bca2 <_MultiArrayLayout__cdr_serialize+0x1e>
 800bc9e:	42a7      	cmp	r7, r4
 800bca0:	d00d      	beq.n	800bcbe <_MultiArrayLayout__cdr_serialize+0x3a>
 800bca2:	f009 f941 	bl	8014f28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800bca6:	682a      	ldr	r2, [r5, #0]
 800bca8:	6843      	ldr	r3, [r0, #4]
 800bcaa:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 800bcae:	689b      	ldr	r3, [r3, #8]
 800bcb0:	4631      	mov	r1, r6
 800bcb2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800bcb6:	3401      	adds	r4, #1
 800bcb8:	4798      	blx	r3
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	d1ef      	bne.n	800bc9e <_MultiArrayLayout__cdr_serialize+0x1a>
 800bcbe:	68e9      	ldr	r1, [r5, #12]
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bcc6:	f000 bf1f 	b.w	800cb08 <ucdr_serialize_uint32_t>
 800bcca:	4770      	bx	lr

0800bccc <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800bccc:	b508      	push	{r3, lr}
 800bcce:	4603      	mov	r3, r0
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	4608      	mov	r0, r1
 800bcd4:	701a      	strb	r2, [r3, #0]
 800bcd6:	2104      	movs	r1, #4
 800bcd8:	f002 f916 	bl	800df08 <ucdr_alignment>
 800bcdc:	3004      	adds	r0, #4
 800bcde:	bd08      	pop	{r3, pc}

0800bce0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800bce0:	4800      	ldr	r0, [pc, #0]	; (800bce4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 800bce2:	4770      	bx	lr
 800bce4:	20000460 	.word	0x20000460

0800bce8 <_String__max_serialized_size>:
 800bce8:	2000      	movs	r0, #0
 800bcea:	4770      	bx	lr

0800bcec <_String__cdr_serialize>:
 800bcec:	b1c0      	cbz	r0, 800bd20 <_String__cdr_serialize+0x34>
 800bcee:	b570      	push	{r4, r5, r6, lr}
 800bcf0:	6806      	ldr	r6, [r0, #0]
 800bcf2:	460d      	mov	r5, r1
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	b156      	cbz	r6, 800bd0e <_String__cdr_serialize+0x22>
 800bcf8:	4630      	mov	r0, r6
 800bcfa:	f7f4 fa93 	bl	8000224 <strlen>
 800bcfe:	4631      	mov	r1, r6
 800bd00:	6060      	str	r0, [r4, #4]
 800bd02:	1c42      	adds	r2, r0, #1
 800bd04:	4628      	mov	r0, r5
 800bd06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd0a:	f002 b969 	b.w	800dfe0 <ucdr_serialize_sequence_char>
 800bd0e:	4630      	mov	r0, r6
 800bd10:	6060      	str	r0, [r4, #4]
 800bd12:	4632      	mov	r2, r6
 800bd14:	4631      	mov	r1, r6
 800bd16:	4628      	mov	r0, r5
 800bd18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd1c:	f002 b960 	b.w	800dfe0 <ucdr_serialize_sequence_char>
 800bd20:	4770      	bx	lr
 800bd22:	bf00      	nop

0800bd24 <get_serialized_size_std_msgs__msg__String>:
 800bd24:	b510      	push	{r4, lr}
 800bd26:	4604      	mov	r4, r0
 800bd28:	b138      	cbz	r0, 800bd3a <get_serialized_size_std_msgs__msg__String+0x16>
 800bd2a:	460b      	mov	r3, r1
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	2104      	movs	r1, #4
 800bd30:	f002 f8ea 	bl	800df08 <ucdr_alignment>
 800bd34:	6863      	ldr	r3, [r4, #4]
 800bd36:	3305      	adds	r3, #5
 800bd38:	4418      	add	r0, r3
 800bd3a:	bd10      	pop	{r4, pc}

0800bd3c <_String__cdr_deserialize>:
 800bd3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd3e:	460c      	mov	r4, r1
 800bd40:	b083      	sub	sp, #12
 800bd42:	b1a1      	cbz	r1, 800bd6e <_String__cdr_deserialize+0x32>
 800bd44:	688f      	ldr	r7, [r1, #8]
 800bd46:	6809      	ldr	r1, [r1, #0]
 800bd48:	ab01      	add	r3, sp, #4
 800bd4a:	463a      	mov	r2, r7
 800bd4c:	4606      	mov	r6, r0
 800bd4e:	f002 f959 	bl	800e004 <ucdr_deserialize_sequence_char>
 800bd52:	9b01      	ldr	r3, [sp, #4]
 800bd54:	4605      	mov	r5, r0
 800bd56:	b920      	cbnz	r0, 800bd62 <_String__cdr_deserialize+0x26>
 800bd58:	429f      	cmp	r7, r3
 800bd5a:	d30c      	bcc.n	800bd76 <_String__cdr_deserialize+0x3a>
 800bd5c:	4628      	mov	r0, r5
 800bd5e:	b003      	add	sp, #12
 800bd60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd62:	b103      	cbz	r3, 800bd66 <_String__cdr_deserialize+0x2a>
 800bd64:	3b01      	subs	r3, #1
 800bd66:	4628      	mov	r0, r5
 800bd68:	6063      	str	r3, [r4, #4]
 800bd6a:	b003      	add	sp, #12
 800bd6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd6e:	460d      	mov	r5, r1
 800bd70:	4628      	mov	r0, r5
 800bd72:	b003      	add	sp, #12
 800bd74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd76:	2101      	movs	r1, #1
 800bd78:	75b0      	strb	r0, [r6, #22]
 800bd7a:	7571      	strb	r1, [r6, #21]
 800bd7c:	4630      	mov	r0, r6
 800bd7e:	6065      	str	r5, [r4, #4]
 800bd80:	f002 f8d8 	bl	800df34 <ucdr_align_to>
 800bd84:	4630      	mov	r0, r6
 800bd86:	9901      	ldr	r1, [sp, #4]
 800bd88:	f002 f90a 	bl	800dfa0 <ucdr_advance_buffer>
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	b003      	add	sp, #12
 800bd90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd92:	bf00      	nop

0800bd94 <_String__get_serialized_size>:
 800bd94:	b510      	push	{r4, lr}
 800bd96:	4604      	mov	r4, r0
 800bd98:	b130      	cbz	r0, 800bda8 <_String__get_serialized_size+0x14>
 800bd9a:	2104      	movs	r1, #4
 800bd9c:	2000      	movs	r0, #0
 800bd9e:	f002 f8b3 	bl	800df08 <ucdr_alignment>
 800bda2:	6863      	ldr	r3, [r4, #4]
 800bda4:	3305      	adds	r3, #5
 800bda6:	4418      	add	r0, r3
 800bda8:	bd10      	pop	{r4, pc}
 800bdaa:	bf00      	nop

0800bdac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 800bdac:	4800      	ldr	r0, [pc, #0]	; (800bdb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 800bdae:	4770      	bx	lr
 800bdb0:	20000488 	.word	0x20000488

0800bdb4 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800bdb4:	f009 b8bc 	b.w	8014f30 <builtin_interfaces__msg__Time__init>

0800bdb8 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800bdb8:	f009 b8be 	b.w	8014f38 <builtin_interfaces__msg__Time__fini>

0800bdbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800bdbc:	4b04      	ldr	r3, [pc, #16]	; (800bdd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	b10a      	cbz	r2, 800bdc6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800bdc2:	4803      	ldr	r0, [pc, #12]	; (800bdd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800bdc4:	4770      	bx	lr
 800bdc6:	4a03      	ldr	r2, [pc, #12]	; (800bdd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800bdc8:	4801      	ldr	r0, [pc, #4]	; (800bdd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800bdca:	6812      	ldr	r2, [r2, #0]
 800bdcc:	601a      	str	r2, [r3, #0]
 800bdce:	4770      	bx	lr
 800bdd0:	20000528 	.word	0x20000528
 800bdd4:	2000076c 	.word	0x2000076c

0800bdd8 <get_serialized_size_builtin_interfaces__msg__Time>:
 800bdd8:	b180      	cbz	r0, 800bdfc <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800bdda:	b538      	push	{r3, r4, r5, lr}
 800bddc:	460d      	mov	r5, r1
 800bdde:	4628      	mov	r0, r5
 800bde0:	2104      	movs	r1, #4
 800bde2:	f002 f891 	bl	800df08 <ucdr_alignment>
 800bde6:	1d2b      	adds	r3, r5, #4
 800bde8:	181c      	adds	r4, r3, r0
 800bdea:	2104      	movs	r1, #4
 800bdec:	4620      	mov	r0, r4
 800bdee:	f002 f88b 	bl	800df08 <ucdr_alignment>
 800bdf2:	f1c5 0504 	rsb	r5, r5, #4
 800bdf6:	4428      	add	r0, r5
 800bdf8:	4420      	add	r0, r4
 800bdfa:	bd38      	pop	{r3, r4, r5, pc}
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop

0800be00 <_Time__cdr_deserialize>:
 800be00:	b538      	push	{r3, r4, r5, lr}
 800be02:	460c      	mov	r4, r1
 800be04:	b141      	cbz	r1, 800be18 <_Time__cdr_deserialize+0x18>
 800be06:	4605      	mov	r5, r0
 800be08:	f001 fb30 	bl	800d46c <ucdr_deserialize_int32_t>
 800be0c:	1d21      	adds	r1, r4, #4
 800be0e:	4628      	mov	r0, r5
 800be10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be14:	f000 bfa8 	b.w	800cd68 <ucdr_deserialize_uint32_t>
 800be18:	4608      	mov	r0, r1
 800be1a:	bd38      	pop	{r3, r4, r5, pc}

0800be1c <_Time__cdr_serialize>:
 800be1c:	b160      	cbz	r0, 800be38 <_Time__cdr_serialize+0x1c>
 800be1e:	b538      	push	{r3, r4, r5, lr}
 800be20:	460d      	mov	r5, r1
 800be22:	4604      	mov	r4, r0
 800be24:	6801      	ldr	r1, [r0, #0]
 800be26:	4628      	mov	r0, r5
 800be28:	f001 fa88 	bl	800d33c <ucdr_serialize_int32_t>
 800be2c:	6861      	ldr	r1, [r4, #4]
 800be2e:	4628      	mov	r0, r5
 800be30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be34:	f000 be68 	b.w	800cb08 <ucdr_serialize_uint32_t>
 800be38:	4770      	bx	lr
 800be3a:	bf00      	nop

0800be3c <_Time__get_serialized_size>:
 800be3c:	b160      	cbz	r0, 800be58 <_Time__get_serialized_size+0x1c>
 800be3e:	b510      	push	{r4, lr}
 800be40:	2104      	movs	r1, #4
 800be42:	2000      	movs	r0, #0
 800be44:	f002 f860 	bl	800df08 <ucdr_alignment>
 800be48:	1d04      	adds	r4, r0, #4
 800be4a:	2104      	movs	r1, #4
 800be4c:	4620      	mov	r0, r4
 800be4e:	f002 f85b 	bl	800df08 <ucdr_alignment>
 800be52:	3004      	adds	r0, #4
 800be54:	4420      	add	r0, r4
 800be56:	bd10      	pop	{r4, pc}
 800be58:	4770      	bx	lr
 800be5a:	bf00      	nop

0800be5c <_Time__max_serialized_size>:
 800be5c:	b510      	push	{r4, lr}
 800be5e:	2104      	movs	r1, #4
 800be60:	2000      	movs	r0, #0
 800be62:	f002 f851 	bl	800df08 <ucdr_alignment>
 800be66:	1d04      	adds	r4, r0, #4
 800be68:	2104      	movs	r1, #4
 800be6a:	4620      	mov	r0, r4
 800be6c:	f002 f84c 	bl	800df08 <ucdr_alignment>
 800be70:	3004      	adds	r0, #4
 800be72:	4420      	add	r0, r4
 800be74:	bd10      	pop	{r4, pc}
 800be76:	bf00      	nop

0800be78 <max_serialized_size_builtin_interfaces__msg__Time>:
 800be78:	b538      	push	{r3, r4, r5, lr}
 800be7a:	460c      	mov	r4, r1
 800be7c:	2301      	movs	r3, #1
 800be7e:	7003      	strb	r3, [r0, #0]
 800be80:	2104      	movs	r1, #4
 800be82:	4620      	mov	r0, r4
 800be84:	f002 f840 	bl	800df08 <ucdr_alignment>
 800be88:	1d25      	adds	r5, r4, #4
 800be8a:	4405      	add	r5, r0
 800be8c:	2104      	movs	r1, #4
 800be8e:	4628      	mov	r0, r5
 800be90:	f002 f83a 	bl	800df08 <ucdr_alignment>
 800be94:	f1c4 0404 	rsb	r4, r4, #4
 800be98:	4420      	add	r0, r4
 800be9a:	4428      	add	r0, r5
 800be9c:	bd38      	pop	{r3, r4, r5, pc}
 800be9e:	bf00      	nop

0800bea0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800bea0:	4800      	ldr	r0, [pc, #0]	; (800bea4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800bea2:	4770      	bx	lr
 800bea4:	20000534 	.word	0x20000534

0800bea8 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 800bea8:	f009 b84a 	b.w	8014f40 <geometry_msgs__msg__Quaternion__init>

0800beac <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 800beac:	f009 b85c 	b.w	8014f68 <geometry_msgs__msg__Quaternion__fini>

0800beb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800beb0:	4b04      	ldr	r3, [pc, #16]	; (800bec4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	b10a      	cbz	r2, 800beba <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 800beb6:	4803      	ldr	r0, [pc, #12]	; (800bec4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800beb8:	4770      	bx	lr
 800beba:	4a03      	ldr	r2, [pc, #12]	; (800bec8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 800bebc:	4801      	ldr	r0, [pc, #4]	; (800bec4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800bebe:	6812      	ldr	r2, [r2, #0]
 800bec0:	601a      	str	r2, [r3, #0]
 800bec2:	4770      	bx	lr
 800bec4:	2000064c 	.word	0x2000064c
 800bec8:	2000076c 	.word	0x2000076c

0800becc <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800becc:	f009 b84e 	b.w	8014f6c <geometry_msgs__msg__Vector3__init>

0800bed0 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800bed0:	f009 b850 	b.w	8014f74 <geometry_msgs__msg__Vector3__fini>

0800bed4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800bed4:	4b04      	ldr	r3, [pc, #16]	; (800bee8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	b10a      	cbz	r2, 800bede <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800beda:	4803      	ldr	r0, [pc, #12]	; (800bee8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800bedc:	4770      	bx	lr
 800bede:	4a03      	ldr	r2, [pc, #12]	; (800beec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800bee0:	4801      	ldr	r0, [pc, #4]	; (800bee8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800bee2:	6812      	ldr	r2, [r2, #0]
 800bee4:	601a      	str	r2, [r3, #0]
 800bee6:	4770      	bx	lr
 800bee8:	2000070c 	.word	0x2000070c
 800beec:	2000076c 	.word	0x2000076c

0800bef0 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 800bef0:	b1f0      	cbz	r0, 800bf30 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 800bef2:	b570      	push	{r4, r5, r6, lr}
 800bef4:	460d      	mov	r5, r1
 800bef6:	4628      	mov	r0, r5
 800bef8:	2108      	movs	r1, #8
 800befa:	f002 f805 	bl	800df08 <ucdr_alignment>
 800befe:	f105 0308 	add.w	r3, r5, #8
 800bf02:	181e      	adds	r6, r3, r0
 800bf04:	2108      	movs	r1, #8
 800bf06:	4630      	mov	r0, r6
 800bf08:	f001 fffe 	bl	800df08 <ucdr_alignment>
 800bf0c:	f100 0408 	add.w	r4, r0, #8
 800bf10:	4434      	add	r4, r6
 800bf12:	2108      	movs	r1, #8
 800bf14:	4620      	mov	r0, r4
 800bf16:	f001 fff7 	bl	800df08 <ucdr_alignment>
 800bf1a:	3008      	adds	r0, #8
 800bf1c:	4404      	add	r4, r0
 800bf1e:	2108      	movs	r1, #8
 800bf20:	4620      	mov	r0, r4
 800bf22:	f001 fff1 	bl	800df08 <ucdr_alignment>
 800bf26:	f1c5 0508 	rsb	r5, r5, #8
 800bf2a:	4428      	add	r0, r5
 800bf2c:	4420      	add	r0, r4
 800bf2e:	bd70      	pop	{r4, r5, r6, pc}
 800bf30:	4770      	bx	lr
 800bf32:	bf00      	nop

0800bf34 <_Quaternion__cdr_deserialize>:
 800bf34:	b538      	push	{r3, r4, r5, lr}
 800bf36:	460c      	mov	r4, r1
 800bf38:	b199      	cbz	r1, 800bf62 <_Quaternion__cdr_deserialize+0x2e>
 800bf3a:	4605      	mov	r5, r0
 800bf3c:	f001 fdf8 	bl	800db30 <ucdr_deserialize_double>
 800bf40:	f104 0108 	add.w	r1, r4, #8
 800bf44:	4628      	mov	r0, r5
 800bf46:	f001 fdf3 	bl	800db30 <ucdr_deserialize_double>
 800bf4a:	f104 0110 	add.w	r1, r4, #16
 800bf4e:	4628      	mov	r0, r5
 800bf50:	f001 fdee 	bl	800db30 <ucdr_deserialize_double>
 800bf54:	f104 0118 	add.w	r1, r4, #24
 800bf58:	4628      	mov	r0, r5
 800bf5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf5e:	f001 bde7 	b.w	800db30 <ucdr_deserialize_double>
 800bf62:	4608      	mov	r0, r1
 800bf64:	bd38      	pop	{r3, r4, r5, pc}
 800bf66:	bf00      	nop

0800bf68 <_Quaternion__cdr_serialize>:
 800bf68:	b1c0      	cbz	r0, 800bf9c <_Quaternion__cdr_serialize+0x34>
 800bf6a:	b538      	push	{r3, r4, r5, lr}
 800bf6c:	ed90 0b00 	vldr	d0, [r0]
 800bf70:	460d      	mov	r5, r1
 800bf72:	4604      	mov	r4, r0
 800bf74:	4608      	mov	r0, r1
 800bf76:	f001 fc39 	bl	800d7ec <ucdr_serialize_double>
 800bf7a:	ed94 0b02 	vldr	d0, [r4, #8]
 800bf7e:	4628      	mov	r0, r5
 800bf80:	f001 fc34 	bl	800d7ec <ucdr_serialize_double>
 800bf84:	ed94 0b04 	vldr	d0, [r4, #16]
 800bf88:	4628      	mov	r0, r5
 800bf8a:	f001 fc2f 	bl	800d7ec <ucdr_serialize_double>
 800bf8e:	ed94 0b06 	vldr	d0, [r4, #24]
 800bf92:	4628      	mov	r0, r5
 800bf94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf98:	f001 bc28 	b.w	800d7ec <ucdr_serialize_double>
 800bf9c:	4770      	bx	lr
 800bf9e:	bf00      	nop

0800bfa0 <_Quaternion__get_serialized_size>:
 800bfa0:	b1d0      	cbz	r0, 800bfd8 <_Quaternion__get_serialized_size+0x38>
 800bfa2:	b538      	push	{r3, r4, r5, lr}
 800bfa4:	2108      	movs	r1, #8
 800bfa6:	2000      	movs	r0, #0
 800bfa8:	f001 ffae 	bl	800df08 <ucdr_alignment>
 800bfac:	f100 0508 	add.w	r5, r0, #8
 800bfb0:	2108      	movs	r1, #8
 800bfb2:	4628      	mov	r0, r5
 800bfb4:	f001 ffa8 	bl	800df08 <ucdr_alignment>
 800bfb8:	f100 0408 	add.w	r4, r0, #8
 800bfbc:	442c      	add	r4, r5
 800bfbe:	2108      	movs	r1, #8
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	f001 ffa1 	bl	800df08 <ucdr_alignment>
 800bfc6:	3008      	adds	r0, #8
 800bfc8:	4404      	add	r4, r0
 800bfca:	2108      	movs	r1, #8
 800bfcc:	4620      	mov	r0, r4
 800bfce:	f001 ff9b 	bl	800df08 <ucdr_alignment>
 800bfd2:	3008      	adds	r0, #8
 800bfd4:	4420      	add	r0, r4
 800bfd6:	bd38      	pop	{r3, r4, r5, pc}
 800bfd8:	4770      	bx	lr
 800bfda:	bf00      	nop

0800bfdc <_Quaternion__max_serialized_size>:
 800bfdc:	b538      	push	{r3, r4, r5, lr}
 800bfde:	2108      	movs	r1, #8
 800bfe0:	2000      	movs	r0, #0
 800bfe2:	f001 ff91 	bl	800df08 <ucdr_alignment>
 800bfe6:	f100 0508 	add.w	r5, r0, #8
 800bfea:	2108      	movs	r1, #8
 800bfec:	4628      	mov	r0, r5
 800bfee:	f001 ff8b 	bl	800df08 <ucdr_alignment>
 800bff2:	f100 0408 	add.w	r4, r0, #8
 800bff6:	442c      	add	r4, r5
 800bff8:	2108      	movs	r1, #8
 800bffa:	4620      	mov	r0, r4
 800bffc:	f001 ff84 	bl	800df08 <ucdr_alignment>
 800c000:	3008      	adds	r0, #8
 800c002:	4404      	add	r4, r0
 800c004:	2108      	movs	r1, #8
 800c006:	4620      	mov	r0, r4
 800c008:	f001 ff7e 	bl	800df08 <ucdr_alignment>
 800c00c:	3008      	adds	r0, #8
 800c00e:	4420      	add	r0, r4
 800c010:	bd38      	pop	{r3, r4, r5, pc}
 800c012:	bf00      	nop

0800c014 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 800c014:	b570      	push	{r4, r5, r6, lr}
 800c016:	2301      	movs	r3, #1
 800c018:	460c      	mov	r4, r1
 800c01a:	7003      	strb	r3, [r0, #0]
 800c01c:	2108      	movs	r1, #8
 800c01e:	4620      	mov	r0, r4
 800c020:	f001 ff72 	bl	800df08 <ucdr_alignment>
 800c024:	f104 0508 	add.w	r5, r4, #8
 800c028:	1946      	adds	r6, r0, r5
 800c02a:	2108      	movs	r1, #8
 800c02c:	4630      	mov	r0, r6
 800c02e:	f001 ff6b 	bl	800df08 <ucdr_alignment>
 800c032:	f100 0508 	add.w	r5, r0, #8
 800c036:	4435      	add	r5, r6
 800c038:	2108      	movs	r1, #8
 800c03a:	4628      	mov	r0, r5
 800c03c:	f001 ff64 	bl	800df08 <ucdr_alignment>
 800c040:	3008      	adds	r0, #8
 800c042:	4405      	add	r5, r0
 800c044:	2108      	movs	r1, #8
 800c046:	4628      	mov	r0, r5
 800c048:	f001 ff5e 	bl	800df08 <ucdr_alignment>
 800c04c:	f1c4 0408 	rsb	r4, r4, #8
 800c050:	4420      	add	r0, r4
 800c052:	4428      	add	r0, r5
 800c054:	bd70      	pop	{r4, r5, r6, pc}
 800c056:	bf00      	nop

0800c058 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800c058:	4800      	ldr	r0, [pc, #0]	; (800c05c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 800c05a:	4770      	bx	lr
 800c05c:	20000718 	.word	0x20000718

0800c060 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800c060:	b1b8      	cbz	r0, 800c092 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800c062:	b538      	push	{r3, r4, r5, lr}
 800c064:	460d      	mov	r5, r1
 800c066:	4628      	mov	r0, r5
 800c068:	2108      	movs	r1, #8
 800c06a:	f001 ff4d 	bl	800df08 <ucdr_alignment>
 800c06e:	f105 0308 	add.w	r3, r5, #8
 800c072:	181c      	adds	r4, r3, r0
 800c074:	2108      	movs	r1, #8
 800c076:	4620      	mov	r0, r4
 800c078:	f001 ff46 	bl	800df08 <ucdr_alignment>
 800c07c:	3008      	adds	r0, #8
 800c07e:	4404      	add	r4, r0
 800c080:	2108      	movs	r1, #8
 800c082:	4620      	mov	r0, r4
 800c084:	f001 ff40 	bl	800df08 <ucdr_alignment>
 800c088:	f1c5 0508 	rsb	r5, r5, #8
 800c08c:	4428      	add	r0, r5
 800c08e:	4420      	add	r0, r4
 800c090:	bd38      	pop	{r3, r4, r5, pc}
 800c092:	4770      	bx	lr

0800c094 <_Vector3__cdr_deserialize>:
 800c094:	b538      	push	{r3, r4, r5, lr}
 800c096:	460c      	mov	r4, r1
 800c098:	b171      	cbz	r1, 800c0b8 <_Vector3__cdr_deserialize+0x24>
 800c09a:	4605      	mov	r5, r0
 800c09c:	f001 fd48 	bl	800db30 <ucdr_deserialize_double>
 800c0a0:	f104 0108 	add.w	r1, r4, #8
 800c0a4:	4628      	mov	r0, r5
 800c0a6:	f001 fd43 	bl	800db30 <ucdr_deserialize_double>
 800c0aa:	f104 0110 	add.w	r1, r4, #16
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0b4:	f001 bd3c 	b.w	800db30 <ucdr_deserialize_double>
 800c0b8:	4608      	mov	r0, r1
 800c0ba:	bd38      	pop	{r3, r4, r5, pc}

0800c0bc <_Vector3__cdr_serialize>:
 800c0bc:	b198      	cbz	r0, 800c0e6 <_Vector3__cdr_serialize+0x2a>
 800c0be:	b538      	push	{r3, r4, r5, lr}
 800c0c0:	ed90 0b00 	vldr	d0, [r0]
 800c0c4:	460d      	mov	r5, r1
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	4608      	mov	r0, r1
 800c0ca:	f001 fb8f 	bl	800d7ec <ucdr_serialize_double>
 800c0ce:	ed94 0b02 	vldr	d0, [r4, #8]
 800c0d2:	4628      	mov	r0, r5
 800c0d4:	f001 fb8a 	bl	800d7ec <ucdr_serialize_double>
 800c0d8:	ed94 0b04 	vldr	d0, [r4, #16]
 800c0dc:	4628      	mov	r0, r5
 800c0de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0e2:	f001 bb83 	b.w	800d7ec <ucdr_serialize_double>
 800c0e6:	4770      	bx	lr

0800c0e8 <_Vector3__get_serialized_size>:
 800c0e8:	b198      	cbz	r0, 800c112 <_Vector3__get_serialized_size+0x2a>
 800c0ea:	b510      	push	{r4, lr}
 800c0ec:	2108      	movs	r1, #8
 800c0ee:	2000      	movs	r0, #0
 800c0f0:	f001 ff0a 	bl	800df08 <ucdr_alignment>
 800c0f4:	f100 0408 	add.w	r4, r0, #8
 800c0f8:	2108      	movs	r1, #8
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	f001 ff04 	bl	800df08 <ucdr_alignment>
 800c100:	3008      	adds	r0, #8
 800c102:	4404      	add	r4, r0
 800c104:	2108      	movs	r1, #8
 800c106:	4620      	mov	r0, r4
 800c108:	f001 fefe 	bl	800df08 <ucdr_alignment>
 800c10c:	3008      	adds	r0, #8
 800c10e:	4420      	add	r0, r4
 800c110:	bd10      	pop	{r4, pc}
 800c112:	4770      	bx	lr

0800c114 <_Vector3__max_serialized_size>:
 800c114:	b538      	push	{r3, r4, r5, lr}
 800c116:	2108      	movs	r1, #8
 800c118:	2000      	movs	r0, #0
 800c11a:	f001 fef5 	bl	800df08 <ucdr_alignment>
 800c11e:	f100 0508 	add.w	r5, r0, #8
 800c122:	2108      	movs	r1, #8
 800c124:	4628      	mov	r0, r5
 800c126:	f001 feef 	bl	800df08 <ucdr_alignment>
 800c12a:	f100 0408 	add.w	r4, r0, #8
 800c12e:	442c      	add	r4, r5
 800c130:	2108      	movs	r1, #8
 800c132:	4620      	mov	r0, r4
 800c134:	f001 fee8 	bl	800df08 <ucdr_alignment>
 800c138:	3008      	adds	r0, #8
 800c13a:	4420      	add	r0, r4
 800c13c:	bd38      	pop	{r3, r4, r5, pc}
 800c13e:	bf00      	nop

0800c140 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800c140:	b570      	push	{r4, r5, r6, lr}
 800c142:	2301      	movs	r3, #1
 800c144:	460c      	mov	r4, r1
 800c146:	7003      	strb	r3, [r0, #0]
 800c148:	2108      	movs	r1, #8
 800c14a:	4620      	mov	r0, r4
 800c14c:	f001 fedc 	bl	800df08 <ucdr_alignment>
 800c150:	f104 0508 	add.w	r5, r4, #8
 800c154:	1946      	adds	r6, r0, r5
 800c156:	2108      	movs	r1, #8
 800c158:	4630      	mov	r0, r6
 800c15a:	f001 fed5 	bl	800df08 <ucdr_alignment>
 800c15e:	f100 0508 	add.w	r5, r0, #8
 800c162:	4435      	add	r5, r6
 800c164:	2108      	movs	r1, #8
 800c166:	4628      	mov	r0, r5
 800c168:	f001 fece 	bl	800df08 <ucdr_alignment>
 800c16c:	f1c4 0408 	rsb	r4, r4, #8
 800c170:	4420      	add	r0, r4
 800c172:	4428      	add	r0, r5
 800c174:	bd70      	pop	{r4, r5, r6, pc}
 800c176:	bf00      	nop

0800c178 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800c178:	4800      	ldr	r0, [pc, #0]	; (800c17c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800c17a:	4770      	bx	lr
 800c17c:	20000740 	.word	0x20000740

0800c180 <ucdr_serialize_endian_array_char>:
 800c180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c184:	4619      	mov	r1, r3
 800c186:	461f      	mov	r7, r3
 800c188:	4605      	mov	r5, r0
 800c18a:	4690      	mov	r8, r2
 800c18c:	f001 fe64 	bl	800de58 <ucdr_check_buffer_available_for>
 800c190:	b9e0      	cbnz	r0, 800c1cc <ucdr_serialize_endian_array_char+0x4c>
 800c192:	463e      	mov	r6, r7
 800c194:	e009      	b.n	800c1aa <ucdr_serialize_endian_array_char+0x2a>
 800c196:	68a8      	ldr	r0, [r5, #8]
 800c198:	f00b fba3 	bl	80178e2 <memcpy>
 800c19c:	68ab      	ldr	r3, [r5, #8]
 800c19e:	6928      	ldr	r0, [r5, #16]
 800c1a0:	4423      	add	r3, r4
 800c1a2:	4420      	add	r0, r4
 800c1a4:	1b36      	subs	r6, r6, r4
 800c1a6:	60ab      	str	r3, [r5, #8]
 800c1a8:	6128      	str	r0, [r5, #16]
 800c1aa:	4631      	mov	r1, r6
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	f001 feda 	bl	800df68 <ucdr_check_final_buffer_behavior_array>
 800c1b4:	1bb9      	subs	r1, r7, r6
 800c1b6:	4441      	add	r1, r8
 800c1b8:	4604      	mov	r4, r0
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	2800      	cmp	r0, #0
 800c1be:	d1ea      	bne.n	800c196 <ucdr_serialize_endian_array_char+0x16>
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	7da8      	ldrb	r0, [r5, #22]
 800c1c4:	756b      	strb	r3, [r5, #21]
 800c1c6:	4058      	eors	r0, r3
 800c1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1cc:	463a      	mov	r2, r7
 800c1ce:	68a8      	ldr	r0, [r5, #8]
 800c1d0:	4641      	mov	r1, r8
 800c1d2:	f00b fb86 	bl	80178e2 <memcpy>
 800c1d6:	68aa      	ldr	r2, [r5, #8]
 800c1d8:	692b      	ldr	r3, [r5, #16]
 800c1da:	443a      	add	r2, r7
 800c1dc:	443b      	add	r3, r7
 800c1de:	60aa      	str	r2, [r5, #8]
 800c1e0:	612b      	str	r3, [r5, #16]
 800c1e2:	e7ed      	b.n	800c1c0 <ucdr_serialize_endian_array_char+0x40>

0800c1e4 <ucdr_deserialize_endian_array_char>:
 800c1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	461f      	mov	r7, r3
 800c1ec:	4605      	mov	r5, r0
 800c1ee:	4690      	mov	r8, r2
 800c1f0:	f001 fe32 	bl	800de58 <ucdr_check_buffer_available_for>
 800c1f4:	b9e0      	cbnz	r0, 800c230 <ucdr_deserialize_endian_array_char+0x4c>
 800c1f6:	463e      	mov	r6, r7
 800c1f8:	e009      	b.n	800c20e <ucdr_deserialize_endian_array_char+0x2a>
 800c1fa:	68a9      	ldr	r1, [r5, #8]
 800c1fc:	f00b fb71 	bl	80178e2 <memcpy>
 800c200:	68ab      	ldr	r3, [r5, #8]
 800c202:	6928      	ldr	r0, [r5, #16]
 800c204:	4423      	add	r3, r4
 800c206:	4420      	add	r0, r4
 800c208:	1b36      	subs	r6, r6, r4
 800c20a:	60ab      	str	r3, [r5, #8]
 800c20c:	6128      	str	r0, [r5, #16]
 800c20e:	2201      	movs	r2, #1
 800c210:	4631      	mov	r1, r6
 800c212:	4628      	mov	r0, r5
 800c214:	f001 fea8 	bl	800df68 <ucdr_check_final_buffer_behavior_array>
 800c218:	4604      	mov	r4, r0
 800c21a:	1bb8      	subs	r0, r7, r6
 800c21c:	4440      	add	r0, r8
 800c21e:	4622      	mov	r2, r4
 800c220:	2c00      	cmp	r4, #0
 800c222:	d1ea      	bne.n	800c1fa <ucdr_deserialize_endian_array_char+0x16>
 800c224:	2301      	movs	r3, #1
 800c226:	7da8      	ldrb	r0, [r5, #22]
 800c228:	756b      	strb	r3, [r5, #21]
 800c22a:	4058      	eors	r0, r3
 800c22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c230:	463a      	mov	r2, r7
 800c232:	68a9      	ldr	r1, [r5, #8]
 800c234:	4640      	mov	r0, r8
 800c236:	f00b fb54 	bl	80178e2 <memcpy>
 800c23a:	68aa      	ldr	r2, [r5, #8]
 800c23c:	692b      	ldr	r3, [r5, #16]
 800c23e:	443a      	add	r2, r7
 800c240:	443b      	add	r3, r7
 800c242:	60aa      	str	r2, [r5, #8]
 800c244:	612b      	str	r3, [r5, #16]
 800c246:	e7ed      	b.n	800c224 <ucdr_deserialize_endian_array_char+0x40>

0800c248 <ucdr_serialize_array_uint8_t>:
 800c248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c24c:	4688      	mov	r8, r1
 800c24e:	4611      	mov	r1, r2
 800c250:	4617      	mov	r7, r2
 800c252:	4605      	mov	r5, r0
 800c254:	f001 fe00 	bl	800de58 <ucdr_check_buffer_available_for>
 800c258:	b9e0      	cbnz	r0, 800c294 <ucdr_serialize_array_uint8_t+0x4c>
 800c25a:	463e      	mov	r6, r7
 800c25c:	e009      	b.n	800c272 <ucdr_serialize_array_uint8_t+0x2a>
 800c25e:	68a8      	ldr	r0, [r5, #8]
 800c260:	f00b fb3f 	bl	80178e2 <memcpy>
 800c264:	68aa      	ldr	r2, [r5, #8]
 800c266:	692b      	ldr	r3, [r5, #16]
 800c268:	4422      	add	r2, r4
 800c26a:	4423      	add	r3, r4
 800c26c:	1b36      	subs	r6, r6, r4
 800c26e:	60aa      	str	r2, [r5, #8]
 800c270:	612b      	str	r3, [r5, #16]
 800c272:	4631      	mov	r1, r6
 800c274:	2201      	movs	r2, #1
 800c276:	4628      	mov	r0, r5
 800c278:	f001 fe76 	bl	800df68 <ucdr_check_final_buffer_behavior_array>
 800c27c:	1bb9      	subs	r1, r7, r6
 800c27e:	4441      	add	r1, r8
 800c280:	4604      	mov	r4, r0
 800c282:	4602      	mov	r2, r0
 800c284:	2800      	cmp	r0, #0
 800c286:	d1ea      	bne.n	800c25e <ucdr_serialize_array_uint8_t+0x16>
 800c288:	2301      	movs	r3, #1
 800c28a:	7da8      	ldrb	r0, [r5, #22]
 800c28c:	756b      	strb	r3, [r5, #21]
 800c28e:	4058      	eors	r0, r3
 800c290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c294:	463a      	mov	r2, r7
 800c296:	68a8      	ldr	r0, [r5, #8]
 800c298:	4641      	mov	r1, r8
 800c29a:	f00b fb22 	bl	80178e2 <memcpy>
 800c29e:	68aa      	ldr	r2, [r5, #8]
 800c2a0:	692b      	ldr	r3, [r5, #16]
 800c2a2:	443a      	add	r2, r7
 800c2a4:	443b      	add	r3, r7
 800c2a6:	60aa      	str	r2, [r5, #8]
 800c2a8:	612b      	str	r3, [r5, #16]
 800c2aa:	e7ed      	b.n	800c288 <ucdr_serialize_array_uint8_t+0x40>

0800c2ac <ucdr_serialize_endian_array_uint8_t>:
 800c2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	461f      	mov	r7, r3
 800c2b4:	4605      	mov	r5, r0
 800c2b6:	4690      	mov	r8, r2
 800c2b8:	f001 fdce 	bl	800de58 <ucdr_check_buffer_available_for>
 800c2bc:	b9e0      	cbnz	r0, 800c2f8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800c2be:	463e      	mov	r6, r7
 800c2c0:	e009      	b.n	800c2d6 <ucdr_serialize_endian_array_uint8_t+0x2a>
 800c2c2:	68a8      	ldr	r0, [r5, #8]
 800c2c4:	f00b fb0d 	bl	80178e2 <memcpy>
 800c2c8:	68ab      	ldr	r3, [r5, #8]
 800c2ca:	6928      	ldr	r0, [r5, #16]
 800c2cc:	4423      	add	r3, r4
 800c2ce:	4420      	add	r0, r4
 800c2d0:	1b36      	subs	r6, r6, r4
 800c2d2:	60ab      	str	r3, [r5, #8]
 800c2d4:	6128      	str	r0, [r5, #16]
 800c2d6:	4631      	mov	r1, r6
 800c2d8:	2201      	movs	r2, #1
 800c2da:	4628      	mov	r0, r5
 800c2dc:	f001 fe44 	bl	800df68 <ucdr_check_final_buffer_behavior_array>
 800c2e0:	1bb9      	subs	r1, r7, r6
 800c2e2:	4441      	add	r1, r8
 800c2e4:	4604      	mov	r4, r0
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	d1ea      	bne.n	800c2c2 <ucdr_serialize_endian_array_uint8_t+0x16>
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	7da8      	ldrb	r0, [r5, #22]
 800c2f0:	756b      	strb	r3, [r5, #21]
 800c2f2:	4058      	eors	r0, r3
 800c2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f8:	463a      	mov	r2, r7
 800c2fa:	68a8      	ldr	r0, [r5, #8]
 800c2fc:	4641      	mov	r1, r8
 800c2fe:	f00b faf0 	bl	80178e2 <memcpy>
 800c302:	68aa      	ldr	r2, [r5, #8]
 800c304:	692b      	ldr	r3, [r5, #16]
 800c306:	443a      	add	r2, r7
 800c308:	443b      	add	r3, r7
 800c30a:	60aa      	str	r2, [r5, #8]
 800c30c:	612b      	str	r3, [r5, #16]
 800c30e:	e7ed      	b.n	800c2ec <ucdr_serialize_endian_array_uint8_t+0x40>

0800c310 <ucdr_deserialize_array_uint8_t>:
 800c310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c314:	4688      	mov	r8, r1
 800c316:	4611      	mov	r1, r2
 800c318:	4617      	mov	r7, r2
 800c31a:	4605      	mov	r5, r0
 800c31c:	f001 fd9c 	bl	800de58 <ucdr_check_buffer_available_for>
 800c320:	b9e0      	cbnz	r0, 800c35c <ucdr_deserialize_array_uint8_t+0x4c>
 800c322:	463e      	mov	r6, r7
 800c324:	e009      	b.n	800c33a <ucdr_deserialize_array_uint8_t+0x2a>
 800c326:	68a9      	ldr	r1, [r5, #8]
 800c328:	f00b fadb 	bl	80178e2 <memcpy>
 800c32c:	68aa      	ldr	r2, [r5, #8]
 800c32e:	692b      	ldr	r3, [r5, #16]
 800c330:	4422      	add	r2, r4
 800c332:	4423      	add	r3, r4
 800c334:	1b36      	subs	r6, r6, r4
 800c336:	60aa      	str	r2, [r5, #8]
 800c338:	612b      	str	r3, [r5, #16]
 800c33a:	2201      	movs	r2, #1
 800c33c:	4631      	mov	r1, r6
 800c33e:	4628      	mov	r0, r5
 800c340:	f001 fe12 	bl	800df68 <ucdr_check_final_buffer_behavior_array>
 800c344:	4604      	mov	r4, r0
 800c346:	1bb8      	subs	r0, r7, r6
 800c348:	4440      	add	r0, r8
 800c34a:	4622      	mov	r2, r4
 800c34c:	2c00      	cmp	r4, #0
 800c34e:	d1ea      	bne.n	800c326 <ucdr_deserialize_array_uint8_t+0x16>
 800c350:	2301      	movs	r3, #1
 800c352:	7da8      	ldrb	r0, [r5, #22]
 800c354:	756b      	strb	r3, [r5, #21]
 800c356:	4058      	eors	r0, r3
 800c358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c35c:	463a      	mov	r2, r7
 800c35e:	68a9      	ldr	r1, [r5, #8]
 800c360:	4640      	mov	r0, r8
 800c362:	f00b fabe 	bl	80178e2 <memcpy>
 800c366:	68aa      	ldr	r2, [r5, #8]
 800c368:	692b      	ldr	r3, [r5, #16]
 800c36a:	443a      	add	r2, r7
 800c36c:	443b      	add	r3, r7
 800c36e:	60aa      	str	r2, [r5, #8]
 800c370:	612b      	str	r3, [r5, #16]
 800c372:	e7ed      	b.n	800c350 <ucdr_deserialize_array_uint8_t+0x40>

0800c374 <ucdr_deserialize_endian_array_uint8_t>:
 800c374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c378:	4619      	mov	r1, r3
 800c37a:	461f      	mov	r7, r3
 800c37c:	4605      	mov	r5, r0
 800c37e:	4690      	mov	r8, r2
 800c380:	f001 fd6a 	bl	800de58 <ucdr_check_buffer_available_for>
 800c384:	b9e0      	cbnz	r0, 800c3c0 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800c386:	463e      	mov	r6, r7
 800c388:	e009      	b.n	800c39e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800c38a:	68a9      	ldr	r1, [r5, #8]
 800c38c:	f00b faa9 	bl	80178e2 <memcpy>
 800c390:	68ab      	ldr	r3, [r5, #8]
 800c392:	6928      	ldr	r0, [r5, #16]
 800c394:	4423      	add	r3, r4
 800c396:	4420      	add	r0, r4
 800c398:	1b36      	subs	r6, r6, r4
 800c39a:	60ab      	str	r3, [r5, #8]
 800c39c:	6128      	str	r0, [r5, #16]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	4631      	mov	r1, r6
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	f001 fde0 	bl	800df68 <ucdr_check_final_buffer_behavior_array>
 800c3a8:	4604      	mov	r4, r0
 800c3aa:	1bb8      	subs	r0, r7, r6
 800c3ac:	4440      	add	r0, r8
 800c3ae:	4622      	mov	r2, r4
 800c3b0:	2c00      	cmp	r4, #0
 800c3b2:	d1ea      	bne.n	800c38a <ucdr_deserialize_endian_array_uint8_t+0x16>
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	7da8      	ldrb	r0, [r5, #22]
 800c3b8:	756b      	strb	r3, [r5, #21]
 800c3ba:	4058      	eors	r0, r3
 800c3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3c0:	463a      	mov	r2, r7
 800c3c2:	68a9      	ldr	r1, [r5, #8]
 800c3c4:	4640      	mov	r0, r8
 800c3c6:	f00b fa8c 	bl	80178e2 <memcpy>
 800c3ca:	68aa      	ldr	r2, [r5, #8]
 800c3cc:	692b      	ldr	r3, [r5, #16]
 800c3ce:	443a      	add	r2, r7
 800c3d0:	443b      	add	r3, r7
 800c3d2:	60aa      	str	r2, [r5, #8]
 800c3d4:	612b      	str	r3, [r5, #16]
 800c3d6:	e7ed      	b.n	800c3b4 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800c3d8 <ucdr_serialize_endian_array_float>:
 800c3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3dc:	4688      	mov	r8, r1
 800c3de:	2104      	movs	r1, #4
 800c3e0:	4604      	mov	r4, r0
 800c3e2:	4616      	mov	r6, r2
 800c3e4:	461f      	mov	r7, r3
 800c3e6:	f001 fd97 	bl	800df18 <ucdr_buffer_alignment>
 800c3ea:	4601      	mov	r1, r0
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	7d65      	ldrb	r5, [r4, #21]
 800c3f0:	f001 fdd6 	bl	800dfa0 <ucdr_advance_buffer>
 800c3f4:	f1b8 0f01 	cmp.w	r8, #1
 800c3f8:	7565      	strb	r5, [r4, #21]
 800c3fa:	d00f      	beq.n	800c41c <ucdr_serialize_endian_array_float+0x44>
 800c3fc:	2500      	movs	r5, #0
 800c3fe:	b147      	cbz	r7, 800c412 <ucdr_serialize_endian_array_float+0x3a>
 800c400:	ecb6 0a01 	vldmia	r6!, {s0}
 800c404:	4641      	mov	r1, r8
 800c406:	4620      	mov	r0, r4
 800c408:	3501      	adds	r5, #1
 800c40a:	f001 f8bf 	bl	800d58c <ucdr_serialize_endian_float>
 800c40e:	42af      	cmp	r7, r5
 800c410:	d1f6      	bne.n	800c400 <ucdr_serialize_endian_array_float+0x28>
 800c412:	7da0      	ldrb	r0, [r4, #22]
 800c414:	f080 0001 	eor.w	r0, r0, #1
 800c418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c41c:	00bf      	lsls	r7, r7, #2
 800c41e:	4639      	mov	r1, r7
 800c420:	4620      	mov	r0, r4
 800c422:	f001 fd19 	bl	800de58 <ucdr_check_buffer_available_for>
 800c426:	b9f8      	cbnz	r0, 800c468 <ucdr_serialize_endian_array_float+0x90>
 800c428:	46b8      	mov	r8, r7
 800c42a:	e00a      	b.n	800c442 <ucdr_serialize_endian_array_float+0x6a>
 800c42c:	68a0      	ldr	r0, [r4, #8]
 800c42e:	f00b fa58 	bl	80178e2 <memcpy>
 800c432:	68a2      	ldr	r2, [r4, #8]
 800c434:	6923      	ldr	r3, [r4, #16]
 800c436:	442a      	add	r2, r5
 800c438:	442b      	add	r3, r5
 800c43a:	eba8 0805 	sub.w	r8, r8, r5
 800c43e:	60a2      	str	r2, [r4, #8]
 800c440:	6123      	str	r3, [r4, #16]
 800c442:	4641      	mov	r1, r8
 800c444:	2204      	movs	r2, #4
 800c446:	4620      	mov	r0, r4
 800c448:	f001 fd8e 	bl	800df68 <ucdr_check_final_buffer_behavior_array>
 800c44c:	eba7 0108 	sub.w	r1, r7, r8
 800c450:	4431      	add	r1, r6
 800c452:	4605      	mov	r5, r0
 800c454:	4602      	mov	r2, r0
 800c456:	2800      	cmp	r0, #0
 800c458:	d1e8      	bne.n	800c42c <ucdr_serialize_endian_array_float+0x54>
 800c45a:	7da0      	ldrb	r0, [r4, #22]
 800c45c:	2304      	movs	r3, #4
 800c45e:	7563      	strb	r3, [r4, #21]
 800c460:	f080 0001 	eor.w	r0, r0, #1
 800c464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c468:	463a      	mov	r2, r7
 800c46a:	68a0      	ldr	r0, [r4, #8]
 800c46c:	4631      	mov	r1, r6
 800c46e:	f00b fa38 	bl	80178e2 <memcpy>
 800c472:	68a2      	ldr	r2, [r4, #8]
 800c474:	6923      	ldr	r3, [r4, #16]
 800c476:	443a      	add	r2, r7
 800c478:	441f      	add	r7, r3
 800c47a:	60a2      	str	r2, [r4, #8]
 800c47c:	6127      	str	r7, [r4, #16]
 800c47e:	e7ec      	b.n	800c45a <ucdr_serialize_endian_array_float+0x82>

0800c480 <ucdr_deserialize_endian_array_float>:
 800c480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c484:	4688      	mov	r8, r1
 800c486:	2104      	movs	r1, #4
 800c488:	4605      	mov	r5, r0
 800c48a:	4614      	mov	r4, r2
 800c48c:	461f      	mov	r7, r3
 800c48e:	f001 fd43 	bl	800df18 <ucdr_buffer_alignment>
 800c492:	4601      	mov	r1, r0
 800c494:	4628      	mov	r0, r5
 800c496:	7d6e      	ldrb	r6, [r5, #21]
 800c498:	f001 fd82 	bl	800dfa0 <ucdr_advance_buffer>
 800c49c:	f1b8 0f01 	cmp.w	r8, #1
 800c4a0:	756e      	strb	r6, [r5, #21]
 800c4a2:	d010      	beq.n	800c4c6 <ucdr_deserialize_endian_array_float+0x46>
 800c4a4:	2600      	movs	r6, #0
 800c4a6:	b14f      	cbz	r7, 800c4bc <ucdr_deserialize_endian_array_float+0x3c>
 800c4a8:	4622      	mov	r2, r4
 800c4aa:	4641      	mov	r1, r8
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	3601      	adds	r6, #1
 800c4b0:	f001 f906 	bl	800d6c0 <ucdr_deserialize_endian_float>
 800c4b4:	42b7      	cmp	r7, r6
 800c4b6:	f104 0404 	add.w	r4, r4, #4
 800c4ba:	d1f5      	bne.n	800c4a8 <ucdr_deserialize_endian_array_float+0x28>
 800c4bc:	7da8      	ldrb	r0, [r5, #22]
 800c4be:	f080 0001 	eor.w	r0, r0, #1
 800c4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4c6:	00bf      	lsls	r7, r7, #2
 800c4c8:	4639      	mov	r1, r7
 800c4ca:	4628      	mov	r0, r5
 800c4cc:	f001 fcc4 	bl	800de58 <ucdr_check_buffer_available_for>
 800c4d0:	b9f8      	cbnz	r0, 800c512 <ucdr_deserialize_endian_array_float+0x92>
 800c4d2:	46b8      	mov	r8, r7
 800c4d4:	e00a      	b.n	800c4ec <ucdr_deserialize_endian_array_float+0x6c>
 800c4d6:	68a9      	ldr	r1, [r5, #8]
 800c4d8:	f00b fa03 	bl	80178e2 <memcpy>
 800c4dc:	68aa      	ldr	r2, [r5, #8]
 800c4de:	692b      	ldr	r3, [r5, #16]
 800c4e0:	4432      	add	r2, r6
 800c4e2:	4433      	add	r3, r6
 800c4e4:	eba8 0806 	sub.w	r8, r8, r6
 800c4e8:	60aa      	str	r2, [r5, #8]
 800c4ea:	612b      	str	r3, [r5, #16]
 800c4ec:	2204      	movs	r2, #4
 800c4ee:	4641      	mov	r1, r8
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	f001 fd39 	bl	800df68 <ucdr_check_final_buffer_behavior_array>
 800c4f6:	4606      	mov	r6, r0
 800c4f8:	eba7 0008 	sub.w	r0, r7, r8
 800c4fc:	4420      	add	r0, r4
 800c4fe:	4632      	mov	r2, r6
 800c500:	2e00      	cmp	r6, #0
 800c502:	d1e8      	bne.n	800c4d6 <ucdr_deserialize_endian_array_float+0x56>
 800c504:	7da8      	ldrb	r0, [r5, #22]
 800c506:	2304      	movs	r3, #4
 800c508:	756b      	strb	r3, [r5, #21]
 800c50a:	f080 0001 	eor.w	r0, r0, #1
 800c50e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c512:	463a      	mov	r2, r7
 800c514:	68a9      	ldr	r1, [r5, #8]
 800c516:	4620      	mov	r0, r4
 800c518:	f00b f9e3 	bl	80178e2 <memcpy>
 800c51c:	68aa      	ldr	r2, [r5, #8]
 800c51e:	692b      	ldr	r3, [r5, #16]
 800c520:	443a      	add	r2, r7
 800c522:	441f      	add	r7, r3
 800c524:	60aa      	str	r2, [r5, #8]
 800c526:	612f      	str	r7, [r5, #16]
 800c528:	e7ec      	b.n	800c504 <ucdr_deserialize_endian_array_float+0x84>
 800c52a:	bf00      	nop

0800c52c <ucdr_serialize_array_double>:
 800c52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c530:	460e      	mov	r6, r1
 800c532:	2108      	movs	r1, #8
 800c534:	4604      	mov	r4, r0
 800c536:	4617      	mov	r7, r2
 800c538:	f001 fcee 	bl	800df18 <ucdr_buffer_alignment>
 800c53c:	4601      	mov	r1, r0
 800c53e:	4620      	mov	r0, r4
 800c540:	7d65      	ldrb	r5, [r4, #21]
 800c542:	f001 fd2d 	bl	800dfa0 <ucdr_advance_buffer>
 800c546:	7d21      	ldrb	r1, [r4, #20]
 800c548:	7565      	strb	r5, [r4, #21]
 800c54a:	2901      	cmp	r1, #1
 800c54c:	d010      	beq.n	800c570 <ucdr_serialize_array_double+0x44>
 800c54e:	b157      	cbz	r7, 800c566 <ucdr_serialize_array_double+0x3a>
 800c550:	2500      	movs	r5, #0
 800c552:	e000      	b.n	800c556 <ucdr_serialize_array_double+0x2a>
 800c554:	7d21      	ldrb	r1, [r4, #20]
 800c556:	ecb6 0b02 	vldmia	r6!, {d0}
 800c55a:	4620      	mov	r0, r4
 800c55c:	3501      	adds	r5, #1
 800c55e:	f001 fa15 	bl	800d98c <ucdr_serialize_endian_double>
 800c562:	42af      	cmp	r7, r5
 800c564:	d1f6      	bne.n	800c554 <ucdr_serialize_array_double+0x28>
 800c566:	7da0      	ldrb	r0, [r4, #22]
 800c568:	f080 0001 	eor.w	r0, r0, #1
 800c56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c570:	00ff      	lsls	r7, r7, #3
 800c572:	4639      	mov	r1, r7
 800c574:	4620      	mov	r0, r4
 800c576:	f001 fc6f 	bl	800de58 <ucdr_check_buffer_available_for>
 800c57a:	b9f8      	cbnz	r0, 800c5bc <ucdr_serialize_array_double+0x90>
 800c57c:	46b8      	mov	r8, r7
 800c57e:	e00a      	b.n	800c596 <ucdr_serialize_array_double+0x6a>
 800c580:	68a0      	ldr	r0, [r4, #8]
 800c582:	f00b f9ae 	bl	80178e2 <memcpy>
 800c586:	68a2      	ldr	r2, [r4, #8]
 800c588:	6923      	ldr	r3, [r4, #16]
 800c58a:	442a      	add	r2, r5
 800c58c:	442b      	add	r3, r5
 800c58e:	eba8 0805 	sub.w	r8, r8, r5
 800c592:	60a2      	str	r2, [r4, #8]
 800c594:	6123      	str	r3, [r4, #16]
 800c596:	4641      	mov	r1, r8
 800c598:	2208      	movs	r2, #8
 800c59a:	4620      	mov	r0, r4
 800c59c:	f001 fce4 	bl	800df68 <ucdr_check_final_buffer_behavior_array>
 800c5a0:	eba7 0108 	sub.w	r1, r7, r8
 800c5a4:	4431      	add	r1, r6
 800c5a6:	4605      	mov	r5, r0
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	d1e8      	bne.n	800c580 <ucdr_serialize_array_double+0x54>
 800c5ae:	7da0      	ldrb	r0, [r4, #22]
 800c5b0:	2308      	movs	r3, #8
 800c5b2:	7563      	strb	r3, [r4, #21]
 800c5b4:	f080 0001 	eor.w	r0, r0, #1
 800c5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5bc:	463a      	mov	r2, r7
 800c5be:	68a0      	ldr	r0, [r4, #8]
 800c5c0:	4631      	mov	r1, r6
 800c5c2:	f00b f98e 	bl	80178e2 <memcpy>
 800c5c6:	68a2      	ldr	r2, [r4, #8]
 800c5c8:	6923      	ldr	r3, [r4, #16]
 800c5ca:	443a      	add	r2, r7
 800c5cc:	441f      	add	r7, r3
 800c5ce:	60a2      	str	r2, [r4, #8]
 800c5d0:	6127      	str	r7, [r4, #16]
 800c5d2:	e7ec      	b.n	800c5ae <ucdr_serialize_array_double+0x82>

0800c5d4 <ucdr_deserialize_array_double>:
 800c5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5d8:	460e      	mov	r6, r1
 800c5da:	2108      	movs	r1, #8
 800c5dc:	4604      	mov	r4, r0
 800c5de:	4617      	mov	r7, r2
 800c5e0:	f001 fc9a 	bl	800df18 <ucdr_buffer_alignment>
 800c5e4:	4601      	mov	r1, r0
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	7d65      	ldrb	r5, [r4, #21]
 800c5ea:	f001 fcd9 	bl	800dfa0 <ucdr_advance_buffer>
 800c5ee:	7d21      	ldrb	r1, [r4, #20]
 800c5f0:	7565      	strb	r5, [r4, #21]
 800c5f2:	2901      	cmp	r1, #1
 800c5f4:	d011      	beq.n	800c61a <ucdr_deserialize_array_double+0x46>
 800c5f6:	b15f      	cbz	r7, 800c610 <ucdr_deserialize_array_double+0x3c>
 800c5f8:	2500      	movs	r5, #0
 800c5fa:	e000      	b.n	800c5fe <ucdr_deserialize_array_double+0x2a>
 800c5fc:	7d21      	ldrb	r1, [r4, #20]
 800c5fe:	4632      	mov	r2, r6
 800c600:	4620      	mov	r0, r4
 800c602:	3501      	adds	r5, #1
 800c604:	f001 fb5a 	bl	800dcbc <ucdr_deserialize_endian_double>
 800c608:	42af      	cmp	r7, r5
 800c60a:	f106 0608 	add.w	r6, r6, #8
 800c60e:	d1f5      	bne.n	800c5fc <ucdr_deserialize_array_double+0x28>
 800c610:	7da0      	ldrb	r0, [r4, #22]
 800c612:	f080 0001 	eor.w	r0, r0, #1
 800c616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c61a:	00ff      	lsls	r7, r7, #3
 800c61c:	4639      	mov	r1, r7
 800c61e:	4620      	mov	r0, r4
 800c620:	f001 fc1a 	bl	800de58 <ucdr_check_buffer_available_for>
 800c624:	b9f8      	cbnz	r0, 800c666 <ucdr_deserialize_array_double+0x92>
 800c626:	46b8      	mov	r8, r7
 800c628:	e00a      	b.n	800c640 <ucdr_deserialize_array_double+0x6c>
 800c62a:	68a1      	ldr	r1, [r4, #8]
 800c62c:	f00b f959 	bl	80178e2 <memcpy>
 800c630:	68a2      	ldr	r2, [r4, #8]
 800c632:	6923      	ldr	r3, [r4, #16]
 800c634:	442a      	add	r2, r5
 800c636:	442b      	add	r3, r5
 800c638:	eba8 0805 	sub.w	r8, r8, r5
 800c63c:	60a2      	str	r2, [r4, #8]
 800c63e:	6123      	str	r3, [r4, #16]
 800c640:	2208      	movs	r2, #8
 800c642:	4641      	mov	r1, r8
 800c644:	4620      	mov	r0, r4
 800c646:	f001 fc8f 	bl	800df68 <ucdr_check_final_buffer_behavior_array>
 800c64a:	4605      	mov	r5, r0
 800c64c:	eba7 0008 	sub.w	r0, r7, r8
 800c650:	4430      	add	r0, r6
 800c652:	462a      	mov	r2, r5
 800c654:	2d00      	cmp	r5, #0
 800c656:	d1e8      	bne.n	800c62a <ucdr_deserialize_array_double+0x56>
 800c658:	7da0      	ldrb	r0, [r4, #22]
 800c65a:	2308      	movs	r3, #8
 800c65c:	7563      	strb	r3, [r4, #21]
 800c65e:	f080 0001 	eor.w	r0, r0, #1
 800c662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c666:	463a      	mov	r2, r7
 800c668:	68a1      	ldr	r1, [r4, #8]
 800c66a:	4630      	mov	r0, r6
 800c66c:	f00b f939 	bl	80178e2 <memcpy>
 800c670:	68a2      	ldr	r2, [r4, #8]
 800c672:	6923      	ldr	r3, [r4, #16]
 800c674:	443a      	add	r2, r7
 800c676:	441f      	add	r7, r3
 800c678:	60a2      	str	r2, [r4, #8]
 800c67a:	6127      	str	r7, [r4, #16]
 800c67c:	e7ec      	b.n	800c658 <ucdr_deserialize_array_double+0x84>
 800c67e:	bf00      	nop

0800c680 <ucdr_serialize_bool>:
 800c680:	b538      	push	{r3, r4, r5, lr}
 800c682:	460d      	mov	r5, r1
 800c684:	2101      	movs	r1, #1
 800c686:	4604      	mov	r4, r0
 800c688:	f001 fbf2 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800c68c:	b148      	cbz	r0, 800c6a2 <ucdr_serialize_bool+0x22>
 800c68e:	68a3      	ldr	r3, [r4, #8]
 800c690:	701d      	strb	r5, [r3, #0]
 800c692:	68a2      	ldr	r2, [r4, #8]
 800c694:	6923      	ldr	r3, [r4, #16]
 800c696:	2101      	movs	r1, #1
 800c698:	440a      	add	r2, r1
 800c69a:	440b      	add	r3, r1
 800c69c:	60a2      	str	r2, [r4, #8]
 800c69e:	6123      	str	r3, [r4, #16]
 800c6a0:	7561      	strb	r1, [r4, #21]
 800c6a2:	7da0      	ldrb	r0, [r4, #22]
 800c6a4:	f080 0001 	eor.w	r0, r0, #1
 800c6a8:	bd38      	pop	{r3, r4, r5, pc}
 800c6aa:	bf00      	nop

0800c6ac <ucdr_deserialize_bool>:
 800c6ac:	b538      	push	{r3, r4, r5, lr}
 800c6ae:	460d      	mov	r5, r1
 800c6b0:	2101      	movs	r1, #1
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	f001 fbdc 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800c6b8:	b160      	cbz	r0, 800c6d4 <ucdr_deserialize_bool+0x28>
 800c6ba:	68a2      	ldr	r2, [r4, #8]
 800c6bc:	6923      	ldr	r3, [r4, #16]
 800c6be:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c6c2:	3900      	subs	r1, #0
 800c6c4:	bf18      	it	ne
 800c6c6:	2101      	movne	r1, #1
 800c6c8:	7029      	strb	r1, [r5, #0]
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	2101      	movs	r1, #1
 800c6ce:	60a2      	str	r2, [r4, #8]
 800c6d0:	6123      	str	r3, [r4, #16]
 800c6d2:	7561      	strb	r1, [r4, #21]
 800c6d4:	7da0      	ldrb	r0, [r4, #22]
 800c6d6:	f080 0001 	eor.w	r0, r0, #1
 800c6da:	bd38      	pop	{r3, r4, r5, pc}

0800c6dc <ucdr_serialize_uint8_t>:
 800c6dc:	b538      	push	{r3, r4, r5, lr}
 800c6de:	460d      	mov	r5, r1
 800c6e0:	2101      	movs	r1, #1
 800c6e2:	4604      	mov	r4, r0
 800c6e4:	f001 fbc4 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800c6e8:	b148      	cbz	r0, 800c6fe <ucdr_serialize_uint8_t+0x22>
 800c6ea:	68a3      	ldr	r3, [r4, #8]
 800c6ec:	701d      	strb	r5, [r3, #0]
 800c6ee:	68a2      	ldr	r2, [r4, #8]
 800c6f0:	6923      	ldr	r3, [r4, #16]
 800c6f2:	2101      	movs	r1, #1
 800c6f4:	440a      	add	r2, r1
 800c6f6:	440b      	add	r3, r1
 800c6f8:	60a2      	str	r2, [r4, #8]
 800c6fa:	6123      	str	r3, [r4, #16]
 800c6fc:	7561      	strb	r1, [r4, #21]
 800c6fe:	7da0      	ldrb	r0, [r4, #22]
 800c700:	f080 0001 	eor.w	r0, r0, #1
 800c704:	bd38      	pop	{r3, r4, r5, pc}
 800c706:	bf00      	nop

0800c708 <ucdr_deserialize_uint8_t>:
 800c708:	b538      	push	{r3, r4, r5, lr}
 800c70a:	460d      	mov	r5, r1
 800c70c:	2101      	movs	r1, #1
 800c70e:	4604      	mov	r4, r0
 800c710:	f001 fbae 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800c714:	b150      	cbz	r0, 800c72c <ucdr_deserialize_uint8_t+0x24>
 800c716:	68a3      	ldr	r3, [r4, #8]
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	702b      	strb	r3, [r5, #0]
 800c71c:	68a2      	ldr	r2, [r4, #8]
 800c71e:	6923      	ldr	r3, [r4, #16]
 800c720:	2101      	movs	r1, #1
 800c722:	440a      	add	r2, r1
 800c724:	440b      	add	r3, r1
 800c726:	60a2      	str	r2, [r4, #8]
 800c728:	6123      	str	r3, [r4, #16]
 800c72a:	7561      	strb	r1, [r4, #21]
 800c72c:	7da0      	ldrb	r0, [r4, #22]
 800c72e:	f080 0001 	eor.w	r0, r0, #1
 800c732:	bd38      	pop	{r3, r4, r5, pc}

0800c734 <ucdr_serialize_uint16_t>:
 800c734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c738:	b082      	sub	sp, #8
 800c73a:	460b      	mov	r3, r1
 800c73c:	2102      	movs	r1, #2
 800c73e:	4604      	mov	r4, r0
 800c740:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c744:	f001 fbe8 	bl	800df18 <ucdr_buffer_alignment>
 800c748:	4601      	mov	r1, r0
 800c74a:	4620      	mov	r0, r4
 800c74c:	7d67      	ldrb	r7, [r4, #21]
 800c74e:	f001 fc27 	bl	800dfa0 <ucdr_advance_buffer>
 800c752:	2102      	movs	r1, #2
 800c754:	4620      	mov	r0, r4
 800c756:	f001 fb7f 	bl	800de58 <ucdr_check_buffer_available_for>
 800c75a:	bb78      	cbnz	r0, 800c7bc <ucdr_serialize_uint16_t+0x88>
 800c75c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c760:	42ab      	cmp	r3, r5
 800c762:	d926      	bls.n	800c7b2 <ucdr_serialize_uint16_t+0x7e>
 800c764:	1b5e      	subs	r6, r3, r5
 800c766:	60a3      	str	r3, [r4, #8]
 800c768:	6923      	ldr	r3, [r4, #16]
 800c76a:	f1c6 0802 	rsb	r8, r6, #2
 800c76e:	4433      	add	r3, r6
 800c770:	6123      	str	r3, [r4, #16]
 800c772:	4641      	mov	r1, r8
 800c774:	4620      	mov	r0, r4
 800c776:	f001 fb7b 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800c77a:	2800      	cmp	r0, #0
 800c77c:	d03b      	beq.n	800c7f6 <ucdr_serialize_uint16_t+0xc2>
 800c77e:	7d23      	ldrb	r3, [r4, #20]
 800c780:	2b01      	cmp	r3, #1
 800c782:	d04a      	beq.n	800c81a <ucdr_serialize_uint16_t+0xe6>
 800c784:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c788:	702b      	strb	r3, [r5, #0]
 800c78a:	2e00      	cmp	r6, #0
 800c78c:	d040      	beq.n	800c810 <ucdr_serialize_uint16_t+0xdc>
 800c78e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c792:	706b      	strb	r3, [r5, #1]
 800c794:	6923      	ldr	r3, [r4, #16]
 800c796:	68a2      	ldr	r2, [r4, #8]
 800c798:	7da0      	ldrb	r0, [r4, #22]
 800c79a:	3302      	adds	r3, #2
 800c79c:	1b9e      	subs	r6, r3, r6
 800c79e:	4442      	add	r2, r8
 800c7a0:	2302      	movs	r3, #2
 800c7a2:	f080 0001 	eor.w	r0, r0, #1
 800c7a6:	60a2      	str	r2, [r4, #8]
 800c7a8:	6126      	str	r6, [r4, #16]
 800c7aa:	7563      	strb	r3, [r4, #21]
 800c7ac:	b002      	add	sp, #8
 800c7ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7b2:	2102      	movs	r1, #2
 800c7b4:	4620      	mov	r0, r4
 800c7b6:	f001 fb5b 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800c7ba:	b190      	cbz	r0, 800c7e2 <ucdr_serialize_uint16_t+0xae>
 800c7bc:	7d23      	ldrb	r3, [r4, #20]
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	68a3      	ldr	r3, [r4, #8]
 800c7c2:	d014      	beq.n	800c7ee <ucdr_serialize_uint16_t+0xba>
 800c7c4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c7c8:	701a      	strb	r2, [r3, #0]
 800c7ca:	68a3      	ldr	r3, [r4, #8]
 800c7cc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c7d0:	705a      	strb	r2, [r3, #1]
 800c7d2:	68a2      	ldr	r2, [r4, #8]
 800c7d4:	6923      	ldr	r3, [r4, #16]
 800c7d6:	3202      	adds	r2, #2
 800c7d8:	3302      	adds	r3, #2
 800c7da:	2102      	movs	r1, #2
 800c7dc:	60a2      	str	r2, [r4, #8]
 800c7de:	6123      	str	r3, [r4, #16]
 800c7e0:	7561      	strb	r1, [r4, #21]
 800c7e2:	7da0      	ldrb	r0, [r4, #22]
 800c7e4:	f080 0001 	eor.w	r0, r0, #1
 800c7e8:	b002      	add	sp, #8
 800c7ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7ee:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c7f2:	801a      	strh	r2, [r3, #0]
 800c7f4:	e7ed      	b.n	800c7d2 <ucdr_serialize_uint16_t+0x9e>
 800c7f6:	68a2      	ldr	r2, [r4, #8]
 800c7f8:	6923      	ldr	r3, [r4, #16]
 800c7fa:	7da0      	ldrb	r0, [r4, #22]
 800c7fc:	7567      	strb	r7, [r4, #21]
 800c7fe:	1b92      	subs	r2, r2, r6
 800c800:	1b9b      	subs	r3, r3, r6
 800c802:	f080 0001 	eor.w	r0, r0, #1
 800c806:	60a2      	str	r2, [r4, #8]
 800c808:	6123      	str	r3, [r4, #16]
 800c80a:	b002      	add	sp, #8
 800c80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c810:	68a3      	ldr	r3, [r4, #8]
 800c812:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c816:	701a      	strb	r2, [r3, #0]
 800c818:	e7bc      	b.n	800c794 <ucdr_serialize_uint16_t+0x60>
 800c81a:	4628      	mov	r0, r5
 800c81c:	f10d 0506 	add.w	r5, sp, #6
 800c820:	4629      	mov	r1, r5
 800c822:	4632      	mov	r2, r6
 800c824:	f00b f85d 	bl	80178e2 <memcpy>
 800c828:	68a0      	ldr	r0, [r4, #8]
 800c82a:	4642      	mov	r2, r8
 800c82c:	19a9      	adds	r1, r5, r6
 800c82e:	f00b f858 	bl	80178e2 <memcpy>
 800c832:	e7af      	b.n	800c794 <ucdr_serialize_uint16_t+0x60>

0800c834 <ucdr_serialize_endian_uint16_t>:
 800c834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c838:	b083      	sub	sp, #12
 800c83a:	460d      	mov	r5, r1
 800c83c:	2102      	movs	r1, #2
 800c83e:	4604      	mov	r4, r0
 800c840:	f8ad 2006 	strh.w	r2, [sp, #6]
 800c844:	f001 fb68 	bl	800df18 <ucdr_buffer_alignment>
 800c848:	4601      	mov	r1, r0
 800c84a:	4620      	mov	r0, r4
 800c84c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c850:	f001 fba6 	bl	800dfa0 <ucdr_advance_buffer>
 800c854:	2102      	movs	r1, #2
 800c856:	4620      	mov	r0, r4
 800c858:	f001 fafe 	bl	800de58 <ucdr_check_buffer_available_for>
 800c85c:	bb70      	cbnz	r0, 800c8bc <ucdr_serialize_endian_uint16_t+0x88>
 800c85e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c862:	42be      	cmp	r6, r7
 800c864:	d925      	bls.n	800c8b2 <ucdr_serialize_endian_uint16_t+0x7e>
 800c866:	6923      	ldr	r3, [r4, #16]
 800c868:	60a6      	str	r6, [r4, #8]
 800c86a:	1bf6      	subs	r6, r6, r7
 800c86c:	4433      	add	r3, r6
 800c86e:	f1c6 0902 	rsb	r9, r6, #2
 800c872:	6123      	str	r3, [r4, #16]
 800c874:	4649      	mov	r1, r9
 800c876:	4620      	mov	r0, r4
 800c878:	f001 fafa 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800c87c:	2800      	cmp	r0, #0
 800c87e:	d039      	beq.n	800c8f4 <ucdr_serialize_endian_uint16_t+0xc0>
 800c880:	2d01      	cmp	r5, #1
 800c882:	d04a      	beq.n	800c91a <ucdr_serialize_endian_uint16_t+0xe6>
 800c884:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c888:	703b      	strb	r3, [r7, #0]
 800c88a:	2e00      	cmp	r6, #0
 800c88c:	d040      	beq.n	800c910 <ucdr_serialize_endian_uint16_t+0xdc>
 800c88e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c892:	707b      	strb	r3, [r7, #1]
 800c894:	6923      	ldr	r3, [r4, #16]
 800c896:	68a2      	ldr	r2, [r4, #8]
 800c898:	7da0      	ldrb	r0, [r4, #22]
 800c89a:	3302      	adds	r3, #2
 800c89c:	444a      	add	r2, r9
 800c89e:	1b9b      	subs	r3, r3, r6
 800c8a0:	2102      	movs	r1, #2
 800c8a2:	f080 0001 	eor.w	r0, r0, #1
 800c8a6:	60a2      	str	r2, [r4, #8]
 800c8a8:	6123      	str	r3, [r4, #16]
 800c8aa:	7561      	strb	r1, [r4, #21]
 800c8ac:	b003      	add	sp, #12
 800c8ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8b2:	2102      	movs	r1, #2
 800c8b4:	4620      	mov	r0, r4
 800c8b6:	f001 fadb 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800c8ba:	b188      	cbz	r0, 800c8e0 <ucdr_serialize_endian_uint16_t+0xac>
 800c8bc:	2d01      	cmp	r5, #1
 800c8be:	68a3      	ldr	r3, [r4, #8]
 800c8c0:	d014      	beq.n	800c8ec <ucdr_serialize_endian_uint16_t+0xb8>
 800c8c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c8c6:	701a      	strb	r2, [r3, #0]
 800c8c8:	68a3      	ldr	r3, [r4, #8]
 800c8ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c8ce:	705a      	strb	r2, [r3, #1]
 800c8d0:	68a2      	ldr	r2, [r4, #8]
 800c8d2:	6923      	ldr	r3, [r4, #16]
 800c8d4:	3202      	adds	r2, #2
 800c8d6:	3302      	adds	r3, #2
 800c8d8:	2102      	movs	r1, #2
 800c8da:	60a2      	str	r2, [r4, #8]
 800c8dc:	6123      	str	r3, [r4, #16]
 800c8de:	7561      	strb	r1, [r4, #21]
 800c8e0:	7da0      	ldrb	r0, [r4, #22]
 800c8e2:	f080 0001 	eor.w	r0, r0, #1
 800c8e6:	b003      	add	sp, #12
 800c8e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8ec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c8f0:	801a      	strh	r2, [r3, #0]
 800c8f2:	e7ed      	b.n	800c8d0 <ucdr_serialize_endian_uint16_t+0x9c>
 800c8f4:	68a2      	ldr	r2, [r4, #8]
 800c8f6:	6923      	ldr	r3, [r4, #16]
 800c8f8:	7da0      	ldrb	r0, [r4, #22]
 800c8fa:	f884 8015 	strb.w	r8, [r4, #21]
 800c8fe:	1b92      	subs	r2, r2, r6
 800c900:	1b9b      	subs	r3, r3, r6
 800c902:	f080 0001 	eor.w	r0, r0, #1
 800c906:	60a2      	str	r2, [r4, #8]
 800c908:	6123      	str	r3, [r4, #16]
 800c90a:	b003      	add	sp, #12
 800c90c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c910:	68a3      	ldr	r3, [r4, #8]
 800c912:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c916:	701a      	strb	r2, [r3, #0]
 800c918:	e7bc      	b.n	800c894 <ucdr_serialize_endian_uint16_t+0x60>
 800c91a:	f10d 0506 	add.w	r5, sp, #6
 800c91e:	4629      	mov	r1, r5
 800c920:	4632      	mov	r2, r6
 800c922:	4638      	mov	r0, r7
 800c924:	f00a ffdd 	bl	80178e2 <memcpy>
 800c928:	68a0      	ldr	r0, [r4, #8]
 800c92a:	464a      	mov	r2, r9
 800c92c:	19a9      	adds	r1, r5, r6
 800c92e:	f00a ffd8 	bl	80178e2 <memcpy>
 800c932:	e7af      	b.n	800c894 <ucdr_serialize_endian_uint16_t+0x60>

0800c934 <ucdr_deserialize_uint16_t>:
 800c934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c938:	460d      	mov	r5, r1
 800c93a:	2102      	movs	r1, #2
 800c93c:	4604      	mov	r4, r0
 800c93e:	f001 faeb 	bl	800df18 <ucdr_buffer_alignment>
 800c942:	4601      	mov	r1, r0
 800c944:	4620      	mov	r0, r4
 800c946:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c94a:	f001 fb29 	bl	800dfa0 <ucdr_advance_buffer>
 800c94e:	2102      	movs	r1, #2
 800c950:	4620      	mov	r0, r4
 800c952:	f001 fa81 	bl	800de58 <ucdr_check_buffer_available_for>
 800c956:	bb60      	cbnz	r0, 800c9b2 <ucdr_deserialize_uint16_t+0x7e>
 800c958:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c95c:	42be      	cmp	r6, r7
 800c95e:	d923      	bls.n	800c9a8 <ucdr_deserialize_uint16_t+0x74>
 800c960:	6923      	ldr	r3, [r4, #16]
 800c962:	60a6      	str	r6, [r4, #8]
 800c964:	1bf6      	subs	r6, r6, r7
 800c966:	4433      	add	r3, r6
 800c968:	f1c6 0902 	rsb	r9, r6, #2
 800c96c:	6123      	str	r3, [r4, #16]
 800c96e:	4649      	mov	r1, r9
 800c970:	4620      	mov	r0, r4
 800c972:	f001 fa7d 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800c976:	2800      	cmp	r0, #0
 800c978:	d034      	beq.n	800c9e4 <ucdr_deserialize_uint16_t+0xb0>
 800c97a:	7d23      	ldrb	r3, [r4, #20]
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d042      	beq.n	800ca06 <ucdr_deserialize_uint16_t+0xd2>
 800c980:	787b      	ldrb	r3, [r7, #1]
 800c982:	702b      	strb	r3, [r5, #0]
 800c984:	2e00      	cmp	r6, #0
 800c986:	d03a      	beq.n	800c9fe <ucdr_deserialize_uint16_t+0xca>
 800c988:	783b      	ldrb	r3, [r7, #0]
 800c98a:	706b      	strb	r3, [r5, #1]
 800c98c:	6923      	ldr	r3, [r4, #16]
 800c98e:	68a2      	ldr	r2, [r4, #8]
 800c990:	7da0      	ldrb	r0, [r4, #22]
 800c992:	2102      	movs	r1, #2
 800c994:	3302      	adds	r3, #2
 800c996:	444a      	add	r2, r9
 800c998:	1b9b      	subs	r3, r3, r6
 800c99a:	7561      	strb	r1, [r4, #21]
 800c99c:	60a2      	str	r2, [r4, #8]
 800c99e:	6123      	str	r3, [r4, #16]
 800c9a0:	f080 0001 	eor.w	r0, r0, #1
 800c9a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9a8:	2102      	movs	r1, #2
 800c9aa:	4620      	mov	r0, r4
 800c9ac:	f001 fa60 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800c9b0:	b180      	cbz	r0, 800c9d4 <ucdr_deserialize_uint16_t+0xa0>
 800c9b2:	7d23      	ldrb	r3, [r4, #20]
 800c9b4:	2b01      	cmp	r3, #1
 800c9b6:	68a3      	ldr	r3, [r4, #8]
 800c9b8:	d011      	beq.n	800c9de <ucdr_deserialize_uint16_t+0xaa>
 800c9ba:	785b      	ldrb	r3, [r3, #1]
 800c9bc:	702b      	strb	r3, [r5, #0]
 800c9be:	68a3      	ldr	r3, [r4, #8]
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	706b      	strb	r3, [r5, #1]
 800c9c4:	68a2      	ldr	r2, [r4, #8]
 800c9c6:	6923      	ldr	r3, [r4, #16]
 800c9c8:	3202      	adds	r2, #2
 800c9ca:	3302      	adds	r3, #2
 800c9cc:	2102      	movs	r1, #2
 800c9ce:	60a2      	str	r2, [r4, #8]
 800c9d0:	6123      	str	r3, [r4, #16]
 800c9d2:	7561      	strb	r1, [r4, #21]
 800c9d4:	7da0      	ldrb	r0, [r4, #22]
 800c9d6:	f080 0001 	eor.w	r0, r0, #1
 800c9da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9de:	881b      	ldrh	r3, [r3, #0]
 800c9e0:	802b      	strh	r3, [r5, #0]
 800c9e2:	e7ef      	b.n	800c9c4 <ucdr_deserialize_uint16_t+0x90>
 800c9e4:	68a2      	ldr	r2, [r4, #8]
 800c9e6:	6923      	ldr	r3, [r4, #16]
 800c9e8:	7da0      	ldrb	r0, [r4, #22]
 800c9ea:	f884 8015 	strb.w	r8, [r4, #21]
 800c9ee:	1b92      	subs	r2, r2, r6
 800c9f0:	1b9b      	subs	r3, r3, r6
 800c9f2:	60a2      	str	r2, [r4, #8]
 800c9f4:	6123      	str	r3, [r4, #16]
 800c9f6:	f080 0001 	eor.w	r0, r0, #1
 800c9fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9fe:	68a3      	ldr	r3, [r4, #8]
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	706b      	strb	r3, [r5, #1]
 800ca04:	e7c2      	b.n	800c98c <ucdr_deserialize_uint16_t+0x58>
 800ca06:	4639      	mov	r1, r7
 800ca08:	4632      	mov	r2, r6
 800ca0a:	4628      	mov	r0, r5
 800ca0c:	f00a ff69 	bl	80178e2 <memcpy>
 800ca10:	68a1      	ldr	r1, [r4, #8]
 800ca12:	464a      	mov	r2, r9
 800ca14:	19a8      	adds	r0, r5, r6
 800ca16:	f00a ff64 	bl	80178e2 <memcpy>
 800ca1a:	e7b7      	b.n	800c98c <ucdr_deserialize_uint16_t+0x58>

0800ca1c <ucdr_deserialize_endian_uint16_t>:
 800ca1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca20:	460e      	mov	r6, r1
 800ca22:	2102      	movs	r1, #2
 800ca24:	4604      	mov	r4, r0
 800ca26:	4615      	mov	r5, r2
 800ca28:	f001 fa76 	bl	800df18 <ucdr_buffer_alignment>
 800ca2c:	4601      	mov	r1, r0
 800ca2e:	4620      	mov	r0, r4
 800ca30:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ca34:	f001 fab4 	bl	800dfa0 <ucdr_advance_buffer>
 800ca38:	2102      	movs	r1, #2
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	f001 fa0c 	bl	800de58 <ucdr_check_buffer_available_for>
 800ca40:	bb70      	cbnz	r0, 800caa0 <ucdr_deserialize_endian_uint16_t+0x84>
 800ca42:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800ca46:	4547      	cmp	r7, r8
 800ca48:	d925      	bls.n	800ca96 <ucdr_deserialize_endian_uint16_t+0x7a>
 800ca4a:	6923      	ldr	r3, [r4, #16]
 800ca4c:	60a7      	str	r7, [r4, #8]
 800ca4e:	eba7 0708 	sub.w	r7, r7, r8
 800ca52:	443b      	add	r3, r7
 800ca54:	f1c7 0a02 	rsb	sl, r7, #2
 800ca58:	6123      	str	r3, [r4, #16]
 800ca5a:	4651      	mov	r1, sl
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	f001 fa07 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800ca62:	2800      	cmp	r0, #0
 800ca64:	d034      	beq.n	800cad0 <ucdr_deserialize_endian_uint16_t+0xb4>
 800ca66:	2e01      	cmp	r6, #1
 800ca68:	d043      	beq.n	800caf2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800ca6a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ca6e:	702b      	strb	r3, [r5, #0]
 800ca70:	2f00      	cmp	r7, #0
 800ca72:	d03a      	beq.n	800caea <ucdr_deserialize_endian_uint16_t+0xce>
 800ca74:	f898 3000 	ldrb.w	r3, [r8]
 800ca78:	706b      	strb	r3, [r5, #1]
 800ca7a:	6923      	ldr	r3, [r4, #16]
 800ca7c:	68a2      	ldr	r2, [r4, #8]
 800ca7e:	7da0      	ldrb	r0, [r4, #22]
 800ca80:	2102      	movs	r1, #2
 800ca82:	3302      	adds	r3, #2
 800ca84:	4452      	add	r2, sl
 800ca86:	1bdb      	subs	r3, r3, r7
 800ca88:	7561      	strb	r1, [r4, #21]
 800ca8a:	60a2      	str	r2, [r4, #8]
 800ca8c:	6123      	str	r3, [r4, #16]
 800ca8e:	f080 0001 	eor.w	r0, r0, #1
 800ca92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca96:	2102      	movs	r1, #2
 800ca98:	4620      	mov	r0, r4
 800ca9a:	f001 f9e9 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800ca9e:	b178      	cbz	r0, 800cac0 <ucdr_deserialize_endian_uint16_t+0xa4>
 800caa0:	2e01      	cmp	r6, #1
 800caa2:	68a3      	ldr	r3, [r4, #8]
 800caa4:	d011      	beq.n	800caca <ucdr_deserialize_endian_uint16_t+0xae>
 800caa6:	785b      	ldrb	r3, [r3, #1]
 800caa8:	702b      	strb	r3, [r5, #0]
 800caaa:	68a3      	ldr	r3, [r4, #8]
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	706b      	strb	r3, [r5, #1]
 800cab0:	68a2      	ldr	r2, [r4, #8]
 800cab2:	6923      	ldr	r3, [r4, #16]
 800cab4:	3202      	adds	r2, #2
 800cab6:	3302      	adds	r3, #2
 800cab8:	2102      	movs	r1, #2
 800caba:	60a2      	str	r2, [r4, #8]
 800cabc:	6123      	str	r3, [r4, #16]
 800cabe:	7561      	strb	r1, [r4, #21]
 800cac0:	7da0      	ldrb	r0, [r4, #22]
 800cac2:	f080 0001 	eor.w	r0, r0, #1
 800cac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caca:	881b      	ldrh	r3, [r3, #0]
 800cacc:	802b      	strh	r3, [r5, #0]
 800cace:	e7ef      	b.n	800cab0 <ucdr_deserialize_endian_uint16_t+0x94>
 800cad0:	68a2      	ldr	r2, [r4, #8]
 800cad2:	6923      	ldr	r3, [r4, #16]
 800cad4:	7da0      	ldrb	r0, [r4, #22]
 800cad6:	f884 9015 	strb.w	r9, [r4, #21]
 800cada:	1bd2      	subs	r2, r2, r7
 800cadc:	1bdb      	subs	r3, r3, r7
 800cade:	60a2      	str	r2, [r4, #8]
 800cae0:	6123      	str	r3, [r4, #16]
 800cae2:	f080 0001 	eor.w	r0, r0, #1
 800cae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caea:	68a3      	ldr	r3, [r4, #8]
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	706b      	strb	r3, [r5, #1]
 800caf0:	e7c3      	b.n	800ca7a <ucdr_deserialize_endian_uint16_t+0x5e>
 800caf2:	4641      	mov	r1, r8
 800caf4:	463a      	mov	r2, r7
 800caf6:	4628      	mov	r0, r5
 800caf8:	f00a fef3 	bl	80178e2 <memcpy>
 800cafc:	68a1      	ldr	r1, [r4, #8]
 800cafe:	4652      	mov	r2, sl
 800cb00:	19e8      	adds	r0, r5, r7
 800cb02:	f00a feee 	bl	80178e2 <memcpy>
 800cb06:	e7b8      	b.n	800ca7a <ucdr_deserialize_endian_uint16_t+0x5e>

0800cb08 <ucdr_serialize_uint32_t>:
 800cb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb0c:	b082      	sub	sp, #8
 800cb0e:	4604      	mov	r4, r0
 800cb10:	9101      	str	r1, [sp, #4]
 800cb12:	2104      	movs	r1, #4
 800cb14:	f001 fa00 	bl	800df18 <ucdr_buffer_alignment>
 800cb18:	4601      	mov	r1, r0
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	7d67      	ldrb	r7, [r4, #21]
 800cb1e:	f001 fa3f 	bl	800dfa0 <ucdr_advance_buffer>
 800cb22:	2104      	movs	r1, #4
 800cb24:	4620      	mov	r0, r4
 800cb26:	f001 f997 	bl	800de58 <ucdr_check_buffer_available_for>
 800cb2a:	2800      	cmp	r0, #0
 800cb2c:	d139      	bne.n	800cba2 <ucdr_serialize_uint32_t+0x9a>
 800cb2e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800cb32:	42ab      	cmp	r3, r5
 800cb34:	d930      	bls.n	800cb98 <ucdr_serialize_uint32_t+0x90>
 800cb36:	1b5e      	subs	r6, r3, r5
 800cb38:	60a3      	str	r3, [r4, #8]
 800cb3a:	6923      	ldr	r3, [r4, #16]
 800cb3c:	f1c6 0804 	rsb	r8, r6, #4
 800cb40:	4433      	add	r3, r6
 800cb42:	6123      	str	r3, [r4, #16]
 800cb44:	4641      	mov	r1, r8
 800cb46:	4620      	mov	r0, r4
 800cb48:	f001 f992 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800cb4c:	2800      	cmp	r0, #0
 800cb4e:	d04c      	beq.n	800cbea <ucdr_serialize_uint32_t+0xe2>
 800cb50:	7d23      	ldrb	r3, [r4, #20]
 800cb52:	2b01      	cmp	r3, #1
 800cb54:	d063      	beq.n	800cc1e <ucdr_serialize_uint32_t+0x116>
 800cb56:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cb5a:	702b      	strb	r3, [r5, #0]
 800cb5c:	2e00      	cmp	r6, #0
 800cb5e:	d051      	beq.n	800cc04 <ucdr_serialize_uint32_t+0xfc>
 800cb60:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cb64:	706b      	strb	r3, [r5, #1]
 800cb66:	2e01      	cmp	r6, #1
 800cb68:	d050      	beq.n	800cc0c <ucdr_serialize_uint32_t+0x104>
 800cb6a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cb6e:	70ab      	strb	r3, [r5, #2]
 800cb70:	2e02      	cmp	r6, #2
 800cb72:	d04f      	beq.n	800cc14 <ucdr_serialize_uint32_t+0x10c>
 800cb74:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cb78:	70eb      	strb	r3, [r5, #3]
 800cb7a:	6923      	ldr	r3, [r4, #16]
 800cb7c:	68a2      	ldr	r2, [r4, #8]
 800cb7e:	7da0      	ldrb	r0, [r4, #22]
 800cb80:	3304      	adds	r3, #4
 800cb82:	1b9e      	subs	r6, r3, r6
 800cb84:	4442      	add	r2, r8
 800cb86:	2304      	movs	r3, #4
 800cb88:	f080 0001 	eor.w	r0, r0, #1
 800cb8c:	60a2      	str	r2, [r4, #8]
 800cb8e:	6126      	str	r6, [r4, #16]
 800cb90:	7563      	strb	r3, [r4, #21]
 800cb92:	b002      	add	sp, #8
 800cb94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb98:	2104      	movs	r1, #4
 800cb9a:	4620      	mov	r0, r4
 800cb9c:	f001 f968 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800cba0:	b1d0      	cbz	r0, 800cbd8 <ucdr_serialize_uint32_t+0xd0>
 800cba2:	7d23      	ldrb	r3, [r4, #20]
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	68a3      	ldr	r3, [r4, #8]
 800cba8:	d01c      	beq.n	800cbe4 <ucdr_serialize_uint32_t+0xdc>
 800cbaa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cbae:	701a      	strb	r2, [r3, #0]
 800cbb0:	68a3      	ldr	r3, [r4, #8]
 800cbb2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cbb6:	705a      	strb	r2, [r3, #1]
 800cbb8:	68a3      	ldr	r3, [r4, #8]
 800cbba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cbbe:	709a      	strb	r2, [r3, #2]
 800cbc0:	68a3      	ldr	r3, [r4, #8]
 800cbc2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cbc6:	70da      	strb	r2, [r3, #3]
 800cbc8:	68a2      	ldr	r2, [r4, #8]
 800cbca:	6923      	ldr	r3, [r4, #16]
 800cbcc:	3204      	adds	r2, #4
 800cbce:	3304      	adds	r3, #4
 800cbd0:	2104      	movs	r1, #4
 800cbd2:	60a2      	str	r2, [r4, #8]
 800cbd4:	6123      	str	r3, [r4, #16]
 800cbd6:	7561      	strb	r1, [r4, #21]
 800cbd8:	7da0      	ldrb	r0, [r4, #22]
 800cbda:	f080 0001 	eor.w	r0, r0, #1
 800cbde:	b002      	add	sp, #8
 800cbe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbe4:	9a01      	ldr	r2, [sp, #4]
 800cbe6:	601a      	str	r2, [r3, #0]
 800cbe8:	e7ee      	b.n	800cbc8 <ucdr_serialize_uint32_t+0xc0>
 800cbea:	68a2      	ldr	r2, [r4, #8]
 800cbec:	6923      	ldr	r3, [r4, #16]
 800cbee:	7da0      	ldrb	r0, [r4, #22]
 800cbf0:	7567      	strb	r7, [r4, #21]
 800cbf2:	1b92      	subs	r2, r2, r6
 800cbf4:	1b9b      	subs	r3, r3, r6
 800cbf6:	f080 0001 	eor.w	r0, r0, #1
 800cbfa:	60a2      	str	r2, [r4, #8]
 800cbfc:	6123      	str	r3, [r4, #16]
 800cbfe:	b002      	add	sp, #8
 800cc00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc04:	68a3      	ldr	r3, [r4, #8]
 800cc06:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cc0a:	701a      	strb	r2, [r3, #0]
 800cc0c:	68a3      	ldr	r3, [r4, #8]
 800cc0e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cc12:	701a      	strb	r2, [r3, #0]
 800cc14:	68a3      	ldr	r3, [r4, #8]
 800cc16:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cc1a:	701a      	strb	r2, [r3, #0]
 800cc1c:	e7ad      	b.n	800cb7a <ucdr_serialize_uint32_t+0x72>
 800cc1e:	4628      	mov	r0, r5
 800cc20:	ad01      	add	r5, sp, #4
 800cc22:	4629      	mov	r1, r5
 800cc24:	4632      	mov	r2, r6
 800cc26:	f00a fe5c 	bl	80178e2 <memcpy>
 800cc2a:	68a0      	ldr	r0, [r4, #8]
 800cc2c:	4642      	mov	r2, r8
 800cc2e:	19a9      	adds	r1, r5, r6
 800cc30:	f00a fe57 	bl	80178e2 <memcpy>
 800cc34:	e7a1      	b.n	800cb7a <ucdr_serialize_uint32_t+0x72>
 800cc36:	bf00      	nop

0800cc38 <ucdr_serialize_endian_uint32_t>:
 800cc38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc3c:	b083      	sub	sp, #12
 800cc3e:	460d      	mov	r5, r1
 800cc40:	2104      	movs	r1, #4
 800cc42:	4604      	mov	r4, r0
 800cc44:	9201      	str	r2, [sp, #4]
 800cc46:	f001 f967 	bl	800df18 <ucdr_buffer_alignment>
 800cc4a:	4601      	mov	r1, r0
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cc52:	f001 f9a5 	bl	800dfa0 <ucdr_advance_buffer>
 800cc56:	2104      	movs	r1, #4
 800cc58:	4620      	mov	r0, r4
 800cc5a:	f001 f8fd 	bl	800de58 <ucdr_check_buffer_available_for>
 800cc5e:	2800      	cmp	r0, #0
 800cc60:	d138      	bne.n	800ccd4 <ucdr_serialize_endian_uint32_t+0x9c>
 800cc62:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800cc66:	42b7      	cmp	r7, r6
 800cc68:	d92f      	bls.n	800ccca <ucdr_serialize_endian_uint32_t+0x92>
 800cc6a:	6923      	ldr	r3, [r4, #16]
 800cc6c:	60a7      	str	r7, [r4, #8]
 800cc6e:	1bbf      	subs	r7, r7, r6
 800cc70:	443b      	add	r3, r7
 800cc72:	f1c7 0904 	rsb	r9, r7, #4
 800cc76:	6123      	str	r3, [r4, #16]
 800cc78:	4649      	mov	r1, r9
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	f001 f8f8 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800cc80:	2800      	cmp	r0, #0
 800cc82:	d04a      	beq.n	800cd1a <ucdr_serialize_endian_uint32_t+0xe2>
 800cc84:	2d01      	cmp	r5, #1
 800cc86:	d063      	beq.n	800cd50 <ucdr_serialize_endian_uint32_t+0x118>
 800cc88:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cc8c:	7033      	strb	r3, [r6, #0]
 800cc8e:	2f00      	cmp	r7, #0
 800cc90:	d051      	beq.n	800cd36 <ucdr_serialize_endian_uint32_t+0xfe>
 800cc92:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cc96:	7073      	strb	r3, [r6, #1]
 800cc98:	2f01      	cmp	r7, #1
 800cc9a:	d050      	beq.n	800cd3e <ucdr_serialize_endian_uint32_t+0x106>
 800cc9c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cca0:	70b3      	strb	r3, [r6, #2]
 800cca2:	2f02      	cmp	r7, #2
 800cca4:	d04f      	beq.n	800cd46 <ucdr_serialize_endian_uint32_t+0x10e>
 800cca6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ccaa:	70f3      	strb	r3, [r6, #3]
 800ccac:	6923      	ldr	r3, [r4, #16]
 800ccae:	68a2      	ldr	r2, [r4, #8]
 800ccb0:	7da0      	ldrb	r0, [r4, #22]
 800ccb2:	3304      	adds	r3, #4
 800ccb4:	444a      	add	r2, r9
 800ccb6:	1bdb      	subs	r3, r3, r7
 800ccb8:	2104      	movs	r1, #4
 800ccba:	f080 0001 	eor.w	r0, r0, #1
 800ccbe:	60a2      	str	r2, [r4, #8]
 800ccc0:	6123      	str	r3, [r4, #16]
 800ccc2:	7561      	strb	r1, [r4, #21]
 800ccc4:	b003      	add	sp, #12
 800ccc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccca:	2104      	movs	r1, #4
 800cccc:	4620      	mov	r0, r4
 800ccce:	f001 f8cf 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800ccd2:	b1c8      	cbz	r0, 800cd08 <ucdr_serialize_endian_uint32_t+0xd0>
 800ccd4:	2d01      	cmp	r5, #1
 800ccd6:	68a3      	ldr	r3, [r4, #8]
 800ccd8:	d01c      	beq.n	800cd14 <ucdr_serialize_endian_uint32_t+0xdc>
 800ccda:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ccde:	701a      	strb	r2, [r3, #0]
 800cce0:	68a3      	ldr	r3, [r4, #8]
 800cce2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cce6:	705a      	strb	r2, [r3, #1]
 800cce8:	68a3      	ldr	r3, [r4, #8]
 800ccea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ccee:	709a      	strb	r2, [r3, #2]
 800ccf0:	68a3      	ldr	r3, [r4, #8]
 800ccf2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ccf6:	70da      	strb	r2, [r3, #3]
 800ccf8:	68a2      	ldr	r2, [r4, #8]
 800ccfa:	6923      	ldr	r3, [r4, #16]
 800ccfc:	3204      	adds	r2, #4
 800ccfe:	3304      	adds	r3, #4
 800cd00:	2104      	movs	r1, #4
 800cd02:	60a2      	str	r2, [r4, #8]
 800cd04:	6123      	str	r3, [r4, #16]
 800cd06:	7561      	strb	r1, [r4, #21]
 800cd08:	7da0      	ldrb	r0, [r4, #22]
 800cd0a:	f080 0001 	eor.w	r0, r0, #1
 800cd0e:	b003      	add	sp, #12
 800cd10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd14:	9a01      	ldr	r2, [sp, #4]
 800cd16:	601a      	str	r2, [r3, #0]
 800cd18:	e7ee      	b.n	800ccf8 <ucdr_serialize_endian_uint32_t+0xc0>
 800cd1a:	68a2      	ldr	r2, [r4, #8]
 800cd1c:	6923      	ldr	r3, [r4, #16]
 800cd1e:	7da0      	ldrb	r0, [r4, #22]
 800cd20:	f884 8015 	strb.w	r8, [r4, #21]
 800cd24:	1bd2      	subs	r2, r2, r7
 800cd26:	1bdb      	subs	r3, r3, r7
 800cd28:	f080 0001 	eor.w	r0, r0, #1
 800cd2c:	60a2      	str	r2, [r4, #8]
 800cd2e:	6123      	str	r3, [r4, #16]
 800cd30:	b003      	add	sp, #12
 800cd32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd36:	68a3      	ldr	r3, [r4, #8]
 800cd38:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cd3c:	701a      	strb	r2, [r3, #0]
 800cd3e:	68a3      	ldr	r3, [r4, #8]
 800cd40:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cd44:	701a      	strb	r2, [r3, #0]
 800cd46:	68a3      	ldr	r3, [r4, #8]
 800cd48:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cd4c:	701a      	strb	r2, [r3, #0]
 800cd4e:	e7ad      	b.n	800ccac <ucdr_serialize_endian_uint32_t+0x74>
 800cd50:	ad01      	add	r5, sp, #4
 800cd52:	4629      	mov	r1, r5
 800cd54:	463a      	mov	r2, r7
 800cd56:	4630      	mov	r0, r6
 800cd58:	f00a fdc3 	bl	80178e2 <memcpy>
 800cd5c:	68a0      	ldr	r0, [r4, #8]
 800cd5e:	464a      	mov	r2, r9
 800cd60:	19e9      	adds	r1, r5, r7
 800cd62:	f00a fdbe 	bl	80178e2 <memcpy>
 800cd66:	e7a1      	b.n	800ccac <ucdr_serialize_endian_uint32_t+0x74>

0800cd68 <ucdr_deserialize_uint32_t>:
 800cd68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd6c:	460d      	mov	r5, r1
 800cd6e:	2104      	movs	r1, #4
 800cd70:	4604      	mov	r4, r0
 800cd72:	f001 f8d1 	bl	800df18 <ucdr_buffer_alignment>
 800cd76:	4601      	mov	r1, r0
 800cd78:	4620      	mov	r0, r4
 800cd7a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cd7e:	f001 f90f 	bl	800dfa0 <ucdr_advance_buffer>
 800cd82:	2104      	movs	r1, #4
 800cd84:	4620      	mov	r0, r4
 800cd86:	f001 f867 	bl	800de58 <ucdr_check_buffer_available_for>
 800cd8a:	2800      	cmp	r0, #0
 800cd8c:	d138      	bne.n	800ce00 <ucdr_deserialize_uint32_t+0x98>
 800cd8e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800cd92:	42b7      	cmp	r7, r6
 800cd94:	d92f      	bls.n	800cdf6 <ucdr_deserialize_uint32_t+0x8e>
 800cd96:	6923      	ldr	r3, [r4, #16]
 800cd98:	60a7      	str	r7, [r4, #8]
 800cd9a:	1bbf      	subs	r7, r7, r6
 800cd9c:	443b      	add	r3, r7
 800cd9e:	f1c7 0904 	rsb	r9, r7, #4
 800cda2:	6123      	str	r3, [r4, #16]
 800cda4:	4649      	mov	r1, r9
 800cda6:	4620      	mov	r0, r4
 800cda8:	f001 f862 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800cdac:	2800      	cmp	r0, #0
 800cdae:	d046      	beq.n	800ce3e <ucdr_deserialize_uint32_t+0xd6>
 800cdb0:	7d23      	ldrb	r3, [r4, #20]
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d05c      	beq.n	800ce70 <ucdr_deserialize_uint32_t+0x108>
 800cdb6:	78f3      	ldrb	r3, [r6, #3]
 800cdb8:	702b      	strb	r3, [r5, #0]
 800cdba:	2f00      	cmp	r7, #0
 800cdbc:	d04c      	beq.n	800ce58 <ucdr_deserialize_uint32_t+0xf0>
 800cdbe:	78b3      	ldrb	r3, [r6, #2]
 800cdc0:	706b      	strb	r3, [r5, #1]
 800cdc2:	2f01      	cmp	r7, #1
 800cdc4:	f105 0302 	add.w	r3, r5, #2
 800cdc8:	d04a      	beq.n	800ce60 <ucdr_deserialize_uint32_t+0xf8>
 800cdca:	7873      	ldrb	r3, [r6, #1]
 800cdcc:	70ab      	strb	r3, [r5, #2]
 800cdce:	2f02      	cmp	r7, #2
 800cdd0:	f105 0303 	add.w	r3, r5, #3
 800cdd4:	d048      	beq.n	800ce68 <ucdr_deserialize_uint32_t+0x100>
 800cdd6:	7833      	ldrb	r3, [r6, #0]
 800cdd8:	70eb      	strb	r3, [r5, #3]
 800cdda:	6923      	ldr	r3, [r4, #16]
 800cddc:	68a2      	ldr	r2, [r4, #8]
 800cdde:	7da0      	ldrb	r0, [r4, #22]
 800cde0:	2104      	movs	r1, #4
 800cde2:	3304      	adds	r3, #4
 800cde4:	444a      	add	r2, r9
 800cde6:	1bdb      	subs	r3, r3, r7
 800cde8:	7561      	strb	r1, [r4, #21]
 800cdea:	60a2      	str	r2, [r4, #8]
 800cdec:	6123      	str	r3, [r4, #16]
 800cdee:	f080 0001 	eor.w	r0, r0, #1
 800cdf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdf6:	2104      	movs	r1, #4
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	f001 f839 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800cdfe:	b1b0      	cbz	r0, 800ce2e <ucdr_deserialize_uint32_t+0xc6>
 800ce00:	7d23      	ldrb	r3, [r4, #20]
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	68a3      	ldr	r3, [r4, #8]
 800ce06:	d017      	beq.n	800ce38 <ucdr_deserialize_uint32_t+0xd0>
 800ce08:	78db      	ldrb	r3, [r3, #3]
 800ce0a:	702b      	strb	r3, [r5, #0]
 800ce0c:	68a3      	ldr	r3, [r4, #8]
 800ce0e:	789b      	ldrb	r3, [r3, #2]
 800ce10:	706b      	strb	r3, [r5, #1]
 800ce12:	68a3      	ldr	r3, [r4, #8]
 800ce14:	785b      	ldrb	r3, [r3, #1]
 800ce16:	70ab      	strb	r3, [r5, #2]
 800ce18:	68a3      	ldr	r3, [r4, #8]
 800ce1a:	781b      	ldrb	r3, [r3, #0]
 800ce1c:	70eb      	strb	r3, [r5, #3]
 800ce1e:	68a2      	ldr	r2, [r4, #8]
 800ce20:	6923      	ldr	r3, [r4, #16]
 800ce22:	3204      	adds	r2, #4
 800ce24:	3304      	adds	r3, #4
 800ce26:	2104      	movs	r1, #4
 800ce28:	60a2      	str	r2, [r4, #8]
 800ce2a:	6123      	str	r3, [r4, #16]
 800ce2c:	7561      	strb	r1, [r4, #21]
 800ce2e:	7da0      	ldrb	r0, [r4, #22]
 800ce30:	f080 0001 	eor.w	r0, r0, #1
 800ce34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	602b      	str	r3, [r5, #0]
 800ce3c:	e7ef      	b.n	800ce1e <ucdr_deserialize_uint32_t+0xb6>
 800ce3e:	68a2      	ldr	r2, [r4, #8]
 800ce40:	6923      	ldr	r3, [r4, #16]
 800ce42:	7da0      	ldrb	r0, [r4, #22]
 800ce44:	f884 8015 	strb.w	r8, [r4, #21]
 800ce48:	1bd2      	subs	r2, r2, r7
 800ce4a:	1bdb      	subs	r3, r3, r7
 800ce4c:	60a2      	str	r2, [r4, #8]
 800ce4e:	6123      	str	r3, [r4, #16]
 800ce50:	f080 0001 	eor.w	r0, r0, #1
 800ce54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce58:	68a3      	ldr	r3, [r4, #8]
 800ce5a:	789b      	ldrb	r3, [r3, #2]
 800ce5c:	706b      	strb	r3, [r5, #1]
 800ce5e:	1cab      	adds	r3, r5, #2
 800ce60:	68a2      	ldr	r2, [r4, #8]
 800ce62:	7852      	ldrb	r2, [r2, #1]
 800ce64:	f803 2b01 	strb.w	r2, [r3], #1
 800ce68:	68a2      	ldr	r2, [r4, #8]
 800ce6a:	7812      	ldrb	r2, [r2, #0]
 800ce6c:	701a      	strb	r2, [r3, #0]
 800ce6e:	e7b4      	b.n	800cdda <ucdr_deserialize_uint32_t+0x72>
 800ce70:	4631      	mov	r1, r6
 800ce72:	463a      	mov	r2, r7
 800ce74:	4628      	mov	r0, r5
 800ce76:	f00a fd34 	bl	80178e2 <memcpy>
 800ce7a:	68a1      	ldr	r1, [r4, #8]
 800ce7c:	464a      	mov	r2, r9
 800ce7e:	19e8      	adds	r0, r5, r7
 800ce80:	f00a fd2f 	bl	80178e2 <memcpy>
 800ce84:	e7a9      	b.n	800cdda <ucdr_deserialize_uint32_t+0x72>
 800ce86:	bf00      	nop

0800ce88 <ucdr_deserialize_endian_uint32_t>:
 800ce88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce8c:	460e      	mov	r6, r1
 800ce8e:	2104      	movs	r1, #4
 800ce90:	4604      	mov	r4, r0
 800ce92:	4615      	mov	r5, r2
 800ce94:	f001 f840 	bl	800df18 <ucdr_buffer_alignment>
 800ce98:	4601      	mov	r1, r0
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800cea0:	f001 f87e 	bl	800dfa0 <ucdr_advance_buffer>
 800cea4:	2104      	movs	r1, #4
 800cea6:	4620      	mov	r0, r4
 800cea8:	f000 ffd6 	bl	800de58 <ucdr_check_buffer_available_for>
 800ceac:	2800      	cmp	r0, #0
 800ceae:	d13c      	bne.n	800cf2a <ucdr_deserialize_endian_uint32_t+0xa2>
 800ceb0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800ceb4:	42bb      	cmp	r3, r7
 800ceb6:	d933      	bls.n	800cf20 <ucdr_deserialize_endian_uint32_t+0x98>
 800ceb8:	eba3 0807 	sub.w	r8, r3, r7
 800cebc:	60a3      	str	r3, [r4, #8]
 800cebe:	6923      	ldr	r3, [r4, #16]
 800cec0:	f1c8 0a04 	rsb	sl, r8, #4
 800cec4:	4443      	add	r3, r8
 800cec6:	6123      	str	r3, [r4, #16]
 800cec8:	4651      	mov	r1, sl
 800ceca:	4620      	mov	r0, r4
 800cecc:	f000 ffd0 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800ced0:	2800      	cmp	r0, #0
 800ced2:	d048      	beq.n	800cf66 <ucdr_deserialize_endian_uint32_t+0xde>
 800ced4:	2e01      	cmp	r6, #1
 800ced6:	d061      	beq.n	800cf9c <ucdr_deserialize_endian_uint32_t+0x114>
 800ced8:	78fb      	ldrb	r3, [r7, #3]
 800ceda:	702b      	strb	r3, [r5, #0]
 800cedc:	f1b8 0f00 	cmp.w	r8, #0
 800cee0:	d050      	beq.n	800cf84 <ucdr_deserialize_endian_uint32_t+0xfc>
 800cee2:	78bb      	ldrb	r3, [r7, #2]
 800cee4:	706b      	strb	r3, [r5, #1]
 800cee6:	f1b8 0f01 	cmp.w	r8, #1
 800ceea:	f105 0302 	add.w	r3, r5, #2
 800ceee:	d04d      	beq.n	800cf8c <ucdr_deserialize_endian_uint32_t+0x104>
 800cef0:	787b      	ldrb	r3, [r7, #1]
 800cef2:	70ab      	strb	r3, [r5, #2]
 800cef4:	f1b8 0f02 	cmp.w	r8, #2
 800cef8:	f105 0303 	add.w	r3, r5, #3
 800cefc:	d04a      	beq.n	800cf94 <ucdr_deserialize_endian_uint32_t+0x10c>
 800cefe:	783b      	ldrb	r3, [r7, #0]
 800cf00:	70eb      	strb	r3, [r5, #3]
 800cf02:	6923      	ldr	r3, [r4, #16]
 800cf04:	68a2      	ldr	r2, [r4, #8]
 800cf06:	7da0      	ldrb	r0, [r4, #22]
 800cf08:	2104      	movs	r1, #4
 800cf0a:	3304      	adds	r3, #4
 800cf0c:	4452      	add	r2, sl
 800cf0e:	eba3 0308 	sub.w	r3, r3, r8
 800cf12:	7561      	strb	r1, [r4, #21]
 800cf14:	60a2      	str	r2, [r4, #8]
 800cf16:	6123      	str	r3, [r4, #16]
 800cf18:	f080 0001 	eor.w	r0, r0, #1
 800cf1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf20:	2104      	movs	r1, #4
 800cf22:	4620      	mov	r0, r4
 800cf24:	f000 ffa4 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800cf28:	b1a8      	cbz	r0, 800cf56 <ucdr_deserialize_endian_uint32_t+0xce>
 800cf2a:	2e01      	cmp	r6, #1
 800cf2c:	68a3      	ldr	r3, [r4, #8]
 800cf2e:	d017      	beq.n	800cf60 <ucdr_deserialize_endian_uint32_t+0xd8>
 800cf30:	78db      	ldrb	r3, [r3, #3]
 800cf32:	702b      	strb	r3, [r5, #0]
 800cf34:	68a3      	ldr	r3, [r4, #8]
 800cf36:	789b      	ldrb	r3, [r3, #2]
 800cf38:	706b      	strb	r3, [r5, #1]
 800cf3a:	68a3      	ldr	r3, [r4, #8]
 800cf3c:	785b      	ldrb	r3, [r3, #1]
 800cf3e:	70ab      	strb	r3, [r5, #2]
 800cf40:	68a3      	ldr	r3, [r4, #8]
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	70eb      	strb	r3, [r5, #3]
 800cf46:	68a2      	ldr	r2, [r4, #8]
 800cf48:	6923      	ldr	r3, [r4, #16]
 800cf4a:	3204      	adds	r2, #4
 800cf4c:	3304      	adds	r3, #4
 800cf4e:	2104      	movs	r1, #4
 800cf50:	60a2      	str	r2, [r4, #8]
 800cf52:	6123      	str	r3, [r4, #16]
 800cf54:	7561      	strb	r1, [r4, #21]
 800cf56:	7da0      	ldrb	r0, [r4, #22]
 800cf58:	f080 0001 	eor.w	r0, r0, #1
 800cf5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	602b      	str	r3, [r5, #0]
 800cf64:	e7ef      	b.n	800cf46 <ucdr_deserialize_endian_uint32_t+0xbe>
 800cf66:	68a2      	ldr	r2, [r4, #8]
 800cf68:	6923      	ldr	r3, [r4, #16]
 800cf6a:	7da0      	ldrb	r0, [r4, #22]
 800cf6c:	f884 9015 	strb.w	r9, [r4, #21]
 800cf70:	eba2 0208 	sub.w	r2, r2, r8
 800cf74:	eba3 0308 	sub.w	r3, r3, r8
 800cf78:	60a2      	str	r2, [r4, #8]
 800cf7a:	6123      	str	r3, [r4, #16]
 800cf7c:	f080 0001 	eor.w	r0, r0, #1
 800cf80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf84:	68a3      	ldr	r3, [r4, #8]
 800cf86:	789b      	ldrb	r3, [r3, #2]
 800cf88:	706b      	strb	r3, [r5, #1]
 800cf8a:	1cab      	adds	r3, r5, #2
 800cf8c:	68a2      	ldr	r2, [r4, #8]
 800cf8e:	7852      	ldrb	r2, [r2, #1]
 800cf90:	f803 2b01 	strb.w	r2, [r3], #1
 800cf94:	68a2      	ldr	r2, [r4, #8]
 800cf96:	7812      	ldrb	r2, [r2, #0]
 800cf98:	701a      	strb	r2, [r3, #0]
 800cf9a:	e7b2      	b.n	800cf02 <ucdr_deserialize_endian_uint32_t+0x7a>
 800cf9c:	4639      	mov	r1, r7
 800cf9e:	4642      	mov	r2, r8
 800cfa0:	4628      	mov	r0, r5
 800cfa2:	f00a fc9e 	bl	80178e2 <memcpy>
 800cfa6:	68a1      	ldr	r1, [r4, #8]
 800cfa8:	4652      	mov	r2, sl
 800cfaa:	eb05 0008 	add.w	r0, r5, r8
 800cfae:	f00a fc98 	bl	80178e2 <memcpy>
 800cfb2:	e7a6      	b.n	800cf02 <ucdr_deserialize_endian_uint32_t+0x7a>

0800cfb4 <ucdr_serialize_uint64_t>:
 800cfb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfb8:	2108      	movs	r1, #8
 800cfba:	b082      	sub	sp, #8
 800cfbc:	4604      	mov	r4, r0
 800cfbe:	e9cd 2300 	strd	r2, r3, [sp]
 800cfc2:	f000 ffa9 	bl	800df18 <ucdr_buffer_alignment>
 800cfc6:	4601      	mov	r1, r0
 800cfc8:	4620      	mov	r0, r4
 800cfca:	7d67      	ldrb	r7, [r4, #21]
 800cfcc:	f000 ffe8 	bl	800dfa0 <ucdr_advance_buffer>
 800cfd0:	2108      	movs	r1, #8
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	f000 ff40 	bl	800de58 <ucdr_check_buffer_available_for>
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	d14e      	bne.n	800d07a <ucdr_serialize_uint64_t+0xc6>
 800cfdc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800cfe0:	42ab      	cmp	r3, r5
 800cfe2:	d945      	bls.n	800d070 <ucdr_serialize_uint64_t+0xbc>
 800cfe4:	1b5e      	subs	r6, r3, r5
 800cfe6:	60a3      	str	r3, [r4, #8]
 800cfe8:	6923      	ldr	r3, [r4, #16]
 800cfea:	f1c6 0808 	rsb	r8, r6, #8
 800cfee:	4433      	add	r3, r6
 800cff0:	6123      	str	r3, [r4, #16]
 800cff2:	4641      	mov	r1, r8
 800cff4:	4620      	mov	r0, r4
 800cff6:	f000 ff3b 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800cffa:	2800      	cmp	r0, #0
 800cffc:	d074      	beq.n	800d0e8 <ucdr_serialize_uint64_t+0x134>
 800cffe:	7d23      	ldrb	r3, [r4, #20]
 800d000:	2b01      	cmp	r3, #1
 800d002:	f000 809b 	beq.w	800d13c <ucdr_serialize_uint64_t+0x188>
 800d006:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d00a:	702b      	strb	r3, [r5, #0]
 800d00c:	2e00      	cmp	r6, #0
 800d00e:	d078      	beq.n	800d102 <ucdr_serialize_uint64_t+0x14e>
 800d010:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d014:	706b      	strb	r3, [r5, #1]
 800d016:	2e01      	cmp	r6, #1
 800d018:	d077      	beq.n	800d10a <ucdr_serialize_uint64_t+0x156>
 800d01a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d01e:	70ab      	strb	r3, [r5, #2]
 800d020:	2e02      	cmp	r6, #2
 800d022:	d076      	beq.n	800d112 <ucdr_serialize_uint64_t+0x15e>
 800d024:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d028:	70eb      	strb	r3, [r5, #3]
 800d02a:	2e03      	cmp	r6, #3
 800d02c:	d075      	beq.n	800d11a <ucdr_serialize_uint64_t+0x166>
 800d02e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d032:	712b      	strb	r3, [r5, #4]
 800d034:	2e04      	cmp	r6, #4
 800d036:	d074      	beq.n	800d122 <ucdr_serialize_uint64_t+0x16e>
 800d038:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d03c:	716b      	strb	r3, [r5, #5]
 800d03e:	2e05      	cmp	r6, #5
 800d040:	d073      	beq.n	800d12a <ucdr_serialize_uint64_t+0x176>
 800d042:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d046:	71ab      	strb	r3, [r5, #6]
 800d048:	2e06      	cmp	r6, #6
 800d04a:	d072      	beq.n	800d132 <ucdr_serialize_uint64_t+0x17e>
 800d04c:	f89d 3000 	ldrb.w	r3, [sp]
 800d050:	71eb      	strb	r3, [r5, #7]
 800d052:	6923      	ldr	r3, [r4, #16]
 800d054:	68a2      	ldr	r2, [r4, #8]
 800d056:	7da0      	ldrb	r0, [r4, #22]
 800d058:	3308      	adds	r3, #8
 800d05a:	1b9e      	subs	r6, r3, r6
 800d05c:	4442      	add	r2, r8
 800d05e:	2308      	movs	r3, #8
 800d060:	f080 0001 	eor.w	r0, r0, #1
 800d064:	60a2      	str	r2, [r4, #8]
 800d066:	6126      	str	r6, [r4, #16]
 800d068:	7563      	strb	r3, [r4, #21]
 800d06a:	b002      	add	sp, #8
 800d06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d070:	2108      	movs	r1, #8
 800d072:	4620      	mov	r0, r4
 800d074:	f000 fefc 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800d078:	b350      	cbz	r0, 800d0d0 <ucdr_serialize_uint64_t+0x11c>
 800d07a:	7d23      	ldrb	r3, [r4, #20]
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d02d      	beq.n	800d0dc <ucdr_serialize_uint64_t+0x128>
 800d080:	68a3      	ldr	r3, [r4, #8]
 800d082:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d086:	701a      	strb	r2, [r3, #0]
 800d088:	68a3      	ldr	r3, [r4, #8]
 800d08a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d08e:	705a      	strb	r2, [r3, #1]
 800d090:	68a3      	ldr	r3, [r4, #8]
 800d092:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d096:	709a      	strb	r2, [r3, #2]
 800d098:	68a3      	ldr	r3, [r4, #8]
 800d09a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d09e:	70da      	strb	r2, [r3, #3]
 800d0a0:	68a3      	ldr	r3, [r4, #8]
 800d0a2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d0a6:	711a      	strb	r2, [r3, #4]
 800d0a8:	68a3      	ldr	r3, [r4, #8]
 800d0aa:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d0ae:	715a      	strb	r2, [r3, #5]
 800d0b0:	68a3      	ldr	r3, [r4, #8]
 800d0b2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d0b6:	719a      	strb	r2, [r3, #6]
 800d0b8:	68a3      	ldr	r3, [r4, #8]
 800d0ba:	f89d 2000 	ldrb.w	r2, [sp]
 800d0be:	71da      	strb	r2, [r3, #7]
 800d0c0:	68a2      	ldr	r2, [r4, #8]
 800d0c2:	6923      	ldr	r3, [r4, #16]
 800d0c4:	3208      	adds	r2, #8
 800d0c6:	3308      	adds	r3, #8
 800d0c8:	2108      	movs	r1, #8
 800d0ca:	60a2      	str	r2, [r4, #8]
 800d0cc:	6123      	str	r3, [r4, #16]
 800d0ce:	7561      	strb	r1, [r4, #21]
 800d0d0:	7da0      	ldrb	r0, [r4, #22]
 800d0d2:	f080 0001 	eor.w	r0, r0, #1
 800d0d6:	b002      	add	sp, #8
 800d0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0dc:	466b      	mov	r3, sp
 800d0de:	cb03      	ldmia	r3!, {r0, r1}
 800d0e0:	68a3      	ldr	r3, [r4, #8]
 800d0e2:	6018      	str	r0, [r3, #0]
 800d0e4:	6059      	str	r1, [r3, #4]
 800d0e6:	e7eb      	b.n	800d0c0 <ucdr_serialize_uint64_t+0x10c>
 800d0e8:	68a2      	ldr	r2, [r4, #8]
 800d0ea:	6923      	ldr	r3, [r4, #16]
 800d0ec:	7da0      	ldrb	r0, [r4, #22]
 800d0ee:	7567      	strb	r7, [r4, #21]
 800d0f0:	1b92      	subs	r2, r2, r6
 800d0f2:	1b9b      	subs	r3, r3, r6
 800d0f4:	f080 0001 	eor.w	r0, r0, #1
 800d0f8:	60a2      	str	r2, [r4, #8]
 800d0fa:	6123      	str	r3, [r4, #16]
 800d0fc:	b002      	add	sp, #8
 800d0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d102:	68a3      	ldr	r3, [r4, #8]
 800d104:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d108:	701a      	strb	r2, [r3, #0]
 800d10a:	68a3      	ldr	r3, [r4, #8]
 800d10c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d110:	701a      	strb	r2, [r3, #0]
 800d112:	68a3      	ldr	r3, [r4, #8]
 800d114:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d118:	701a      	strb	r2, [r3, #0]
 800d11a:	68a3      	ldr	r3, [r4, #8]
 800d11c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d120:	701a      	strb	r2, [r3, #0]
 800d122:	68a3      	ldr	r3, [r4, #8]
 800d124:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d128:	701a      	strb	r2, [r3, #0]
 800d12a:	68a3      	ldr	r3, [r4, #8]
 800d12c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d130:	701a      	strb	r2, [r3, #0]
 800d132:	68a3      	ldr	r3, [r4, #8]
 800d134:	f89d 2000 	ldrb.w	r2, [sp]
 800d138:	701a      	strb	r2, [r3, #0]
 800d13a:	e78a      	b.n	800d052 <ucdr_serialize_uint64_t+0x9e>
 800d13c:	4628      	mov	r0, r5
 800d13e:	466d      	mov	r5, sp
 800d140:	4629      	mov	r1, r5
 800d142:	4632      	mov	r2, r6
 800d144:	f00a fbcd 	bl	80178e2 <memcpy>
 800d148:	68a0      	ldr	r0, [r4, #8]
 800d14a:	4642      	mov	r2, r8
 800d14c:	19a9      	adds	r1, r5, r6
 800d14e:	f00a fbc8 	bl	80178e2 <memcpy>
 800d152:	e77e      	b.n	800d052 <ucdr_serialize_uint64_t+0x9e>

0800d154 <ucdr_serialize_int16_t>:
 800d154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d158:	b082      	sub	sp, #8
 800d15a:	460b      	mov	r3, r1
 800d15c:	2102      	movs	r1, #2
 800d15e:	4604      	mov	r4, r0
 800d160:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d164:	f000 fed8 	bl	800df18 <ucdr_buffer_alignment>
 800d168:	4601      	mov	r1, r0
 800d16a:	4620      	mov	r0, r4
 800d16c:	7d67      	ldrb	r7, [r4, #21]
 800d16e:	f000 ff17 	bl	800dfa0 <ucdr_advance_buffer>
 800d172:	2102      	movs	r1, #2
 800d174:	4620      	mov	r0, r4
 800d176:	f000 fe6f 	bl	800de58 <ucdr_check_buffer_available_for>
 800d17a:	bb78      	cbnz	r0, 800d1dc <ucdr_serialize_int16_t+0x88>
 800d17c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d180:	42ab      	cmp	r3, r5
 800d182:	d926      	bls.n	800d1d2 <ucdr_serialize_int16_t+0x7e>
 800d184:	1b5e      	subs	r6, r3, r5
 800d186:	60a3      	str	r3, [r4, #8]
 800d188:	6923      	ldr	r3, [r4, #16]
 800d18a:	f1c6 0802 	rsb	r8, r6, #2
 800d18e:	4433      	add	r3, r6
 800d190:	6123      	str	r3, [r4, #16]
 800d192:	4641      	mov	r1, r8
 800d194:	4620      	mov	r0, r4
 800d196:	f000 fe6b 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800d19a:	2800      	cmp	r0, #0
 800d19c:	d03b      	beq.n	800d216 <ucdr_serialize_int16_t+0xc2>
 800d19e:	7d23      	ldrb	r3, [r4, #20]
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d04a      	beq.n	800d23a <ucdr_serialize_int16_t+0xe6>
 800d1a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d1a8:	702b      	strb	r3, [r5, #0]
 800d1aa:	2e00      	cmp	r6, #0
 800d1ac:	d040      	beq.n	800d230 <ucdr_serialize_int16_t+0xdc>
 800d1ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d1b2:	706b      	strb	r3, [r5, #1]
 800d1b4:	6923      	ldr	r3, [r4, #16]
 800d1b6:	68a2      	ldr	r2, [r4, #8]
 800d1b8:	7da0      	ldrb	r0, [r4, #22]
 800d1ba:	3302      	adds	r3, #2
 800d1bc:	1b9e      	subs	r6, r3, r6
 800d1be:	4442      	add	r2, r8
 800d1c0:	2302      	movs	r3, #2
 800d1c2:	f080 0001 	eor.w	r0, r0, #1
 800d1c6:	60a2      	str	r2, [r4, #8]
 800d1c8:	6126      	str	r6, [r4, #16]
 800d1ca:	7563      	strb	r3, [r4, #21]
 800d1cc:	b002      	add	sp, #8
 800d1ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1d2:	2102      	movs	r1, #2
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	f000 fe4b 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800d1da:	b190      	cbz	r0, 800d202 <ucdr_serialize_int16_t+0xae>
 800d1dc:	7d23      	ldrb	r3, [r4, #20]
 800d1de:	2b01      	cmp	r3, #1
 800d1e0:	68a3      	ldr	r3, [r4, #8]
 800d1e2:	d014      	beq.n	800d20e <ucdr_serialize_int16_t+0xba>
 800d1e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d1e8:	701a      	strb	r2, [r3, #0]
 800d1ea:	68a3      	ldr	r3, [r4, #8]
 800d1ec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d1f0:	705a      	strb	r2, [r3, #1]
 800d1f2:	68a2      	ldr	r2, [r4, #8]
 800d1f4:	6923      	ldr	r3, [r4, #16]
 800d1f6:	3202      	adds	r2, #2
 800d1f8:	3302      	adds	r3, #2
 800d1fa:	2102      	movs	r1, #2
 800d1fc:	60a2      	str	r2, [r4, #8]
 800d1fe:	6123      	str	r3, [r4, #16]
 800d200:	7561      	strb	r1, [r4, #21]
 800d202:	7da0      	ldrb	r0, [r4, #22]
 800d204:	f080 0001 	eor.w	r0, r0, #1
 800d208:	b002      	add	sp, #8
 800d20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d20e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d212:	801a      	strh	r2, [r3, #0]
 800d214:	e7ed      	b.n	800d1f2 <ucdr_serialize_int16_t+0x9e>
 800d216:	68a2      	ldr	r2, [r4, #8]
 800d218:	6923      	ldr	r3, [r4, #16]
 800d21a:	7da0      	ldrb	r0, [r4, #22]
 800d21c:	7567      	strb	r7, [r4, #21]
 800d21e:	1b92      	subs	r2, r2, r6
 800d220:	1b9b      	subs	r3, r3, r6
 800d222:	f080 0001 	eor.w	r0, r0, #1
 800d226:	60a2      	str	r2, [r4, #8]
 800d228:	6123      	str	r3, [r4, #16]
 800d22a:	b002      	add	sp, #8
 800d22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d230:	68a3      	ldr	r3, [r4, #8]
 800d232:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d236:	701a      	strb	r2, [r3, #0]
 800d238:	e7bc      	b.n	800d1b4 <ucdr_serialize_int16_t+0x60>
 800d23a:	4628      	mov	r0, r5
 800d23c:	f10d 0506 	add.w	r5, sp, #6
 800d240:	4629      	mov	r1, r5
 800d242:	4632      	mov	r2, r6
 800d244:	f00a fb4d 	bl	80178e2 <memcpy>
 800d248:	68a0      	ldr	r0, [r4, #8]
 800d24a:	4642      	mov	r2, r8
 800d24c:	19a9      	adds	r1, r5, r6
 800d24e:	f00a fb48 	bl	80178e2 <memcpy>
 800d252:	e7af      	b.n	800d1b4 <ucdr_serialize_int16_t+0x60>

0800d254 <ucdr_deserialize_int16_t>:
 800d254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d258:	460d      	mov	r5, r1
 800d25a:	2102      	movs	r1, #2
 800d25c:	4604      	mov	r4, r0
 800d25e:	f000 fe5b 	bl	800df18 <ucdr_buffer_alignment>
 800d262:	4601      	mov	r1, r0
 800d264:	4620      	mov	r0, r4
 800d266:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d26a:	f000 fe99 	bl	800dfa0 <ucdr_advance_buffer>
 800d26e:	2102      	movs	r1, #2
 800d270:	4620      	mov	r0, r4
 800d272:	f000 fdf1 	bl	800de58 <ucdr_check_buffer_available_for>
 800d276:	bb60      	cbnz	r0, 800d2d2 <ucdr_deserialize_int16_t+0x7e>
 800d278:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d27c:	42be      	cmp	r6, r7
 800d27e:	d923      	bls.n	800d2c8 <ucdr_deserialize_int16_t+0x74>
 800d280:	6923      	ldr	r3, [r4, #16]
 800d282:	60a6      	str	r6, [r4, #8]
 800d284:	1bf6      	subs	r6, r6, r7
 800d286:	4433      	add	r3, r6
 800d288:	f1c6 0902 	rsb	r9, r6, #2
 800d28c:	6123      	str	r3, [r4, #16]
 800d28e:	4649      	mov	r1, r9
 800d290:	4620      	mov	r0, r4
 800d292:	f000 fded 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800d296:	2800      	cmp	r0, #0
 800d298:	d034      	beq.n	800d304 <ucdr_deserialize_int16_t+0xb0>
 800d29a:	7d23      	ldrb	r3, [r4, #20]
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d042      	beq.n	800d326 <ucdr_deserialize_int16_t+0xd2>
 800d2a0:	787b      	ldrb	r3, [r7, #1]
 800d2a2:	702b      	strb	r3, [r5, #0]
 800d2a4:	2e00      	cmp	r6, #0
 800d2a6:	d03a      	beq.n	800d31e <ucdr_deserialize_int16_t+0xca>
 800d2a8:	783b      	ldrb	r3, [r7, #0]
 800d2aa:	706b      	strb	r3, [r5, #1]
 800d2ac:	6923      	ldr	r3, [r4, #16]
 800d2ae:	68a2      	ldr	r2, [r4, #8]
 800d2b0:	7da0      	ldrb	r0, [r4, #22]
 800d2b2:	2102      	movs	r1, #2
 800d2b4:	3302      	adds	r3, #2
 800d2b6:	444a      	add	r2, r9
 800d2b8:	1b9b      	subs	r3, r3, r6
 800d2ba:	7561      	strb	r1, [r4, #21]
 800d2bc:	60a2      	str	r2, [r4, #8]
 800d2be:	6123      	str	r3, [r4, #16]
 800d2c0:	f080 0001 	eor.w	r0, r0, #1
 800d2c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2c8:	2102      	movs	r1, #2
 800d2ca:	4620      	mov	r0, r4
 800d2cc:	f000 fdd0 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800d2d0:	b180      	cbz	r0, 800d2f4 <ucdr_deserialize_int16_t+0xa0>
 800d2d2:	7d23      	ldrb	r3, [r4, #20]
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	68a3      	ldr	r3, [r4, #8]
 800d2d8:	d011      	beq.n	800d2fe <ucdr_deserialize_int16_t+0xaa>
 800d2da:	785b      	ldrb	r3, [r3, #1]
 800d2dc:	702b      	strb	r3, [r5, #0]
 800d2de:	68a3      	ldr	r3, [r4, #8]
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	706b      	strb	r3, [r5, #1]
 800d2e4:	68a2      	ldr	r2, [r4, #8]
 800d2e6:	6923      	ldr	r3, [r4, #16]
 800d2e8:	3202      	adds	r2, #2
 800d2ea:	3302      	adds	r3, #2
 800d2ec:	2102      	movs	r1, #2
 800d2ee:	60a2      	str	r2, [r4, #8]
 800d2f0:	6123      	str	r3, [r4, #16]
 800d2f2:	7561      	strb	r1, [r4, #21]
 800d2f4:	7da0      	ldrb	r0, [r4, #22]
 800d2f6:	f080 0001 	eor.w	r0, r0, #1
 800d2fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2fe:	881b      	ldrh	r3, [r3, #0]
 800d300:	802b      	strh	r3, [r5, #0]
 800d302:	e7ef      	b.n	800d2e4 <ucdr_deserialize_int16_t+0x90>
 800d304:	68a2      	ldr	r2, [r4, #8]
 800d306:	6923      	ldr	r3, [r4, #16]
 800d308:	7da0      	ldrb	r0, [r4, #22]
 800d30a:	f884 8015 	strb.w	r8, [r4, #21]
 800d30e:	1b92      	subs	r2, r2, r6
 800d310:	1b9b      	subs	r3, r3, r6
 800d312:	60a2      	str	r2, [r4, #8]
 800d314:	6123      	str	r3, [r4, #16]
 800d316:	f080 0001 	eor.w	r0, r0, #1
 800d31a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d31e:	68a3      	ldr	r3, [r4, #8]
 800d320:	781b      	ldrb	r3, [r3, #0]
 800d322:	706b      	strb	r3, [r5, #1]
 800d324:	e7c2      	b.n	800d2ac <ucdr_deserialize_int16_t+0x58>
 800d326:	4639      	mov	r1, r7
 800d328:	4632      	mov	r2, r6
 800d32a:	4628      	mov	r0, r5
 800d32c:	f00a fad9 	bl	80178e2 <memcpy>
 800d330:	68a1      	ldr	r1, [r4, #8]
 800d332:	464a      	mov	r2, r9
 800d334:	19a8      	adds	r0, r5, r6
 800d336:	f00a fad4 	bl	80178e2 <memcpy>
 800d33a:	e7b7      	b.n	800d2ac <ucdr_deserialize_int16_t+0x58>

0800d33c <ucdr_serialize_int32_t>:
 800d33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d340:	b082      	sub	sp, #8
 800d342:	4604      	mov	r4, r0
 800d344:	9101      	str	r1, [sp, #4]
 800d346:	2104      	movs	r1, #4
 800d348:	f000 fde6 	bl	800df18 <ucdr_buffer_alignment>
 800d34c:	4601      	mov	r1, r0
 800d34e:	4620      	mov	r0, r4
 800d350:	7d67      	ldrb	r7, [r4, #21]
 800d352:	f000 fe25 	bl	800dfa0 <ucdr_advance_buffer>
 800d356:	2104      	movs	r1, #4
 800d358:	4620      	mov	r0, r4
 800d35a:	f000 fd7d 	bl	800de58 <ucdr_check_buffer_available_for>
 800d35e:	2800      	cmp	r0, #0
 800d360:	d139      	bne.n	800d3d6 <ucdr_serialize_int32_t+0x9a>
 800d362:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d366:	42ab      	cmp	r3, r5
 800d368:	d930      	bls.n	800d3cc <ucdr_serialize_int32_t+0x90>
 800d36a:	1b5e      	subs	r6, r3, r5
 800d36c:	60a3      	str	r3, [r4, #8]
 800d36e:	6923      	ldr	r3, [r4, #16]
 800d370:	f1c6 0804 	rsb	r8, r6, #4
 800d374:	4433      	add	r3, r6
 800d376:	6123      	str	r3, [r4, #16]
 800d378:	4641      	mov	r1, r8
 800d37a:	4620      	mov	r0, r4
 800d37c:	f000 fd78 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800d380:	2800      	cmp	r0, #0
 800d382:	d04c      	beq.n	800d41e <ucdr_serialize_int32_t+0xe2>
 800d384:	7d23      	ldrb	r3, [r4, #20]
 800d386:	2b01      	cmp	r3, #1
 800d388:	d063      	beq.n	800d452 <ucdr_serialize_int32_t+0x116>
 800d38a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d38e:	702b      	strb	r3, [r5, #0]
 800d390:	2e00      	cmp	r6, #0
 800d392:	d051      	beq.n	800d438 <ucdr_serialize_int32_t+0xfc>
 800d394:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d398:	706b      	strb	r3, [r5, #1]
 800d39a:	2e01      	cmp	r6, #1
 800d39c:	d050      	beq.n	800d440 <ucdr_serialize_int32_t+0x104>
 800d39e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d3a2:	70ab      	strb	r3, [r5, #2]
 800d3a4:	2e02      	cmp	r6, #2
 800d3a6:	d04f      	beq.n	800d448 <ucdr_serialize_int32_t+0x10c>
 800d3a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d3ac:	70eb      	strb	r3, [r5, #3]
 800d3ae:	6923      	ldr	r3, [r4, #16]
 800d3b0:	68a2      	ldr	r2, [r4, #8]
 800d3b2:	7da0      	ldrb	r0, [r4, #22]
 800d3b4:	3304      	adds	r3, #4
 800d3b6:	1b9e      	subs	r6, r3, r6
 800d3b8:	4442      	add	r2, r8
 800d3ba:	2304      	movs	r3, #4
 800d3bc:	f080 0001 	eor.w	r0, r0, #1
 800d3c0:	60a2      	str	r2, [r4, #8]
 800d3c2:	6126      	str	r6, [r4, #16]
 800d3c4:	7563      	strb	r3, [r4, #21]
 800d3c6:	b002      	add	sp, #8
 800d3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3cc:	2104      	movs	r1, #4
 800d3ce:	4620      	mov	r0, r4
 800d3d0:	f000 fd4e 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800d3d4:	b1d0      	cbz	r0, 800d40c <ucdr_serialize_int32_t+0xd0>
 800d3d6:	7d23      	ldrb	r3, [r4, #20]
 800d3d8:	2b01      	cmp	r3, #1
 800d3da:	68a3      	ldr	r3, [r4, #8]
 800d3dc:	d01c      	beq.n	800d418 <ucdr_serialize_int32_t+0xdc>
 800d3de:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d3e2:	701a      	strb	r2, [r3, #0]
 800d3e4:	68a3      	ldr	r3, [r4, #8]
 800d3e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d3ea:	705a      	strb	r2, [r3, #1]
 800d3ec:	68a3      	ldr	r3, [r4, #8]
 800d3ee:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d3f2:	709a      	strb	r2, [r3, #2]
 800d3f4:	68a3      	ldr	r3, [r4, #8]
 800d3f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d3fa:	70da      	strb	r2, [r3, #3]
 800d3fc:	68a2      	ldr	r2, [r4, #8]
 800d3fe:	6923      	ldr	r3, [r4, #16]
 800d400:	3204      	adds	r2, #4
 800d402:	3304      	adds	r3, #4
 800d404:	2104      	movs	r1, #4
 800d406:	60a2      	str	r2, [r4, #8]
 800d408:	6123      	str	r3, [r4, #16]
 800d40a:	7561      	strb	r1, [r4, #21]
 800d40c:	7da0      	ldrb	r0, [r4, #22]
 800d40e:	f080 0001 	eor.w	r0, r0, #1
 800d412:	b002      	add	sp, #8
 800d414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d418:	9a01      	ldr	r2, [sp, #4]
 800d41a:	601a      	str	r2, [r3, #0]
 800d41c:	e7ee      	b.n	800d3fc <ucdr_serialize_int32_t+0xc0>
 800d41e:	68a2      	ldr	r2, [r4, #8]
 800d420:	6923      	ldr	r3, [r4, #16]
 800d422:	7da0      	ldrb	r0, [r4, #22]
 800d424:	7567      	strb	r7, [r4, #21]
 800d426:	1b92      	subs	r2, r2, r6
 800d428:	1b9b      	subs	r3, r3, r6
 800d42a:	f080 0001 	eor.w	r0, r0, #1
 800d42e:	60a2      	str	r2, [r4, #8]
 800d430:	6123      	str	r3, [r4, #16]
 800d432:	b002      	add	sp, #8
 800d434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d438:	68a3      	ldr	r3, [r4, #8]
 800d43a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d43e:	701a      	strb	r2, [r3, #0]
 800d440:	68a3      	ldr	r3, [r4, #8]
 800d442:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d446:	701a      	strb	r2, [r3, #0]
 800d448:	68a3      	ldr	r3, [r4, #8]
 800d44a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d44e:	701a      	strb	r2, [r3, #0]
 800d450:	e7ad      	b.n	800d3ae <ucdr_serialize_int32_t+0x72>
 800d452:	4628      	mov	r0, r5
 800d454:	ad01      	add	r5, sp, #4
 800d456:	4629      	mov	r1, r5
 800d458:	4632      	mov	r2, r6
 800d45a:	f00a fa42 	bl	80178e2 <memcpy>
 800d45e:	68a0      	ldr	r0, [r4, #8]
 800d460:	4642      	mov	r2, r8
 800d462:	19a9      	adds	r1, r5, r6
 800d464:	f00a fa3d 	bl	80178e2 <memcpy>
 800d468:	e7a1      	b.n	800d3ae <ucdr_serialize_int32_t+0x72>
 800d46a:	bf00      	nop

0800d46c <ucdr_deserialize_int32_t>:
 800d46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d470:	460d      	mov	r5, r1
 800d472:	2104      	movs	r1, #4
 800d474:	4604      	mov	r4, r0
 800d476:	f000 fd4f 	bl	800df18 <ucdr_buffer_alignment>
 800d47a:	4601      	mov	r1, r0
 800d47c:	4620      	mov	r0, r4
 800d47e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d482:	f000 fd8d 	bl	800dfa0 <ucdr_advance_buffer>
 800d486:	2104      	movs	r1, #4
 800d488:	4620      	mov	r0, r4
 800d48a:	f000 fce5 	bl	800de58 <ucdr_check_buffer_available_for>
 800d48e:	2800      	cmp	r0, #0
 800d490:	d138      	bne.n	800d504 <ucdr_deserialize_int32_t+0x98>
 800d492:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d496:	42b7      	cmp	r7, r6
 800d498:	d92f      	bls.n	800d4fa <ucdr_deserialize_int32_t+0x8e>
 800d49a:	6923      	ldr	r3, [r4, #16]
 800d49c:	60a7      	str	r7, [r4, #8]
 800d49e:	1bbf      	subs	r7, r7, r6
 800d4a0:	443b      	add	r3, r7
 800d4a2:	f1c7 0904 	rsb	r9, r7, #4
 800d4a6:	6123      	str	r3, [r4, #16]
 800d4a8:	4649      	mov	r1, r9
 800d4aa:	4620      	mov	r0, r4
 800d4ac:	f000 fce0 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800d4b0:	2800      	cmp	r0, #0
 800d4b2:	d046      	beq.n	800d542 <ucdr_deserialize_int32_t+0xd6>
 800d4b4:	7d23      	ldrb	r3, [r4, #20]
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	d05c      	beq.n	800d574 <ucdr_deserialize_int32_t+0x108>
 800d4ba:	78f3      	ldrb	r3, [r6, #3]
 800d4bc:	702b      	strb	r3, [r5, #0]
 800d4be:	2f00      	cmp	r7, #0
 800d4c0:	d04c      	beq.n	800d55c <ucdr_deserialize_int32_t+0xf0>
 800d4c2:	78b3      	ldrb	r3, [r6, #2]
 800d4c4:	706b      	strb	r3, [r5, #1]
 800d4c6:	2f01      	cmp	r7, #1
 800d4c8:	f105 0302 	add.w	r3, r5, #2
 800d4cc:	d04a      	beq.n	800d564 <ucdr_deserialize_int32_t+0xf8>
 800d4ce:	7873      	ldrb	r3, [r6, #1]
 800d4d0:	70ab      	strb	r3, [r5, #2]
 800d4d2:	2f02      	cmp	r7, #2
 800d4d4:	f105 0303 	add.w	r3, r5, #3
 800d4d8:	d048      	beq.n	800d56c <ucdr_deserialize_int32_t+0x100>
 800d4da:	7833      	ldrb	r3, [r6, #0]
 800d4dc:	70eb      	strb	r3, [r5, #3]
 800d4de:	6923      	ldr	r3, [r4, #16]
 800d4e0:	68a2      	ldr	r2, [r4, #8]
 800d4e2:	7da0      	ldrb	r0, [r4, #22]
 800d4e4:	2104      	movs	r1, #4
 800d4e6:	3304      	adds	r3, #4
 800d4e8:	444a      	add	r2, r9
 800d4ea:	1bdb      	subs	r3, r3, r7
 800d4ec:	7561      	strb	r1, [r4, #21]
 800d4ee:	60a2      	str	r2, [r4, #8]
 800d4f0:	6123      	str	r3, [r4, #16]
 800d4f2:	f080 0001 	eor.w	r0, r0, #1
 800d4f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4fa:	2104      	movs	r1, #4
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	f000 fcb7 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800d502:	b1b0      	cbz	r0, 800d532 <ucdr_deserialize_int32_t+0xc6>
 800d504:	7d23      	ldrb	r3, [r4, #20]
 800d506:	2b01      	cmp	r3, #1
 800d508:	68a3      	ldr	r3, [r4, #8]
 800d50a:	d017      	beq.n	800d53c <ucdr_deserialize_int32_t+0xd0>
 800d50c:	78db      	ldrb	r3, [r3, #3]
 800d50e:	702b      	strb	r3, [r5, #0]
 800d510:	68a3      	ldr	r3, [r4, #8]
 800d512:	789b      	ldrb	r3, [r3, #2]
 800d514:	706b      	strb	r3, [r5, #1]
 800d516:	68a3      	ldr	r3, [r4, #8]
 800d518:	785b      	ldrb	r3, [r3, #1]
 800d51a:	70ab      	strb	r3, [r5, #2]
 800d51c:	68a3      	ldr	r3, [r4, #8]
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	70eb      	strb	r3, [r5, #3]
 800d522:	68a2      	ldr	r2, [r4, #8]
 800d524:	6923      	ldr	r3, [r4, #16]
 800d526:	3204      	adds	r2, #4
 800d528:	3304      	adds	r3, #4
 800d52a:	2104      	movs	r1, #4
 800d52c:	60a2      	str	r2, [r4, #8]
 800d52e:	6123      	str	r3, [r4, #16]
 800d530:	7561      	strb	r1, [r4, #21]
 800d532:	7da0      	ldrb	r0, [r4, #22]
 800d534:	f080 0001 	eor.w	r0, r0, #1
 800d538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	602b      	str	r3, [r5, #0]
 800d540:	e7ef      	b.n	800d522 <ucdr_deserialize_int32_t+0xb6>
 800d542:	68a2      	ldr	r2, [r4, #8]
 800d544:	6923      	ldr	r3, [r4, #16]
 800d546:	7da0      	ldrb	r0, [r4, #22]
 800d548:	f884 8015 	strb.w	r8, [r4, #21]
 800d54c:	1bd2      	subs	r2, r2, r7
 800d54e:	1bdb      	subs	r3, r3, r7
 800d550:	60a2      	str	r2, [r4, #8]
 800d552:	6123      	str	r3, [r4, #16]
 800d554:	f080 0001 	eor.w	r0, r0, #1
 800d558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d55c:	68a3      	ldr	r3, [r4, #8]
 800d55e:	789b      	ldrb	r3, [r3, #2]
 800d560:	706b      	strb	r3, [r5, #1]
 800d562:	1cab      	adds	r3, r5, #2
 800d564:	68a2      	ldr	r2, [r4, #8]
 800d566:	7852      	ldrb	r2, [r2, #1]
 800d568:	f803 2b01 	strb.w	r2, [r3], #1
 800d56c:	68a2      	ldr	r2, [r4, #8]
 800d56e:	7812      	ldrb	r2, [r2, #0]
 800d570:	701a      	strb	r2, [r3, #0]
 800d572:	e7b4      	b.n	800d4de <ucdr_deserialize_int32_t+0x72>
 800d574:	4631      	mov	r1, r6
 800d576:	463a      	mov	r2, r7
 800d578:	4628      	mov	r0, r5
 800d57a:	f00a f9b2 	bl	80178e2 <memcpy>
 800d57e:	68a1      	ldr	r1, [r4, #8]
 800d580:	464a      	mov	r2, r9
 800d582:	19e8      	adds	r0, r5, r7
 800d584:	f00a f9ad 	bl	80178e2 <memcpy>
 800d588:	e7a9      	b.n	800d4de <ucdr_deserialize_int32_t+0x72>
 800d58a:	bf00      	nop

0800d58c <ucdr_serialize_endian_float>:
 800d58c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d590:	460d      	mov	r5, r1
 800d592:	b083      	sub	sp, #12
 800d594:	2104      	movs	r1, #4
 800d596:	4604      	mov	r4, r0
 800d598:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d59c:	f000 fcbc 	bl	800df18 <ucdr_buffer_alignment>
 800d5a0:	4601      	mov	r1, r0
 800d5a2:	4620      	mov	r0, r4
 800d5a4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d5a8:	f000 fcfa 	bl	800dfa0 <ucdr_advance_buffer>
 800d5ac:	2104      	movs	r1, #4
 800d5ae:	4620      	mov	r0, r4
 800d5b0:	f000 fc52 	bl	800de58 <ucdr_check_buffer_available_for>
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	d138      	bne.n	800d62a <ucdr_serialize_endian_float+0x9e>
 800d5b8:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d5bc:	42b7      	cmp	r7, r6
 800d5be:	d92f      	bls.n	800d620 <ucdr_serialize_endian_float+0x94>
 800d5c0:	6923      	ldr	r3, [r4, #16]
 800d5c2:	60a7      	str	r7, [r4, #8]
 800d5c4:	1bbf      	subs	r7, r7, r6
 800d5c6:	443b      	add	r3, r7
 800d5c8:	f1c7 0904 	rsb	r9, r7, #4
 800d5cc:	6123      	str	r3, [r4, #16]
 800d5ce:	4649      	mov	r1, r9
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	f000 fc4d 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800d5d6:	2800      	cmp	r0, #0
 800d5d8:	d04a      	beq.n	800d670 <ucdr_serialize_endian_float+0xe4>
 800d5da:	2d01      	cmp	r5, #1
 800d5dc:	d063      	beq.n	800d6a6 <ucdr_serialize_endian_float+0x11a>
 800d5de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d5e2:	7033      	strb	r3, [r6, #0]
 800d5e4:	2f00      	cmp	r7, #0
 800d5e6:	d051      	beq.n	800d68c <ucdr_serialize_endian_float+0x100>
 800d5e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d5ec:	7073      	strb	r3, [r6, #1]
 800d5ee:	2f01      	cmp	r7, #1
 800d5f0:	d050      	beq.n	800d694 <ucdr_serialize_endian_float+0x108>
 800d5f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d5f6:	70b3      	strb	r3, [r6, #2]
 800d5f8:	2f02      	cmp	r7, #2
 800d5fa:	d04f      	beq.n	800d69c <ucdr_serialize_endian_float+0x110>
 800d5fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d600:	70f3      	strb	r3, [r6, #3]
 800d602:	6923      	ldr	r3, [r4, #16]
 800d604:	68a2      	ldr	r2, [r4, #8]
 800d606:	7da0      	ldrb	r0, [r4, #22]
 800d608:	3304      	adds	r3, #4
 800d60a:	444a      	add	r2, r9
 800d60c:	1bdb      	subs	r3, r3, r7
 800d60e:	2104      	movs	r1, #4
 800d610:	f080 0001 	eor.w	r0, r0, #1
 800d614:	60a2      	str	r2, [r4, #8]
 800d616:	6123      	str	r3, [r4, #16]
 800d618:	7561      	strb	r1, [r4, #21]
 800d61a:	b003      	add	sp, #12
 800d61c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d620:	2104      	movs	r1, #4
 800d622:	4620      	mov	r0, r4
 800d624:	f000 fc24 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800d628:	b1c8      	cbz	r0, 800d65e <ucdr_serialize_endian_float+0xd2>
 800d62a:	2d01      	cmp	r5, #1
 800d62c:	68a3      	ldr	r3, [r4, #8]
 800d62e:	d01c      	beq.n	800d66a <ucdr_serialize_endian_float+0xde>
 800d630:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d634:	701a      	strb	r2, [r3, #0]
 800d636:	68a3      	ldr	r3, [r4, #8]
 800d638:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d63c:	705a      	strb	r2, [r3, #1]
 800d63e:	68a3      	ldr	r3, [r4, #8]
 800d640:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d644:	709a      	strb	r2, [r3, #2]
 800d646:	68a3      	ldr	r3, [r4, #8]
 800d648:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d64c:	70da      	strb	r2, [r3, #3]
 800d64e:	68a2      	ldr	r2, [r4, #8]
 800d650:	6923      	ldr	r3, [r4, #16]
 800d652:	3204      	adds	r2, #4
 800d654:	3304      	adds	r3, #4
 800d656:	2104      	movs	r1, #4
 800d658:	60a2      	str	r2, [r4, #8]
 800d65a:	6123      	str	r3, [r4, #16]
 800d65c:	7561      	strb	r1, [r4, #21]
 800d65e:	7da0      	ldrb	r0, [r4, #22]
 800d660:	f080 0001 	eor.w	r0, r0, #1
 800d664:	b003      	add	sp, #12
 800d666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d66a:	9a01      	ldr	r2, [sp, #4]
 800d66c:	601a      	str	r2, [r3, #0]
 800d66e:	e7ee      	b.n	800d64e <ucdr_serialize_endian_float+0xc2>
 800d670:	68a2      	ldr	r2, [r4, #8]
 800d672:	6923      	ldr	r3, [r4, #16]
 800d674:	7da0      	ldrb	r0, [r4, #22]
 800d676:	f884 8015 	strb.w	r8, [r4, #21]
 800d67a:	1bd2      	subs	r2, r2, r7
 800d67c:	1bdb      	subs	r3, r3, r7
 800d67e:	f080 0001 	eor.w	r0, r0, #1
 800d682:	60a2      	str	r2, [r4, #8]
 800d684:	6123      	str	r3, [r4, #16]
 800d686:	b003      	add	sp, #12
 800d688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d68c:	68a3      	ldr	r3, [r4, #8]
 800d68e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d692:	701a      	strb	r2, [r3, #0]
 800d694:	68a3      	ldr	r3, [r4, #8]
 800d696:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d69a:	701a      	strb	r2, [r3, #0]
 800d69c:	68a3      	ldr	r3, [r4, #8]
 800d69e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d6a2:	701a      	strb	r2, [r3, #0]
 800d6a4:	e7ad      	b.n	800d602 <ucdr_serialize_endian_float+0x76>
 800d6a6:	ad01      	add	r5, sp, #4
 800d6a8:	4629      	mov	r1, r5
 800d6aa:	463a      	mov	r2, r7
 800d6ac:	4630      	mov	r0, r6
 800d6ae:	f00a f918 	bl	80178e2 <memcpy>
 800d6b2:	68a0      	ldr	r0, [r4, #8]
 800d6b4:	464a      	mov	r2, r9
 800d6b6:	19e9      	adds	r1, r5, r7
 800d6b8:	f00a f913 	bl	80178e2 <memcpy>
 800d6bc:	e7a1      	b.n	800d602 <ucdr_serialize_endian_float+0x76>
 800d6be:	bf00      	nop

0800d6c0 <ucdr_deserialize_endian_float>:
 800d6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6c4:	460e      	mov	r6, r1
 800d6c6:	2104      	movs	r1, #4
 800d6c8:	4604      	mov	r4, r0
 800d6ca:	4615      	mov	r5, r2
 800d6cc:	f000 fc24 	bl	800df18 <ucdr_buffer_alignment>
 800d6d0:	4601      	mov	r1, r0
 800d6d2:	4620      	mov	r0, r4
 800d6d4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d6d8:	f000 fc62 	bl	800dfa0 <ucdr_advance_buffer>
 800d6dc:	2104      	movs	r1, #4
 800d6de:	4620      	mov	r0, r4
 800d6e0:	f000 fbba 	bl	800de58 <ucdr_check_buffer_available_for>
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	d13c      	bne.n	800d762 <ucdr_deserialize_endian_float+0xa2>
 800d6e8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800d6ec:	42bb      	cmp	r3, r7
 800d6ee:	d933      	bls.n	800d758 <ucdr_deserialize_endian_float+0x98>
 800d6f0:	eba3 0807 	sub.w	r8, r3, r7
 800d6f4:	60a3      	str	r3, [r4, #8]
 800d6f6:	6923      	ldr	r3, [r4, #16]
 800d6f8:	f1c8 0a04 	rsb	sl, r8, #4
 800d6fc:	4443      	add	r3, r8
 800d6fe:	6123      	str	r3, [r4, #16]
 800d700:	4651      	mov	r1, sl
 800d702:	4620      	mov	r0, r4
 800d704:	f000 fbb4 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800d708:	2800      	cmp	r0, #0
 800d70a:	d048      	beq.n	800d79e <ucdr_deserialize_endian_float+0xde>
 800d70c:	2e01      	cmp	r6, #1
 800d70e:	d061      	beq.n	800d7d4 <ucdr_deserialize_endian_float+0x114>
 800d710:	78fb      	ldrb	r3, [r7, #3]
 800d712:	702b      	strb	r3, [r5, #0]
 800d714:	f1b8 0f00 	cmp.w	r8, #0
 800d718:	d050      	beq.n	800d7bc <ucdr_deserialize_endian_float+0xfc>
 800d71a:	78bb      	ldrb	r3, [r7, #2]
 800d71c:	706b      	strb	r3, [r5, #1]
 800d71e:	f1b8 0f01 	cmp.w	r8, #1
 800d722:	f105 0302 	add.w	r3, r5, #2
 800d726:	d04d      	beq.n	800d7c4 <ucdr_deserialize_endian_float+0x104>
 800d728:	787b      	ldrb	r3, [r7, #1]
 800d72a:	70ab      	strb	r3, [r5, #2]
 800d72c:	f1b8 0f02 	cmp.w	r8, #2
 800d730:	f105 0303 	add.w	r3, r5, #3
 800d734:	d04a      	beq.n	800d7cc <ucdr_deserialize_endian_float+0x10c>
 800d736:	783b      	ldrb	r3, [r7, #0]
 800d738:	70eb      	strb	r3, [r5, #3]
 800d73a:	6923      	ldr	r3, [r4, #16]
 800d73c:	68a2      	ldr	r2, [r4, #8]
 800d73e:	7da0      	ldrb	r0, [r4, #22]
 800d740:	2104      	movs	r1, #4
 800d742:	3304      	adds	r3, #4
 800d744:	4452      	add	r2, sl
 800d746:	eba3 0308 	sub.w	r3, r3, r8
 800d74a:	7561      	strb	r1, [r4, #21]
 800d74c:	60a2      	str	r2, [r4, #8]
 800d74e:	6123      	str	r3, [r4, #16]
 800d750:	f080 0001 	eor.w	r0, r0, #1
 800d754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d758:	2104      	movs	r1, #4
 800d75a:	4620      	mov	r0, r4
 800d75c:	f000 fb88 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800d760:	b1a8      	cbz	r0, 800d78e <ucdr_deserialize_endian_float+0xce>
 800d762:	2e01      	cmp	r6, #1
 800d764:	68a3      	ldr	r3, [r4, #8]
 800d766:	d017      	beq.n	800d798 <ucdr_deserialize_endian_float+0xd8>
 800d768:	78db      	ldrb	r3, [r3, #3]
 800d76a:	702b      	strb	r3, [r5, #0]
 800d76c:	68a3      	ldr	r3, [r4, #8]
 800d76e:	789b      	ldrb	r3, [r3, #2]
 800d770:	706b      	strb	r3, [r5, #1]
 800d772:	68a3      	ldr	r3, [r4, #8]
 800d774:	785b      	ldrb	r3, [r3, #1]
 800d776:	70ab      	strb	r3, [r5, #2]
 800d778:	68a3      	ldr	r3, [r4, #8]
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	70eb      	strb	r3, [r5, #3]
 800d77e:	68a2      	ldr	r2, [r4, #8]
 800d780:	6923      	ldr	r3, [r4, #16]
 800d782:	3204      	adds	r2, #4
 800d784:	3304      	adds	r3, #4
 800d786:	2104      	movs	r1, #4
 800d788:	60a2      	str	r2, [r4, #8]
 800d78a:	6123      	str	r3, [r4, #16]
 800d78c:	7561      	strb	r1, [r4, #21]
 800d78e:	7da0      	ldrb	r0, [r4, #22]
 800d790:	f080 0001 	eor.w	r0, r0, #1
 800d794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	602b      	str	r3, [r5, #0]
 800d79c:	e7ef      	b.n	800d77e <ucdr_deserialize_endian_float+0xbe>
 800d79e:	68a2      	ldr	r2, [r4, #8]
 800d7a0:	6923      	ldr	r3, [r4, #16]
 800d7a2:	7da0      	ldrb	r0, [r4, #22]
 800d7a4:	f884 9015 	strb.w	r9, [r4, #21]
 800d7a8:	eba2 0208 	sub.w	r2, r2, r8
 800d7ac:	eba3 0308 	sub.w	r3, r3, r8
 800d7b0:	60a2      	str	r2, [r4, #8]
 800d7b2:	6123      	str	r3, [r4, #16]
 800d7b4:	f080 0001 	eor.w	r0, r0, #1
 800d7b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7bc:	68a3      	ldr	r3, [r4, #8]
 800d7be:	789b      	ldrb	r3, [r3, #2]
 800d7c0:	706b      	strb	r3, [r5, #1]
 800d7c2:	1cab      	adds	r3, r5, #2
 800d7c4:	68a2      	ldr	r2, [r4, #8]
 800d7c6:	7852      	ldrb	r2, [r2, #1]
 800d7c8:	f803 2b01 	strb.w	r2, [r3], #1
 800d7cc:	68a2      	ldr	r2, [r4, #8]
 800d7ce:	7812      	ldrb	r2, [r2, #0]
 800d7d0:	701a      	strb	r2, [r3, #0]
 800d7d2:	e7b2      	b.n	800d73a <ucdr_deserialize_endian_float+0x7a>
 800d7d4:	4639      	mov	r1, r7
 800d7d6:	4642      	mov	r2, r8
 800d7d8:	4628      	mov	r0, r5
 800d7da:	f00a f882 	bl	80178e2 <memcpy>
 800d7de:	68a1      	ldr	r1, [r4, #8]
 800d7e0:	4652      	mov	r2, sl
 800d7e2:	eb05 0008 	add.w	r0, r5, r8
 800d7e6:	f00a f87c 	bl	80178e2 <memcpy>
 800d7ea:	e7a6      	b.n	800d73a <ucdr_deserialize_endian_float+0x7a>

0800d7ec <ucdr_serialize_double>:
 800d7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7f0:	2108      	movs	r1, #8
 800d7f2:	b082      	sub	sp, #8
 800d7f4:	4604      	mov	r4, r0
 800d7f6:	ed8d 0b00 	vstr	d0, [sp]
 800d7fa:	f000 fb8d 	bl	800df18 <ucdr_buffer_alignment>
 800d7fe:	4601      	mov	r1, r0
 800d800:	4620      	mov	r0, r4
 800d802:	7d67      	ldrb	r7, [r4, #21]
 800d804:	f000 fbcc 	bl	800dfa0 <ucdr_advance_buffer>
 800d808:	2108      	movs	r1, #8
 800d80a:	4620      	mov	r0, r4
 800d80c:	f000 fb24 	bl	800de58 <ucdr_check_buffer_available_for>
 800d810:	2800      	cmp	r0, #0
 800d812:	d14e      	bne.n	800d8b2 <ucdr_serialize_double+0xc6>
 800d814:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d818:	42ab      	cmp	r3, r5
 800d81a:	d945      	bls.n	800d8a8 <ucdr_serialize_double+0xbc>
 800d81c:	1b5e      	subs	r6, r3, r5
 800d81e:	60a3      	str	r3, [r4, #8]
 800d820:	6923      	ldr	r3, [r4, #16]
 800d822:	f1c6 0808 	rsb	r8, r6, #8
 800d826:	4433      	add	r3, r6
 800d828:	6123      	str	r3, [r4, #16]
 800d82a:	4641      	mov	r1, r8
 800d82c:	4620      	mov	r0, r4
 800d82e:	f000 fb1f 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800d832:	2800      	cmp	r0, #0
 800d834:	d074      	beq.n	800d920 <ucdr_serialize_double+0x134>
 800d836:	7d23      	ldrb	r3, [r4, #20]
 800d838:	2b01      	cmp	r3, #1
 800d83a:	f000 809b 	beq.w	800d974 <ucdr_serialize_double+0x188>
 800d83e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d842:	702b      	strb	r3, [r5, #0]
 800d844:	2e00      	cmp	r6, #0
 800d846:	d078      	beq.n	800d93a <ucdr_serialize_double+0x14e>
 800d848:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d84c:	706b      	strb	r3, [r5, #1]
 800d84e:	2e01      	cmp	r6, #1
 800d850:	d077      	beq.n	800d942 <ucdr_serialize_double+0x156>
 800d852:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d856:	70ab      	strb	r3, [r5, #2]
 800d858:	2e02      	cmp	r6, #2
 800d85a:	d076      	beq.n	800d94a <ucdr_serialize_double+0x15e>
 800d85c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d860:	70eb      	strb	r3, [r5, #3]
 800d862:	2e03      	cmp	r6, #3
 800d864:	d075      	beq.n	800d952 <ucdr_serialize_double+0x166>
 800d866:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d86a:	712b      	strb	r3, [r5, #4]
 800d86c:	2e04      	cmp	r6, #4
 800d86e:	d074      	beq.n	800d95a <ucdr_serialize_double+0x16e>
 800d870:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d874:	716b      	strb	r3, [r5, #5]
 800d876:	2e05      	cmp	r6, #5
 800d878:	d073      	beq.n	800d962 <ucdr_serialize_double+0x176>
 800d87a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d87e:	71ab      	strb	r3, [r5, #6]
 800d880:	2e06      	cmp	r6, #6
 800d882:	d072      	beq.n	800d96a <ucdr_serialize_double+0x17e>
 800d884:	f89d 3000 	ldrb.w	r3, [sp]
 800d888:	71eb      	strb	r3, [r5, #7]
 800d88a:	6923      	ldr	r3, [r4, #16]
 800d88c:	68a2      	ldr	r2, [r4, #8]
 800d88e:	7da0      	ldrb	r0, [r4, #22]
 800d890:	3308      	adds	r3, #8
 800d892:	1b9e      	subs	r6, r3, r6
 800d894:	4442      	add	r2, r8
 800d896:	2308      	movs	r3, #8
 800d898:	f080 0001 	eor.w	r0, r0, #1
 800d89c:	60a2      	str	r2, [r4, #8]
 800d89e:	6126      	str	r6, [r4, #16]
 800d8a0:	7563      	strb	r3, [r4, #21]
 800d8a2:	b002      	add	sp, #8
 800d8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8a8:	2108      	movs	r1, #8
 800d8aa:	4620      	mov	r0, r4
 800d8ac:	f000 fae0 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800d8b0:	b350      	cbz	r0, 800d908 <ucdr_serialize_double+0x11c>
 800d8b2:	7d23      	ldrb	r3, [r4, #20]
 800d8b4:	2b01      	cmp	r3, #1
 800d8b6:	d02d      	beq.n	800d914 <ucdr_serialize_double+0x128>
 800d8b8:	68a3      	ldr	r3, [r4, #8]
 800d8ba:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d8be:	701a      	strb	r2, [r3, #0]
 800d8c0:	68a3      	ldr	r3, [r4, #8]
 800d8c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d8c6:	705a      	strb	r2, [r3, #1]
 800d8c8:	68a3      	ldr	r3, [r4, #8]
 800d8ca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d8ce:	709a      	strb	r2, [r3, #2]
 800d8d0:	68a3      	ldr	r3, [r4, #8]
 800d8d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d8d6:	70da      	strb	r2, [r3, #3]
 800d8d8:	68a3      	ldr	r3, [r4, #8]
 800d8da:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d8de:	711a      	strb	r2, [r3, #4]
 800d8e0:	68a3      	ldr	r3, [r4, #8]
 800d8e2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d8e6:	715a      	strb	r2, [r3, #5]
 800d8e8:	68a3      	ldr	r3, [r4, #8]
 800d8ea:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d8ee:	719a      	strb	r2, [r3, #6]
 800d8f0:	68a3      	ldr	r3, [r4, #8]
 800d8f2:	f89d 2000 	ldrb.w	r2, [sp]
 800d8f6:	71da      	strb	r2, [r3, #7]
 800d8f8:	68a2      	ldr	r2, [r4, #8]
 800d8fa:	6923      	ldr	r3, [r4, #16]
 800d8fc:	3208      	adds	r2, #8
 800d8fe:	3308      	adds	r3, #8
 800d900:	2108      	movs	r1, #8
 800d902:	60a2      	str	r2, [r4, #8]
 800d904:	6123      	str	r3, [r4, #16]
 800d906:	7561      	strb	r1, [r4, #21]
 800d908:	7da0      	ldrb	r0, [r4, #22]
 800d90a:	f080 0001 	eor.w	r0, r0, #1
 800d90e:	b002      	add	sp, #8
 800d910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d914:	466b      	mov	r3, sp
 800d916:	cb03      	ldmia	r3!, {r0, r1}
 800d918:	68a3      	ldr	r3, [r4, #8]
 800d91a:	6018      	str	r0, [r3, #0]
 800d91c:	6059      	str	r1, [r3, #4]
 800d91e:	e7eb      	b.n	800d8f8 <ucdr_serialize_double+0x10c>
 800d920:	68a2      	ldr	r2, [r4, #8]
 800d922:	6923      	ldr	r3, [r4, #16]
 800d924:	7da0      	ldrb	r0, [r4, #22]
 800d926:	7567      	strb	r7, [r4, #21]
 800d928:	1b92      	subs	r2, r2, r6
 800d92a:	1b9b      	subs	r3, r3, r6
 800d92c:	f080 0001 	eor.w	r0, r0, #1
 800d930:	60a2      	str	r2, [r4, #8]
 800d932:	6123      	str	r3, [r4, #16]
 800d934:	b002      	add	sp, #8
 800d936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d93a:	68a3      	ldr	r3, [r4, #8]
 800d93c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d940:	701a      	strb	r2, [r3, #0]
 800d942:	68a3      	ldr	r3, [r4, #8]
 800d944:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d948:	701a      	strb	r2, [r3, #0]
 800d94a:	68a3      	ldr	r3, [r4, #8]
 800d94c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d950:	701a      	strb	r2, [r3, #0]
 800d952:	68a3      	ldr	r3, [r4, #8]
 800d954:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d958:	701a      	strb	r2, [r3, #0]
 800d95a:	68a3      	ldr	r3, [r4, #8]
 800d95c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d960:	701a      	strb	r2, [r3, #0]
 800d962:	68a3      	ldr	r3, [r4, #8]
 800d964:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d968:	701a      	strb	r2, [r3, #0]
 800d96a:	68a3      	ldr	r3, [r4, #8]
 800d96c:	f89d 2000 	ldrb.w	r2, [sp]
 800d970:	701a      	strb	r2, [r3, #0]
 800d972:	e78a      	b.n	800d88a <ucdr_serialize_double+0x9e>
 800d974:	4628      	mov	r0, r5
 800d976:	466d      	mov	r5, sp
 800d978:	4629      	mov	r1, r5
 800d97a:	4632      	mov	r2, r6
 800d97c:	f009 ffb1 	bl	80178e2 <memcpy>
 800d980:	68a0      	ldr	r0, [r4, #8]
 800d982:	4642      	mov	r2, r8
 800d984:	19a9      	adds	r1, r5, r6
 800d986:	f009 ffac 	bl	80178e2 <memcpy>
 800d98a:	e77e      	b.n	800d88a <ucdr_serialize_double+0x9e>

0800d98c <ucdr_serialize_endian_double>:
 800d98c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d990:	460e      	mov	r6, r1
 800d992:	b083      	sub	sp, #12
 800d994:	2108      	movs	r1, #8
 800d996:	4604      	mov	r4, r0
 800d998:	ed8d 0b00 	vstr	d0, [sp]
 800d99c:	f000 fabc 	bl	800df18 <ucdr_buffer_alignment>
 800d9a0:	4601      	mov	r1, r0
 800d9a2:	4620      	mov	r0, r4
 800d9a4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d9a8:	f000 fafa 	bl	800dfa0 <ucdr_advance_buffer>
 800d9ac:	2108      	movs	r1, #8
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	f000 fa52 	bl	800de58 <ucdr_check_buffer_available_for>
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	d14d      	bne.n	800da54 <ucdr_serialize_endian_double+0xc8>
 800d9b8:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800d9bc:	42bd      	cmp	r5, r7
 800d9be:	d944      	bls.n	800da4a <ucdr_serialize_endian_double+0xbe>
 800d9c0:	6923      	ldr	r3, [r4, #16]
 800d9c2:	60a5      	str	r5, [r4, #8]
 800d9c4:	1bed      	subs	r5, r5, r7
 800d9c6:	442b      	add	r3, r5
 800d9c8:	f1c5 0908 	rsb	r9, r5, #8
 800d9cc:	6123      	str	r3, [r4, #16]
 800d9ce:	4649      	mov	r1, r9
 800d9d0:	4620      	mov	r0, r4
 800d9d2:	f000 fa4d 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800d9d6:	2800      	cmp	r0, #0
 800d9d8:	d072      	beq.n	800dac0 <ucdr_serialize_endian_double+0x134>
 800d9da:	2e01      	cmp	r6, #1
 800d9dc:	f000 809b 	beq.w	800db16 <ucdr_serialize_endian_double+0x18a>
 800d9e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d9e4:	703b      	strb	r3, [r7, #0]
 800d9e6:	2d00      	cmp	r5, #0
 800d9e8:	d078      	beq.n	800dadc <ucdr_serialize_endian_double+0x150>
 800d9ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d9ee:	707b      	strb	r3, [r7, #1]
 800d9f0:	2d01      	cmp	r5, #1
 800d9f2:	d077      	beq.n	800dae4 <ucdr_serialize_endian_double+0x158>
 800d9f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d9f8:	70bb      	strb	r3, [r7, #2]
 800d9fa:	2d02      	cmp	r5, #2
 800d9fc:	d076      	beq.n	800daec <ucdr_serialize_endian_double+0x160>
 800d9fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800da02:	70fb      	strb	r3, [r7, #3]
 800da04:	2d03      	cmp	r5, #3
 800da06:	d075      	beq.n	800daf4 <ucdr_serialize_endian_double+0x168>
 800da08:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800da0c:	713b      	strb	r3, [r7, #4]
 800da0e:	2d04      	cmp	r5, #4
 800da10:	d074      	beq.n	800dafc <ucdr_serialize_endian_double+0x170>
 800da12:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800da16:	717b      	strb	r3, [r7, #5]
 800da18:	2d05      	cmp	r5, #5
 800da1a:	d073      	beq.n	800db04 <ucdr_serialize_endian_double+0x178>
 800da1c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800da20:	71bb      	strb	r3, [r7, #6]
 800da22:	2d06      	cmp	r5, #6
 800da24:	d072      	beq.n	800db0c <ucdr_serialize_endian_double+0x180>
 800da26:	f89d 3000 	ldrb.w	r3, [sp]
 800da2a:	71fb      	strb	r3, [r7, #7]
 800da2c:	6923      	ldr	r3, [r4, #16]
 800da2e:	68a2      	ldr	r2, [r4, #8]
 800da30:	7da0      	ldrb	r0, [r4, #22]
 800da32:	3308      	adds	r3, #8
 800da34:	1b5d      	subs	r5, r3, r5
 800da36:	444a      	add	r2, r9
 800da38:	2308      	movs	r3, #8
 800da3a:	f080 0001 	eor.w	r0, r0, #1
 800da3e:	60a2      	str	r2, [r4, #8]
 800da40:	6125      	str	r5, [r4, #16]
 800da42:	7563      	strb	r3, [r4, #21]
 800da44:	b003      	add	sp, #12
 800da46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da4a:	2108      	movs	r1, #8
 800da4c:	4620      	mov	r0, r4
 800da4e:	f000 fa0f 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800da52:	b348      	cbz	r0, 800daa8 <ucdr_serialize_endian_double+0x11c>
 800da54:	2e01      	cmp	r6, #1
 800da56:	d02d      	beq.n	800dab4 <ucdr_serialize_endian_double+0x128>
 800da58:	68a3      	ldr	r3, [r4, #8]
 800da5a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800da5e:	701a      	strb	r2, [r3, #0]
 800da60:	68a3      	ldr	r3, [r4, #8]
 800da62:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800da66:	705a      	strb	r2, [r3, #1]
 800da68:	68a3      	ldr	r3, [r4, #8]
 800da6a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800da6e:	709a      	strb	r2, [r3, #2]
 800da70:	68a3      	ldr	r3, [r4, #8]
 800da72:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800da76:	70da      	strb	r2, [r3, #3]
 800da78:	68a3      	ldr	r3, [r4, #8]
 800da7a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800da7e:	711a      	strb	r2, [r3, #4]
 800da80:	68a3      	ldr	r3, [r4, #8]
 800da82:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800da86:	715a      	strb	r2, [r3, #5]
 800da88:	68a3      	ldr	r3, [r4, #8]
 800da8a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800da8e:	719a      	strb	r2, [r3, #6]
 800da90:	68a3      	ldr	r3, [r4, #8]
 800da92:	f89d 2000 	ldrb.w	r2, [sp]
 800da96:	71da      	strb	r2, [r3, #7]
 800da98:	68a2      	ldr	r2, [r4, #8]
 800da9a:	6923      	ldr	r3, [r4, #16]
 800da9c:	3208      	adds	r2, #8
 800da9e:	3308      	adds	r3, #8
 800daa0:	2108      	movs	r1, #8
 800daa2:	60a2      	str	r2, [r4, #8]
 800daa4:	6123      	str	r3, [r4, #16]
 800daa6:	7561      	strb	r1, [r4, #21]
 800daa8:	7da0      	ldrb	r0, [r4, #22]
 800daaa:	f080 0001 	eor.w	r0, r0, #1
 800daae:	b003      	add	sp, #12
 800dab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dab4:	466b      	mov	r3, sp
 800dab6:	cb03      	ldmia	r3!, {r0, r1}
 800dab8:	68a3      	ldr	r3, [r4, #8]
 800daba:	6018      	str	r0, [r3, #0]
 800dabc:	6059      	str	r1, [r3, #4]
 800dabe:	e7eb      	b.n	800da98 <ucdr_serialize_endian_double+0x10c>
 800dac0:	68a2      	ldr	r2, [r4, #8]
 800dac2:	6923      	ldr	r3, [r4, #16]
 800dac4:	7da0      	ldrb	r0, [r4, #22]
 800dac6:	f884 8015 	strb.w	r8, [r4, #21]
 800daca:	1b52      	subs	r2, r2, r5
 800dacc:	1b5b      	subs	r3, r3, r5
 800dace:	f080 0001 	eor.w	r0, r0, #1
 800dad2:	60a2      	str	r2, [r4, #8]
 800dad4:	6123      	str	r3, [r4, #16]
 800dad6:	b003      	add	sp, #12
 800dad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dadc:	68a3      	ldr	r3, [r4, #8]
 800dade:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dae2:	701a      	strb	r2, [r3, #0]
 800dae4:	68a3      	ldr	r3, [r4, #8]
 800dae6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800daea:	701a      	strb	r2, [r3, #0]
 800daec:	68a3      	ldr	r3, [r4, #8]
 800daee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800daf2:	701a      	strb	r2, [r3, #0]
 800daf4:	68a3      	ldr	r3, [r4, #8]
 800daf6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800dafa:	701a      	strb	r2, [r3, #0]
 800dafc:	68a3      	ldr	r3, [r4, #8]
 800dafe:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800db02:	701a      	strb	r2, [r3, #0]
 800db04:	68a3      	ldr	r3, [r4, #8]
 800db06:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800db0a:	701a      	strb	r2, [r3, #0]
 800db0c:	68a3      	ldr	r3, [r4, #8]
 800db0e:	f89d 2000 	ldrb.w	r2, [sp]
 800db12:	701a      	strb	r2, [r3, #0]
 800db14:	e78a      	b.n	800da2c <ucdr_serialize_endian_double+0xa0>
 800db16:	466e      	mov	r6, sp
 800db18:	4631      	mov	r1, r6
 800db1a:	462a      	mov	r2, r5
 800db1c:	4638      	mov	r0, r7
 800db1e:	f009 fee0 	bl	80178e2 <memcpy>
 800db22:	68a0      	ldr	r0, [r4, #8]
 800db24:	464a      	mov	r2, r9
 800db26:	1971      	adds	r1, r6, r5
 800db28:	f009 fedb 	bl	80178e2 <memcpy>
 800db2c:	e77e      	b.n	800da2c <ucdr_serialize_endian_double+0xa0>
 800db2e:	bf00      	nop

0800db30 <ucdr_deserialize_double>:
 800db30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db34:	460d      	mov	r5, r1
 800db36:	2108      	movs	r1, #8
 800db38:	4604      	mov	r4, r0
 800db3a:	f000 f9ed 	bl	800df18 <ucdr_buffer_alignment>
 800db3e:	4601      	mov	r1, r0
 800db40:	4620      	mov	r0, r4
 800db42:	f894 9015 	ldrb.w	r9, [r4, #21]
 800db46:	f000 fa2b 	bl	800dfa0 <ucdr_advance_buffer>
 800db4a:	2108      	movs	r1, #8
 800db4c:	4620      	mov	r0, r4
 800db4e:	f000 f983 	bl	800de58 <ucdr_check_buffer_available_for>
 800db52:	2800      	cmp	r0, #0
 800db54:	d151      	bne.n	800dbfa <ucdr_deserialize_double+0xca>
 800db56:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800db5a:	42be      	cmp	r6, r7
 800db5c:	d948      	bls.n	800dbf0 <ucdr_deserialize_double+0xc0>
 800db5e:	6923      	ldr	r3, [r4, #16]
 800db60:	60a6      	str	r6, [r4, #8]
 800db62:	1bf6      	subs	r6, r6, r7
 800db64:	4433      	add	r3, r6
 800db66:	f1c6 0808 	rsb	r8, r6, #8
 800db6a:	6123      	str	r3, [r4, #16]
 800db6c:	4641      	mov	r1, r8
 800db6e:	4620      	mov	r0, r4
 800db70:	f000 f97e 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800db74:	2800      	cmp	r0, #0
 800db76:	d06d      	beq.n	800dc54 <ucdr_deserialize_double+0x124>
 800db78:	7d23      	ldrb	r3, [r4, #20]
 800db7a:	2b01      	cmp	r3, #1
 800db7c:	f000 8093 	beq.w	800dca6 <ucdr_deserialize_double+0x176>
 800db80:	79fb      	ldrb	r3, [r7, #7]
 800db82:	702b      	strb	r3, [r5, #0]
 800db84:	2e00      	cmp	r6, #0
 800db86:	d072      	beq.n	800dc6e <ucdr_deserialize_double+0x13e>
 800db88:	79bb      	ldrb	r3, [r7, #6]
 800db8a:	706b      	strb	r3, [r5, #1]
 800db8c:	2e01      	cmp	r6, #1
 800db8e:	f105 0302 	add.w	r3, r5, #2
 800db92:	d070      	beq.n	800dc76 <ucdr_deserialize_double+0x146>
 800db94:	797b      	ldrb	r3, [r7, #5]
 800db96:	70ab      	strb	r3, [r5, #2]
 800db98:	2e02      	cmp	r6, #2
 800db9a:	f105 0303 	add.w	r3, r5, #3
 800db9e:	d06e      	beq.n	800dc7e <ucdr_deserialize_double+0x14e>
 800dba0:	793b      	ldrb	r3, [r7, #4]
 800dba2:	70eb      	strb	r3, [r5, #3]
 800dba4:	2e03      	cmp	r6, #3
 800dba6:	f105 0304 	add.w	r3, r5, #4
 800dbaa:	d06c      	beq.n	800dc86 <ucdr_deserialize_double+0x156>
 800dbac:	78fb      	ldrb	r3, [r7, #3]
 800dbae:	712b      	strb	r3, [r5, #4]
 800dbb0:	2e04      	cmp	r6, #4
 800dbb2:	f105 0305 	add.w	r3, r5, #5
 800dbb6:	d06a      	beq.n	800dc8e <ucdr_deserialize_double+0x15e>
 800dbb8:	78bb      	ldrb	r3, [r7, #2]
 800dbba:	716b      	strb	r3, [r5, #5]
 800dbbc:	2e05      	cmp	r6, #5
 800dbbe:	f105 0306 	add.w	r3, r5, #6
 800dbc2:	d068      	beq.n	800dc96 <ucdr_deserialize_double+0x166>
 800dbc4:	787b      	ldrb	r3, [r7, #1]
 800dbc6:	71ab      	strb	r3, [r5, #6]
 800dbc8:	2e06      	cmp	r6, #6
 800dbca:	f105 0307 	add.w	r3, r5, #7
 800dbce:	d066      	beq.n	800dc9e <ucdr_deserialize_double+0x16e>
 800dbd0:	783b      	ldrb	r3, [r7, #0]
 800dbd2:	71eb      	strb	r3, [r5, #7]
 800dbd4:	6923      	ldr	r3, [r4, #16]
 800dbd6:	68a2      	ldr	r2, [r4, #8]
 800dbd8:	7da0      	ldrb	r0, [r4, #22]
 800dbda:	3308      	adds	r3, #8
 800dbdc:	1b9e      	subs	r6, r3, r6
 800dbde:	2308      	movs	r3, #8
 800dbe0:	4442      	add	r2, r8
 800dbe2:	7563      	strb	r3, [r4, #21]
 800dbe4:	60a2      	str	r2, [r4, #8]
 800dbe6:	6126      	str	r6, [r4, #16]
 800dbe8:	f080 0001 	eor.w	r0, r0, #1
 800dbec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbf0:	2108      	movs	r1, #8
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	f000 f93c 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800dbf8:	b310      	cbz	r0, 800dc40 <ucdr_deserialize_double+0x110>
 800dbfa:	7d23      	ldrb	r3, [r4, #20]
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	68a3      	ldr	r3, [r4, #8]
 800dc00:	d023      	beq.n	800dc4a <ucdr_deserialize_double+0x11a>
 800dc02:	79db      	ldrb	r3, [r3, #7]
 800dc04:	702b      	strb	r3, [r5, #0]
 800dc06:	68a3      	ldr	r3, [r4, #8]
 800dc08:	799b      	ldrb	r3, [r3, #6]
 800dc0a:	706b      	strb	r3, [r5, #1]
 800dc0c:	68a3      	ldr	r3, [r4, #8]
 800dc0e:	795b      	ldrb	r3, [r3, #5]
 800dc10:	70ab      	strb	r3, [r5, #2]
 800dc12:	68a3      	ldr	r3, [r4, #8]
 800dc14:	791b      	ldrb	r3, [r3, #4]
 800dc16:	70eb      	strb	r3, [r5, #3]
 800dc18:	68a3      	ldr	r3, [r4, #8]
 800dc1a:	78db      	ldrb	r3, [r3, #3]
 800dc1c:	712b      	strb	r3, [r5, #4]
 800dc1e:	68a3      	ldr	r3, [r4, #8]
 800dc20:	789b      	ldrb	r3, [r3, #2]
 800dc22:	716b      	strb	r3, [r5, #5]
 800dc24:	68a3      	ldr	r3, [r4, #8]
 800dc26:	785b      	ldrb	r3, [r3, #1]
 800dc28:	71ab      	strb	r3, [r5, #6]
 800dc2a:	68a3      	ldr	r3, [r4, #8]
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	71eb      	strb	r3, [r5, #7]
 800dc30:	68a2      	ldr	r2, [r4, #8]
 800dc32:	6923      	ldr	r3, [r4, #16]
 800dc34:	3208      	adds	r2, #8
 800dc36:	3308      	adds	r3, #8
 800dc38:	2108      	movs	r1, #8
 800dc3a:	60a2      	str	r2, [r4, #8]
 800dc3c:	6123      	str	r3, [r4, #16]
 800dc3e:	7561      	strb	r1, [r4, #21]
 800dc40:	7da0      	ldrb	r0, [r4, #22]
 800dc42:	f080 0001 	eor.w	r0, r0, #1
 800dc46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc4a:	681a      	ldr	r2, [r3, #0]
 800dc4c:	685b      	ldr	r3, [r3, #4]
 800dc4e:	606b      	str	r3, [r5, #4]
 800dc50:	602a      	str	r2, [r5, #0]
 800dc52:	e7ed      	b.n	800dc30 <ucdr_deserialize_double+0x100>
 800dc54:	68a2      	ldr	r2, [r4, #8]
 800dc56:	6923      	ldr	r3, [r4, #16]
 800dc58:	7da0      	ldrb	r0, [r4, #22]
 800dc5a:	f884 9015 	strb.w	r9, [r4, #21]
 800dc5e:	1b92      	subs	r2, r2, r6
 800dc60:	1b9b      	subs	r3, r3, r6
 800dc62:	60a2      	str	r2, [r4, #8]
 800dc64:	6123      	str	r3, [r4, #16]
 800dc66:	f080 0001 	eor.w	r0, r0, #1
 800dc6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc6e:	68a3      	ldr	r3, [r4, #8]
 800dc70:	799b      	ldrb	r3, [r3, #6]
 800dc72:	706b      	strb	r3, [r5, #1]
 800dc74:	1cab      	adds	r3, r5, #2
 800dc76:	68a2      	ldr	r2, [r4, #8]
 800dc78:	7952      	ldrb	r2, [r2, #5]
 800dc7a:	f803 2b01 	strb.w	r2, [r3], #1
 800dc7e:	68a2      	ldr	r2, [r4, #8]
 800dc80:	7912      	ldrb	r2, [r2, #4]
 800dc82:	f803 2b01 	strb.w	r2, [r3], #1
 800dc86:	68a2      	ldr	r2, [r4, #8]
 800dc88:	78d2      	ldrb	r2, [r2, #3]
 800dc8a:	f803 2b01 	strb.w	r2, [r3], #1
 800dc8e:	68a2      	ldr	r2, [r4, #8]
 800dc90:	7892      	ldrb	r2, [r2, #2]
 800dc92:	f803 2b01 	strb.w	r2, [r3], #1
 800dc96:	68a2      	ldr	r2, [r4, #8]
 800dc98:	7852      	ldrb	r2, [r2, #1]
 800dc9a:	f803 2b01 	strb.w	r2, [r3], #1
 800dc9e:	68a2      	ldr	r2, [r4, #8]
 800dca0:	7812      	ldrb	r2, [r2, #0]
 800dca2:	701a      	strb	r2, [r3, #0]
 800dca4:	e796      	b.n	800dbd4 <ucdr_deserialize_double+0xa4>
 800dca6:	4639      	mov	r1, r7
 800dca8:	4632      	mov	r2, r6
 800dcaa:	4628      	mov	r0, r5
 800dcac:	f009 fe19 	bl	80178e2 <memcpy>
 800dcb0:	68a1      	ldr	r1, [r4, #8]
 800dcb2:	4642      	mov	r2, r8
 800dcb4:	19a8      	adds	r0, r5, r6
 800dcb6:	f009 fe14 	bl	80178e2 <memcpy>
 800dcba:	e78b      	b.n	800dbd4 <ucdr_deserialize_double+0xa4>

0800dcbc <ucdr_deserialize_endian_double>:
 800dcbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcc0:	460f      	mov	r7, r1
 800dcc2:	2108      	movs	r1, #8
 800dcc4:	4604      	mov	r4, r0
 800dcc6:	4615      	mov	r5, r2
 800dcc8:	f000 f926 	bl	800df18 <ucdr_buffer_alignment>
 800dccc:	4601      	mov	r1, r0
 800dcce:	4620      	mov	r0, r4
 800dcd0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800dcd4:	f000 f964 	bl	800dfa0 <ucdr_advance_buffer>
 800dcd8:	2108      	movs	r1, #8
 800dcda:	4620      	mov	r0, r4
 800dcdc:	f000 f8bc 	bl	800de58 <ucdr_check_buffer_available_for>
 800dce0:	2800      	cmp	r0, #0
 800dce2:	d159      	bne.n	800dd98 <ucdr_deserialize_endian_double+0xdc>
 800dce4:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800dce8:	4546      	cmp	r6, r8
 800dcea:	d950      	bls.n	800dd8e <ucdr_deserialize_endian_double+0xd2>
 800dcec:	6923      	ldr	r3, [r4, #16]
 800dcee:	60a6      	str	r6, [r4, #8]
 800dcf0:	eba6 0608 	sub.w	r6, r6, r8
 800dcf4:	4433      	add	r3, r6
 800dcf6:	f1c6 0a08 	rsb	sl, r6, #8
 800dcfa:	6123      	str	r3, [r4, #16]
 800dcfc:	4651      	mov	r1, sl
 800dcfe:	4620      	mov	r0, r4
 800dd00:	f000 f8b6 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800dd04:	2800      	cmp	r0, #0
 800dd06:	d073      	beq.n	800ddf0 <ucdr_deserialize_endian_double+0x134>
 800dd08:	2f01      	cmp	r7, #1
 800dd0a:	f000 809a 	beq.w	800de42 <ucdr_deserialize_endian_double+0x186>
 800dd0e:	f898 3007 	ldrb.w	r3, [r8, #7]
 800dd12:	702b      	strb	r3, [r5, #0]
 800dd14:	2e00      	cmp	r6, #0
 800dd16:	d078      	beq.n	800de0a <ucdr_deserialize_endian_double+0x14e>
 800dd18:	f898 3006 	ldrb.w	r3, [r8, #6]
 800dd1c:	706b      	strb	r3, [r5, #1]
 800dd1e:	2e01      	cmp	r6, #1
 800dd20:	f105 0302 	add.w	r3, r5, #2
 800dd24:	d075      	beq.n	800de12 <ucdr_deserialize_endian_double+0x156>
 800dd26:	f898 3005 	ldrb.w	r3, [r8, #5]
 800dd2a:	70ab      	strb	r3, [r5, #2]
 800dd2c:	2e02      	cmp	r6, #2
 800dd2e:	f105 0303 	add.w	r3, r5, #3
 800dd32:	d072      	beq.n	800de1a <ucdr_deserialize_endian_double+0x15e>
 800dd34:	f898 3004 	ldrb.w	r3, [r8, #4]
 800dd38:	70eb      	strb	r3, [r5, #3]
 800dd3a:	2e03      	cmp	r6, #3
 800dd3c:	f105 0304 	add.w	r3, r5, #4
 800dd40:	d06f      	beq.n	800de22 <ucdr_deserialize_endian_double+0x166>
 800dd42:	f898 3003 	ldrb.w	r3, [r8, #3]
 800dd46:	712b      	strb	r3, [r5, #4]
 800dd48:	2e04      	cmp	r6, #4
 800dd4a:	f105 0305 	add.w	r3, r5, #5
 800dd4e:	d06c      	beq.n	800de2a <ucdr_deserialize_endian_double+0x16e>
 800dd50:	f898 3002 	ldrb.w	r3, [r8, #2]
 800dd54:	716b      	strb	r3, [r5, #5]
 800dd56:	2e05      	cmp	r6, #5
 800dd58:	f105 0306 	add.w	r3, r5, #6
 800dd5c:	d069      	beq.n	800de32 <ucdr_deserialize_endian_double+0x176>
 800dd5e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800dd62:	71ab      	strb	r3, [r5, #6]
 800dd64:	2e06      	cmp	r6, #6
 800dd66:	f105 0307 	add.w	r3, r5, #7
 800dd6a:	d066      	beq.n	800de3a <ucdr_deserialize_endian_double+0x17e>
 800dd6c:	f898 3000 	ldrb.w	r3, [r8]
 800dd70:	71eb      	strb	r3, [r5, #7]
 800dd72:	6923      	ldr	r3, [r4, #16]
 800dd74:	68a2      	ldr	r2, [r4, #8]
 800dd76:	7da0      	ldrb	r0, [r4, #22]
 800dd78:	3308      	adds	r3, #8
 800dd7a:	1b9e      	subs	r6, r3, r6
 800dd7c:	2308      	movs	r3, #8
 800dd7e:	4452      	add	r2, sl
 800dd80:	7563      	strb	r3, [r4, #21]
 800dd82:	60a2      	str	r2, [r4, #8]
 800dd84:	6126      	str	r6, [r4, #16]
 800dd86:	f080 0001 	eor.w	r0, r0, #1
 800dd8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd8e:	2108      	movs	r1, #8
 800dd90:	4620      	mov	r0, r4
 800dd92:	f000 f86d 	bl	800de70 <ucdr_check_final_buffer_behavior>
 800dd96:	b308      	cbz	r0, 800dddc <ucdr_deserialize_endian_double+0x120>
 800dd98:	2f01      	cmp	r7, #1
 800dd9a:	68a3      	ldr	r3, [r4, #8]
 800dd9c:	d023      	beq.n	800dde6 <ucdr_deserialize_endian_double+0x12a>
 800dd9e:	79db      	ldrb	r3, [r3, #7]
 800dda0:	702b      	strb	r3, [r5, #0]
 800dda2:	68a3      	ldr	r3, [r4, #8]
 800dda4:	799b      	ldrb	r3, [r3, #6]
 800dda6:	706b      	strb	r3, [r5, #1]
 800dda8:	68a3      	ldr	r3, [r4, #8]
 800ddaa:	795b      	ldrb	r3, [r3, #5]
 800ddac:	70ab      	strb	r3, [r5, #2]
 800ddae:	68a3      	ldr	r3, [r4, #8]
 800ddb0:	791b      	ldrb	r3, [r3, #4]
 800ddb2:	70eb      	strb	r3, [r5, #3]
 800ddb4:	68a3      	ldr	r3, [r4, #8]
 800ddb6:	78db      	ldrb	r3, [r3, #3]
 800ddb8:	712b      	strb	r3, [r5, #4]
 800ddba:	68a3      	ldr	r3, [r4, #8]
 800ddbc:	789b      	ldrb	r3, [r3, #2]
 800ddbe:	716b      	strb	r3, [r5, #5]
 800ddc0:	68a3      	ldr	r3, [r4, #8]
 800ddc2:	785b      	ldrb	r3, [r3, #1]
 800ddc4:	71ab      	strb	r3, [r5, #6]
 800ddc6:	68a3      	ldr	r3, [r4, #8]
 800ddc8:	781b      	ldrb	r3, [r3, #0]
 800ddca:	71eb      	strb	r3, [r5, #7]
 800ddcc:	68a2      	ldr	r2, [r4, #8]
 800ddce:	6923      	ldr	r3, [r4, #16]
 800ddd0:	3208      	adds	r2, #8
 800ddd2:	3308      	adds	r3, #8
 800ddd4:	2108      	movs	r1, #8
 800ddd6:	60a2      	str	r2, [r4, #8]
 800ddd8:	6123      	str	r3, [r4, #16]
 800ddda:	7561      	strb	r1, [r4, #21]
 800dddc:	7da0      	ldrb	r0, [r4, #22]
 800ddde:	f080 0001 	eor.w	r0, r0, #1
 800dde2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dde6:	681a      	ldr	r2, [r3, #0]
 800dde8:	685b      	ldr	r3, [r3, #4]
 800ddea:	606b      	str	r3, [r5, #4]
 800ddec:	602a      	str	r2, [r5, #0]
 800ddee:	e7ed      	b.n	800ddcc <ucdr_deserialize_endian_double+0x110>
 800ddf0:	68a2      	ldr	r2, [r4, #8]
 800ddf2:	6923      	ldr	r3, [r4, #16]
 800ddf4:	7da0      	ldrb	r0, [r4, #22]
 800ddf6:	f884 9015 	strb.w	r9, [r4, #21]
 800ddfa:	1b92      	subs	r2, r2, r6
 800ddfc:	1b9b      	subs	r3, r3, r6
 800ddfe:	60a2      	str	r2, [r4, #8]
 800de00:	6123      	str	r3, [r4, #16]
 800de02:	f080 0001 	eor.w	r0, r0, #1
 800de06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de0a:	68a3      	ldr	r3, [r4, #8]
 800de0c:	799b      	ldrb	r3, [r3, #6]
 800de0e:	706b      	strb	r3, [r5, #1]
 800de10:	1cab      	adds	r3, r5, #2
 800de12:	68a2      	ldr	r2, [r4, #8]
 800de14:	7952      	ldrb	r2, [r2, #5]
 800de16:	f803 2b01 	strb.w	r2, [r3], #1
 800de1a:	68a2      	ldr	r2, [r4, #8]
 800de1c:	7912      	ldrb	r2, [r2, #4]
 800de1e:	f803 2b01 	strb.w	r2, [r3], #1
 800de22:	68a2      	ldr	r2, [r4, #8]
 800de24:	78d2      	ldrb	r2, [r2, #3]
 800de26:	f803 2b01 	strb.w	r2, [r3], #1
 800de2a:	68a2      	ldr	r2, [r4, #8]
 800de2c:	7892      	ldrb	r2, [r2, #2]
 800de2e:	f803 2b01 	strb.w	r2, [r3], #1
 800de32:	68a2      	ldr	r2, [r4, #8]
 800de34:	7852      	ldrb	r2, [r2, #1]
 800de36:	f803 2b01 	strb.w	r2, [r3], #1
 800de3a:	68a2      	ldr	r2, [r4, #8]
 800de3c:	7812      	ldrb	r2, [r2, #0]
 800de3e:	701a      	strb	r2, [r3, #0]
 800de40:	e797      	b.n	800dd72 <ucdr_deserialize_endian_double+0xb6>
 800de42:	4641      	mov	r1, r8
 800de44:	4632      	mov	r2, r6
 800de46:	4628      	mov	r0, r5
 800de48:	f009 fd4b 	bl	80178e2 <memcpy>
 800de4c:	68a1      	ldr	r1, [r4, #8]
 800de4e:	4652      	mov	r2, sl
 800de50:	19a8      	adds	r0, r5, r6
 800de52:	f009 fd46 	bl	80178e2 <memcpy>
 800de56:	e78c      	b.n	800dd72 <ucdr_deserialize_endian_double+0xb6>

0800de58 <ucdr_check_buffer_available_for>:
 800de58:	7d83      	ldrb	r3, [r0, #22]
 800de5a:	b93b      	cbnz	r3, 800de6c <ucdr_check_buffer_available_for+0x14>
 800de5c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800de60:	4419      	add	r1, r3
 800de62:	4288      	cmp	r0, r1
 800de64:	bf34      	ite	cc
 800de66:	2000      	movcc	r0, #0
 800de68:	2001      	movcs	r0, #1
 800de6a:	4770      	bx	lr
 800de6c:	2000      	movs	r0, #0
 800de6e:	4770      	bx	lr

0800de70 <ucdr_check_final_buffer_behavior>:
 800de70:	7d83      	ldrb	r3, [r0, #22]
 800de72:	b943      	cbnz	r3, 800de86 <ucdr_check_final_buffer_behavior+0x16>
 800de74:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800de78:	4291      	cmp	r1, r2
 800de7a:	b510      	push	{r4, lr}
 800de7c:	4604      	mov	r4, r0
 800de7e:	d205      	bcs.n	800de8c <ucdr_check_final_buffer_behavior+0x1c>
 800de80:	2301      	movs	r3, #1
 800de82:	4618      	mov	r0, r3
 800de84:	bd10      	pop	{r4, pc}
 800de86:	2300      	movs	r3, #0
 800de88:	4618      	mov	r0, r3
 800de8a:	4770      	bx	lr
 800de8c:	6982      	ldr	r2, [r0, #24]
 800de8e:	b13a      	cbz	r2, 800dea0 <ucdr_check_final_buffer_behavior+0x30>
 800de90:	69c1      	ldr	r1, [r0, #28]
 800de92:	4790      	blx	r2
 800de94:	f080 0301 	eor.w	r3, r0, #1
 800de98:	b2db      	uxtb	r3, r3
 800de9a:	75a0      	strb	r0, [r4, #22]
 800de9c:	4618      	mov	r0, r3
 800de9e:	bd10      	pop	{r4, pc}
 800dea0:	2001      	movs	r0, #1
 800dea2:	75a0      	strb	r0, [r4, #22]
 800dea4:	e7fa      	b.n	800de9c <ucdr_check_final_buffer_behavior+0x2c>
 800dea6:	bf00      	nop

0800dea8 <ucdr_set_on_full_buffer_callback>:
 800dea8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800deac:	4770      	bx	lr
 800deae:	bf00      	nop

0800deb0 <ucdr_init_buffer_origin_offset_endian>:
 800deb0:	b410      	push	{r4}
 800deb2:	9c01      	ldr	r4, [sp, #4]
 800deb4:	6001      	str	r1, [r0, #0]
 800deb6:	440a      	add	r2, r1
 800deb8:	6042      	str	r2, [r0, #4]
 800deba:	190a      	adds	r2, r1, r4
 800debc:	441c      	add	r4, r3
 800debe:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800dec2:	6082      	str	r2, [r0, #8]
 800dec4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800dec8:	7503      	strb	r3, [r0, #20]
 800deca:	2200      	movs	r2, #0
 800decc:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800ded0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ded4:	7542      	strb	r2, [r0, #21]
 800ded6:	7582      	strb	r2, [r0, #22]
 800ded8:	4770      	bx	lr
 800deda:	bf00      	nop

0800dedc <ucdr_init_buffer_origin_offset>:
 800dedc:	b510      	push	{r4, lr}
 800dede:	b082      	sub	sp, #8
 800dee0:	9c04      	ldr	r4, [sp, #16]
 800dee2:	9400      	str	r4, [sp, #0]
 800dee4:	2401      	movs	r4, #1
 800dee6:	9401      	str	r4, [sp, #4]
 800dee8:	f7ff ffe2 	bl	800deb0 <ucdr_init_buffer_origin_offset_endian>
 800deec:	b002      	add	sp, #8
 800deee:	bd10      	pop	{r4, pc}

0800def0 <ucdr_init_buffer_origin>:
 800def0:	b510      	push	{r4, lr}
 800def2:	b082      	sub	sp, #8
 800def4:	2400      	movs	r4, #0
 800def6:	9400      	str	r4, [sp, #0]
 800def8:	f7ff fff0 	bl	800dedc <ucdr_init_buffer_origin_offset>
 800defc:	b002      	add	sp, #8
 800defe:	bd10      	pop	{r4, pc}

0800df00 <ucdr_init_buffer>:
 800df00:	2300      	movs	r3, #0
 800df02:	f7ff bff5 	b.w	800def0 <ucdr_init_buffer_origin>
 800df06:	bf00      	nop

0800df08 <ucdr_alignment>:
 800df08:	fbb0 f3f1 	udiv	r3, r0, r1
 800df0c:	fb03 0011 	mls	r0, r3, r1, r0
 800df10:	1a08      	subs	r0, r1, r0
 800df12:	3901      	subs	r1, #1
 800df14:	4008      	ands	r0, r1
 800df16:	4770      	bx	lr

0800df18 <ucdr_buffer_alignment>:
 800df18:	7d43      	ldrb	r3, [r0, #21]
 800df1a:	428b      	cmp	r3, r1
 800df1c:	d208      	bcs.n	800df30 <ucdr_buffer_alignment+0x18>
 800df1e:	6900      	ldr	r0, [r0, #16]
 800df20:	fbb0 f3f1 	udiv	r3, r0, r1
 800df24:	fb01 0013 	mls	r0, r1, r3, r0
 800df28:	1a08      	subs	r0, r1, r0
 800df2a:	3901      	subs	r1, #1
 800df2c:	4008      	ands	r0, r1
 800df2e:	4770      	bx	lr
 800df30:	2000      	movs	r0, #0
 800df32:	4770      	bx	lr

0800df34 <ucdr_align_to>:
 800df34:	b538      	push	{r3, r4, r5, lr}
 800df36:	4604      	mov	r4, r0
 800df38:	460d      	mov	r5, r1
 800df3a:	f7ff ffed 	bl	800df18 <ucdr_buffer_alignment>
 800df3e:	68a3      	ldr	r3, [r4, #8]
 800df40:	6921      	ldr	r1, [r4, #16]
 800df42:	7565      	strb	r5, [r4, #21]
 800df44:	181a      	adds	r2, r3, r0
 800df46:	6863      	ldr	r3, [r4, #4]
 800df48:	4293      	cmp	r3, r2
 800df4a:	4408      	add	r0, r1
 800df4c:	bf28      	it	cs
 800df4e:	4613      	movcs	r3, r2
 800df50:	6120      	str	r0, [r4, #16]
 800df52:	60a3      	str	r3, [r4, #8]
 800df54:	bd38      	pop	{r3, r4, r5, pc}
 800df56:	bf00      	nop

0800df58 <ucdr_buffer_length>:
 800df58:	6882      	ldr	r2, [r0, #8]
 800df5a:	6800      	ldr	r0, [r0, #0]
 800df5c:	1a10      	subs	r0, r2, r0
 800df5e:	4770      	bx	lr

0800df60 <ucdr_buffer_remaining>:
 800df60:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800df64:	1a10      	subs	r0, r2, r0
 800df66:	4770      	bx	lr

0800df68 <ucdr_check_final_buffer_behavior_array>:
 800df68:	b538      	push	{r3, r4, r5, lr}
 800df6a:	7d83      	ldrb	r3, [r0, #22]
 800df6c:	b963      	cbnz	r3, 800df88 <ucdr_check_final_buffer_behavior_array+0x20>
 800df6e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800df72:	429a      	cmp	r2, r3
 800df74:	4604      	mov	r4, r0
 800df76:	460d      	mov	r5, r1
 800df78:	d308      	bcc.n	800df8c <ucdr_check_final_buffer_behavior_array+0x24>
 800df7a:	b139      	cbz	r1, 800df8c <ucdr_check_final_buffer_behavior_array+0x24>
 800df7c:	6983      	ldr	r3, [r0, #24]
 800df7e:	b163      	cbz	r3, 800df9a <ucdr_check_final_buffer_behavior_array+0x32>
 800df80:	69c1      	ldr	r1, [r0, #28]
 800df82:	4798      	blx	r3
 800df84:	75a0      	strb	r0, [r4, #22]
 800df86:	b108      	cbz	r0, 800df8c <ucdr_check_final_buffer_behavior_array+0x24>
 800df88:	2000      	movs	r0, #0
 800df8a:	bd38      	pop	{r3, r4, r5, pc}
 800df8c:	4620      	mov	r0, r4
 800df8e:	f7ff ffe7 	bl	800df60 <ucdr_buffer_remaining>
 800df92:	42a8      	cmp	r0, r5
 800df94:	bf28      	it	cs
 800df96:	4628      	movcs	r0, r5
 800df98:	bd38      	pop	{r3, r4, r5, pc}
 800df9a:	2301      	movs	r3, #1
 800df9c:	7583      	strb	r3, [r0, #22]
 800df9e:	e7f3      	b.n	800df88 <ucdr_check_final_buffer_behavior_array+0x20>

0800dfa0 <ucdr_advance_buffer>:
 800dfa0:	b538      	push	{r3, r4, r5, lr}
 800dfa2:	4604      	mov	r4, r0
 800dfa4:	460d      	mov	r5, r1
 800dfa6:	f7ff ff57 	bl	800de58 <ucdr_check_buffer_available_for>
 800dfaa:	b178      	cbz	r0, 800dfcc <ucdr_advance_buffer+0x2c>
 800dfac:	6923      	ldr	r3, [r4, #16]
 800dfae:	68a2      	ldr	r2, [r4, #8]
 800dfb0:	442b      	add	r3, r5
 800dfb2:	6123      	str	r3, [r4, #16]
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	442a      	add	r2, r5
 800dfb8:	7563      	strb	r3, [r4, #21]
 800dfba:	60a2      	str	r2, [r4, #8]
 800dfbc:	bd38      	pop	{r3, r4, r5, pc}
 800dfbe:	68a2      	ldr	r2, [r4, #8]
 800dfc0:	6923      	ldr	r3, [r4, #16]
 800dfc2:	4402      	add	r2, r0
 800dfc4:	4403      	add	r3, r0
 800dfc6:	1a2d      	subs	r5, r5, r0
 800dfc8:	60a2      	str	r2, [r4, #8]
 800dfca:	6123      	str	r3, [r4, #16]
 800dfcc:	4629      	mov	r1, r5
 800dfce:	2201      	movs	r2, #1
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	f7ff ffc9 	bl	800df68 <ucdr_check_final_buffer_behavior_array>
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	d1f1      	bne.n	800dfbe <ucdr_advance_buffer+0x1e>
 800dfda:	2301      	movs	r3, #1
 800dfdc:	7563      	strb	r3, [r4, #21]
 800dfde:	bd38      	pop	{r3, r4, r5, pc}

0800dfe0 <ucdr_serialize_sequence_char>:
 800dfe0:	b570      	push	{r4, r5, r6, lr}
 800dfe2:	4615      	mov	r5, r2
 800dfe4:	460e      	mov	r6, r1
 800dfe6:	7d01      	ldrb	r1, [r0, #20]
 800dfe8:	4604      	mov	r4, r0
 800dfea:	f7fe fe25 	bl	800cc38 <ucdr_serialize_endian_uint32_t>
 800dfee:	b90d      	cbnz	r5, 800dff4 <ucdr_serialize_sequence_char+0x14>
 800dff0:	2001      	movs	r0, #1
 800dff2:	bd70      	pop	{r4, r5, r6, pc}
 800dff4:	7d21      	ldrb	r1, [r4, #20]
 800dff6:	462b      	mov	r3, r5
 800dff8:	4632      	mov	r2, r6
 800dffa:	4620      	mov	r0, r4
 800dffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e000:	f7fe b8be 	b.w	800c180 <ucdr_serialize_endian_array_char>

0800e004 <ucdr_deserialize_sequence_char>:
 800e004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e008:	461d      	mov	r5, r3
 800e00a:	4616      	mov	r6, r2
 800e00c:	460f      	mov	r7, r1
 800e00e:	461a      	mov	r2, r3
 800e010:	7d01      	ldrb	r1, [r0, #20]
 800e012:	4604      	mov	r4, r0
 800e014:	f7fe ff38 	bl	800ce88 <ucdr_deserialize_endian_uint32_t>
 800e018:	682b      	ldr	r3, [r5, #0]
 800e01a:	429e      	cmp	r6, r3
 800e01c:	bf3c      	itt	cc
 800e01e:	2201      	movcc	r2, #1
 800e020:	75a2      	strbcc	r2, [r4, #22]
 800e022:	b913      	cbnz	r3, 800e02a <ucdr_deserialize_sequence_char+0x26>
 800e024:	2001      	movs	r0, #1
 800e026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e02a:	7d21      	ldrb	r1, [r4, #20]
 800e02c:	463a      	mov	r2, r7
 800e02e:	4620      	mov	r0, r4
 800e030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e034:	f7fe b8d6 	b.w	800c1e4 <ucdr_deserialize_endian_array_char>

0800e038 <ucdr_serialize_sequence_uint8_t>:
 800e038:	b570      	push	{r4, r5, r6, lr}
 800e03a:	4615      	mov	r5, r2
 800e03c:	460e      	mov	r6, r1
 800e03e:	7d01      	ldrb	r1, [r0, #20]
 800e040:	4604      	mov	r4, r0
 800e042:	f7fe fdf9 	bl	800cc38 <ucdr_serialize_endian_uint32_t>
 800e046:	b90d      	cbnz	r5, 800e04c <ucdr_serialize_sequence_uint8_t+0x14>
 800e048:	2001      	movs	r0, #1
 800e04a:	bd70      	pop	{r4, r5, r6, pc}
 800e04c:	7d21      	ldrb	r1, [r4, #20]
 800e04e:	462b      	mov	r3, r5
 800e050:	4632      	mov	r2, r6
 800e052:	4620      	mov	r0, r4
 800e054:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e058:	f7fe b928 	b.w	800c2ac <ucdr_serialize_endian_array_uint8_t>

0800e05c <ucdr_deserialize_sequence_uint8_t>:
 800e05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e060:	461d      	mov	r5, r3
 800e062:	4616      	mov	r6, r2
 800e064:	460f      	mov	r7, r1
 800e066:	461a      	mov	r2, r3
 800e068:	7d01      	ldrb	r1, [r0, #20]
 800e06a:	4604      	mov	r4, r0
 800e06c:	f7fe ff0c 	bl	800ce88 <ucdr_deserialize_endian_uint32_t>
 800e070:	682b      	ldr	r3, [r5, #0]
 800e072:	429e      	cmp	r6, r3
 800e074:	bf3c      	itt	cc
 800e076:	2201      	movcc	r2, #1
 800e078:	75a2      	strbcc	r2, [r4, #22]
 800e07a:	b913      	cbnz	r3, 800e082 <ucdr_deserialize_sequence_uint8_t+0x26>
 800e07c:	2001      	movs	r0, #1
 800e07e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e082:	7d21      	ldrb	r1, [r4, #20]
 800e084:	463a      	mov	r2, r7
 800e086:	4620      	mov	r0, r4
 800e088:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e08c:	f7fe b972 	b.w	800c374 <ucdr_deserialize_endian_array_uint8_t>

0800e090 <ucdr_serialize_sequence_float>:
 800e090:	b570      	push	{r4, r5, r6, lr}
 800e092:	4615      	mov	r5, r2
 800e094:	460e      	mov	r6, r1
 800e096:	7d01      	ldrb	r1, [r0, #20]
 800e098:	4604      	mov	r4, r0
 800e09a:	f7fe fdcd 	bl	800cc38 <ucdr_serialize_endian_uint32_t>
 800e09e:	b90d      	cbnz	r5, 800e0a4 <ucdr_serialize_sequence_float+0x14>
 800e0a0:	2001      	movs	r0, #1
 800e0a2:	bd70      	pop	{r4, r5, r6, pc}
 800e0a4:	7d21      	ldrb	r1, [r4, #20]
 800e0a6:	462b      	mov	r3, r5
 800e0a8:	4632      	mov	r2, r6
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e0b0:	f7fe b992 	b.w	800c3d8 <ucdr_serialize_endian_array_float>

0800e0b4 <ucdr_deserialize_sequence_float>:
 800e0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0b8:	461d      	mov	r5, r3
 800e0ba:	4616      	mov	r6, r2
 800e0bc:	460f      	mov	r7, r1
 800e0be:	461a      	mov	r2, r3
 800e0c0:	7d01      	ldrb	r1, [r0, #20]
 800e0c2:	4604      	mov	r4, r0
 800e0c4:	f7fe fee0 	bl	800ce88 <ucdr_deserialize_endian_uint32_t>
 800e0c8:	682b      	ldr	r3, [r5, #0]
 800e0ca:	429e      	cmp	r6, r3
 800e0cc:	bf3c      	itt	cc
 800e0ce:	2201      	movcc	r2, #1
 800e0d0:	75a2      	strbcc	r2, [r4, #22]
 800e0d2:	b913      	cbnz	r3, 800e0da <ucdr_deserialize_sequence_float+0x26>
 800e0d4:	2001      	movs	r0, #1
 800e0d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0da:	7d21      	ldrb	r1, [r4, #20]
 800e0dc:	463a      	mov	r2, r7
 800e0de:	4620      	mov	r0, r4
 800e0e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0e4:	f7fe b9cc 	b.w	800c480 <ucdr_deserialize_endian_array_float>

0800e0e8 <uxr_buffer_delete_entity>:
 800e0e8:	b510      	push	{r4, lr}
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	b08e      	sub	sp, #56	; 0x38
 800e0ee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e0f2:	2303      	movs	r3, #3
 800e0f4:	9300      	str	r3, [sp, #0]
 800e0f6:	2204      	movs	r2, #4
 800e0f8:	ab06      	add	r3, sp, #24
 800e0fa:	4604      	mov	r4, r0
 800e0fc:	9103      	str	r1, [sp, #12]
 800e0fe:	f001 fa81 	bl	800f604 <uxr_prepare_stream_to_write_submessage>
 800e102:	b918      	cbnz	r0, 800e10c <uxr_buffer_delete_entity+0x24>
 800e104:	4604      	mov	r4, r0
 800e106:	4620      	mov	r0, r4
 800e108:	b00e      	add	sp, #56	; 0x38
 800e10a:	bd10      	pop	{r4, pc}
 800e10c:	9902      	ldr	r1, [sp, #8]
 800e10e:	aa05      	add	r2, sp, #20
 800e110:	4620      	mov	r0, r4
 800e112:	f001 fbad 	bl	800f870 <uxr_init_base_object_request>
 800e116:	a905      	add	r1, sp, #20
 800e118:	4604      	mov	r4, r0
 800e11a:	a806      	add	r0, sp, #24
 800e11c:	f002 fdfe 	bl	8010d1c <uxr_serialize_DELETE_Payload>
 800e120:	4620      	mov	r0, r4
 800e122:	b00e      	add	sp, #56	; 0x38
 800e124:	bd10      	pop	{r4, pc}
 800e126:	bf00      	nop

0800e128 <uxr_common_create_entity>:
 800e128:	b510      	push	{r4, lr}
 800e12a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e12e:	b08c      	sub	sp, #48	; 0x30
 800e130:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e134:	f1bc 0f01 	cmp.w	ip, #1
 800e138:	bf0c      	ite	eq
 800e13a:	f003 0201 	andeq.w	r2, r3, #1
 800e13e:	2200      	movne	r2, #0
 800e140:	330e      	adds	r3, #14
 800e142:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800e146:	9101      	str	r1, [sp, #4]
 800e148:	441a      	add	r2, r3
 800e14a:	2301      	movs	r3, #1
 800e14c:	9300      	str	r3, [sp, #0]
 800e14e:	9903      	ldr	r1, [sp, #12]
 800e150:	ab04      	add	r3, sp, #16
 800e152:	b292      	uxth	r2, r2
 800e154:	4604      	mov	r4, r0
 800e156:	f001 fa55 	bl	800f604 <uxr_prepare_stream_to_write_submessage>
 800e15a:	b918      	cbnz	r0, 800e164 <uxr_common_create_entity+0x3c>
 800e15c:	4604      	mov	r4, r0
 800e15e:	4620      	mov	r0, r4
 800e160:	b00c      	add	sp, #48	; 0x30
 800e162:	bd10      	pop	{r4, pc}
 800e164:	9902      	ldr	r1, [sp, #8]
 800e166:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e168:	4620      	mov	r0, r4
 800e16a:	f001 fb81 	bl	800f870 <uxr_init_base_object_request>
 800e16e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e170:	4604      	mov	r4, r0
 800e172:	a804      	add	r0, sp, #16
 800e174:	f002 fd2e 	bl	8010bd4 <uxr_serialize_CREATE_Payload>
 800e178:	4620      	mov	r0, r4
 800e17a:	b00c      	add	sp, #48	; 0x30
 800e17c:	bd10      	pop	{r4, pc}
 800e17e:	bf00      	nop

0800e180 <uxr_buffer_create_participant_bin>:
 800e180:	b570      	push	{r4, r5, r6, lr}
 800e182:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800e186:	ac11      	add	r4, sp, #68	; 0x44
 800e188:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 800e18c:	2303      	movs	r3, #3
 800e18e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e192:	7223      	strb	r3, [r4, #8]
 800e194:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 800e196:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 800e19a:	2201      	movs	r2, #1
 800e19c:	2100      	movs	r1, #0
 800e19e:	4605      	mov	r5, r0
 800e1a0:	7122      	strb	r2, [r4, #4]
 800e1a2:	f88d 1014 	strb.w	r1, [sp, #20]
 800e1a6:	b1cb      	cbz	r3, 800e1dc <uxr_buffer_create_participant_bin+0x5c>
 800e1a8:	f88d 201c 	strb.w	r2, [sp, #28]
 800e1ac:	9308      	str	r3, [sp, #32]
 800e1ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e1b2:	a915      	add	r1, sp, #84	; 0x54
 800e1b4:	a809      	add	r0, sp, #36	; 0x24
 800e1b6:	f7ff fea3 	bl	800df00 <ucdr_init_buffer>
 800e1ba:	a905      	add	r1, sp, #20
 800e1bc:	a809      	add	r0, sp, #36	; 0x24
 800e1be:	f002 f8eb 	bl	8010398 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800e1c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e1c4:	9600      	str	r6, [sp, #0]
 800e1c6:	9401      	str	r4, [sp, #4]
 800e1c8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e1cc:	60e3      	str	r3, [r4, #12]
 800e1ce:	4628      	mov	r0, r5
 800e1d0:	b29b      	uxth	r3, r3
 800e1d2:	f7ff ffa9 	bl	800e128 <uxr_common_create_entity>
 800e1d6:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800e1da:	bd70      	pop	{r4, r5, r6, pc}
 800e1dc:	f88d 301c 	strb.w	r3, [sp, #28]
 800e1e0:	e7e5      	b.n	800e1ae <uxr_buffer_create_participant_bin+0x2e>
 800e1e2:	bf00      	nop

0800e1e4 <uxr_buffer_create_topic_bin>:
 800e1e4:	b570      	push	{r4, r5, r6, lr}
 800e1e6:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800e1ea:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e1ee:	9105      	str	r1, [sp, #20]
 800e1f0:	4605      	mov	r5, r0
 800e1f2:	a997      	add	r1, sp, #604	; 0x25c
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	2302      	movs	r3, #2
 800e1f8:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 800e1fc:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800e200:	f000 f996 	bl	800e530 <uxr_object_id_to_raw>
 800e204:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 800e206:	9306      	str	r3, [sp, #24]
 800e208:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 800e20a:	930a      	str	r3, [sp, #40]	; 0x28
 800e20c:	2303      	movs	r3, #3
 800e20e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800e212:	2301      	movs	r3, #1
 800e214:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e218:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800e21c:	a917      	add	r1, sp, #92	; 0x5c
 800e21e:	2300      	movs	r3, #0
 800e220:	a80b      	add	r0, sp, #44	; 0x2c
 800e222:	f88d 301c 	strb.w	r3, [sp, #28]
 800e226:	f7ff fe6b 	bl	800df00 <ucdr_init_buffer>
 800e22a:	a906      	add	r1, sp, #24
 800e22c:	a80b      	add	r0, sp, #44	; 0x2c
 800e22e:	f002 f8d5 	bl	80103dc <uxr_serialize_OBJK_Topic_Binary>
 800e232:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e234:	9316      	str	r3, [sp, #88]	; 0x58
 800e236:	ac13      	add	r4, sp, #76	; 0x4c
 800e238:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e23c:	9600      	str	r6, [sp, #0]
 800e23e:	9401      	str	r4, [sp, #4]
 800e240:	b29b      	uxth	r3, r3
 800e242:	4628      	mov	r0, r5
 800e244:	f7ff ff70 	bl	800e128 <uxr_common_create_entity>
 800e248:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 800e24c:	bd70      	pop	{r4, r5, r6, pc}
 800e24e:	bf00      	nop

0800e250 <uxr_buffer_create_publisher_bin>:
 800e250:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e252:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800e256:	4605      	mov	r5, r0
 800e258:	9105      	str	r1, [sp, #20]
 800e25a:	4618      	mov	r0, r3
 800e25c:	2603      	movs	r6, #3
 800e25e:	a992      	add	r1, sp, #584	; 0x248
 800e260:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e264:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800e268:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800e26c:	f000 f960 	bl	800e530 <uxr_object_id_to_raw>
 800e270:	2300      	movs	r3, #0
 800e272:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e276:	a912      	add	r1, sp, #72	; 0x48
 800e278:	a806      	add	r0, sp, #24
 800e27a:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800e27e:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800e282:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 800e286:	f7ff fe3b 	bl	800df00 <ucdr_init_buffer>
 800e28a:	a993      	add	r1, sp, #588	; 0x24c
 800e28c:	a806      	add	r0, sp, #24
 800e28e:	f002 f959 	bl	8010544 <uxr_serialize_OBJK_Publisher_Binary>
 800e292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e294:	9311      	str	r3, [sp, #68]	; 0x44
 800e296:	ac0e      	add	r4, sp, #56	; 0x38
 800e298:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e29c:	9700      	str	r7, [sp, #0]
 800e29e:	9401      	str	r4, [sp, #4]
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	f7ff ff40 	bl	800e128 <uxr_common_create_entity>
 800e2a8:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800e2ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2ae:	bf00      	nop

0800e2b0 <uxr_buffer_create_subscriber_bin>:
 800e2b0:	b570      	push	{r4, r5, r6, lr}
 800e2b2:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 800e2b6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e2ba:	9105      	str	r1, [sp, #20]
 800e2bc:	4605      	mov	r5, r0
 800e2be:	a992      	add	r1, sp, #584	; 0x248
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	2304      	movs	r3, #4
 800e2c4:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 800e2c8:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800e2cc:	f000 f930 	bl	800e530 <uxr_object_id_to_raw>
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e2d6:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800e2da:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800e2de:	a912      	add	r1, sp, #72	; 0x48
 800e2e0:	2303      	movs	r3, #3
 800e2e2:	a806      	add	r0, sp, #24
 800e2e4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800e2e8:	f7ff fe0a 	bl	800df00 <ucdr_init_buffer>
 800e2ec:	a993      	add	r1, sp, #588	; 0x24c
 800e2ee:	a806      	add	r0, sp, #24
 800e2f0:	f002 f9d8 	bl	80106a4 <uxr_serialize_OBJK_Subscriber_Binary>
 800e2f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2f6:	9311      	str	r3, [sp, #68]	; 0x44
 800e2f8:	ac0e      	add	r4, sp, #56	; 0x38
 800e2fa:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e2fe:	9600      	str	r6, [sp, #0]
 800e300:	9401      	str	r4, [sp, #4]
 800e302:	b29b      	uxth	r3, r3
 800e304:	4628      	mov	r0, r5
 800e306:	f7ff ff0f 	bl	800e128 <uxr_common_create_entity>
 800e30a:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 800e30e:	bd70      	pop	{r4, r5, r6, pc}

0800e310 <uxr_buffer_create_datawriter_bin>:
 800e310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e314:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e318:	ac1d      	add	r4, sp, #116	; 0x74
 800e31a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e31e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800e322:	9105      	str	r1, [sp, #20]
 800e324:	4606      	mov	r6, r0
 800e326:	a9a1      	add	r1, sp, #644	; 0x284
 800e328:	4618      	mov	r0, r3
 800e32a:	2305      	movs	r3, #5
 800e32c:	7123      	strb	r3, [r4, #4]
 800e32e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800e332:	2703      	movs	r7, #3
 800e334:	f000 f8fc 	bl	800e530 <uxr_object_id_to_raw>
 800e338:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800e33a:	7227      	strb	r7, [r4, #8]
 800e33c:	a90e      	add	r1, sp, #56	; 0x38
 800e33e:	f000 f8f7 	bl	800e530 <uxr_object_id_to_raw>
 800e342:	2300      	movs	r3, #0
 800e344:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800e348:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 800e34c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800e350:	3d00      	subs	r5, #0
 800e352:	bf18      	it	ne
 800e354:	2501      	movne	r5, #1
 800e356:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800e35a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800e35e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800e362:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800e366:	2301      	movs	r3, #1
 800e368:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800e36c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800e370:	bb8a      	cbnz	r2, 800e3d6 <uxr_buffer_create_datawriter_bin+0xc6>
 800e372:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800e376:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800e37a:	f04f 0c13 	mov.w	ip, #19
 800e37e:	250b      	movs	r5, #11
 800e380:	2221      	movs	r2, #33	; 0x21
 800e382:	2111      	movs	r1, #17
 800e384:	2009      	movs	r0, #9
 800e386:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800e38a:	b923      	cbnz	r3, 800e396 <uxr_buffer_create_datawriter_bin+0x86>
 800e38c:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800e390:	4672      	mov	r2, lr
 800e392:	4661      	mov	r1, ip
 800e394:	4628      	mov	r0, r5
 800e396:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800e39a:	2b01      	cmp	r3, #1
 800e39c:	d025      	beq.n	800e3ea <uxr_buffer_create_datawriter_bin+0xda>
 800e39e:	2b03      	cmp	r3, #3
 800e3a0:	d029      	beq.n	800e3f6 <uxr_buffer_create_datawriter_bin+0xe6>
 800e3a2:	b32b      	cbz	r3, 800e3f0 <uxr_buffer_create_datawriter_bin+0xe0>
 800e3a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e3a8:	a921      	add	r1, sp, #132	; 0x84
 800e3aa:	a806      	add	r0, sp, #24
 800e3ac:	f7ff fda8 	bl	800df00 <ucdr_init_buffer>
 800e3b0:	a90e      	add	r1, sp, #56	; 0x38
 800e3b2:	a806      	add	r0, sp, #24
 800e3b4:	f002 fa28 	bl	8010808 <uxr_serialize_OBJK_DataWriter_Binary>
 800e3b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3ba:	f8cd 8000 	str.w	r8, [sp]
 800e3be:	9401      	str	r4, [sp, #4]
 800e3c0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e3c4:	60e3      	str	r3, [r4, #12]
 800e3c6:	4630      	mov	r0, r6
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	f7ff fead 	bl	800e128 <uxr_common_create_entity>
 800e3ce:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e3d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3d6:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800e3da:	f04f 0c12 	mov.w	ip, #18
 800e3de:	250a      	movs	r5, #10
 800e3e0:	2220      	movs	r2, #32
 800e3e2:	2110      	movs	r1, #16
 800e3e4:	2008      	movs	r0, #8
 800e3e6:	2702      	movs	r7, #2
 800e3e8:	e7cd      	b.n	800e386 <uxr_buffer_create_datawriter_bin+0x76>
 800e3ea:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800e3ee:	e7d9      	b.n	800e3a4 <uxr_buffer_create_datawriter_bin+0x94>
 800e3f0:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800e3f4:	e7d6      	b.n	800e3a4 <uxr_buffer_create_datawriter_bin+0x94>
 800e3f6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800e3fa:	e7d3      	b.n	800e3a4 <uxr_buffer_create_datawriter_bin+0x94>

0800e3fc <uxr_buffer_create_datareader_bin>:
 800e3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e400:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800e404:	ac1f      	add	r4, sp, #124	; 0x7c
 800e406:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e40a:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 800e40e:	9105      	str	r1, [sp, #20]
 800e410:	4606      	mov	r6, r0
 800e412:	a9a3      	add	r1, sp, #652	; 0x28c
 800e414:	4618      	mov	r0, r3
 800e416:	2306      	movs	r3, #6
 800e418:	7123      	strb	r3, [r4, #4]
 800e41a:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 800e41e:	2703      	movs	r7, #3
 800e420:	f000 f886 	bl	800e530 <uxr_object_id_to_raw>
 800e424:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 800e426:	7227      	strb	r7, [r4, #8]
 800e428:	a90e      	add	r1, sp, #56	; 0x38
 800e42a:	f000 f881 	bl	800e530 <uxr_object_id_to_raw>
 800e42e:	2300      	movs	r3, #0
 800e430:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800e434:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 800e438:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800e43c:	3d00      	subs	r5, #0
 800e43e:	bf18      	it	ne
 800e440:	2501      	movne	r5, #1
 800e442:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800e446:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800e44a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800e44e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800e452:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800e456:	2301      	movs	r3, #1
 800e458:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800e45c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800e460:	bb8a      	cbnz	r2, 800e4c6 <uxr_buffer_create_datareader_bin+0xca>
 800e462:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800e466:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800e46a:	f04f 0c13 	mov.w	ip, #19
 800e46e:	250b      	movs	r5, #11
 800e470:	2221      	movs	r2, #33	; 0x21
 800e472:	2111      	movs	r1, #17
 800e474:	2009      	movs	r0, #9
 800e476:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 800e47a:	b923      	cbnz	r3, 800e486 <uxr_buffer_create_datareader_bin+0x8a>
 800e47c:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800e480:	4672      	mov	r2, lr
 800e482:	4661      	mov	r1, ip
 800e484:	4628      	mov	r0, r5
 800e486:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	d025      	beq.n	800e4da <uxr_buffer_create_datareader_bin+0xde>
 800e48e:	2b03      	cmp	r3, #3
 800e490:	d029      	beq.n	800e4e6 <uxr_buffer_create_datareader_bin+0xea>
 800e492:	b32b      	cbz	r3, 800e4e0 <uxr_buffer_create_datareader_bin+0xe4>
 800e494:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e498:	a923      	add	r1, sp, #140	; 0x8c
 800e49a:	a806      	add	r0, sp, #24
 800e49c:	f7ff fd30 	bl	800df00 <ucdr_init_buffer>
 800e4a0:	a90e      	add	r1, sp, #56	; 0x38
 800e4a2:	a806      	add	r0, sp, #24
 800e4a4:	f002 f974 	bl	8010790 <uxr_serialize_OBJK_DataReader_Binary>
 800e4a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4aa:	f8cd 8000 	str.w	r8, [sp]
 800e4ae:	9401      	str	r4, [sp, #4]
 800e4b0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e4b4:	60e3      	str	r3, [r4, #12]
 800e4b6:	4630      	mov	r0, r6
 800e4b8:	b29b      	uxth	r3, r3
 800e4ba:	f7ff fe35 	bl	800e128 <uxr_common_create_entity>
 800e4be:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800e4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4c6:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800e4ca:	f04f 0c12 	mov.w	ip, #18
 800e4ce:	250a      	movs	r5, #10
 800e4d0:	2220      	movs	r2, #32
 800e4d2:	2110      	movs	r1, #16
 800e4d4:	2008      	movs	r0, #8
 800e4d6:	2702      	movs	r7, #2
 800e4d8:	e7cd      	b.n	800e476 <uxr_buffer_create_datareader_bin+0x7a>
 800e4da:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800e4de:	e7d9      	b.n	800e494 <uxr_buffer_create_datareader_bin+0x98>
 800e4e0:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800e4e4:	e7d6      	b.n	800e494 <uxr_buffer_create_datareader_bin+0x98>
 800e4e6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800e4ea:	e7d3      	b.n	800e494 <uxr_buffer_create_datareader_bin+0x98>

0800e4ec <uxr_object_id>:
 800e4ec:	b082      	sub	sp, #8
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	f88d 1006 	strb.w	r1, [sp, #6]
 800e4f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e4f8:	f360 030f 	bfi	r3, r0, #0, #16
 800e4fc:	f362 431f 	bfi	r3, r2, #16, #16
 800e500:	4618      	mov	r0, r3
 800e502:	b002      	add	sp, #8
 800e504:	4770      	bx	lr
 800e506:	bf00      	nop

0800e508 <uxr_object_id_from_raw>:
 800e508:	7843      	ldrb	r3, [r0, #1]
 800e50a:	7801      	ldrb	r1, [r0, #0]
 800e50c:	b082      	sub	sp, #8
 800e50e:	f003 020f 	and.w	r2, r3, #15
 800e512:	f88d 2006 	strb.w	r2, [sp, #6]
 800e516:	091b      	lsrs	r3, r3, #4
 800e518:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e51c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800e520:	2000      	movs	r0, #0
 800e522:	f363 000f 	bfi	r0, r3, #0, #16
 800e526:	f362 401f 	bfi	r0, r2, #16, #16
 800e52a:	b002      	add	sp, #8
 800e52c:	4770      	bx	lr
 800e52e:	bf00      	nop

0800e530 <uxr_object_id_to_raw>:
 800e530:	4602      	mov	r2, r0
 800e532:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800e536:	b082      	sub	sp, #8
 800e538:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800e53c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800e540:	f881 c000 	strb.w	ip, [r1]
 800e544:	7048      	strb	r0, [r1, #1]
 800e546:	b002      	add	sp, #8
 800e548:	4770      	bx	lr
 800e54a:	bf00      	nop

0800e54c <uxr_buffer_request_data>:
 800e54c:	b530      	push	{r4, r5, lr}
 800e54e:	b095      	sub	sp, #84	; 0x54
 800e550:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800e554:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800e556:	9303      	str	r3, [sp, #12]
 800e558:	2200      	movs	r2, #0
 800e55a:	2d00      	cmp	r5, #0
 800e55c:	bf14      	ite	ne
 800e55e:	2101      	movne	r1, #1
 800e560:	4611      	moveq	r1, r2
 800e562:	4604      	mov	r4, r0
 800e564:	f88d 301c 	strb.w	r3, [sp, #28]
 800e568:	f88d 201d 	strb.w	r2, [sp, #29]
 800e56c:	f88d 201e 	strb.w	r2, [sp, #30]
 800e570:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800e574:	d021      	beq.n	800e5ba <uxr_buffer_request_data+0x6e>
 800e576:	682a      	ldr	r2, [r5, #0]
 800e578:	686b      	ldr	r3, [r5, #4]
 800e57a:	f8cd 2026 	str.w	r2, [sp, #38]	; 0x26
 800e57e:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 800e582:	2210      	movs	r2, #16
 800e584:	2308      	movs	r3, #8
 800e586:	2100      	movs	r1, #0
 800e588:	e9cd 3100 	strd	r3, r1, [sp]
 800e58c:	4620      	mov	r0, r4
 800e58e:	9905      	ldr	r1, [sp, #20]
 800e590:	ab0c      	add	r3, sp, #48	; 0x30
 800e592:	f001 f837 	bl	800f604 <uxr_prepare_stream_to_write_submessage>
 800e596:	b918      	cbnz	r0, 800e5a0 <uxr_buffer_request_data+0x54>
 800e598:	4604      	mov	r4, r0
 800e59a:	4620      	mov	r0, r4
 800e59c:	b015      	add	sp, #84	; 0x54
 800e59e:	bd30      	pop	{r4, r5, pc}
 800e5a0:	9904      	ldr	r1, [sp, #16]
 800e5a2:	aa06      	add	r2, sp, #24
 800e5a4:	4620      	mov	r0, r4
 800e5a6:	f001 f963 	bl	800f870 <uxr_init_base_object_request>
 800e5aa:	a906      	add	r1, sp, #24
 800e5ac:	4604      	mov	r4, r0
 800e5ae:	a80c      	add	r0, sp, #48	; 0x30
 800e5b0:	f002 fc5e 	bl	8010e70 <uxr_serialize_READ_DATA_Payload>
 800e5b4:	4620      	mov	r0, r4
 800e5b6:	b015      	add	sp, #84	; 0x54
 800e5b8:	bd30      	pop	{r4, r5, pc}
 800e5ba:	2208      	movs	r2, #8
 800e5bc:	e7e2      	b.n	800e584 <uxr_buffer_request_data+0x38>
 800e5be:	bf00      	nop

0800e5c0 <uxr_buffer_cancel_data>:
 800e5c0:	b510      	push	{r4, lr}
 800e5c2:	b094      	sub	sp, #80	; 0x50
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	9202      	str	r2, [sp, #8]
 800e5c8:	9205      	str	r2, [sp, #20]
 800e5ca:	9301      	str	r3, [sp, #4]
 800e5cc:	2201      	movs	r2, #1
 800e5ce:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e5d2:	f88d 301e 	strb.w	r3, [sp, #30]
 800e5d6:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 800e5da:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 800e5de:	2308      	movs	r3, #8
 800e5e0:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 800e5e4:	9300      	str	r3, [sp, #0]
 800e5e6:	2210      	movs	r2, #16
 800e5e8:	ab0c      	add	r3, sp, #48	; 0x30
 800e5ea:	4604      	mov	r4, r0
 800e5ec:	9103      	str	r1, [sp, #12]
 800e5ee:	f001 f809 	bl	800f604 <uxr_prepare_stream_to_write_submessage>
 800e5f2:	b918      	cbnz	r0, 800e5fc <uxr_buffer_cancel_data+0x3c>
 800e5f4:	4604      	mov	r4, r0
 800e5f6:	4620      	mov	r0, r4
 800e5f8:	b014      	add	sp, #80	; 0x50
 800e5fa:	bd10      	pop	{r4, pc}
 800e5fc:	9905      	ldr	r1, [sp, #20]
 800e5fe:	aa06      	add	r2, sp, #24
 800e600:	4620      	mov	r0, r4
 800e602:	f001 f935 	bl	800f870 <uxr_init_base_object_request>
 800e606:	a906      	add	r1, sp, #24
 800e608:	4604      	mov	r4, r0
 800e60a:	a80c      	add	r0, sp, #48	; 0x30
 800e60c:	f002 fc30 	bl	8010e70 <uxr_serialize_READ_DATA_Payload>
 800e610:	4620      	mov	r0, r4
 800e612:	b014      	add	sp, #80	; 0x50
 800e614:	bd10      	pop	{r4, pc}
 800e616:	bf00      	nop

0800e618 <read_submessage_format>:
 800e618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e61c:	b095      	sub	sp, #84	; 0x54
 800e61e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 800e622:	b113      	cbz	r3, 800e62a <read_submessage_format+0x12>
 800e624:	b015      	add	sp, #84	; 0x54
 800e626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e62a:	460c      	mov	r4, r1
 800e62c:	4615      	mov	r5, r2
 800e62e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800e632:	4607      	mov	r7, r0
 800e634:	981c      	ldr	r0, [sp, #112]	; 0x70
 800e636:	9004      	str	r0, [sp, #16]
 800e638:	981d      	ldr	r0, [sp, #116]	; 0x74
 800e63a:	9005      	str	r0, [sp, #20]
 800e63c:	1a52      	subs	r2, r2, r1
 800e63e:	a80c      	add	r0, sp, #48	; 0x30
 800e640:	4699      	mov	r9, r3
 800e642:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 800e646:	f7ff fc5b 	bl	800df00 <ucdr_init_buffer>
 800e64a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e64e:	a80c      	add	r0, sp, #48	; 0x30
 800e650:	f7ff fc2a 	bl	800dea8 <ucdr_set_on_full_buffer_callback>
 800e654:	69e2      	ldr	r2, [r4, #28]
 800e656:	b19a      	cbz	r2, 800e680 <read_submessage_format+0x68>
 800e658:	f1b8 0f07 	cmp.w	r8, #7
 800e65c:	f882 9014 	strb.w	r9, [r2, #20]
 800e660:	d040      	beq.n	800e6e4 <read_submessage_format+0xcc>
 800e662:	f1b8 0f08 	cmp.w	r8, #8
 800e666:	d02e      	beq.n	800e6c6 <read_submessage_format+0xae>
 800e668:	f1b8 0f06 	cmp.w	r8, #6
 800e66c:	d011      	beq.n	800e692 <read_submessage_format+0x7a>
 800e66e:	2301      	movs	r3, #1
 800e670:	7513      	strb	r3, [r2, #20]
 800e672:	4629      	mov	r1, r5
 800e674:	4620      	mov	r0, r4
 800e676:	f7ff fc93 	bl	800dfa0 <ucdr_advance_buffer>
 800e67a:	b015      	add	sp, #84	; 0x54
 800e67c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e680:	f1b8 0f07 	cmp.w	r8, #7
 800e684:	d02e      	beq.n	800e6e4 <read_submessage_format+0xcc>
 800e686:	f1b8 0f08 	cmp.w	r8, #8
 800e68a:	d01c      	beq.n	800e6c6 <read_submessage_format+0xae>
 800e68c:	f1b8 0f06 	cmp.w	r8, #6
 800e690:	d1ef      	bne.n	800e672 <read_submessage_format+0x5a>
 800e692:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 800e696:	f1b8 0f00 	cmp.w	r8, #0
 800e69a:	d011      	beq.n	800e6c0 <read_submessage_format+0xa8>
 800e69c:	ab0c      	add	r3, sp, #48	; 0x30
 800e69e:	e9cd 3500 	strd	r3, r5, [sp]
 800e6a2:	2306      	movs	r3, #6
 800e6a4:	f88d 3016 	strb.w	r3, [sp, #22]
 800e6a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e6ac:	9302      	str	r3, [sp, #8]
 800e6ae:	4632      	mov	r2, r6
 800e6b0:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800e6b4:	4638      	mov	r0, r7
 800e6b6:	47c0      	blx	r8
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	69e2      	ldr	r2, [r4, #28]
 800e6bc:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800e6c0:	2a00      	cmp	r2, #0
 800e6c2:	d1d4      	bne.n	800e66e <read_submessage_format+0x56>
 800e6c4:	e7d5      	b.n	800e672 <read_submessage_format+0x5a>
 800e6c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d0f8      	beq.n	800e6c0 <read_submessage_format+0xa8>
 800e6ce:	a906      	add	r1, sp, #24
 800e6d0:	a80c      	add	r0, sp, #48	; 0x30
 800e6d2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800e6d6:	f002 fc91 	bl	8010ffc <uxr_deserialize_SampleIdentity>
 800e6da:	b9a0      	cbnz	r0, 800e706 <read_submessage_format+0xee>
 800e6dc:	69e2      	ldr	r2, [r4, #28]
 800e6de:	2a00      	cmp	r2, #0
 800e6e0:	d1c5      	bne.n	800e66e <read_submessage_format+0x56>
 800e6e2:	e7c6      	b.n	800e672 <read_submessage_format+0x5a>
 800e6e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e6e8:	b13b      	cbz	r3, 800e6fa <read_submessage_format+0xe2>
 800e6ea:	a906      	add	r1, sp, #24
 800e6ec:	a80c      	add	r0, sp, #48	; 0x30
 800e6ee:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800e6f2:	f002 f957 	bl	80109a4 <uxr_deserialize_BaseObjectRequest>
 800e6f6:	bb60      	cbnz	r0, 800e752 <read_submessage_format+0x13a>
 800e6f8:	69e2      	ldr	r2, [r4, #28]
 800e6fa:	68a3      	ldr	r3, [r4, #8]
 800e6fc:	442b      	add	r3, r5
 800e6fe:	60a3      	str	r3, [r4, #8]
 800e700:	2a00      	cmp	r2, #0
 800e702:	d1b4      	bne.n	800e66e <read_submessage_format+0x56>
 800e704:	e7b5      	b.n	800e672 <read_submessage_format+0x5a>
 800e706:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800e70a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e70c:	1a52      	subs	r2, r2, r1
 800e70e:	eba8 0803 	sub.w	r8, r8, r3
 800e712:	a80c      	add	r0, sp, #48	; 0x30
 800e714:	f7ff fbf4 	bl	800df00 <ucdr_init_buffer>
 800e718:	44a8      	add	r8, r5
 800e71a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e71e:	a80c      	add	r0, sp, #48	; 0x30
 800e720:	f7ff fbc2 	bl	800dea8 <ucdr_set_on_full_buffer_callback>
 800e724:	fa1f f888 	uxth.w	r8, r8
 800e728:	ab0c      	add	r3, sp, #48	; 0x30
 800e72a:	9300      	str	r3, [sp, #0]
 800e72c:	f8cd 8004 	str.w	r8, [sp, #4]
 800e730:	2108      	movs	r1, #8
 800e732:	f88d 1016 	strb.w	r1, [sp, #22]
 800e736:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800e73a:	9102      	str	r1, [sp, #8]
 800e73c:	ab06      	add	r3, sp, #24
 800e73e:	4632      	mov	r2, r6
 800e740:	9905      	ldr	r1, [sp, #20]
 800e742:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 800e746:	4638      	mov	r0, r7
 800e748:	47b0      	blx	r6
 800e74a:	2301      	movs	r3, #1
 800e74c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800e750:	e7c4      	b.n	800e6dc <read_submessage_format+0xc4>
 800e752:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800e756:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e758:	1a52      	subs	r2, r2, r1
 800e75a:	a80c      	add	r0, sp, #48	; 0x30
 800e75c:	eba8 0803 	sub.w	r8, r8, r3
 800e760:	f7ff fbce 	bl	800df00 <ucdr_init_buffer>
 800e764:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e768:	a80c      	add	r0, sp, #48	; 0x30
 800e76a:	f7ff fb9d 	bl	800dea8 <ucdr_set_on_full_buffer_callback>
 800e76e:	ab0c      	add	r3, sp, #48	; 0x30
 800e770:	9300      	str	r3, [sp, #0]
 800e772:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800e776:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e77a:	44a8      	add	r8, r5
 800e77c:	fa1f f888 	uxth.w	r8, r8
 800e780:	f8cd 8004 	str.w	r8, [sp, #4]
 800e784:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800e788:	2107      	movs	r1, #7
 800e78a:	f88d 1016 	strb.w	r1, [sp, #22]
 800e78e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800e792:	9102      	str	r1, [sp, #8]
 800e794:	4632      	mov	r2, r6
 800e796:	b29b      	uxth	r3, r3
 800e798:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 800e79c:	9905      	ldr	r1, [sp, #20]
 800e79e:	4638      	mov	r0, r7
 800e7a0:	47b0      	blx	r6
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800e7a8:	e7a6      	b.n	800e6f8 <read_submessage_format+0xe0>
 800e7aa:	bf00      	nop

0800e7ac <on_get_fragmentation_info>:
 800e7ac:	b500      	push	{lr}
 800e7ae:	b08b      	sub	sp, #44	; 0x2c
 800e7b0:	4601      	mov	r1, r0
 800e7b2:	2204      	movs	r2, #4
 800e7b4:	a802      	add	r0, sp, #8
 800e7b6:	f7ff fba3 	bl	800df00 <ucdr_init_buffer>
 800e7ba:	f10d 0305 	add.w	r3, sp, #5
 800e7be:	f10d 0206 	add.w	r2, sp, #6
 800e7c2:	a901      	add	r1, sp, #4
 800e7c4:	a802      	add	r0, sp, #8
 800e7c6:	f001 f9d5 	bl	800fb74 <uxr_read_submessage_header>
 800e7ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e7ce:	2b0d      	cmp	r3, #13
 800e7d0:	d003      	beq.n	800e7da <on_get_fragmentation_info+0x2e>
 800e7d2:	2000      	movs	r0, #0
 800e7d4:	b00b      	add	sp, #44	; 0x2c
 800e7d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800e7da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e7de:	f013 0f02 	tst.w	r3, #2
 800e7e2:	bf14      	ite	ne
 800e7e4:	2002      	movne	r0, #2
 800e7e6:	2001      	moveq	r0, #1
 800e7e8:	b00b      	add	sp, #44	; 0x2c
 800e7ea:	f85d fb04 	ldr.w	pc, [sp], #4
 800e7ee:	bf00      	nop

0800e7f0 <read_submessage_get_info>:
 800e7f0:	b570      	push	{r4, r5, r6, lr}
 800e7f2:	2500      	movs	r5, #0
 800e7f4:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800e7f8:	4604      	mov	r4, r0
 800e7fa:	f44f 7224 	mov.w	r2, #656	; 0x290
 800e7fe:	460e      	mov	r6, r1
 800e800:	a810      	add	r0, sp, #64	; 0x40
 800e802:	4629      	mov	r1, r5
 800e804:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800e808:	f008 ff4c 	bl	80176a4 <memset>
 800e80c:	a903      	add	r1, sp, #12
 800e80e:	4630      	mov	r0, r6
 800e810:	f002 fa70 	bl	8010cf4 <uxr_deserialize_GET_INFO_Payload>
 800e814:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800e818:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800e81c:	4620      	mov	r0, r4
 800e81e:	f001 f81f 	bl	800f860 <uxr_session_header_offset>
 800e822:	462b      	mov	r3, r5
 800e824:	9000      	str	r0, [sp, #0]
 800e826:	220c      	movs	r2, #12
 800e828:	a905      	add	r1, sp, #20
 800e82a:	a808      	add	r0, sp, #32
 800e82c:	f7ff fb56 	bl	800dedc <ucdr_init_buffer_origin_offset>
 800e830:	a910      	add	r1, sp, #64	; 0x40
 800e832:	a808      	add	r0, sp, #32
 800e834:	f002 fad0 	bl	8010dd8 <uxr_serialize_INFO_Payload>
 800e838:	9b08      	ldr	r3, [sp, #32]
 800e83a:	462a      	mov	r2, r5
 800e83c:	4629      	mov	r1, r5
 800e83e:	4620      	mov	r0, r4
 800e840:	f000 ffb8 	bl	800f7b4 <uxr_stamp_session_header>
 800e844:	a808      	add	r0, sp, #32
 800e846:	f7ff fb87 	bl	800df58 <ucdr_buffer_length>
 800e84a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e84c:	4602      	mov	r2, r0
 800e84e:	a905      	add	r1, sp, #20
 800e850:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e854:	47a0      	blx	r4
 800e856:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800e85a:	bd70      	pop	{r4, r5, r6, pc}

0800e85c <write_submessage_acknack.isra.0>:
 800e85c:	b570      	push	{r4, r5, r6, lr}
 800e85e:	b092      	sub	sp, #72	; 0x48
 800e860:	4605      	mov	r5, r0
 800e862:	460e      	mov	r6, r1
 800e864:	4614      	mov	r4, r2
 800e866:	f000 fffb 	bl	800f860 <uxr_session_header_offset>
 800e86a:	a905      	add	r1, sp, #20
 800e86c:	9000      	str	r0, [sp, #0]
 800e86e:	2300      	movs	r3, #0
 800e870:	a80a      	add	r0, sp, #40	; 0x28
 800e872:	2211      	movs	r2, #17
 800e874:	f7ff fb32 	bl	800dedc <ucdr_init_buffer_origin_offset>
 800e878:	2218      	movs	r2, #24
 800e87a:	fb02 5404 	mla	r4, r2, r4, r5
 800e87e:	2300      	movs	r3, #0
 800e880:	2205      	movs	r2, #5
 800e882:	3450      	adds	r4, #80	; 0x50
 800e884:	210a      	movs	r1, #10
 800e886:	a80a      	add	r0, sp, #40	; 0x28
 800e888:	f001 f95a 	bl	800fb40 <uxr_buffer_submessage_header>
 800e88c:	a903      	add	r1, sp, #12
 800e88e:	4620      	mov	r0, r4
 800e890:	f006 fdee 	bl	8015470 <uxr_compute_acknack>
 800e894:	ba40      	rev16	r0, r0
 800e896:	f8ad 000e 	strh.w	r0, [sp, #14]
 800e89a:	a903      	add	r1, sp, #12
 800e89c:	a80a      	add	r0, sp, #40	; 0x28
 800e89e:	f88d 6010 	strb.w	r6, [sp, #16]
 800e8a2:	f002 fb09 	bl	8010eb8 <uxr_serialize_ACKNACK_Payload>
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8aa:	4611      	mov	r1, r2
 800e8ac:	4628      	mov	r0, r5
 800e8ae:	f000 ff81 	bl	800f7b4 <uxr_stamp_session_header>
 800e8b2:	a80a      	add	r0, sp, #40	; 0x28
 800e8b4:	f7ff fb50 	bl	800df58 <ucdr_buffer_length>
 800e8b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800e8ba:	4602      	mov	r2, r0
 800e8bc:	a905      	add	r1, sp, #20
 800e8be:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e8c2:	47a0      	blx	r4
 800e8c4:	b012      	add	sp, #72	; 0x48
 800e8c6:	bd70      	pop	{r4, r5, r6, pc}

0800e8c8 <uxr_init_session>:
 800e8c8:	b510      	push	{r4, lr}
 800e8ca:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800e900 <uxr_init_session+0x38>
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 800e8d4:	4604      	mov	r4, r0
 800e8d6:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 800e8da:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 800e8de:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 800e8e2:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 800e8e6:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 800e8ea:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800e8ee:	2181      	movs	r1, #129	; 0x81
 800e8f0:	f000 fecc 	bl	800f68c <uxr_init_session_info>
 800e8f4:	f104 0008 	add.w	r0, r4, #8
 800e8f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8fc:	f001 b83c 	b.w	800f978 <uxr_init_stream_storage>
	...

0800e908 <uxr_set_status_callback>:
 800e908:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800e90c:	4770      	bx	lr
 800e90e:	bf00      	nop

0800e910 <uxr_set_topic_callback>:
 800e910:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800e914:	4770      	bx	lr
 800e916:	bf00      	nop

0800e918 <uxr_set_request_callback>:
 800e918:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800e91c:	4770      	bx	lr
 800e91e:	bf00      	nop

0800e920 <uxr_set_reply_callback>:
 800e920:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800e924:	4770      	bx	lr
 800e926:	bf00      	nop

0800e928 <uxr_create_output_best_effort_stream>:
 800e928:	b510      	push	{r4, lr}
 800e92a:	b084      	sub	sp, #16
 800e92c:	e9cd 2100 	strd	r2, r1, [sp]
 800e930:	4604      	mov	r4, r0
 800e932:	f000 ff95 	bl	800f860 <uxr_session_header_offset>
 800e936:	e9dd 2100 	ldrd	r2, r1, [sp]
 800e93a:	4603      	mov	r3, r0
 800e93c:	f104 0008 	add.w	r0, r4, #8
 800e940:	b004      	add	sp, #16
 800e942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e946:	f001 b861 	b.w	800fa0c <uxr_add_output_best_effort_buffer>
 800e94a:	bf00      	nop

0800e94c <uxr_create_output_reliable_stream>:
 800e94c:	b510      	push	{r4, lr}
 800e94e:	b088      	sub	sp, #32
 800e950:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800e954:	4604      	mov	r4, r0
 800e956:	9303      	str	r3, [sp, #12]
 800e958:	f000 ff82 	bl	800f860 <uxr_session_header_offset>
 800e95c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800e960:	9000      	str	r0, [sp, #0]
 800e962:	9905      	ldr	r1, [sp, #20]
 800e964:	f104 0008 	add.w	r0, r4, #8
 800e968:	f001 f864 	bl	800fa34 <uxr_add_output_reliable_buffer>
 800e96c:	2200      	movs	r2, #0
 800e96e:	b2c3      	uxtb	r3, r0
 800e970:	f363 0207 	bfi	r2, r3, #0, #8
 800e974:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800e978:	f363 220f 	bfi	r2, r3, #8, #8
 800e97c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800e980:	f363 4217 	bfi	r2, r3, #16, #8
 800e984:	0e03      	lsrs	r3, r0, #24
 800e986:	f363 621f 	bfi	r2, r3, #24, #8
 800e98a:	4610      	mov	r0, r2
 800e98c:	b008      	add	sp, #32
 800e98e:	bd10      	pop	{r4, pc}

0800e990 <uxr_create_input_best_effort_stream>:
 800e990:	b082      	sub	sp, #8
 800e992:	3008      	adds	r0, #8
 800e994:	b002      	add	sp, #8
 800e996:	f001 b867 	b.w	800fa68 <uxr_add_input_best_effort_buffer>
 800e99a:	bf00      	nop

0800e99c <uxr_create_input_reliable_stream>:
 800e99c:	b510      	push	{r4, lr}
 800e99e:	b084      	sub	sp, #16
 800e9a0:	4c0b      	ldr	r4, [pc, #44]	; (800e9d0 <uxr_create_input_reliable_stream+0x34>)
 800e9a2:	9400      	str	r4, [sp, #0]
 800e9a4:	3008      	adds	r0, #8
 800e9a6:	f001 f875 	bl	800fa94 <uxr_add_input_reliable_buffer>
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	b2c3      	uxtb	r3, r0
 800e9ae:	f363 0207 	bfi	r2, r3, #0, #8
 800e9b2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800e9b6:	f363 220f 	bfi	r2, r3, #8, #8
 800e9ba:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800e9be:	f363 4217 	bfi	r2, r3, #16, #8
 800e9c2:	0e03      	lsrs	r3, r0, #24
 800e9c4:	f363 621f 	bfi	r2, r3, #24, #8
 800e9c8:	4610      	mov	r0, r2
 800e9ca:	b004      	add	sp, #16
 800e9cc:	bd10      	pop	{r4, pc}
 800e9ce:	bf00      	nop
 800e9d0:	0800e7ad 	.word	0x0800e7ad

0800e9d4 <uxr_epoch_nanos>:
 800e9d4:	b510      	push	{r4, lr}
 800e9d6:	4604      	mov	r4, r0
 800e9d8:	f001 f912 	bl	800fc00 <uxr_nanos>
 800e9dc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800e9e0:	1ac0      	subs	r0, r0, r3
 800e9e2:	eb61 0102 	sbc.w	r1, r1, r2
 800e9e6:	bd10      	pop	{r4, pc}

0800e9e8 <uxr_flash_output_streams>:
 800e9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9ec:	7e03      	ldrb	r3, [r0, #24]
 800e9ee:	b084      	sub	sp, #16
 800e9f0:	4604      	mov	r4, r0
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d035      	beq.n	800ea62 <uxr_flash_output_streams+0x7a>
 800e9f6:	f04f 0900 	mov.w	r9, #0
 800e9fa:	4648      	mov	r0, r9
 800e9fc:	f10d 0802 	add.w	r8, sp, #2
 800ea00:	af03      	add	r7, sp, #12
 800ea02:	ae02      	add	r6, sp, #8
 800ea04:	e006      	b.n	800ea14 <uxr_flash_output_streams+0x2c>
 800ea06:	7e23      	ldrb	r3, [r4, #24]
 800ea08:	f109 0901 	add.w	r9, r9, #1
 800ea0c:	fa5f f089 	uxtb.w	r0, r9
 800ea10:	4283      	cmp	r3, r0
 800ea12:	d926      	bls.n	800ea62 <uxr_flash_output_streams+0x7a>
 800ea14:	2201      	movs	r2, #1
 800ea16:	4611      	mov	r1, r2
 800ea18:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800ea1c:	f000 ff58 	bl	800f8d0 <uxr_stream_id>
 800ea20:	3508      	adds	r5, #8
 800ea22:	4684      	mov	ip, r0
 800ea24:	4643      	mov	r3, r8
 800ea26:	463a      	mov	r2, r7
 800ea28:	4631      	mov	r1, r6
 800ea2a:	4628      	mov	r0, r5
 800ea2c:	f8cd c004 	str.w	ip, [sp, #4]
 800ea30:	f006 fda4 	bl	801557c <uxr_prepare_best_effort_buffer_to_send>
 800ea34:	2800      	cmp	r0, #0
 800ea36:	d0e6      	beq.n	800ea06 <uxr_flash_output_streams+0x1e>
 800ea38:	9b02      	ldr	r3, [sp, #8]
 800ea3a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ea3e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ea42:	4620      	mov	r0, r4
 800ea44:	f000 feb6 	bl	800f7b4 <uxr_stamp_session_header>
 800ea48:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ea4a:	9a03      	ldr	r2, [sp, #12]
 800ea4c:	685d      	ldr	r5, [r3, #4]
 800ea4e:	6818      	ldr	r0, [r3, #0]
 800ea50:	9902      	ldr	r1, [sp, #8]
 800ea52:	47a8      	blx	r5
 800ea54:	f109 0901 	add.w	r9, r9, #1
 800ea58:	7e23      	ldrb	r3, [r4, #24]
 800ea5a:	fa5f f089 	uxtb.w	r0, r9
 800ea5e:	4283      	cmp	r3, r0
 800ea60:	d8d8      	bhi.n	800ea14 <uxr_flash_output_streams+0x2c>
 800ea62:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800ea66:	b38b      	cbz	r3, 800eacc <uxr_flash_output_streams+0xe4>
 800ea68:	f04f 0900 	mov.w	r9, #0
 800ea6c:	f10d 0802 	add.w	r8, sp, #2
 800ea70:	af03      	add	r7, sp, #12
 800ea72:	ae02      	add	r6, sp, #8
 800ea74:	4648      	mov	r0, r9
 800ea76:	2201      	movs	r2, #1
 800ea78:	2102      	movs	r1, #2
 800ea7a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800ea7e:	f000 ff27 	bl	800f8d0 <uxr_stream_id>
 800ea82:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800ea86:	3520      	adds	r5, #32
 800ea88:	9001      	str	r0, [sp, #4]
 800ea8a:	e00d      	b.n	800eaa8 <uxr_flash_output_streams+0xc0>
 800ea8c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ea90:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ea94:	9b02      	ldr	r3, [sp, #8]
 800ea96:	f000 fe8d 	bl	800f7b4 <uxr_stamp_session_header>
 800ea9a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ea9c:	9a03      	ldr	r2, [sp, #12]
 800ea9e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800eaa2:	9902      	ldr	r1, [sp, #8]
 800eaa4:	6818      	ldr	r0, [r3, #0]
 800eaa6:	47d0      	blx	sl
 800eaa8:	4643      	mov	r3, r8
 800eaaa:	463a      	mov	r2, r7
 800eaac:	4631      	mov	r1, r6
 800eaae:	4628      	mov	r0, r5
 800eab0:	f006 ff82 	bl	80159b8 <uxr_prepare_next_reliable_buffer_to_send>
 800eab4:	4603      	mov	r3, r0
 800eab6:	4620      	mov	r0, r4
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d1e7      	bne.n	800ea8c <uxr_flash_output_streams+0xa4>
 800eabc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800eac0:	f109 0901 	add.w	r9, r9, #1
 800eac4:	fa5f f089 	uxtb.w	r0, r9
 800eac8:	4283      	cmp	r3, r0
 800eaca:	d8d4      	bhi.n	800ea76 <uxr_flash_output_streams+0x8e>
 800eacc:	b004      	add	sp, #16
 800eace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ead2:	bf00      	nop

0800ead4 <read_submessage_info>:
 800ead4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ead8:	460d      	mov	r5, r1
 800eada:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800eade:	4669      	mov	r1, sp
 800eae0:	4607      	mov	r7, r0
 800eae2:	4628      	mov	r0, r5
 800eae4:	f002 f814 	bl	8010b10 <uxr_deserialize_BaseObjectReply>
 800eae8:	a902      	add	r1, sp, #8
 800eaea:	4604      	mov	r4, r0
 800eaec:	4628      	mov	r0, r5
 800eaee:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800eaf2:	f7fd fddb 	bl	800c6ac <ucdr_deserialize_bool>
 800eaf6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800eafa:	4004      	ands	r4, r0
 800eafc:	b2e4      	uxtb	r4, r4
 800eafe:	b95b      	cbnz	r3, 800eb18 <read_submessage_info+0x44>
 800eb00:	a987      	add	r1, sp, #540	; 0x21c
 800eb02:	4628      	mov	r0, r5
 800eb04:	f7fd fdd2 	bl	800c6ac <ucdr_deserialize_bool>
 800eb08:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800eb0c:	4606      	mov	r6, r0
 800eb0e:	b94b      	cbnz	r3, 800eb24 <read_submessage_info+0x50>
 800eb10:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800eb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb18:	a903      	add	r1, sp, #12
 800eb1a:	4628      	mov	r0, r5
 800eb1c:	f001 fea0 	bl	8010860 <uxr_deserialize_ObjectVariant>
 800eb20:	4004      	ands	r4, r0
 800eb22:	e7ed      	b.n	800eb00 <read_submessage_info+0x2c>
 800eb24:	a988      	add	r1, sp, #544	; 0x220
 800eb26:	4628      	mov	r0, r5
 800eb28:	f7fd fdee 	bl	800c708 <ucdr_deserialize_uint8_t>
 800eb2c:	4234      	tst	r4, r6
 800eb2e:	d0ef      	beq.n	800eb10 <read_submessage_info+0x3c>
 800eb30:	2800      	cmp	r0, #0
 800eb32:	d0ed      	beq.n	800eb10 <read_submessage_info+0x3c>
 800eb34:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800eb38:	2b0d      	cmp	r3, #13
 800eb3a:	d1e9      	bne.n	800eb10 <read_submessage_info+0x3c>
 800eb3c:	a98a      	add	r1, sp, #552	; 0x228
 800eb3e:	4628      	mov	r0, r5
 800eb40:	f7fe fb88 	bl	800d254 <ucdr_deserialize_int16_t>
 800eb44:	b140      	cbz	r0, 800eb58 <read_submessage_info+0x84>
 800eb46:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	dd07      	ble.n	800eb5e <read_submessage_info+0x8a>
 800eb4e:	f1b8 0f00 	cmp.w	r8, #0
 800eb52:	bf14      	ite	ne
 800eb54:	2001      	movne	r0, #1
 800eb56:	2002      	moveq	r0, #2
 800eb58:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 800eb5c:	e7d8      	b.n	800eb10 <read_submessage_info+0x3c>
 800eb5e:	2000      	movs	r0, #0
 800eb60:	e7fa      	b.n	800eb58 <read_submessage_info+0x84>
 800eb62:	bf00      	nop

0800eb64 <read_submessage_list>:
 800eb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb68:	b097      	sub	sp, #92	; 0x5c
 800eb6a:	4ec1      	ldr	r6, [pc, #772]	; (800ee70 <read_submessage_list+0x30c>)
 800eb6c:	9209      	str	r2, [sp, #36]	; 0x24
 800eb6e:	4604      	mov	r4, r0
 800eb70:	460d      	mov	r5, r1
 800eb72:	f04f 0801 	mov.w	r8, #1
 800eb76:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800eb7a:	aa0c      	add	r2, sp, #48	; 0x30
 800eb7c:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800eb80:	4628      	mov	r0, r5
 800eb82:	f000 fff7 	bl	800fb74 <uxr_read_submessage_header>
 800eb86:	2800      	cmp	r0, #0
 800eb88:	f000 813e 	beq.w	800ee08 <read_submessage_list+0x2a4>
 800eb8c:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800eb90:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800eb94:	3b02      	subs	r3, #2
 800eb96:	2b0d      	cmp	r3, #13
 800eb98:	d8ed      	bhi.n	800eb76 <read_submessage_list+0x12>
 800eb9a:	a101      	add	r1, pc, #4	; (adr r1, 800eba0 <read_submessage_list+0x3c>)
 800eb9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eba0:	0800edff 	.word	0x0800edff
 800eba4:	0800eb77 	.word	0x0800eb77
 800eba8:	0800edef 	.word	0x0800edef
 800ebac:	0800ed8d 	.word	0x0800ed8d
 800ebb0:	0800ed83 	.word	0x0800ed83
 800ebb4:	0800eb77 	.word	0x0800eb77
 800ebb8:	0800eb77 	.word	0x0800eb77
 800ebbc:	0800ece3 	.word	0x0800ece3
 800ebc0:	0800ec73 	.word	0x0800ec73
 800ebc4:	0800ec33 	.word	0x0800ec33
 800ebc8:	0800eb77 	.word	0x0800eb77
 800ebcc:	0800eb77 	.word	0x0800eb77
 800ebd0:	0800eb77 	.word	0x0800eb77
 800ebd4:	0800ebd9 	.word	0x0800ebd9
 800ebd8:	a910      	add	r1, sp, #64	; 0x40
 800ebda:	4628      	mov	r0, r5
 800ebdc:	f002 f9bc 	bl	8010f58 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800ebe0:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 800ebe4:	f1b9 0f00 	cmp.w	r9, #0
 800ebe8:	f000 8116 	beq.w	800ee18 <read_submessage_list+0x2b4>
 800ebec:	f001 f808 	bl	800fc00 <uxr_nanos>
 800ebf0:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800ebf2:	4602      	mov	r2, r0
 800ebf4:	460b      	mov	r3, r1
 800ebf6:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ebf8:	2100      	movs	r1, #0
 800ebfa:	468c      	mov	ip, r1
 800ebfc:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800ec00:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800ec04:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ec06:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800ec08:	468c      	mov	ip, r1
 800ec0a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800ec0e:	46e2      	mov	sl, ip
 800ec10:	46bc      	mov	ip, r7
 800ec12:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 800ec16:	fbc0 7106 	smlal	r7, r1, r0, r6
 800ec1a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800ec1e:	e9cd 7100 	strd	r7, r1, [sp]
 800ec22:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800ec26:	9106      	str	r1, [sp, #24]
 800ec28:	4620      	mov	r0, r4
 800ec2a:	47c8      	blx	r9
 800ec2c:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 800ec30:	e7a1      	b.n	800eb76 <read_submessage_list+0x12>
 800ec32:	a910      	add	r1, sp, #64	; 0x40
 800ec34:	4628      	mov	r0, r5
 800ec36:	f002 f97d 	bl	8010f34 <uxr_deserialize_HEARTBEAT_Payload>
 800ec3a:	2100      	movs	r1, #0
 800ec3c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800ec40:	f000 fe70 	bl	800f924 <uxr_stream_id_from_raw>
 800ec44:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800ec48:	900f      	str	r0, [sp, #60]	; 0x3c
 800ec4a:	4639      	mov	r1, r7
 800ec4c:	f104 0008 	add.w	r0, r4, #8
 800ec50:	f000 ff56 	bl	800fb00 <uxr_get_input_reliable_stream>
 800ec54:	2800      	cmp	r0, #0
 800ec56:	d08e      	beq.n	800eb76 <read_submessage_list+0x12>
 800ec58:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800ec5c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800ec60:	f006 fbfa 	bl	8015458 <uxr_process_heartbeat>
 800ec64:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800ec68:	463a      	mov	r2, r7
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	f7ff fdf6 	bl	800e85c <write_submessage_acknack.isra.0>
 800ec70:	e781      	b.n	800eb76 <read_submessage_list+0x12>
 800ec72:	a910      	add	r1, sp, #64	; 0x40
 800ec74:	4628      	mov	r0, r5
 800ec76:	f002 f935 	bl	8010ee4 <uxr_deserialize_ACKNACK_Payload>
 800ec7a:	2100      	movs	r1, #0
 800ec7c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800ec80:	f000 fe50 	bl	800f924 <uxr_stream_id_from_raw>
 800ec84:	900d      	str	r0, [sp, #52]	; 0x34
 800ec86:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800ec8a:	f104 0008 	add.w	r0, r4, #8
 800ec8e:	f000 ff23 	bl	800fad8 <uxr_get_output_reliable_stream>
 800ec92:	4607      	mov	r7, r0
 800ec94:	2800      	cmp	r0, #0
 800ec96:	f43f af6e 	beq.w	800eb76 <read_submessage_list+0x12>
 800ec9a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800ec9e:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 800eca2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800eca6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800ecaa:	b289      	uxth	r1, r1
 800ecac:	f006 ff2e 	bl	8015b0c <uxr_process_acknack>
 800ecb0:	4638      	mov	r0, r7
 800ecb2:	f006 feeb 	bl	8015a8c <uxr_begin_output_nack_buffer_it>
 800ecb6:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800ecba:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800ecbe:	e006      	b.n	800ecce <read_submessage_list+0x16a>
 800ecc0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ecc2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ecc4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800ecc8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ecca:	6818      	ldr	r0, [r3, #0]
 800eccc:	47c8      	blx	r9
 800ecce:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800ecd2:	aa0f      	add	r2, sp, #60	; 0x3c
 800ecd4:	4651      	mov	r1, sl
 800ecd6:	4638      	mov	r0, r7
 800ecd8:	f006 feda 	bl	8015a90 <uxr_next_reliable_nack_buffer_to_send>
 800ecdc:	2800      	cmp	r0, #0
 800ecde:	d1ef      	bne.n	800ecc0 <read_submessage_list+0x15c>
 800ece0:	e749      	b.n	800eb76 <read_submessage_list+0x12>
 800ece2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800ece6:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800ecea:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800ecee:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800ecf2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800ecf6:	4651      	mov	r1, sl
 800ecf8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800ecfc:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 800ed00:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800ed04:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800ed08:	4628      	mov	r0, r5
 800ed0a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800ed0e:	f001 fe49 	bl	80109a4 <uxr_deserialize_BaseObjectRequest>
 800ed12:	4650      	mov	r0, sl
 800ed14:	a90f      	add	r1, sp, #60	; 0x3c
 800ed16:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800ed1a:	f000 fdc7 	bl	800f8ac <uxr_parse_base_object_request>
 800ed1e:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 800ed22:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ed24:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800ed28:	9110      	str	r1, [sp, #64]	; 0x40
 800ed2a:	3f04      	subs	r7, #4
 800ed2c:	f009 090e 	and.w	r9, r9, #14
 800ed30:	b2bf      	uxth	r7, r7
 800ed32:	f1bb 0f00 	cmp.w	fp, #0
 800ed36:	d006      	beq.n	800ed46 <read_submessage_list+0x1e2>
 800ed38:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ed3c:	9300      	str	r3, [sp, #0]
 800ed3e:	4652      	mov	r2, sl
 800ed40:	2300      	movs	r3, #0
 800ed42:	4620      	mov	r0, r4
 800ed44:	47d8      	blx	fp
 800ed46:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800ed48:	b16a      	cbz	r2, 800ed66 <read_submessage_list+0x202>
 800ed4a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800ed4c:	2100      	movs	r1, #0
 800ed4e:	3802      	subs	r0, #2
 800ed50:	e002      	b.n	800ed58 <read_submessage_list+0x1f4>
 800ed52:	3101      	adds	r1, #1
 800ed54:	4291      	cmp	r1, r2
 800ed56:	d006      	beq.n	800ed66 <read_submessage_list+0x202>
 800ed58:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800ed5c:	4553      	cmp	r3, sl
 800ed5e:	d1f8      	bne.n	800ed52 <read_submessage_list+0x1ee>
 800ed60:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ed62:	2200      	movs	r2, #0
 800ed64:	545a      	strb	r2, [r3, r1]
 800ed66:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800ed6a:	9102      	str	r1, [sp, #8]
 800ed6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ed6e:	9101      	str	r1, [sp, #4]
 800ed70:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ed72:	9100      	str	r1, [sp, #0]
 800ed74:	464b      	mov	r3, r9
 800ed76:	463a      	mov	r2, r7
 800ed78:	4629      	mov	r1, r5
 800ed7a:	4620      	mov	r0, r4
 800ed7c:	f7ff fc4c 	bl	800e618 <read_submessage_format>
 800ed80:	e6f9      	b.n	800eb76 <read_submessage_list+0x12>
 800ed82:	4629      	mov	r1, r5
 800ed84:	4620      	mov	r0, r4
 800ed86:	f7ff fea5 	bl	800ead4 <read_submessage_info>
 800ed8a:	e6f4      	b.n	800eb76 <read_submessage_list+0x12>
 800ed8c:	2a00      	cmp	r2, #0
 800ed8e:	d03e      	beq.n	800ee0e <read_submessage_list+0x2aa>
 800ed90:	a910      	add	r1, sp, #64	; 0x40
 800ed92:	4628      	mov	r0, r5
 800ed94:	f002 f802 	bl	8010d9c <uxr_deserialize_STATUS_Payload>
 800ed98:	a90e      	add	r1, sp, #56	; 0x38
 800ed9a:	aa0d      	add	r2, sp, #52	; 0x34
 800ed9c:	a810      	add	r0, sp, #64	; 0x40
 800ed9e:	f000 fd85 	bl	800f8ac <uxr_parse_base_object_request>
 800eda2:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800eda6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800eda8:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800edac:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 800edb0:	910f      	str	r1, [sp, #60]	; 0x3c
 800edb2:	f1ba 0f00 	cmp.w	sl, #0
 800edb6:	d006      	beq.n	800edc6 <read_submessage_list+0x262>
 800edb8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800edbc:	9300      	str	r3, [sp, #0]
 800edbe:	463a      	mov	r2, r7
 800edc0:	464b      	mov	r3, r9
 800edc2:	4620      	mov	r0, r4
 800edc4:	47d0      	blx	sl
 800edc6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800edc8:	2a00      	cmp	r2, #0
 800edca:	f43f aed4 	beq.w	800eb76 <read_submessage_list+0x12>
 800edce:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800edd0:	2100      	movs	r1, #0
 800edd2:	3802      	subs	r0, #2
 800edd4:	e003      	b.n	800edde <read_submessage_list+0x27a>
 800edd6:	3101      	adds	r1, #1
 800edd8:	4291      	cmp	r1, r2
 800edda:	f43f aecc 	beq.w	800eb76 <read_submessage_list+0x12>
 800edde:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800ede2:	42bb      	cmp	r3, r7
 800ede4:	d1f7      	bne.n	800edd6 <read_submessage_list+0x272>
 800ede6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ede8:	f803 9001 	strb.w	r9, [r3, r1]
 800edec:	e6c3      	b.n	800eb76 <read_submessage_list+0x12>
 800edee:	2a00      	cmp	r2, #0
 800edf0:	f47f aec1 	bne.w	800eb76 <read_submessage_list+0x12>
 800edf4:	4629      	mov	r1, r5
 800edf6:	4620      	mov	r0, r4
 800edf8:	f000 fc9e 	bl	800f738 <uxr_read_create_session_status>
 800edfc:	e6bb      	b.n	800eb76 <read_submessage_list+0x12>
 800edfe:	4629      	mov	r1, r5
 800ee00:	4620      	mov	r0, r4
 800ee02:	f7ff fcf5 	bl	800e7f0 <read_submessage_get_info>
 800ee06:	e6b6      	b.n	800eb76 <read_submessage_list+0x12>
 800ee08:	b017      	add	sp, #92	; 0x5c
 800ee0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee0e:	4629      	mov	r1, r5
 800ee10:	4620      	mov	r0, r4
 800ee12:	f000 fc9d 	bl	800f750 <uxr_read_delete_session_status>
 800ee16:	e6ae      	b.n	800eb76 <read_submessage_list+0x12>
 800ee18:	f000 fef2 	bl	800fc00 <uxr_nanos>
 800ee1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ee1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ee20:	464f      	mov	r7, r9
 800ee22:	fbc3 2706 	smlal	r2, r7, r3, r6
 800ee26:	1812      	adds	r2, r2, r0
 800ee28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ee2a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800ee2c:	eb47 0101 	adc.w	r1, r7, r1
 800ee30:	464f      	mov	r7, r9
 800ee32:	fbc3 0706 	smlal	r0, r7, r3, r6
 800ee36:	463b      	mov	r3, r7
 800ee38:	4684      	mov	ip, r0
 800ee3a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 800ee3e:	fbc7 0906 	smlal	r0, r9, r7, r6
 800ee42:	eb1c 0c00 	adds.w	ip, ip, r0
 800ee46:	464f      	mov	r7, r9
 800ee48:	eb43 0307 	adc.w	r3, r3, r7
 800ee4c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800ee50:	eb61 0303 	sbc.w	r3, r1, r3
 800ee54:	0fda      	lsrs	r2, r3, #31
 800ee56:	eb12 020c 	adds.w	r2, r2, ip
 800ee5a:	f143 0300 	adc.w	r3, r3, #0
 800ee5e:	0852      	lsrs	r2, r2, #1
 800ee60:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800ee64:	105b      	asrs	r3, r3, #1
 800ee66:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 800ee6a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 800ee6e:	e6dd      	b.n	800ec2c <read_submessage_list+0xc8>
 800ee70:	3b9aca00 	.word	0x3b9aca00

0800ee74 <listen_message_reliably>:
 800ee74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee78:	1e0b      	subs	r3, r1, #0
 800ee7a:	b09d      	sub	sp, #116	; 0x74
 800ee7c:	bfb8      	it	lt
 800ee7e:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800ee82:	4680      	mov	r8, r0
 800ee84:	9305      	str	r3, [sp, #20]
 800ee86:	f000 fea1 	bl	800fbcc <uxr_millis>
 800ee8a:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 800ee8e:	4681      	mov	r9, r0
 800ee90:	2a00      	cmp	r2, #0
 800ee92:	f000 80a1 	beq.w	800efd8 <listen_message_reliably+0x164>
 800ee96:	2600      	movs	r6, #0
 800ee98:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ee9c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800eea0:	9303      	str	r3, [sp, #12]
 800eea2:	4630      	mov	r0, r6
 800eea4:	460f      	mov	r7, r1
 800eea6:	e00f      	b.n	800eec8 <listen_message_reliably+0x54>
 800eea8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800eeac:	9903      	ldr	r1, [sp, #12]
 800eeae:	455a      	cmp	r2, fp
 800eeb0:	f106 0601 	add.w	r6, r6, #1
 800eeb4:	eb73 0101 	sbcs.w	r1, r3, r1
 800eeb8:	b2f0      	uxtb	r0, r6
 800eeba:	da01      	bge.n	800eec0 <listen_message_reliably+0x4c>
 800eebc:	4693      	mov	fp, r2
 800eebe:	9303      	str	r3, [sp, #12]
 800eec0:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800eec4:	4283      	cmp	r3, r0
 800eec6:	d960      	bls.n	800ef8a <listen_message_reliably+0x116>
 800eec8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800eecc:	2102      	movs	r1, #2
 800eece:	2201      	movs	r2, #1
 800eed0:	f000 fcfe 	bl	800f8d0 <uxr_stream_id>
 800eed4:	00e4      	lsls	r4, r4, #3
 800eed6:	f104 0520 	add.w	r5, r4, #32
 800eeda:	4445      	add	r5, r8
 800eedc:	4601      	mov	r1, r0
 800eede:	463b      	mov	r3, r7
 800eee0:	464a      	mov	r2, r9
 800eee2:	4628      	mov	r0, r5
 800eee4:	9109      	str	r1, [sp, #36]	; 0x24
 800eee6:	f006 fda7 	bl	8015a38 <uxr_update_output_stream_heartbeat_timestamp>
 800eeea:	eb08 0304 	add.w	r3, r8, r4
 800eeee:	2800      	cmp	r0, #0
 800eef0:	d0da      	beq.n	800eea8 <listen_message_reliably+0x34>
 800eef2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800eef6:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800eefa:	9304      	str	r3, [sp, #16]
 800eefc:	4640      	mov	r0, r8
 800eefe:	f000 fcaf 	bl	800f860 <uxr_session_header_offset>
 800ef02:	3501      	adds	r5, #1
 800ef04:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800ef08:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800ef0c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800ef10:	2300      	movs	r3, #0
 800ef12:	2211      	movs	r2, #17
 800ef14:	9000      	str	r0, [sp, #0]
 800ef16:	a90c      	add	r1, sp, #48	; 0x30
 800ef18:	4650      	mov	r0, sl
 800ef1a:	f7fe ffdf 	bl	800dedc <ucdr_init_buffer_origin_offset>
 800ef1e:	2300      	movs	r3, #0
 800ef20:	2205      	movs	r2, #5
 800ef22:	210b      	movs	r1, #11
 800ef24:	4650      	mov	r0, sl
 800ef26:	f000 fe0b 	bl	800fb40 <uxr_buffer_submessage_header>
 800ef2a:	8968      	ldrh	r0, [r5, #10]
 800ef2c:	2101      	movs	r1, #1
 800ef2e:	f006 fe45 	bl	8015bbc <uxr_seq_num_add>
 800ef32:	892b      	ldrh	r3, [r5, #8]
 800ef34:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800ef38:	4602      	mov	r2, r0
 800ef3a:	9b04      	ldr	r3, [sp, #16]
 800ef3c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800ef40:	a90a      	add	r1, sp, #40	; 0x28
 800ef42:	4650      	mov	r0, sl
 800ef44:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800ef48:	f001 ffe0 	bl	8010f0c <uxr_serialize_HEARTBEAT_Payload>
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	4611      	mov	r1, r2
 800ef50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ef52:	4640      	mov	r0, r8
 800ef54:	f000 fc2e 	bl	800f7b4 <uxr_stamp_session_header>
 800ef58:	4650      	mov	r0, sl
 800ef5a:	f7fe fffd 	bl	800df58 <ucdr_buffer_length>
 800ef5e:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800ef62:	4602      	mov	r2, r0
 800ef64:	a90c      	add	r1, sp, #48	; 0x30
 800ef66:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ef6a:	4444      	add	r4, r8
 800ef6c:	47a8      	blx	r5
 800ef6e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800ef72:	9903      	ldr	r1, [sp, #12]
 800ef74:	455a      	cmp	r2, fp
 800ef76:	f106 0601 	add.w	r6, r6, #1
 800ef7a:	eb73 0101 	sbcs.w	r1, r3, r1
 800ef7e:	b2f0      	uxtb	r0, r6
 800ef80:	db9c      	blt.n	800eebc <listen_message_reliably+0x48>
 800ef82:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800ef86:	4283      	cmp	r3, r0
 800ef88:	d89e      	bhi.n	800eec8 <listen_message_reliably+0x54>
 800ef8a:	9a03      	ldr	r2, [sp, #12]
 800ef8c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ef90:	429a      	cmp	r2, r3
 800ef92:	bf08      	it	eq
 800ef94:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 800ef98:	d01e      	beq.n	800efd8 <listen_message_reliably+0x164>
 800ef9a:	ebab 0309 	sub.w	r3, fp, r9
 800ef9e:	9905      	ldr	r1, [sp, #20]
 800efa0:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	bf08      	it	eq
 800efa8:	2301      	moveq	r3, #1
 800efaa:	4299      	cmp	r1, r3
 800efac:	bfa8      	it	ge
 800efae:	4619      	movge	r1, r3
 800efb0:	6894      	ldr	r4, [r2, #8]
 800efb2:	6810      	ldr	r0, [r2, #0]
 800efb4:	4689      	mov	r9, r1
 800efb6:	460b      	mov	r3, r1
 800efb8:	aa08      	add	r2, sp, #32
 800efba:	a907      	add	r1, sp, #28
 800efbc:	47a0      	blx	r4
 800efbe:	b968      	cbnz	r0, 800efdc <listen_message_reliably+0x168>
 800efc0:	9b05      	ldr	r3, [sp, #20]
 800efc2:	eba3 0309 	sub.w	r3, r3, r9
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	9305      	str	r3, [sp, #20]
 800efca:	f73f af5c 	bgt.w	800ee86 <listen_message_reliably+0x12>
 800efce:	4604      	mov	r4, r0
 800efd0:	4620      	mov	r0, r4
 800efd2:	b01d      	add	sp, #116	; 0x74
 800efd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efd8:	9b05      	ldr	r3, [sp, #20]
 800efda:	e7e0      	b.n	800ef9e <listen_message_reliably+0x12a>
 800efdc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800efe0:	4604      	mov	r4, r0
 800efe2:	a80c      	add	r0, sp, #48	; 0x30
 800efe4:	f7fe ff8c 	bl	800df00 <ucdr_init_buffer>
 800efe8:	2500      	movs	r5, #0
 800efea:	f10d 031a 	add.w	r3, sp, #26
 800efee:	aa06      	add	r2, sp, #24
 800eff0:	a90c      	add	r1, sp, #48	; 0x30
 800eff2:	4640      	mov	r0, r8
 800eff4:	f88d 5018 	strb.w	r5, [sp, #24]
 800eff8:	f000 fbf0 	bl	800f7dc <uxr_read_session_header>
 800effc:	b918      	cbnz	r0, 800f006 <listen_message_reliably+0x192>
 800effe:	4620      	mov	r0, r4
 800f000:	b01d      	add	sp, #116	; 0x74
 800f002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f006:	4629      	mov	r1, r5
 800f008:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f00c:	f000 fc8a 	bl	800f924 <uxr_stream_id_from_raw>
 800f010:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800f014:	2d01      	cmp	r5, #1
 800f016:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800f01a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800f01e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f022:	d04b      	beq.n	800f0bc <listen_message_reliably+0x248>
 800f024:	2d02      	cmp	r5, #2
 800f026:	d00f      	beq.n	800f048 <listen_message_reliably+0x1d4>
 800f028:	2d00      	cmp	r5, #0
 800f02a:	d1e8      	bne.n	800effe <listen_message_reliably+0x18a>
 800f02c:	4629      	mov	r1, r5
 800f02e:	4628      	mov	r0, r5
 800f030:	f000 fc78 	bl	800f924 <uxr_stream_id_from_raw>
 800f034:	a90c      	add	r1, sp, #48	; 0x30
 800f036:	4602      	mov	r2, r0
 800f038:	4640      	mov	r0, r8
 800f03a:	920a      	str	r2, [sp, #40]	; 0x28
 800f03c:	f7ff fd92 	bl	800eb64 <read_submessage_list>
 800f040:	4620      	mov	r0, r4
 800f042:	b01d      	add	sp, #116	; 0x74
 800f044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f048:	4631      	mov	r1, r6
 800f04a:	f108 0008 	add.w	r0, r8, #8
 800f04e:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800f052:	f000 fd55 	bl	800fb00 <uxr_get_input_reliable_stream>
 800f056:	4607      	mov	r7, r0
 800f058:	b338      	cbz	r0, 800f0aa <listen_message_reliably+0x236>
 800f05a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f05c:	9203      	str	r2, [sp, #12]
 800f05e:	a80c      	add	r0, sp, #48	; 0x30
 800f060:	f7fe ff7e 	bl	800df60 <ucdr_buffer_remaining>
 800f064:	4603      	mov	r3, r0
 800f066:	f10d 0019 	add.w	r0, sp, #25
 800f06a:	9000      	str	r0, [sp, #0]
 800f06c:	9a03      	ldr	r2, [sp, #12]
 800f06e:	4651      	mov	r1, sl
 800f070:	4638      	mov	r0, r7
 800f072:	f006 f8f7 	bl	8015264 <uxr_receive_reliable_message>
 800f076:	b1c0      	cbz	r0, 800f0aa <listen_message_reliably+0x236>
 800f078:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f07c:	b393      	cbz	r3, 800f0e4 <listen_message_reliably+0x270>
 800f07e:	ad14      	add	r5, sp, #80	; 0x50
 800f080:	f04f 0a02 	mov.w	sl, #2
 800f084:	e00a      	b.n	800f09c <listen_message_reliably+0x228>
 800f086:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 800f08a:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 800f08e:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800f092:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f094:	4629      	mov	r1, r5
 800f096:	4640      	mov	r0, r8
 800f098:	f7ff fd64 	bl	800eb64 <read_submessage_list>
 800f09c:	2204      	movs	r2, #4
 800f09e:	4629      	mov	r1, r5
 800f0a0:	4638      	mov	r0, r7
 800f0a2:	f006 f95f 	bl	8015364 <uxr_next_input_reliable_buffer_available>
 800f0a6:	2800      	cmp	r0, #0
 800f0a8:	d1ed      	bne.n	800f086 <listen_message_reliably+0x212>
 800f0aa:	4640      	mov	r0, r8
 800f0ac:	4632      	mov	r2, r6
 800f0ae:	4649      	mov	r1, r9
 800f0b0:	f7ff fbd4 	bl	800e85c <write_submessage_acknack.isra.0>
 800f0b4:	4620      	mov	r0, r4
 800f0b6:	b01d      	add	sp, #116	; 0x74
 800f0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0bc:	4631      	mov	r1, r6
 800f0be:	f108 0008 	add.w	r0, r8, #8
 800f0c2:	f000 fd13 	bl	800faec <uxr_get_input_best_effort_stream>
 800f0c6:	2800      	cmp	r0, #0
 800f0c8:	d099      	beq.n	800effe <listen_message_reliably+0x18a>
 800f0ca:	4651      	mov	r1, sl
 800f0cc:	f006 f836 	bl	801513c <uxr_receive_best_effort_message>
 800f0d0:	2800      	cmp	r0, #0
 800f0d2:	d094      	beq.n	800effe <listen_message_reliably+0x18a>
 800f0d4:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800f0d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f0da:	a90c      	add	r1, sp, #48	; 0x30
 800f0dc:	4640      	mov	r0, r8
 800f0de:	f7ff fd41 	bl	800eb64 <read_submessage_list>
 800f0e2:	e78c      	b.n	800effe <listen_message_reliably+0x18a>
 800f0e4:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800f0e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f0ea:	a90c      	add	r1, sp, #48	; 0x30
 800f0ec:	4640      	mov	r0, r8
 800f0ee:	f7ff fd39 	bl	800eb64 <read_submessage_list>
 800f0f2:	e7c4      	b.n	800f07e <listen_message_reliably+0x20a>

0800f0f4 <uxr_run_session_timeout>:
 800f0f4:	b570      	push	{r4, r5, r6, lr}
 800f0f6:	4604      	mov	r4, r0
 800f0f8:	460d      	mov	r5, r1
 800f0fa:	f000 fd67 	bl	800fbcc <uxr_millis>
 800f0fe:	4606      	mov	r6, r0
 800f100:	4620      	mov	r0, r4
 800f102:	f7ff fc71 	bl	800e9e8 <uxr_flash_output_streams>
 800f106:	4629      	mov	r1, r5
 800f108:	4620      	mov	r0, r4
 800f10a:	f7ff feb3 	bl	800ee74 <listen_message_reliably>
 800f10e:	f000 fd5d 	bl	800fbcc <uxr_millis>
 800f112:	1b83      	subs	r3, r0, r6
 800f114:	1ae9      	subs	r1, r5, r3
 800f116:	2900      	cmp	r1, #0
 800f118:	dcf6      	bgt.n	800f108 <uxr_run_session_timeout+0x14>
 800f11a:	f104 0008 	add.w	r0, r4, #8
 800f11e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f122:	f000 bcf7 	b.w	800fb14 <uxr_output_streams_confirmed>
 800f126:	bf00      	nop

0800f128 <uxr_run_session_until_data>:
 800f128:	b570      	push	{r4, r5, r6, lr}
 800f12a:	4604      	mov	r4, r0
 800f12c:	460d      	mov	r5, r1
 800f12e:	f000 fd4d 	bl	800fbcc <uxr_millis>
 800f132:	4606      	mov	r6, r0
 800f134:	4620      	mov	r0, r4
 800f136:	f7ff fc57 	bl	800e9e8 <uxr_flash_output_streams>
 800f13a:	2300      	movs	r3, #0
 800f13c:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800f140:	4629      	mov	r1, r5
 800f142:	e005      	b.n	800f150 <uxr_run_session_until_data+0x28>
 800f144:	f000 fd42 	bl	800fbcc <uxr_millis>
 800f148:	1b83      	subs	r3, r0, r6
 800f14a:	1ae9      	subs	r1, r5, r3
 800f14c:	2900      	cmp	r1, #0
 800f14e:	dd07      	ble.n	800f160 <uxr_run_session_until_data+0x38>
 800f150:	4620      	mov	r0, r4
 800f152:	f7ff fe8f 	bl	800ee74 <listen_message_reliably>
 800f156:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800f15a:	2800      	cmp	r0, #0
 800f15c:	d0f2      	beq.n	800f144 <uxr_run_session_until_data+0x1c>
 800f15e:	bd70      	pop	{r4, r5, r6, pc}
 800f160:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800f164:	bd70      	pop	{r4, r5, r6, pc}
 800f166:	bf00      	nop

0800f168 <uxr_run_session_until_confirm_delivery>:
 800f168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f16c:	4606      	mov	r6, r0
 800f16e:	460d      	mov	r5, r1
 800f170:	f000 fd2c 	bl	800fbcc <uxr_millis>
 800f174:	4607      	mov	r7, r0
 800f176:	4630      	mov	r0, r6
 800f178:	f7ff fc36 	bl	800e9e8 <uxr_flash_output_streams>
 800f17c:	2d00      	cmp	r5, #0
 800f17e:	f106 0808 	add.w	r8, r6, #8
 800f182:	bfa8      	it	ge
 800f184:	462c      	movge	r4, r5
 800f186:	da07      	bge.n	800f198 <uxr_run_session_until_confirm_delivery+0x30>
 800f188:	e00e      	b.n	800f1a8 <uxr_run_session_until_confirm_delivery+0x40>
 800f18a:	f7ff fe73 	bl	800ee74 <listen_message_reliably>
 800f18e:	f000 fd1d 	bl	800fbcc <uxr_millis>
 800f192:	1bc3      	subs	r3, r0, r7
 800f194:	1aec      	subs	r4, r5, r3
 800f196:	d407      	bmi.n	800f1a8 <uxr_run_session_until_confirm_delivery+0x40>
 800f198:	4640      	mov	r0, r8
 800f19a:	f000 fcbb 	bl	800fb14 <uxr_output_streams_confirmed>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	4621      	mov	r1, r4
 800f1a2:	4630      	mov	r0, r6
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d0f0      	beq.n	800f18a <uxr_run_session_until_confirm_delivery+0x22>
 800f1a8:	4640      	mov	r0, r8
 800f1aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1ae:	f000 bcb1 	b.w	800fb14 <uxr_output_streams_confirmed>
 800f1b2:	bf00      	nop

0800f1b4 <uxr_run_session_until_all_status>:
 800f1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1b8:	9c08      	ldr	r4, [sp, #32]
 800f1ba:	4606      	mov	r6, r0
 800f1bc:	460f      	mov	r7, r1
 800f1be:	4691      	mov	r9, r2
 800f1c0:	461d      	mov	r5, r3
 800f1c2:	f7ff fc11 	bl	800e9e8 <uxr_flash_output_streams>
 800f1c6:	b124      	cbz	r4, 800f1d2 <uxr_run_session_until_all_status+0x1e>
 800f1c8:	4622      	mov	r2, r4
 800f1ca:	21ff      	movs	r1, #255	; 0xff
 800f1cc:	4628      	mov	r0, r5
 800f1ce:	f008 fa69 	bl	80176a4 <memset>
 800f1d2:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 800f1d6:	67f4      	str	r4, [r6, #124]	; 0x7c
 800f1d8:	f000 fcf8 	bl	800fbcc <uxr_millis>
 800f1dc:	3d01      	subs	r5, #1
 800f1de:	f1a9 0902 	sub.w	r9, r9, #2
 800f1e2:	4680      	mov	r8, r0
 800f1e4:	4639      	mov	r1, r7
 800f1e6:	4630      	mov	r0, r6
 800f1e8:	f7ff fe44 	bl	800ee74 <listen_message_reliably>
 800f1ec:	f000 fcee 	bl	800fbcc <uxr_millis>
 800f1f0:	eba0 0008 	sub.w	r0, r0, r8
 800f1f4:	1a39      	subs	r1, r7, r0
 800f1f6:	b344      	cbz	r4, 800f24a <uxr_run_session_until_all_status+0x96>
 800f1f8:	4628      	mov	r0, r5
 800f1fa:	46ac      	mov	ip, r5
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	e002      	b.n	800f206 <uxr_run_session_until_all_status+0x52>
 800f200:	42a3      	cmp	r3, r4
 800f202:	d20d      	bcs.n	800f220 <uxr_run_session_until_all_status+0x6c>
 800f204:	3301      	adds	r3, #1
 800f206:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800f20a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800f20e:	d1f7      	bne.n	800f200 <uxr_run_session_until_all_status+0x4c>
 800f210:	42a3      	cmp	r3, r4
 800f212:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800f216:	d213      	bcs.n	800f240 <uxr_run_session_until_all_status+0x8c>
 800f218:	2a00      	cmp	r2, #0
 800f21a:	d0f3      	beq.n	800f204 <uxr_run_session_until_all_status+0x50>
 800f21c:	2900      	cmp	r1, #0
 800f21e:	dce2      	bgt.n	800f1e6 <uxr_run_session_until_all_status+0x32>
 800f220:	2300      	movs	r3, #0
 800f222:	67f3      	str	r3, [r6, #124]	; 0x7c
 800f224:	442c      	add	r4, r5
 800f226:	e001      	b.n	800f22c <uxr_run_session_until_all_status+0x78>
 800f228:	2b01      	cmp	r3, #1
 800f22a:	d812      	bhi.n	800f252 <uxr_run_session_until_all_status+0x9e>
 800f22c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800f230:	4284      	cmp	r4, r0
 800f232:	d1f9      	bne.n	800f228 <uxr_run_session_until_all_status+0x74>
 800f234:	2b01      	cmp	r3, #1
 800f236:	bf8c      	ite	hi
 800f238:	2000      	movhi	r0, #0
 800f23a:	2001      	movls	r0, #1
 800f23c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f240:	2900      	cmp	r1, #0
 800f242:	dded      	ble.n	800f220 <uxr_run_session_until_all_status+0x6c>
 800f244:	2a00      	cmp	r2, #0
 800f246:	d1ce      	bne.n	800f1e6 <uxr_run_session_until_all_status+0x32>
 800f248:	e7ea      	b.n	800f220 <uxr_run_session_until_all_status+0x6c>
 800f24a:	67f4      	str	r4, [r6, #124]	; 0x7c
 800f24c:	2001      	movs	r0, #1
 800f24e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f252:	2000      	movs	r0, #0
 800f254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f258 <wait_session_status>:
 800f258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f25c:	4604      	mov	r4, r0
 800f25e:	b09d      	sub	sp, #116	; 0x74
 800f260:	20ff      	movs	r0, #255	; 0xff
 800f262:	7160      	strb	r0, [r4, #5]
 800f264:	9303      	str	r3, [sp, #12]
 800f266:	2b00      	cmp	r3, #0
 800f268:	f000 80b6 	beq.w	800f3d8 <wait_session_status+0x180>
 800f26c:	468a      	mov	sl, r1
 800f26e:	4691      	mov	r9, r2
 800f270:	f04f 0b00 	mov.w	fp, #0
 800f274:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f276:	464a      	mov	r2, r9
 800f278:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f27c:	4651      	mov	r1, sl
 800f27e:	47a8      	blx	r5
 800f280:	f000 fca4 	bl	800fbcc <uxr_millis>
 800f284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f288:	4605      	mov	r5, r0
 800f28a:	e009      	b.n	800f2a0 <wait_session_status+0x48>
 800f28c:	f000 fc9e 	bl	800fbcc <uxr_millis>
 800f290:	1b40      	subs	r0, r0, r5
 800f292:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800f296:	2b00      	cmp	r3, #0
 800f298:	dd40      	ble.n	800f31c <wait_session_status+0xc4>
 800f29a:	7960      	ldrb	r0, [r4, #5]
 800f29c:	28ff      	cmp	r0, #255	; 0xff
 800f29e:	d145      	bne.n	800f32c <wait_session_status+0xd4>
 800f2a0:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800f2a2:	a908      	add	r1, sp, #32
 800f2a4:	6896      	ldr	r6, [r2, #8]
 800f2a6:	6810      	ldr	r0, [r2, #0]
 800f2a8:	aa09      	add	r2, sp, #36	; 0x24
 800f2aa:	47b0      	blx	r6
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	d0ed      	beq.n	800f28c <wait_session_status+0x34>
 800f2b0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800f2b4:	a80c      	add	r0, sp, #48	; 0x30
 800f2b6:	f7fe fe23 	bl	800df00 <ucdr_init_buffer>
 800f2ba:	2600      	movs	r6, #0
 800f2bc:	f10d 031e 	add.w	r3, sp, #30
 800f2c0:	aa07      	add	r2, sp, #28
 800f2c2:	a90c      	add	r1, sp, #48	; 0x30
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	f88d 601c 	strb.w	r6, [sp, #28]
 800f2ca:	f000 fa87 	bl	800f7dc <uxr_read_session_header>
 800f2ce:	2800      	cmp	r0, #0
 800f2d0:	d0dc      	beq.n	800f28c <wait_session_status+0x34>
 800f2d2:	4631      	mov	r1, r6
 800f2d4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800f2d8:	f000 fb24 	bl	800f924 <uxr_stream_id_from_raw>
 800f2dc:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800f2e0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800f2e4:	9302      	str	r3, [sp, #8]
 800f2e6:	2f01      	cmp	r7, #1
 800f2e8:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800f2ec:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f2f0:	d05c      	beq.n	800f3ac <wait_session_status+0x154>
 800f2f2:	2f02      	cmp	r7, #2
 800f2f4:	d020      	beq.n	800f338 <wait_session_status+0xe0>
 800f2f6:	2f00      	cmp	r7, #0
 800f2f8:	d1c8      	bne.n	800f28c <wait_session_status+0x34>
 800f2fa:	4639      	mov	r1, r7
 800f2fc:	4638      	mov	r0, r7
 800f2fe:	f000 fb11 	bl	800f924 <uxr_stream_id_from_raw>
 800f302:	a90c      	add	r1, sp, #48	; 0x30
 800f304:	4602      	mov	r2, r0
 800f306:	900b      	str	r0, [sp, #44]	; 0x2c
 800f308:	4620      	mov	r0, r4
 800f30a:	f7ff fc2b 	bl	800eb64 <read_submessage_list>
 800f30e:	f000 fc5d 	bl	800fbcc <uxr_millis>
 800f312:	1b40      	subs	r0, r0, r5
 800f314:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800f318:	2b00      	cmp	r3, #0
 800f31a:	dcbe      	bgt.n	800f29a <wait_session_status+0x42>
 800f31c:	9b03      	ldr	r3, [sp, #12]
 800f31e:	7960      	ldrb	r0, [r4, #5]
 800f320:	f10b 0b01 	add.w	fp, fp, #1
 800f324:	455b      	cmp	r3, fp
 800f326:	d001      	beq.n	800f32c <wait_session_status+0xd4>
 800f328:	28ff      	cmp	r0, #255	; 0xff
 800f32a:	d0a3      	beq.n	800f274 <wait_session_status+0x1c>
 800f32c:	38ff      	subs	r0, #255	; 0xff
 800f32e:	bf18      	it	ne
 800f330:	2001      	movne	r0, #1
 800f332:	b01d      	add	sp, #116	; 0x74
 800f334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f338:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800f33c:	9304      	str	r3, [sp, #16]
 800f33e:	4631      	mov	r1, r6
 800f340:	f104 0008 	add.w	r0, r4, #8
 800f344:	f000 fbdc 	bl	800fb00 <uxr_get_input_reliable_stream>
 800f348:	4680      	mov	r8, r0
 800f34a:	b348      	cbz	r0, 800f3a0 <wait_session_status+0x148>
 800f34c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f34e:	9205      	str	r2, [sp, #20]
 800f350:	a80c      	add	r0, sp, #48	; 0x30
 800f352:	f7fe fe05 	bl	800df60 <ucdr_buffer_remaining>
 800f356:	4603      	mov	r3, r0
 800f358:	f10d 001d 	add.w	r0, sp, #29
 800f35c:	9000      	str	r0, [sp, #0]
 800f35e:	9a05      	ldr	r2, [sp, #20]
 800f360:	9902      	ldr	r1, [sp, #8]
 800f362:	4640      	mov	r0, r8
 800f364:	f005 ff7e 	bl	8015264 <uxr_receive_reliable_message>
 800f368:	b1d0      	cbz	r0, 800f3a0 <wait_session_status+0x148>
 800f36a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d03a      	beq.n	800f3e8 <wait_session_status+0x190>
 800f372:	9f04      	ldr	r7, [sp, #16]
 800f374:	e00a      	b.n	800f38c <wait_session_status+0x134>
 800f376:	f04f 0302 	mov.w	r3, #2
 800f37a:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800f37e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800f382:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800f386:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f388:	f7ff fbec 	bl	800eb64 <read_submessage_list>
 800f38c:	a914      	add	r1, sp, #80	; 0x50
 800f38e:	2204      	movs	r2, #4
 800f390:	4640      	mov	r0, r8
 800f392:	f005 ffe7 	bl	8015364 <uxr_next_input_reliable_buffer_available>
 800f396:	4603      	mov	r3, r0
 800f398:	a914      	add	r1, sp, #80	; 0x50
 800f39a:	4620      	mov	r0, r4
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d1ea      	bne.n	800f376 <wait_session_status+0x11e>
 800f3a0:	9904      	ldr	r1, [sp, #16]
 800f3a2:	4632      	mov	r2, r6
 800f3a4:	4620      	mov	r0, r4
 800f3a6:	f7ff fa59 	bl	800e85c <write_submessage_acknack.isra.0>
 800f3aa:	e76f      	b.n	800f28c <wait_session_status+0x34>
 800f3ac:	4631      	mov	r1, r6
 800f3ae:	f104 0008 	add.w	r0, r4, #8
 800f3b2:	f000 fb9b 	bl	800faec <uxr_get_input_best_effort_stream>
 800f3b6:	2800      	cmp	r0, #0
 800f3b8:	f43f af68 	beq.w	800f28c <wait_session_status+0x34>
 800f3bc:	9902      	ldr	r1, [sp, #8]
 800f3be:	f005 febd 	bl	801513c <uxr_receive_best_effort_message>
 800f3c2:	2800      	cmp	r0, #0
 800f3c4:	f43f af62 	beq.w	800f28c <wait_session_status+0x34>
 800f3c8:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800f3cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f3ce:	a90c      	add	r1, sp, #48	; 0x30
 800f3d0:	4620      	mov	r0, r4
 800f3d2:	f7ff fbc7 	bl	800eb64 <read_submessage_list>
 800f3d6:	e759      	b.n	800f28c <wait_session_status+0x34>
 800f3d8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f3da:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f3de:	47a0      	blx	r4
 800f3e0:	2001      	movs	r0, #1
 800f3e2:	b01d      	add	sp, #116	; 0x74
 800f3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3e8:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800f3ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f3ee:	a90c      	add	r1, sp, #48	; 0x30
 800f3f0:	4620      	mov	r0, r4
 800f3f2:	f7ff fbb7 	bl	800eb64 <read_submessage_list>
 800f3f6:	e7bc      	b.n	800f372 <wait_session_status+0x11a>

0800f3f8 <uxr_delete_session_retries>:
 800f3f8:	b530      	push	{r4, r5, lr}
 800f3fa:	b08f      	sub	sp, #60	; 0x3c
 800f3fc:	4604      	mov	r4, r0
 800f3fe:	460d      	mov	r5, r1
 800f400:	f000 fa2e 	bl	800f860 <uxr_session_header_offset>
 800f404:	2300      	movs	r3, #0
 800f406:	2210      	movs	r2, #16
 800f408:	9000      	str	r0, [sp, #0]
 800f40a:	a902      	add	r1, sp, #8
 800f40c:	a806      	add	r0, sp, #24
 800f40e:	f7fe fd65 	bl	800dedc <ucdr_init_buffer_origin_offset>
 800f412:	a906      	add	r1, sp, #24
 800f414:	4620      	mov	r0, r4
 800f416:	f000 f973 	bl	800f700 <uxr_buffer_delete_session>
 800f41a:	2200      	movs	r2, #0
 800f41c:	4611      	mov	r1, r2
 800f41e:	9b06      	ldr	r3, [sp, #24]
 800f420:	4620      	mov	r0, r4
 800f422:	f000 f9c7 	bl	800f7b4 <uxr_stamp_session_header>
 800f426:	a806      	add	r0, sp, #24
 800f428:	f7fe fd96 	bl	800df58 <ucdr_buffer_length>
 800f42c:	462b      	mov	r3, r5
 800f42e:	4602      	mov	r2, r0
 800f430:	a902      	add	r1, sp, #8
 800f432:	4620      	mov	r0, r4
 800f434:	f7ff ff10 	bl	800f258 <wait_session_status>
 800f438:	b118      	cbz	r0, 800f442 <uxr_delete_session_retries+0x4a>
 800f43a:	7960      	ldrb	r0, [r4, #5]
 800f43c:	fab0 f080 	clz	r0, r0
 800f440:	0940      	lsrs	r0, r0, #5
 800f442:	b00f      	add	sp, #60	; 0x3c
 800f444:	bd30      	pop	{r4, r5, pc}
 800f446:	bf00      	nop

0800f448 <uxr_create_session>:
 800f448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f44c:	f100 0b08 	add.w	fp, r0, #8
 800f450:	b0ab      	sub	sp, #172	; 0xac
 800f452:	4604      	mov	r4, r0
 800f454:	4658      	mov	r0, fp
 800f456:	f000 fa99 	bl	800f98c <uxr_reset_stream_storage>
 800f45a:	4620      	mov	r0, r4
 800f45c:	f000 fa00 	bl	800f860 <uxr_session_header_offset>
 800f460:	2300      	movs	r3, #0
 800f462:	9000      	str	r0, [sp, #0]
 800f464:	221c      	movs	r2, #28
 800f466:	a90b      	add	r1, sp, #44	; 0x2c
 800f468:	a812      	add	r0, sp, #72	; 0x48
 800f46a:	f7fe fd37 	bl	800dedc <ucdr_init_buffer_origin_offset>
 800f46e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f470:	8a1a      	ldrh	r2, [r3, #16]
 800f472:	3a04      	subs	r2, #4
 800f474:	b292      	uxth	r2, r2
 800f476:	a912      	add	r1, sp, #72	; 0x48
 800f478:	4620      	mov	r0, r4
 800f47a:	f000 f917 	bl	800f6ac <uxr_buffer_create_session>
 800f47e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f480:	4620      	mov	r0, r4
 800f482:	f000 f983 	bl	800f78c <uxr_stamp_create_session_header>
 800f486:	a812      	add	r0, sp, #72	; 0x48
 800f488:	f7fe fd66 	bl	800df58 <ucdr_buffer_length>
 800f48c:	23ff      	movs	r3, #255	; 0xff
 800f48e:	7163      	strb	r3, [r4, #5]
 800f490:	230a      	movs	r3, #10
 800f492:	46da      	mov	sl, fp
 800f494:	9303      	str	r3, [sp, #12]
 800f496:	4683      	mov	fp, r0
 800f498:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f49a:	465a      	mov	r2, fp
 800f49c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f4a0:	a90b      	add	r1, sp, #44	; 0x2c
 800f4a2:	47a8      	blx	r5
 800f4a4:	f000 fb92 	bl	800fbcc <uxr_millis>
 800f4a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f4ac:	4605      	mov	r5, r0
 800f4ae:	e009      	b.n	800f4c4 <uxr_create_session+0x7c>
 800f4b0:	f000 fb8c 	bl	800fbcc <uxr_millis>
 800f4b4:	1b40      	subs	r0, r0, r5
 800f4b6:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	7962      	ldrb	r2, [r4, #5]
 800f4be:	dd38      	ble.n	800f532 <uxr_create_session+0xea>
 800f4c0:	2aff      	cmp	r2, #255	; 0xff
 800f4c2:	d13c      	bne.n	800f53e <uxr_create_session+0xf6>
 800f4c4:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800f4c6:	a907      	add	r1, sp, #28
 800f4c8:	6896      	ldr	r6, [r2, #8]
 800f4ca:	6810      	ldr	r0, [r2, #0]
 800f4cc:	aa08      	add	r2, sp, #32
 800f4ce:	47b0      	blx	r6
 800f4d0:	2800      	cmp	r0, #0
 800f4d2:	d0ed      	beq.n	800f4b0 <uxr_create_session+0x68>
 800f4d4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f4d8:	a81a      	add	r0, sp, #104	; 0x68
 800f4da:	f7fe fd11 	bl	800df00 <ucdr_init_buffer>
 800f4de:	2600      	movs	r6, #0
 800f4e0:	f10d 031a 	add.w	r3, sp, #26
 800f4e4:	aa06      	add	r2, sp, #24
 800f4e6:	a91a      	add	r1, sp, #104	; 0x68
 800f4e8:	4620      	mov	r0, r4
 800f4ea:	f88d 6018 	strb.w	r6, [sp, #24]
 800f4ee:	f000 f975 	bl	800f7dc <uxr_read_session_header>
 800f4f2:	2800      	cmp	r0, #0
 800f4f4:	d0dc      	beq.n	800f4b0 <uxr_create_session+0x68>
 800f4f6:	4631      	mov	r1, r6
 800f4f8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f4fc:	f000 fa12 	bl	800f924 <uxr_stream_id_from_raw>
 800f500:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800f504:	2e01      	cmp	r6, #1
 800f506:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800f50a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800f50e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800f512:	d053      	beq.n	800f5bc <uxr_create_session+0x174>
 800f514:	2e02      	cmp	r6, #2
 800f516:	d018      	beq.n	800f54a <uxr_create_session+0x102>
 800f518:	2e00      	cmp	r6, #0
 800f51a:	d1c9      	bne.n	800f4b0 <uxr_create_session+0x68>
 800f51c:	4631      	mov	r1, r6
 800f51e:	4630      	mov	r0, r6
 800f520:	f000 fa00 	bl	800f924 <uxr_stream_id_from_raw>
 800f524:	a91a      	add	r1, sp, #104	; 0x68
 800f526:	4602      	mov	r2, r0
 800f528:	900a      	str	r0, [sp, #40]	; 0x28
 800f52a:	4620      	mov	r0, r4
 800f52c:	f7ff fb1a 	bl	800eb64 <read_submessage_list>
 800f530:	e7be      	b.n	800f4b0 <uxr_create_session+0x68>
 800f532:	9b03      	ldr	r3, [sp, #12]
 800f534:	3b01      	subs	r3, #1
 800f536:	9303      	str	r3, [sp, #12]
 800f538:	d001      	beq.n	800f53e <uxr_create_session+0xf6>
 800f53a:	2aff      	cmp	r2, #255	; 0xff
 800f53c:	d0ac      	beq.n	800f498 <uxr_create_session+0x50>
 800f53e:	2a00      	cmp	r2, #0
 800f540:	d051      	beq.n	800f5e6 <uxr_create_session+0x19e>
 800f542:	2000      	movs	r0, #0
 800f544:	b02b      	add	sp, #172	; 0xac
 800f546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f54a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800f54e:	9304      	str	r3, [sp, #16]
 800f550:	4639      	mov	r1, r7
 800f552:	4650      	mov	r0, sl
 800f554:	f000 fad4 	bl	800fb00 <uxr_get_input_reliable_stream>
 800f558:	4680      	mov	r8, r0
 800f55a:	b348      	cbz	r0, 800f5b0 <uxr_create_session+0x168>
 800f55c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f55e:	9205      	str	r2, [sp, #20]
 800f560:	a81a      	add	r0, sp, #104	; 0x68
 800f562:	f7fe fcfd 	bl	800df60 <ucdr_buffer_remaining>
 800f566:	4603      	mov	r3, r0
 800f568:	f10d 0019 	add.w	r0, sp, #25
 800f56c:	9000      	str	r0, [sp, #0]
 800f56e:	9a05      	ldr	r2, [sp, #20]
 800f570:	4649      	mov	r1, r9
 800f572:	4640      	mov	r0, r8
 800f574:	f005 fe76 	bl	8015264 <uxr_receive_reliable_message>
 800f578:	b1d0      	cbz	r0, 800f5b0 <uxr_create_session+0x168>
 800f57a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d038      	beq.n	800f5f4 <uxr_create_session+0x1ac>
 800f582:	9e04      	ldr	r6, [sp, #16]
 800f584:	e00a      	b.n	800f59c <uxr_create_session+0x154>
 800f586:	f04f 0302 	mov.w	r3, #2
 800f58a:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 800f58e:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800f592:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f596:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f598:	f7ff fae4 	bl	800eb64 <read_submessage_list>
 800f59c:	a922      	add	r1, sp, #136	; 0x88
 800f59e:	2204      	movs	r2, #4
 800f5a0:	4640      	mov	r0, r8
 800f5a2:	f005 fedf 	bl	8015364 <uxr_next_input_reliable_buffer_available>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	a922      	add	r1, sp, #136	; 0x88
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d1ea      	bne.n	800f586 <uxr_create_session+0x13e>
 800f5b0:	9904      	ldr	r1, [sp, #16]
 800f5b2:	463a      	mov	r2, r7
 800f5b4:	4620      	mov	r0, r4
 800f5b6:	f7ff f951 	bl	800e85c <write_submessage_acknack.isra.0>
 800f5ba:	e779      	b.n	800f4b0 <uxr_create_session+0x68>
 800f5bc:	4639      	mov	r1, r7
 800f5be:	4650      	mov	r0, sl
 800f5c0:	f000 fa94 	bl	800faec <uxr_get_input_best_effort_stream>
 800f5c4:	2800      	cmp	r0, #0
 800f5c6:	f43f af73 	beq.w	800f4b0 <uxr_create_session+0x68>
 800f5ca:	4649      	mov	r1, r9
 800f5cc:	f005 fdb6 	bl	801513c <uxr_receive_best_effort_message>
 800f5d0:	2800      	cmp	r0, #0
 800f5d2:	f43f af6d 	beq.w	800f4b0 <uxr_create_session+0x68>
 800f5d6:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800f5da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f5dc:	a91a      	add	r1, sp, #104	; 0x68
 800f5de:	4620      	mov	r0, r4
 800f5e0:	f7ff fac0 	bl	800eb64 <read_submessage_list>
 800f5e4:	e764      	b.n	800f4b0 <uxr_create_session+0x68>
 800f5e6:	4650      	mov	r0, sl
 800f5e8:	f000 f9d0 	bl	800f98c <uxr_reset_stream_storage>
 800f5ec:	2001      	movs	r0, #1
 800f5ee:	b02b      	add	sp, #172	; 0xac
 800f5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5f4:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800f5f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f5fa:	a91a      	add	r1, sp, #104	; 0x68
 800f5fc:	4620      	mov	r0, r4
 800f5fe:	f7ff fab1 	bl	800eb64 <read_submessage_list>
 800f602:	e7be      	b.n	800f582 <uxr_create_session+0x13a>

0800f604 <uxr_prepare_stream_to_write_submessage>:
 800f604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f608:	b082      	sub	sp, #8
 800f60a:	4682      	mov	sl, r0
 800f60c:	4610      	mov	r0, r2
 800f60e:	4615      	mov	r5, r2
 800f610:	461e      	mov	r6, r3
 800f612:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800f616:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800f61a:	9101      	str	r1, [sp, #4]
 800f61c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800f620:	f000 face 	bl	800fbc0 <uxr_submessage_padding>
 800f624:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f628:	f105 0904 	add.w	r9, r5, #4
 800f62c:	2b01      	cmp	r3, #1
 800f62e:	4481      	add	r9, r0
 800f630:	d01d      	beq.n	800f66e <uxr_prepare_stream_to_write_submessage+0x6a>
 800f632:	2b02      	cmp	r3, #2
 800f634:	d116      	bne.n	800f664 <uxr_prepare_stream_to_write_submessage+0x60>
 800f636:	4621      	mov	r1, r4
 800f638:	f10a 0008 	add.w	r0, sl, #8
 800f63c:	f000 fa4c 	bl	800fad8 <uxr_get_output_reliable_stream>
 800f640:	4604      	mov	r4, r0
 800f642:	b158      	cbz	r0, 800f65c <uxr_prepare_stream_to_write_submessage+0x58>
 800f644:	4649      	mov	r1, r9
 800f646:	4632      	mov	r2, r6
 800f648:	f006 f848 	bl	80156dc <uxr_prepare_reliable_buffer_to_write>
 800f64c:	4604      	mov	r4, r0
 800f64e:	b12c      	cbz	r4, 800f65c <uxr_prepare_stream_to_write_submessage+0x58>
 800f650:	4643      	mov	r3, r8
 800f652:	b2aa      	uxth	r2, r5
 800f654:	4639      	mov	r1, r7
 800f656:	4630      	mov	r0, r6
 800f658:	f000 fa72 	bl	800fb40 <uxr_buffer_submessage_header>
 800f65c:	4620      	mov	r0, r4
 800f65e:	b002      	add	sp, #8
 800f660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f664:	2400      	movs	r4, #0
 800f666:	4620      	mov	r0, r4
 800f668:	b002      	add	sp, #8
 800f66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f66e:	4621      	mov	r1, r4
 800f670:	f10a 0008 	add.w	r0, sl, #8
 800f674:	f000 fa28 	bl	800fac8 <uxr_get_output_best_effort_stream>
 800f678:	4604      	mov	r4, r0
 800f67a:	2800      	cmp	r0, #0
 800f67c:	d0ee      	beq.n	800f65c <uxr_prepare_stream_to_write_submessage+0x58>
 800f67e:	4649      	mov	r1, r9
 800f680:	4632      	mov	r2, r6
 800f682:	f005 ff5b 	bl	801553c <uxr_prepare_best_effort_buffer_to_write>
 800f686:	4604      	mov	r4, r0
 800f688:	e7e1      	b.n	800f64e <uxr_prepare_stream_to_write_submessage+0x4a>
 800f68a:	bf00      	nop

0800f68c <uxr_init_session_info>:
 800f68c:	0e13      	lsrs	r3, r2, #24
 800f68e:	7043      	strb	r3, [r0, #1]
 800f690:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800f694:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f698:	7001      	strb	r1, [r0, #0]
 800f69a:	70c3      	strb	r3, [r0, #3]
 800f69c:	2109      	movs	r1, #9
 800f69e:	23ff      	movs	r3, #255	; 0xff
 800f6a0:	f880 c002 	strb.w	ip, [r0, #2]
 800f6a4:	7102      	strb	r2, [r0, #4]
 800f6a6:	80c1      	strh	r1, [r0, #6]
 800f6a8:	7143      	strb	r3, [r0, #5]
 800f6aa:	4770      	bx	lr

0800f6ac <uxr_buffer_create_session>:
 800f6ac:	b530      	push	{r4, r5, lr}
 800f6ae:	b089      	sub	sp, #36	; 0x24
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	4d12      	ldr	r5, [pc, #72]	; (800f6fc <uxr_buffer_create_session+0x50>)
 800f6b4:	9307      	str	r3, [sp, #28]
 800f6b6:	f8ad 201c 	strh.w	r2, [sp, #28]
 800f6ba:	2201      	movs	r2, #1
 800f6bc:	9301      	str	r3, [sp, #4]
 800f6be:	80c2      	strh	r2, [r0, #6]
 800f6c0:	f88d 2004 	strb.w	r2, [sp, #4]
 800f6c4:	682a      	ldr	r2, [r5, #0]
 800f6c6:	9200      	str	r2, [sp, #0]
 800f6c8:	88aa      	ldrh	r2, [r5, #4]
 800f6ca:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f6ce:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800f6d2:	9202      	str	r2, [sp, #8]
 800f6d4:	460c      	mov	r4, r1
 800f6d6:	7802      	ldrb	r2, [r0, #0]
 800f6d8:	9303      	str	r3, [sp, #12]
 800f6da:	4619      	mov	r1, r3
 800f6dc:	f88d 200c 	strb.w	r2, [sp, #12]
 800f6e0:	4620      	mov	r0, r4
 800f6e2:	2210      	movs	r2, #16
 800f6e4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800f6e8:	9306      	str	r3, [sp, #24]
 800f6ea:	f000 fa29 	bl	800fb40 <uxr_buffer_submessage_header>
 800f6ee:	4669      	mov	r1, sp
 800f6f0:	4620      	mov	r0, r4
 800f6f2:	f001 fa6d 	bl	8010bd0 <uxr_serialize_CREATE_CLIENT_Payload>
 800f6f6:	b009      	add	sp, #36	; 0x24
 800f6f8:	bd30      	pop	{r4, r5, pc}
 800f6fa:	bf00      	nop
 800f6fc:	080186b4 	.word	0x080186b4

0800f700 <uxr_buffer_delete_session>:
 800f700:	b510      	push	{r4, lr}
 800f702:	4b0c      	ldr	r3, [pc, #48]	; (800f734 <uxr_buffer_delete_session+0x34>)
 800f704:	b082      	sub	sp, #8
 800f706:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800f70a:	f8ad c006 	strh.w	ip, [sp, #6]
 800f70e:	460c      	mov	r4, r1
 800f710:	2202      	movs	r2, #2
 800f712:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f716:	80c2      	strh	r2, [r0, #6]
 800f718:	f8ad 3004 	strh.w	r3, [sp, #4]
 800f71c:	2204      	movs	r2, #4
 800f71e:	2300      	movs	r3, #0
 800f720:	2103      	movs	r1, #3
 800f722:	4620      	mov	r0, r4
 800f724:	f000 fa0c 	bl	800fb40 <uxr_buffer_submessage_header>
 800f728:	a901      	add	r1, sp, #4
 800f72a:	4620      	mov	r0, r4
 800f72c:	f001 faf6 	bl	8010d1c <uxr_serialize_DELETE_Payload>
 800f730:	b002      	add	sp, #8
 800f732:	bd10      	pop	{r4, pc}
 800f734:	080186b4 	.word	0x080186b4

0800f738 <uxr_read_create_session_status>:
 800f738:	b510      	push	{r4, lr}
 800f73a:	b088      	sub	sp, #32
 800f73c:	4604      	mov	r4, r0
 800f73e:	4608      	mov	r0, r1
 800f740:	a901      	add	r1, sp, #4
 800f742:	f001 fafb 	bl	8010d3c <uxr_deserialize_STATUS_AGENT_Payload>
 800f746:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f74a:	7163      	strb	r3, [r4, #5]
 800f74c:	b008      	add	sp, #32
 800f74e:	bd10      	pop	{r4, pc}

0800f750 <uxr_read_delete_session_status>:
 800f750:	b510      	push	{r4, lr}
 800f752:	4604      	mov	r4, r0
 800f754:	b084      	sub	sp, #16
 800f756:	4608      	mov	r0, r1
 800f758:	a902      	add	r1, sp, #8
 800f75a:	f001 fb1f 	bl	8010d9c <uxr_deserialize_STATUS_Payload>
 800f75e:	88e3      	ldrh	r3, [r4, #6]
 800f760:	2b02      	cmp	r3, #2
 800f762:	d001      	beq.n	800f768 <uxr_read_delete_session_status+0x18>
 800f764:	b004      	add	sp, #16
 800f766:	bd10      	pop	{r4, pc}
 800f768:	f10d 000a 	add.w	r0, sp, #10
 800f76c:	f7fe fecc 	bl	800e508 <uxr_object_id_from_raw>
 800f770:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800f774:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800f778:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f77c:	b29b      	uxth	r3, r3
 800f77e:	2b02      	cmp	r3, #2
 800f780:	bf04      	itt	eq
 800f782:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800f786:	7163      	strbeq	r3, [r4, #5]
 800f788:	b004      	add	sp, #16
 800f78a:	bd10      	pop	{r4, pc}

0800f78c <uxr_stamp_create_session_header>:
 800f78c:	b510      	push	{r4, lr}
 800f78e:	2208      	movs	r2, #8
 800f790:	b08a      	sub	sp, #40	; 0x28
 800f792:	4604      	mov	r4, r0
 800f794:	eb0d 0002 	add.w	r0, sp, r2
 800f798:	f7fe fbb2 	bl	800df00 <ucdr_init_buffer>
 800f79c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7a0:	9400      	str	r4, [sp, #0]
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	461a      	mov	r2, r3
 800f7a6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800f7aa:	a802      	add	r0, sp, #8
 800f7ac:	f000 fbc2 	bl	800ff34 <uxr_serialize_message_header>
 800f7b0:	b00a      	add	sp, #40	; 0x28
 800f7b2:	bd10      	pop	{r4, pc}

0800f7b4 <uxr_stamp_session_header>:
 800f7b4:	b530      	push	{r4, r5, lr}
 800f7b6:	b08d      	sub	sp, #52	; 0x34
 800f7b8:	4604      	mov	r4, r0
 800f7ba:	460d      	mov	r5, r1
 800f7bc:	9203      	str	r2, [sp, #12]
 800f7be:	4619      	mov	r1, r3
 800f7c0:	a804      	add	r0, sp, #16
 800f7c2:	2208      	movs	r2, #8
 800f7c4:	f7fe fb9c 	bl	800df00 <ucdr_init_buffer>
 800f7c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7cc:	9b03      	ldr	r3, [sp, #12]
 800f7ce:	9400      	str	r4, [sp, #0]
 800f7d0:	462a      	mov	r2, r5
 800f7d2:	a804      	add	r0, sp, #16
 800f7d4:	f000 fbae 	bl	800ff34 <uxr_serialize_message_header>
 800f7d8:	b00d      	add	sp, #52	; 0x34
 800f7da:	bd30      	pop	{r4, r5, pc}

0800f7dc <uxr_read_session_header>:
 800f7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7e0:	4607      	mov	r7, r0
 800f7e2:	b084      	sub	sp, #16
 800f7e4:	4608      	mov	r0, r1
 800f7e6:	460c      	mov	r4, r1
 800f7e8:	4615      	mov	r5, r2
 800f7ea:	461e      	mov	r6, r3
 800f7ec:	f7fe fbb8 	bl	800df60 <ucdr_buffer_remaining>
 800f7f0:	2808      	cmp	r0, #8
 800f7f2:	d803      	bhi.n	800f7fc <uxr_read_session_header+0x20>
 800f7f4:	2000      	movs	r0, #0
 800f7f6:	b004      	add	sp, #16
 800f7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7fc:	f10d 080c 	add.w	r8, sp, #12
 800f800:	4633      	mov	r3, r6
 800f802:	462a      	mov	r2, r5
 800f804:	f8cd 8000 	str.w	r8, [sp]
 800f808:	4620      	mov	r0, r4
 800f80a:	f10d 010b 	add.w	r1, sp, #11
 800f80e:	f000 fbaf 	bl	800ff70 <uxr_deserialize_message_header>
 800f812:	783a      	ldrb	r2, [r7, #0]
 800f814:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800f818:	4293      	cmp	r3, r2
 800f81a:	d1eb      	bne.n	800f7f4 <uxr_read_session_header+0x18>
 800f81c:	061b      	lsls	r3, r3, #24
 800f81e:	d41c      	bmi.n	800f85a <uxr_read_session_header+0x7e>
 800f820:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800f824:	787b      	ldrb	r3, [r7, #1]
 800f826:	429a      	cmp	r2, r3
 800f828:	d003      	beq.n	800f832 <uxr_read_session_header+0x56>
 800f82a:	2001      	movs	r0, #1
 800f82c:	f080 0001 	eor.w	r0, r0, #1
 800f830:	e7e1      	b.n	800f7f6 <uxr_read_session_header+0x1a>
 800f832:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800f836:	78bb      	ldrb	r3, [r7, #2]
 800f838:	429a      	cmp	r2, r3
 800f83a:	f107 0102 	add.w	r1, r7, #2
 800f83e:	d1f4      	bne.n	800f82a <uxr_read_session_header+0x4e>
 800f840:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800f844:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f848:	429a      	cmp	r2, r3
 800f84a:	d1ee      	bne.n	800f82a <uxr_read_session_header+0x4e>
 800f84c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800f850:	784b      	ldrb	r3, [r1, #1]
 800f852:	429a      	cmp	r2, r3
 800f854:	d1e9      	bne.n	800f82a <uxr_read_session_header+0x4e>
 800f856:	2000      	movs	r0, #0
 800f858:	e7e8      	b.n	800f82c <uxr_read_session_header+0x50>
 800f85a:	2001      	movs	r0, #1
 800f85c:	e7cb      	b.n	800f7f6 <uxr_read_session_header+0x1a>
 800f85e:	bf00      	nop

0800f860 <uxr_session_header_offset>:
 800f860:	f990 3000 	ldrsb.w	r3, [r0]
 800f864:	2b00      	cmp	r3, #0
 800f866:	bfac      	ite	ge
 800f868:	2008      	movge	r0, #8
 800f86a:	2004      	movlt	r0, #4
 800f86c:	4770      	bx	lr
 800f86e:	bf00      	nop

0800f870 <uxr_init_base_object_request>:
 800f870:	b510      	push	{r4, lr}
 800f872:	88c3      	ldrh	r3, [r0, #6]
 800f874:	b082      	sub	sp, #8
 800f876:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800f87a:	9101      	str	r1, [sp, #4]
 800f87c:	f1a3 010a 	sub.w	r1, r3, #10
 800f880:	b289      	uxth	r1, r1
 800f882:	42a1      	cmp	r1, r4
 800f884:	d80e      	bhi.n	800f8a4 <uxr_init_base_object_request+0x34>
 800f886:	3301      	adds	r3, #1
 800f888:	b29c      	uxth	r4, r3
 800f88a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f88e:	b2db      	uxtb	r3, r3
 800f890:	80c4      	strh	r4, [r0, #6]
 800f892:	9801      	ldr	r0, [sp, #4]
 800f894:	7011      	strb	r1, [r2, #0]
 800f896:	7053      	strb	r3, [r2, #1]
 800f898:	1c91      	adds	r1, r2, #2
 800f89a:	f7fe fe49 	bl	800e530 <uxr_object_id_to_raw>
 800f89e:	4620      	mov	r0, r4
 800f8a0:	b002      	add	sp, #8
 800f8a2:	bd10      	pop	{r4, pc}
 800f8a4:	230a      	movs	r3, #10
 800f8a6:	2100      	movs	r1, #0
 800f8a8:	461c      	mov	r4, r3
 800f8aa:	e7f1      	b.n	800f890 <uxr_init_base_object_request+0x20>

0800f8ac <uxr_parse_base_object_request>:
 800f8ac:	b570      	push	{r4, r5, r6, lr}
 800f8ae:	4604      	mov	r4, r0
 800f8b0:	3002      	adds	r0, #2
 800f8b2:	460d      	mov	r5, r1
 800f8b4:	4616      	mov	r6, r2
 800f8b6:	f7fe fe27 	bl	800e508 <uxr_object_id_from_raw>
 800f8ba:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800f8be:	8028      	strh	r0, [r5, #0]
 800f8c0:	806b      	strh	r3, [r5, #2]
 800f8c2:	7822      	ldrb	r2, [r4, #0]
 800f8c4:	7863      	ldrb	r3, [r4, #1]
 800f8c6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f8ca:	8033      	strh	r3, [r6, #0]
 800f8cc:	bd70      	pop	{r4, r5, r6, pc}
 800f8ce:	bf00      	nop

0800f8d0 <uxr_stream_id>:
 800f8d0:	2901      	cmp	r1, #1
 800f8d2:	b082      	sub	sp, #8
 800f8d4:	d01d      	beq.n	800f912 <uxr_stream_id+0x42>
 800f8d6:	2902      	cmp	r1, #2
 800f8d8:	f04f 0c00 	mov.w	ip, #0
 800f8dc:	d01e      	beq.n	800f91c <uxr_stream_id+0x4c>
 800f8de:	2300      	movs	r3, #0
 800f8e0:	f36c 0307 	bfi	r3, ip, #0, #8
 800f8e4:	f360 230f 	bfi	r3, r0, #8, #8
 800f8e8:	f361 4317 	bfi	r3, r1, #16, #8
 800f8ec:	f362 631f 	bfi	r3, r2, #24, #8
 800f8f0:	b2da      	uxtb	r2, r3
 800f8f2:	2000      	movs	r0, #0
 800f8f4:	f362 0007 	bfi	r0, r2, #0, #8
 800f8f8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800f8fc:	f362 200f 	bfi	r0, r2, #8, #8
 800f900:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800f904:	f362 4017 	bfi	r0, r2, #16, #8
 800f908:	0e1b      	lsrs	r3, r3, #24
 800f90a:	f363 601f 	bfi	r0, r3, #24, #8
 800f90e:	b002      	add	sp, #8
 800f910:	4770      	bx	lr
 800f912:	f100 0c01 	add.w	ip, r0, #1
 800f916:	fa5f fc8c 	uxtb.w	ip, ip
 800f91a:	e7e0      	b.n	800f8de <uxr_stream_id+0xe>
 800f91c:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 800f920:	e7dd      	b.n	800f8de <uxr_stream_id+0xe>
 800f922:	bf00      	nop

0800f924 <uxr_stream_id_from_raw>:
 800f924:	b082      	sub	sp, #8
 800f926:	b130      	cbz	r0, 800f936 <uxr_stream_id_from_raw+0x12>
 800f928:	0603      	lsls	r3, r0, #24
 800f92a:	d420      	bmi.n	800f96e <uxr_stream_id_from_raw+0x4a>
 800f92c:	1e42      	subs	r2, r0, #1
 800f92e:	b2d2      	uxtb	r2, r2
 800f930:	f04f 0c01 	mov.w	ip, #1
 800f934:	e001      	b.n	800f93a <uxr_stream_id_from_raw+0x16>
 800f936:	4684      	mov	ip, r0
 800f938:	4602      	mov	r2, r0
 800f93a:	2300      	movs	r3, #0
 800f93c:	f360 0307 	bfi	r3, r0, #0, #8
 800f940:	f362 230f 	bfi	r3, r2, #8, #8
 800f944:	f36c 4317 	bfi	r3, ip, #16, #8
 800f948:	f361 631f 	bfi	r3, r1, #24, #8
 800f94c:	b2da      	uxtb	r2, r3
 800f94e:	2000      	movs	r0, #0
 800f950:	f362 0007 	bfi	r0, r2, #0, #8
 800f954:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800f958:	f362 200f 	bfi	r0, r2, #8, #8
 800f95c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800f960:	f362 4017 	bfi	r0, r2, #16, #8
 800f964:	0e1b      	lsrs	r3, r3, #24
 800f966:	f363 601f 	bfi	r0, r3, #24, #8
 800f96a:	b002      	add	sp, #8
 800f96c:	4770      	bx	lr
 800f96e:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800f972:	f04f 0c02 	mov.w	ip, #2
 800f976:	e7e0      	b.n	800f93a <uxr_stream_id_from_raw+0x16>

0800f978 <uxr_init_stream_storage>:
 800f978:	2300      	movs	r3, #0
 800f97a:	7403      	strb	r3, [r0, #16]
 800f97c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800f980:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800f984:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800f988:	4770      	bx	lr
 800f98a:	bf00      	nop

0800f98c <uxr_reset_stream_storage>:
 800f98c:	b570      	push	{r4, r5, r6, lr}
 800f98e:	7c03      	ldrb	r3, [r0, #16]
 800f990:	4604      	mov	r4, r0
 800f992:	b153      	cbz	r3, 800f9aa <uxr_reset_stream_storage+0x1e>
 800f994:	4606      	mov	r6, r0
 800f996:	2500      	movs	r5, #0
 800f998:	4630      	mov	r0, r6
 800f99a:	f005 fdc9 	bl	8015530 <uxr_reset_output_best_effort_stream>
 800f99e:	7c23      	ldrb	r3, [r4, #16]
 800f9a0:	3501      	adds	r5, #1
 800f9a2:	42ab      	cmp	r3, r5
 800f9a4:	f106 0610 	add.w	r6, r6, #16
 800f9a8:	d8f6      	bhi.n	800f998 <uxr_reset_stream_storage+0xc>
 800f9aa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f9ae:	b163      	cbz	r3, 800f9ca <uxr_reset_stream_storage+0x3e>
 800f9b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f9b4:	2500      	movs	r5, #0
 800f9b6:	4630      	mov	r0, r6
 800f9b8:	f005 fbbc 	bl	8015134 <uxr_reset_input_best_effort_stream>
 800f9bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f9c0:	3501      	adds	r5, #1
 800f9c2:	42ab      	cmp	r3, r5
 800f9c4:	f106 0602 	add.w	r6, r6, #2
 800f9c8:	d8f5      	bhi.n	800f9b6 <uxr_reset_stream_storage+0x2a>
 800f9ca:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f9ce:	b163      	cbz	r3, 800f9ea <uxr_reset_stream_storage+0x5e>
 800f9d0:	f104 0618 	add.w	r6, r4, #24
 800f9d4:	2500      	movs	r5, #0
 800f9d6:	4630      	mov	r0, r6
 800f9d8:	f005 fe56 	bl	8015688 <uxr_reset_output_reliable_stream>
 800f9dc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f9e0:	3501      	adds	r5, #1
 800f9e2:	42ab      	cmp	r3, r5
 800f9e4:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800f9e8:	d8f5      	bhi.n	800f9d6 <uxr_reset_stream_storage+0x4a>
 800f9ea:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800f9ee:	b163      	cbz	r3, 800fa0a <uxr_reset_stream_storage+0x7e>
 800f9f0:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800f9f4:	2500      	movs	r5, #0
 800f9f6:	4630      	mov	r0, r6
 800f9f8:	f005 fc10 	bl	801521c <uxr_reset_input_reliable_stream>
 800f9fc:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800fa00:	3501      	adds	r5, #1
 800fa02:	42ab      	cmp	r3, r5
 800fa04:	f106 0618 	add.w	r6, r6, #24
 800fa08:	d8f5      	bhi.n	800f9f6 <uxr_reset_stream_storage+0x6a>
 800fa0a:	bd70      	pop	{r4, r5, r6, pc}

0800fa0c <uxr_add_output_best_effort_buffer>:
 800fa0c:	b510      	push	{r4, lr}
 800fa0e:	7c04      	ldrb	r4, [r0, #16]
 800fa10:	f104 0c01 	add.w	ip, r4, #1
 800fa14:	b082      	sub	sp, #8
 800fa16:	f880 c010 	strb.w	ip, [r0, #16]
 800fa1a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800fa1e:	f005 fd7d 	bl	801551c <uxr_init_output_best_effort_stream>
 800fa22:	2201      	movs	r2, #1
 800fa24:	4611      	mov	r1, r2
 800fa26:	4620      	mov	r0, r4
 800fa28:	b002      	add	sp, #8
 800fa2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa2e:	f7ff bf4f 	b.w	800f8d0 <uxr_stream_id>
 800fa32:	bf00      	nop

0800fa34 <uxr_add_output_reliable_buffer>:
 800fa34:	b510      	push	{r4, lr}
 800fa36:	b084      	sub	sp, #16
 800fa38:	4684      	mov	ip, r0
 800fa3a:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800fa3e:	9000      	str	r0, [sp, #0]
 800fa40:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 800fa44:	2028      	movs	r0, #40	; 0x28
 800fa46:	fb00 c004 	mla	r0, r0, r4, ip
 800fa4a:	f104 0e01 	add.w	lr, r4, #1
 800fa4e:	3018      	adds	r0, #24
 800fa50:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 800fa54:	f005 fde0 	bl	8015618 <uxr_init_output_reliable_stream>
 800fa58:	2201      	movs	r2, #1
 800fa5a:	2102      	movs	r1, #2
 800fa5c:	4620      	mov	r0, r4
 800fa5e:	b004      	add	sp, #16
 800fa60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa64:	f7ff bf34 	b.w	800f8d0 <uxr_stream_id>

0800fa68 <uxr_add_input_best_effort_buffer>:
 800fa68:	b510      	push	{r4, lr}
 800fa6a:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800fa6e:	4603      	mov	r3, r0
 800fa70:	1c62      	adds	r2, r4, #1
 800fa72:	f104 0021 	add.w	r0, r4, #33	; 0x21
 800fa76:	b082      	sub	sp, #8
 800fa78:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800fa7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fa80:	f005 fb54 	bl	801512c <uxr_init_input_best_effort_stream>
 800fa84:	2200      	movs	r2, #0
 800fa86:	2101      	movs	r1, #1
 800fa88:	4620      	mov	r0, r4
 800fa8a:	b002      	add	sp, #8
 800fa8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa90:	f7ff bf1e 	b.w	800f8d0 <uxr_stream_id>

0800fa94 <uxr_add_input_reliable_buffer>:
 800fa94:	b510      	push	{r4, lr}
 800fa96:	b084      	sub	sp, #16
 800fa98:	4684      	mov	ip, r0
 800fa9a:	9806      	ldr	r0, [sp, #24]
 800fa9c:	9000      	str	r0, [sp, #0]
 800fa9e:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 800faa2:	2018      	movs	r0, #24
 800faa4:	fb00 c004 	mla	r0, r0, r4, ip
 800faa8:	f104 0e01 	add.w	lr, r4, #1
 800faac:	3048      	adds	r0, #72	; 0x48
 800faae:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 800fab2:	f005 fb87 	bl	80151c4 <uxr_init_input_reliable_stream>
 800fab6:	2200      	movs	r2, #0
 800fab8:	2102      	movs	r1, #2
 800faba:	4620      	mov	r0, r4
 800fabc:	b004      	add	sp, #16
 800fabe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fac2:	f7ff bf05 	b.w	800f8d0 <uxr_stream_id>
 800fac6:	bf00      	nop

0800fac8 <uxr_get_output_best_effort_stream>:
 800fac8:	7c03      	ldrb	r3, [r0, #16]
 800faca:	428b      	cmp	r3, r1
 800facc:	bf8c      	ite	hi
 800face:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800fad2:	2000      	movls	r0, #0
 800fad4:	4770      	bx	lr
 800fad6:	bf00      	nop

0800fad8 <uxr_get_output_reliable_stream>:
 800fad8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800fadc:	428b      	cmp	r3, r1
 800fade:	bf83      	ittte	hi
 800fae0:	2328      	movhi	r3, #40	; 0x28
 800fae2:	fb03 0001 	mlahi	r0, r3, r1, r0
 800fae6:	3018      	addhi	r0, #24
 800fae8:	2000      	movls	r0, #0
 800faea:	4770      	bx	lr

0800faec <uxr_get_input_best_effort_stream>:
 800faec:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800faf0:	428b      	cmp	r3, r1
 800faf2:	bf86      	itte	hi
 800faf4:	3121      	addhi	r1, #33	; 0x21
 800faf6:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800fafa:	2000      	movls	r0, #0
 800fafc:	4770      	bx	lr
 800fafe:	bf00      	nop

0800fb00 <uxr_get_input_reliable_stream>:
 800fb00:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800fb04:	428b      	cmp	r3, r1
 800fb06:	bf83      	ittte	hi
 800fb08:	2318      	movhi	r3, #24
 800fb0a:	fb03 0001 	mlahi	r0, r3, r1, r0
 800fb0e:	3048      	addhi	r0, #72	; 0x48
 800fb10:	2000      	movls	r0, #0
 800fb12:	4770      	bx	lr

0800fb14 <uxr_output_streams_confirmed>:
 800fb14:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800fb18:	b183      	cbz	r3, 800fb3c <uxr_output_streams_confirmed+0x28>
 800fb1a:	b570      	push	{r4, r5, r6, lr}
 800fb1c:	4606      	mov	r6, r0
 800fb1e:	f100 0518 	add.w	r5, r0, #24
 800fb22:	2400      	movs	r4, #0
 800fb24:	e001      	b.n	800fb2a <uxr_output_streams_confirmed+0x16>
 800fb26:	3528      	adds	r5, #40	; 0x28
 800fb28:	b138      	cbz	r0, 800fb3a <uxr_output_streams_confirmed+0x26>
 800fb2a:	4628      	mov	r0, r5
 800fb2c:	f006 f81c 	bl	8015b68 <uxr_is_output_up_to_date>
 800fb30:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800fb34:	3401      	adds	r4, #1
 800fb36:	42a3      	cmp	r3, r4
 800fb38:	d8f5      	bhi.n	800fb26 <uxr_output_streams_confirmed+0x12>
 800fb3a:	bd70      	pop	{r4, r5, r6, pc}
 800fb3c:	2001      	movs	r0, #1
 800fb3e:	4770      	bx	lr

0800fb40 <uxr_buffer_submessage_header>:
 800fb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb42:	4604      	mov	r4, r0
 800fb44:	460e      	mov	r6, r1
 800fb46:	2104      	movs	r1, #4
 800fb48:	4615      	mov	r5, r2
 800fb4a:	461f      	mov	r7, r3
 800fb4c:	f7fe f9f2 	bl	800df34 <ucdr_align_to>
 800fb50:	2301      	movs	r3, #1
 800fb52:	ea47 0203 	orr.w	r2, r7, r3
 800fb56:	4631      	mov	r1, r6
 800fb58:	7523      	strb	r3, [r4, #20]
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	462b      	mov	r3, r5
 800fb5e:	f000 fa27 	bl	800ffb0 <uxr_serialize_submessage_header>
 800fb62:	4620      	mov	r0, r4
 800fb64:	f7fe f9fc 	bl	800df60 <ucdr_buffer_remaining>
 800fb68:	42a8      	cmp	r0, r5
 800fb6a:	bf34      	ite	cc
 800fb6c:	2000      	movcc	r0, #0
 800fb6e:	2001      	movcs	r0, #1
 800fb70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb72:	bf00      	nop

0800fb74 <uxr_read_submessage_header>:
 800fb74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb78:	4604      	mov	r4, r0
 800fb7a:	460d      	mov	r5, r1
 800fb7c:	2104      	movs	r1, #4
 800fb7e:	4616      	mov	r6, r2
 800fb80:	4698      	mov	r8, r3
 800fb82:	f7fe f9d7 	bl	800df34 <ucdr_align_to>
 800fb86:	4620      	mov	r0, r4
 800fb88:	f7fe f9ea 	bl	800df60 <ucdr_buffer_remaining>
 800fb8c:	2803      	cmp	r0, #3
 800fb8e:	bf8c      	ite	hi
 800fb90:	2701      	movhi	r7, #1
 800fb92:	2700      	movls	r7, #0
 800fb94:	d802      	bhi.n	800fb9c <uxr_read_submessage_header+0x28>
 800fb96:	4638      	mov	r0, r7
 800fb98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb9c:	4633      	mov	r3, r6
 800fb9e:	4642      	mov	r2, r8
 800fba0:	4620      	mov	r0, r4
 800fba2:	4629      	mov	r1, r5
 800fba4:	f000 fa18 	bl	800ffd8 <uxr_deserialize_submessage_header>
 800fba8:	f898 3000 	ldrb.w	r3, [r8]
 800fbac:	f003 0201 	and.w	r2, r3, #1
 800fbb0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800fbb4:	f888 3000 	strb.w	r3, [r8]
 800fbb8:	7522      	strb	r2, [r4, #20]
 800fbba:	4638      	mov	r0, r7
 800fbbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fbc0 <uxr_submessage_padding>:
 800fbc0:	f010 0003 	ands.w	r0, r0, #3
 800fbc4:	bf18      	it	ne
 800fbc6:	f1c0 0004 	rsbne	r0, r0, #4
 800fbca:	4770      	bx	lr

0800fbcc <uxr_millis>:
 800fbcc:	b510      	push	{r4, lr}
 800fbce:	b084      	sub	sp, #16
 800fbd0:	4669      	mov	r1, sp
 800fbd2:	2001      	movs	r0, #1
 800fbd4:	f7f1 fe18 	bl	8001808 <clock_gettime>
 800fbd8:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800fbdc:	4906      	ldr	r1, [pc, #24]	; (800fbf8 <uxr_millis+0x2c>)
 800fbde:	fba0 0301 	umull	r0, r3, r0, r1
 800fbe2:	1900      	adds	r0, r0, r4
 800fbe4:	fb01 3102 	mla	r1, r1, r2, r3
 800fbe8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800fbec:	4a03      	ldr	r2, [pc, #12]	; (800fbfc <uxr_millis+0x30>)
 800fbee:	2300      	movs	r3, #0
 800fbf0:	f7f0 fb76 	bl	80002e0 <__aeabi_ldivmod>
 800fbf4:	b004      	add	sp, #16
 800fbf6:	bd10      	pop	{r4, pc}
 800fbf8:	3b9aca00 	.word	0x3b9aca00
 800fbfc:	000f4240 	.word	0x000f4240

0800fc00 <uxr_nanos>:
 800fc00:	b510      	push	{r4, lr}
 800fc02:	b084      	sub	sp, #16
 800fc04:	4669      	mov	r1, sp
 800fc06:	2001      	movs	r0, #1
 800fc08:	f7f1 fdfe 	bl	8001808 <clock_gettime>
 800fc0c:	4a06      	ldr	r2, [pc, #24]	; (800fc28 <uxr_nanos+0x28>)
 800fc0e:	9800      	ldr	r0, [sp, #0]
 800fc10:	9902      	ldr	r1, [sp, #8]
 800fc12:	9c01      	ldr	r4, [sp, #4]
 800fc14:	fba0 0302 	umull	r0, r3, r0, r2
 800fc18:	1840      	adds	r0, r0, r1
 800fc1a:	fb02 3304 	mla	r3, r2, r4, r3
 800fc1e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800fc22:	b004      	add	sp, #16
 800fc24:	bd10      	pop	{r4, pc}
 800fc26:	bf00      	nop
 800fc28:	3b9aca00 	.word	0x3b9aca00

0800fc2c <on_full_output_buffer_fragmented>:
 800fc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc30:	460c      	mov	r4, r1
 800fc32:	b08a      	sub	sp, #40	; 0x28
 800fc34:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800fc38:	4606      	mov	r6, r0
 800fc3a:	f104 0008 	add.w	r0, r4, #8
 800fc3e:	f7ff ff4b 	bl	800fad8 <uxr_get_output_reliable_stream>
 800fc42:	4605      	mov	r5, r0
 800fc44:	f005 ff9a 	bl	8015b7c <get_available_free_slots>
 800fc48:	b968      	cbnz	r0, 800fc66 <on_full_output_buffer_fragmented+0x3a>
 800fc4a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800fc4e:	4620      	mov	r0, r4
 800fc50:	4798      	blx	r3
 800fc52:	b918      	cbnz	r0, 800fc5c <on_full_output_buffer_fragmented+0x30>
 800fc54:	2001      	movs	r0, #1
 800fc56:	b00a      	add	sp, #40	; 0x28
 800fc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc5c:	4628      	mov	r0, r5
 800fc5e:	f005 ff8d 	bl	8015b7c <get_available_free_slots>
 800fc62:	2800      	cmp	r0, #0
 800fc64:	d0f6      	beq.n	800fc54 <on_full_output_buffer_fragmented+0x28>
 800fc66:	8929      	ldrh	r1, [r5, #8]
 800fc68:	89eb      	ldrh	r3, [r5, #14]
 800fc6a:	7b28      	ldrb	r0, [r5, #12]
 800fc6c:	686a      	ldr	r2, [r5, #4]
 800fc6e:	fbb2 f8f1 	udiv	r8, r2, r1
 800fc72:	fbb3 f2f1 	udiv	r2, r3, r1
 800fc76:	fb01 3112 	mls	r1, r1, r2, r3
 800fc7a:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 800fc7e:	b289      	uxth	r1, r1
 800fc80:	fb08 f101 	mul.w	r1, r8, r1
 800fc84:	30fc      	adds	r0, #252	; 0xfc
 800fc86:	f1a8 0804 	sub.w	r8, r8, #4
 800fc8a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800fc8e:	4440      	add	r0, r8
 800fc90:	b287      	uxth	r7, r0
 800fc92:	1bdb      	subs	r3, r3, r7
 800fc94:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800fc98:	682b      	ldr	r3, [r5, #0]
 800fc9a:	3104      	adds	r1, #4
 800fc9c:	4419      	add	r1, r3
 800fc9e:	4642      	mov	r2, r8
 800fca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fca4:	9300      	str	r3, [sp, #0]
 800fca6:	a802      	add	r0, sp, #8
 800fca8:	2300      	movs	r3, #0
 800fcaa:	f7fe f917 	bl	800dedc <ucdr_init_buffer_origin_offset>
 800fcae:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800fcb2:	f102 0308 	add.w	r3, r2, #8
 800fcb6:	4543      	cmp	r3, r8
 800fcb8:	d928      	bls.n	800fd0c <on_full_output_buffer_fragmented+0xe0>
 800fcba:	463a      	mov	r2, r7
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	210d      	movs	r1, #13
 800fcc0:	a802      	add	r0, sp, #8
 800fcc2:	f7ff ff3d 	bl	800fb40 <uxr_buffer_submessage_header>
 800fcc6:	8929      	ldrh	r1, [r5, #8]
 800fcc8:	89eb      	ldrh	r3, [r5, #14]
 800fcca:	fbb3 f2f1 	udiv	r2, r3, r1
 800fcce:	fb01 3312 	mls	r3, r1, r2, r3
 800fcd2:	b29b      	uxth	r3, r3
 800fcd4:	686a      	ldr	r2, [r5, #4]
 800fcd6:	fbb2 f2f1 	udiv	r2, r2, r1
 800fcda:	fb02 f303 	mul.w	r3, r2, r3
 800fcde:	682a      	ldr	r2, [r5, #0]
 800fce0:	f842 8003 	str.w	r8, [r2, r3]
 800fce4:	89e8      	ldrh	r0, [r5, #14]
 800fce6:	2101      	movs	r1, #1
 800fce8:	f005 ff68 	bl	8015bbc <uxr_seq_num_add>
 800fcec:	9904      	ldr	r1, [sp, #16]
 800fcee:	9a03      	ldr	r2, [sp, #12]
 800fcf0:	81e8      	strh	r0, [r5, #14]
 800fcf2:	1a52      	subs	r2, r2, r1
 800fcf4:	4630      	mov	r0, r6
 800fcf6:	f7fe f903 	bl	800df00 <ucdr_init_buffer>
 800fcfa:	4630      	mov	r0, r6
 800fcfc:	490f      	ldr	r1, [pc, #60]	; (800fd3c <on_full_output_buffer_fragmented+0x110>)
 800fcfe:	4622      	mov	r2, r4
 800fd00:	f7fe f8d2 	bl	800dea8 <ucdr_set_on_full_buffer_callback>
 800fd04:	2000      	movs	r0, #0
 800fd06:	b00a      	add	sp, #40	; 0x28
 800fd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd0c:	b292      	uxth	r2, r2
 800fd0e:	2302      	movs	r3, #2
 800fd10:	210d      	movs	r1, #13
 800fd12:	a802      	add	r0, sp, #8
 800fd14:	f7ff ff14 	bl	800fb40 <uxr_buffer_submessage_header>
 800fd18:	8928      	ldrh	r0, [r5, #8]
 800fd1a:	89eb      	ldrh	r3, [r5, #14]
 800fd1c:	fbb3 f1f0 	udiv	r1, r3, r0
 800fd20:	fb00 3311 	mls	r3, r0, r1, r3
 800fd24:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800fd28:	6869      	ldr	r1, [r5, #4]
 800fd2a:	fbb1 f1f0 	udiv	r1, r1, r0
 800fd2e:	b29b      	uxth	r3, r3
 800fd30:	fb01 f303 	mul.w	r3, r1, r3
 800fd34:	6829      	ldr	r1, [r5, #0]
 800fd36:	3208      	adds	r2, #8
 800fd38:	50ca      	str	r2, [r1, r3]
 800fd3a:	e7d3      	b.n	800fce4 <on_full_output_buffer_fragmented+0xb8>
 800fd3c:	0800fc2d 	.word	0x0800fc2d

0800fd40 <uxr_prepare_output_stream>:
 800fd40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd42:	b087      	sub	sp, #28
 800fd44:	2707      	movs	r7, #7
 800fd46:	9202      	str	r2, [sp, #8]
 800fd48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fd4a:	9103      	str	r1, [sp, #12]
 800fd4c:	2500      	movs	r5, #0
 800fd4e:	3204      	adds	r2, #4
 800fd50:	e9cd 7500 	strd	r7, r5, [sp]
 800fd54:	461c      	mov	r4, r3
 800fd56:	4606      	mov	r6, r0
 800fd58:	f7ff fc54 	bl	800f604 <uxr_prepare_stream_to_write_submessage>
 800fd5c:	f080 0201 	eor.w	r2, r0, #1
 800fd60:	b2d2      	uxtb	r2, r2
 800fd62:	75a2      	strb	r2, [r4, #22]
 800fd64:	b112      	cbz	r2, 800fd6c <uxr_prepare_output_stream+0x2c>
 800fd66:	4628      	mov	r0, r5
 800fd68:	b007      	add	sp, #28
 800fd6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd6c:	aa05      	add	r2, sp, #20
 800fd6e:	9902      	ldr	r1, [sp, #8]
 800fd70:	4630      	mov	r0, r6
 800fd72:	f7ff fd7d 	bl	800f870 <uxr_init_base_object_request>
 800fd76:	a905      	add	r1, sp, #20
 800fd78:	4605      	mov	r5, r0
 800fd7a:	4620      	mov	r0, r4
 800fd7c:	f001 f88c 	bl	8010e98 <uxr_serialize_WRITE_DATA_Payload_Data>
 800fd80:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800fd84:	69a6      	ldr	r6, [r4, #24]
 800fd86:	69e7      	ldr	r7, [r4, #28]
 800fd88:	1a52      	subs	r2, r2, r1
 800fd8a:	4620      	mov	r0, r4
 800fd8c:	f7fe f8b8 	bl	800df00 <ucdr_init_buffer>
 800fd90:	4620      	mov	r0, r4
 800fd92:	463a      	mov	r2, r7
 800fd94:	4631      	mov	r1, r6
 800fd96:	f7fe f887 	bl	800dea8 <ucdr_set_on_full_buffer_callback>
 800fd9a:	4628      	mov	r0, r5
 800fd9c:	b007      	add	sp, #28
 800fd9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fda0 <uxr_prepare_output_stream_fragmented>:
 800fda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fda4:	b091      	sub	sp, #68	; 0x44
 800fda6:	4605      	mov	r5, r0
 800fda8:	9105      	str	r1, [sp, #20]
 800fdaa:	3008      	adds	r0, #8
 800fdac:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800fdb0:	461e      	mov	r6, r3
 800fdb2:	9204      	str	r2, [sp, #16]
 800fdb4:	f7ff fe90 	bl	800fad8 <uxr_get_output_reliable_stream>
 800fdb8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800fdbc:	2b01      	cmp	r3, #1
 800fdbe:	f000 8091 	beq.w	800fee4 <uxr_prepare_output_stream_fragmented+0x144>
 800fdc2:	4604      	mov	r4, r0
 800fdc4:	2800      	cmp	r0, #0
 800fdc6:	f000 808d 	beq.w	800fee4 <uxr_prepare_output_stream_fragmented+0x144>
 800fdca:	f005 fed7 	bl	8015b7c <get_available_free_slots>
 800fdce:	2800      	cmp	r0, #0
 800fdd0:	f000 8083 	beq.w	800feda <uxr_prepare_output_stream_fragmented+0x13a>
 800fdd4:	8922      	ldrh	r2, [r4, #8]
 800fdd6:	89e7      	ldrh	r7, [r4, #14]
 800fdd8:	fbb7 f9f2 	udiv	r9, r7, r2
 800fddc:	fb02 7919 	mls	r9, r2, r9, r7
 800fde0:	fa1f f989 	uxth.w	r9, r9
 800fde4:	6863      	ldr	r3, [r4, #4]
 800fde6:	fbb3 f2f2 	udiv	r2, r3, r2
 800fdea:	6823      	ldr	r3, [r4, #0]
 800fdec:	9203      	str	r2, [sp, #12]
 800fdee:	fb02 f909 	mul.w	r9, r2, r9
 800fdf2:	f109 0904 	add.w	r9, r9, #4
 800fdf6:	4499      	add	r9, r3
 800fdf8:	7b23      	ldrb	r3, [r4, #12]
 800fdfa:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800fdfe:	4543      	cmp	r3, r8
 800fe00:	f1a2 0b04 	sub.w	fp, r2, #4
 800fe04:	d37a      	bcc.n	800fefc <uxr_prepare_output_stream_fragmented+0x15c>
 800fe06:	f1ab 0a04 	sub.w	sl, fp, #4
 800fe0a:	ebaa 0a03 	sub.w	sl, sl, r3
 800fe0e:	465a      	mov	r2, fp
 800fe10:	2300      	movs	r3, #0
 800fe12:	4649      	mov	r1, r9
 800fe14:	a808      	add	r0, sp, #32
 800fe16:	f8cd 8000 	str.w	r8, [sp]
 800fe1a:	f7fe f85f 	bl	800dedc <ucdr_init_buffer_origin_offset>
 800fe1e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800fe20:	fa1f fa8a 	uxth.w	sl, sl
 800fe24:	4652      	mov	r2, sl
 800fe26:	f103 0a08 	add.w	sl, r3, #8
 800fe2a:	45da      	cmp	sl, fp
 800fe2c:	bf34      	ite	cc
 800fe2e:	2302      	movcc	r3, #2
 800fe30:	2300      	movcs	r3, #0
 800fe32:	210d      	movs	r1, #13
 800fe34:	a808      	add	r0, sp, #32
 800fe36:	f7ff fe83 	bl	800fb40 <uxr_buffer_submessage_header>
 800fe3a:	8921      	ldrh	r1, [r4, #8]
 800fe3c:	fbb7 f2f1 	udiv	r2, r7, r1
 800fe40:	fb01 7212 	mls	r2, r1, r2, r7
 800fe44:	b292      	uxth	r2, r2
 800fe46:	6863      	ldr	r3, [r4, #4]
 800fe48:	fbb3 f3f1 	udiv	r3, r3, r1
 800fe4c:	fb02 f303 	mul.w	r3, r2, r3
 800fe50:	6822      	ldr	r2, [r4, #0]
 800fe52:	4638      	mov	r0, r7
 800fe54:	f842 b003 	str.w	fp, [r2, r3]
 800fe58:	2101      	movs	r1, #1
 800fe5a:	f005 feaf 	bl	8015bbc <uxr_seq_num_add>
 800fe5e:	9b03      	ldr	r3, [sp, #12]
 800fe60:	f108 0104 	add.w	r1, r8, #4
 800fe64:	f1a3 0208 	sub.w	r2, r3, #8
 800fe68:	eba2 0208 	sub.w	r2, r2, r8
 800fe6c:	4449      	add	r1, r9
 800fe6e:	4607      	mov	r7, r0
 800fe70:	4630      	mov	r0, r6
 800fe72:	f7fe f845 	bl	800df00 <ucdr_init_buffer>
 800fe76:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800fe78:	81e7      	strh	r7, [r4, #14]
 800fe7a:	1d1a      	adds	r2, r3, #4
 800fe7c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800fe80:	bf28      	it	cs
 800fe82:	2200      	movcs	r2, #0
 800fe84:	2300      	movs	r3, #0
 800fe86:	b292      	uxth	r2, r2
 800fe88:	2107      	movs	r1, #7
 800fe8a:	4630      	mov	r0, r6
 800fe8c:	f7ff fe58 	bl	800fb40 <uxr_buffer_submessage_header>
 800fe90:	9904      	ldr	r1, [sp, #16]
 800fe92:	aa07      	add	r2, sp, #28
 800fe94:	4628      	mov	r0, r5
 800fe96:	f7ff fceb 	bl	800f870 <uxr_init_base_object_request>
 800fe9a:	4604      	mov	r4, r0
 800fe9c:	b318      	cbz	r0, 800fee6 <uxr_prepare_output_stream_fragmented+0x146>
 800fe9e:	a907      	add	r1, sp, #28
 800fea0:	4630      	mov	r0, r6
 800fea2:	f000 fff9 	bl	8010e98 <uxr_serialize_WRITE_DATA_Payload_Data>
 800fea6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800feaa:	4630      	mov	r0, r6
 800feac:	1a52      	subs	r2, r2, r1
 800feae:	f7fe f827 	bl	800df00 <ucdr_init_buffer>
 800feb2:	9b05      	ldr	r3, [sp, #20]
 800feb4:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800feb8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800feba:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 800febe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800fec0:	491b      	ldr	r1, [pc, #108]	; (800ff30 <uxr_prepare_output_stream_fragmented+0x190>)
 800fec2:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
 800fec6:	4630      	mov	r0, r6
 800fec8:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 800fecc:	462a      	mov	r2, r5
 800fece:	f7fd ffeb 	bl	800dea8 <ucdr_set_on_full_buffer_callback>
 800fed2:	4620      	mov	r0, r4
 800fed4:	b011      	add	sp, #68	; 0x44
 800fed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feda:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fedc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fede:	4628      	mov	r0, r5
 800fee0:	4798      	blx	r3
 800fee2:	b920      	cbnz	r0, 800feee <uxr_prepare_output_stream_fragmented+0x14e>
 800fee4:	2400      	movs	r4, #0
 800fee6:	4620      	mov	r0, r4
 800fee8:	b011      	add	sp, #68	; 0x44
 800feea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feee:	4620      	mov	r0, r4
 800fef0:	f005 fe44 	bl	8015b7c <get_available_free_slots>
 800fef4:	2800      	cmp	r0, #0
 800fef6:	f47f af6d 	bne.w	800fdd4 <uxr_prepare_output_stream_fragmented+0x34>
 800fefa:	e7f3      	b.n	800fee4 <uxr_prepare_output_stream_fragmented+0x144>
 800fefc:	4638      	mov	r0, r7
 800fefe:	2101      	movs	r1, #1
 800ff00:	f005 fe5c 	bl	8015bbc <uxr_seq_num_add>
 800ff04:	8921      	ldrh	r1, [r4, #8]
 800ff06:	fbb0 f2f1 	udiv	r2, r0, r1
 800ff0a:	fb01 0912 	mls	r9, r1, r2, r0
 800ff0e:	fa1f f289 	uxth.w	r2, r9
 800ff12:	6863      	ldr	r3, [r4, #4]
 800ff14:	fbb3 f9f1 	udiv	r9, r3, r1
 800ff18:	6823      	ldr	r3, [r4, #0]
 800ff1a:	fb02 f909 	mul.w	r9, r2, r9
 800ff1e:	f109 0904 	add.w	r9, r9, #4
 800ff22:	4499      	add	r9, r3
 800ff24:	4607      	mov	r7, r0
 800ff26:	7b23      	ldrb	r3, [r4, #12]
 800ff28:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800ff2c:	e76b      	b.n	800fe06 <uxr_prepare_output_stream_fragmented+0x66>
 800ff2e:	bf00      	nop
 800ff30:	0800fc2d 	.word	0x0800fc2d

0800ff34 <uxr_serialize_message_header>:
 800ff34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff36:	b083      	sub	sp, #12
 800ff38:	4616      	mov	r6, r2
 800ff3a:	4604      	mov	r4, r0
 800ff3c:	9301      	str	r3, [sp, #4]
 800ff3e:	460d      	mov	r5, r1
 800ff40:	9f08      	ldr	r7, [sp, #32]
 800ff42:	f7fc fbcb 	bl	800c6dc <ucdr_serialize_uint8_t>
 800ff46:	4631      	mov	r1, r6
 800ff48:	4620      	mov	r0, r4
 800ff4a:	f7fc fbc7 	bl	800c6dc <ucdr_serialize_uint8_t>
 800ff4e:	9a01      	ldr	r2, [sp, #4]
 800ff50:	2101      	movs	r1, #1
 800ff52:	4620      	mov	r0, r4
 800ff54:	f7fc fc6e 	bl	800c834 <ucdr_serialize_endian_uint16_t>
 800ff58:	062b      	lsls	r3, r5, #24
 800ff5a:	d501      	bpl.n	800ff60 <uxr_serialize_message_header+0x2c>
 800ff5c:	b003      	add	sp, #12
 800ff5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff60:	2204      	movs	r2, #4
 800ff62:	4639      	mov	r1, r7
 800ff64:	4620      	mov	r0, r4
 800ff66:	b003      	add	sp, #12
 800ff68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ff6c:	f7fc b96c 	b.w	800c248 <ucdr_serialize_array_uint8_t>

0800ff70 <uxr_deserialize_message_header>:
 800ff70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff72:	b083      	sub	sp, #12
 800ff74:	4616      	mov	r6, r2
 800ff76:	4604      	mov	r4, r0
 800ff78:	9301      	str	r3, [sp, #4]
 800ff7a:	460d      	mov	r5, r1
 800ff7c:	9f08      	ldr	r7, [sp, #32]
 800ff7e:	f7fc fbc3 	bl	800c708 <ucdr_deserialize_uint8_t>
 800ff82:	4631      	mov	r1, r6
 800ff84:	4620      	mov	r0, r4
 800ff86:	f7fc fbbf 	bl	800c708 <ucdr_deserialize_uint8_t>
 800ff8a:	9a01      	ldr	r2, [sp, #4]
 800ff8c:	2101      	movs	r1, #1
 800ff8e:	4620      	mov	r0, r4
 800ff90:	f7fc fd44 	bl	800ca1c <ucdr_deserialize_endian_uint16_t>
 800ff94:	f995 3000 	ldrsb.w	r3, [r5]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	da01      	bge.n	800ffa0 <uxr_deserialize_message_header+0x30>
 800ff9c:	b003      	add	sp, #12
 800ff9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffa0:	2204      	movs	r2, #4
 800ffa2:	4639      	mov	r1, r7
 800ffa4:	4620      	mov	r0, r4
 800ffa6:	b003      	add	sp, #12
 800ffa8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ffac:	f7fc b9b0 	b.w	800c310 <ucdr_deserialize_array_uint8_t>

0800ffb0 <uxr_serialize_submessage_header>:
 800ffb0:	b530      	push	{r4, r5, lr}
 800ffb2:	b083      	sub	sp, #12
 800ffb4:	4615      	mov	r5, r2
 800ffb6:	4604      	mov	r4, r0
 800ffb8:	9301      	str	r3, [sp, #4]
 800ffba:	f7fc fb8f 	bl	800c6dc <ucdr_serialize_uint8_t>
 800ffbe:	4629      	mov	r1, r5
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	f7fc fb8b 	bl	800c6dc <ucdr_serialize_uint8_t>
 800ffc6:	9a01      	ldr	r2, [sp, #4]
 800ffc8:	2101      	movs	r1, #1
 800ffca:	4620      	mov	r0, r4
 800ffcc:	b003      	add	sp, #12
 800ffce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ffd2:	f7fc bc2f 	b.w	800c834 <ucdr_serialize_endian_uint16_t>
 800ffd6:	bf00      	nop

0800ffd8 <uxr_deserialize_submessage_header>:
 800ffd8:	b530      	push	{r4, r5, lr}
 800ffda:	b083      	sub	sp, #12
 800ffdc:	4615      	mov	r5, r2
 800ffde:	4604      	mov	r4, r0
 800ffe0:	9301      	str	r3, [sp, #4]
 800ffe2:	f7fc fb91 	bl	800c708 <ucdr_deserialize_uint8_t>
 800ffe6:	4629      	mov	r1, r5
 800ffe8:	4620      	mov	r0, r4
 800ffea:	f7fc fb8d 	bl	800c708 <ucdr_deserialize_uint8_t>
 800ffee:	9a01      	ldr	r2, [sp, #4]
 800fff0:	2101      	movs	r1, #1
 800fff2:	4620      	mov	r0, r4
 800fff4:	b003      	add	sp, #12
 800fff6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fffa:	f7fc bd0f 	b.w	800ca1c <ucdr_deserialize_endian_uint16_t>
 800fffe:	bf00      	nop

08010000 <uxr_serialize_CLIENT_Representation>:
 8010000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010004:	2204      	movs	r2, #4
 8010006:	460e      	mov	r6, r1
 8010008:	4605      	mov	r5, r0
 801000a:	f7fc f91d 	bl	800c248 <ucdr_serialize_array_uint8_t>
 801000e:	2202      	movs	r2, #2
 8010010:	4607      	mov	r7, r0
 8010012:	1d31      	adds	r1, r6, #4
 8010014:	4628      	mov	r0, r5
 8010016:	f7fc f917 	bl	800c248 <ucdr_serialize_array_uint8_t>
 801001a:	4038      	ands	r0, r7
 801001c:	2202      	movs	r2, #2
 801001e:	1db1      	adds	r1, r6, #6
 8010020:	b2c7      	uxtb	r7, r0
 8010022:	4628      	mov	r0, r5
 8010024:	f7fc f910 	bl	800c248 <ucdr_serialize_array_uint8_t>
 8010028:	2204      	movs	r2, #4
 801002a:	4007      	ands	r7, r0
 801002c:	f106 0108 	add.w	r1, r6, #8
 8010030:	4628      	mov	r0, r5
 8010032:	f7fc f909 	bl	800c248 <ucdr_serialize_array_uint8_t>
 8010036:	7b31      	ldrb	r1, [r6, #12]
 8010038:	4007      	ands	r7, r0
 801003a:	4628      	mov	r0, r5
 801003c:	f7fc fb4e 	bl	800c6dc <ucdr_serialize_uint8_t>
 8010040:	7b71      	ldrb	r1, [r6, #13]
 8010042:	4007      	ands	r7, r0
 8010044:	4628      	mov	r0, r5
 8010046:	f7fc fb1b 	bl	800c680 <ucdr_serialize_bool>
 801004a:	7b73      	ldrb	r3, [r6, #13]
 801004c:	ea07 0800 	and.w	r8, r7, r0
 8010050:	b93b      	cbnz	r3, 8010062 <uxr_serialize_CLIENT_Representation+0x62>
 8010052:	8bb1      	ldrh	r1, [r6, #28]
 8010054:	4628      	mov	r0, r5
 8010056:	f7fc fb6d 	bl	800c734 <ucdr_serialize_uint16_t>
 801005a:	ea08 0000 	and.w	r0, r8, r0
 801005e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010062:	6931      	ldr	r1, [r6, #16]
 8010064:	4628      	mov	r0, r5
 8010066:	f7fc fd4f 	bl	800cb08 <ucdr_serialize_uint32_t>
 801006a:	6933      	ldr	r3, [r6, #16]
 801006c:	b1e3      	cbz	r3, 80100a8 <uxr_serialize_CLIENT_Representation+0xa8>
 801006e:	b1c0      	cbz	r0, 80100a2 <uxr_serialize_CLIENT_Representation+0xa2>
 8010070:	4637      	mov	r7, r6
 8010072:	f04f 0900 	mov.w	r9, #0
 8010076:	e001      	b.n	801007c <uxr_serialize_CLIENT_Representation+0x7c>
 8010078:	3708      	adds	r7, #8
 801007a:	b194      	cbz	r4, 80100a2 <uxr_serialize_CLIENT_Representation+0xa2>
 801007c:	6979      	ldr	r1, [r7, #20]
 801007e:	4628      	mov	r0, r5
 8010080:	f004 ff7a 	bl	8014f78 <ucdr_serialize_string>
 8010084:	69b9      	ldr	r1, [r7, #24]
 8010086:	4604      	mov	r4, r0
 8010088:	4628      	mov	r0, r5
 801008a:	f004 ff75 	bl	8014f78 <ucdr_serialize_string>
 801008e:	6933      	ldr	r3, [r6, #16]
 8010090:	f109 0901 	add.w	r9, r9, #1
 8010094:	4004      	ands	r4, r0
 8010096:	4599      	cmp	r9, r3
 8010098:	b2e4      	uxtb	r4, r4
 801009a:	d3ed      	bcc.n	8010078 <uxr_serialize_CLIENT_Representation+0x78>
 801009c:	ea08 0804 	and.w	r8, r8, r4
 80100a0:	e7d7      	b.n	8010052 <uxr_serialize_CLIENT_Representation+0x52>
 80100a2:	f04f 0800 	mov.w	r8, #0
 80100a6:	e7d4      	b.n	8010052 <uxr_serialize_CLIENT_Representation+0x52>
 80100a8:	ea08 0800 	and.w	r8, r8, r0
 80100ac:	e7d1      	b.n	8010052 <uxr_serialize_CLIENT_Representation+0x52>
 80100ae:	bf00      	nop

080100b0 <uxr_deserialize_CLIENT_Representation>:
 80100b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100b4:	2204      	movs	r2, #4
 80100b6:	460c      	mov	r4, r1
 80100b8:	4605      	mov	r5, r0
 80100ba:	f7fc f929 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 80100be:	2202      	movs	r2, #2
 80100c0:	4607      	mov	r7, r0
 80100c2:	1d21      	adds	r1, r4, #4
 80100c4:	4628      	mov	r0, r5
 80100c6:	f7fc f923 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 80100ca:	4038      	ands	r0, r7
 80100cc:	2202      	movs	r2, #2
 80100ce:	1da1      	adds	r1, r4, #6
 80100d0:	b2c6      	uxtb	r6, r0
 80100d2:	4628      	mov	r0, r5
 80100d4:	f7fc f91c 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 80100d8:	2204      	movs	r2, #4
 80100da:	4006      	ands	r6, r0
 80100dc:	f104 0108 	add.w	r1, r4, #8
 80100e0:	4628      	mov	r0, r5
 80100e2:	f7fc f915 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 80100e6:	f104 010c 	add.w	r1, r4, #12
 80100ea:	4006      	ands	r6, r0
 80100ec:	4628      	mov	r0, r5
 80100ee:	f7fc fb0b 	bl	800c708 <ucdr_deserialize_uint8_t>
 80100f2:	f104 010d 	add.w	r1, r4, #13
 80100f6:	ea06 0700 	and.w	r7, r6, r0
 80100fa:	4628      	mov	r0, r5
 80100fc:	f7fc fad6 	bl	800c6ac <ucdr_deserialize_bool>
 8010100:	7b63      	ldrb	r3, [r4, #13]
 8010102:	4007      	ands	r7, r0
 8010104:	b93b      	cbnz	r3, 8010116 <uxr_deserialize_CLIENT_Representation+0x66>
 8010106:	f104 011c 	add.w	r1, r4, #28
 801010a:	4628      	mov	r0, r5
 801010c:	f7fc fc12 	bl	800c934 <ucdr_deserialize_uint16_t>
 8010110:	4038      	ands	r0, r7
 8010112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010116:	f104 0110 	add.w	r1, r4, #16
 801011a:	4628      	mov	r0, r5
 801011c:	f7fc fe24 	bl	800cd68 <ucdr_deserialize_uint32_t>
 8010120:	6923      	ldr	r3, [r4, #16]
 8010122:	2b01      	cmp	r3, #1
 8010124:	d903      	bls.n	801012e <uxr_deserialize_CLIENT_Representation+0x7e>
 8010126:	2301      	movs	r3, #1
 8010128:	75ab      	strb	r3, [r5, #22]
 801012a:	2700      	movs	r7, #0
 801012c:	e7eb      	b.n	8010106 <uxr_deserialize_CLIENT_Representation+0x56>
 801012e:	b30b      	cbz	r3, 8010174 <uxr_deserialize_CLIENT_Representation+0xc4>
 8010130:	2800      	cmp	r0, #0
 8010132:	d0fa      	beq.n	801012a <uxr_deserialize_CLIENT_Representation+0x7a>
 8010134:	46a0      	mov	r8, r4
 8010136:	f04f 0900 	mov.w	r9, #0
 801013a:	e001      	b.n	8010140 <uxr_deserialize_CLIENT_Representation+0x90>
 801013c:	2e00      	cmp	r6, #0
 801013e:	d0f4      	beq.n	801012a <uxr_deserialize_CLIENT_Representation+0x7a>
 8010140:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8010144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010148:	4628      	mov	r0, r5
 801014a:	f004 ff25 	bl	8014f98 <ucdr_deserialize_string>
 801014e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010152:	4606      	mov	r6, r0
 8010154:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8010158:	4628      	mov	r0, r5
 801015a:	f004 ff1d 	bl	8014f98 <ucdr_deserialize_string>
 801015e:	6923      	ldr	r3, [r4, #16]
 8010160:	f109 0901 	add.w	r9, r9, #1
 8010164:	4006      	ands	r6, r0
 8010166:	4599      	cmp	r9, r3
 8010168:	f108 0808 	add.w	r8, r8, #8
 801016c:	b2f6      	uxtb	r6, r6
 801016e:	d3e5      	bcc.n	801013c <uxr_deserialize_CLIENT_Representation+0x8c>
 8010170:	4037      	ands	r7, r6
 8010172:	e7c8      	b.n	8010106 <uxr_deserialize_CLIENT_Representation+0x56>
 8010174:	4007      	ands	r7, r0
 8010176:	e7c6      	b.n	8010106 <uxr_deserialize_CLIENT_Representation+0x56>

08010178 <uxr_serialize_AGENT_Representation>:
 8010178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801017c:	2204      	movs	r2, #4
 801017e:	460f      	mov	r7, r1
 8010180:	4605      	mov	r5, r0
 8010182:	f7fc f861 	bl	800c248 <ucdr_serialize_array_uint8_t>
 8010186:	2202      	movs	r2, #2
 8010188:	4604      	mov	r4, r0
 801018a:	1d39      	adds	r1, r7, #4
 801018c:	4628      	mov	r0, r5
 801018e:	f7fc f85b 	bl	800c248 <ucdr_serialize_array_uint8_t>
 8010192:	4020      	ands	r0, r4
 8010194:	2202      	movs	r2, #2
 8010196:	1db9      	adds	r1, r7, #6
 8010198:	b2c4      	uxtb	r4, r0
 801019a:	4628      	mov	r0, r5
 801019c:	f7fc f854 	bl	800c248 <ucdr_serialize_array_uint8_t>
 80101a0:	7a39      	ldrb	r1, [r7, #8]
 80101a2:	4004      	ands	r4, r0
 80101a4:	4628      	mov	r0, r5
 80101a6:	f7fc fa6b 	bl	800c680 <ucdr_serialize_bool>
 80101aa:	7a3b      	ldrb	r3, [r7, #8]
 80101ac:	ea00 0804 	and.w	r8, r0, r4
 80101b0:	b913      	cbnz	r3, 80101b8 <uxr_serialize_AGENT_Representation+0x40>
 80101b2:	4640      	mov	r0, r8
 80101b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101b8:	68f9      	ldr	r1, [r7, #12]
 80101ba:	4628      	mov	r0, r5
 80101bc:	f7fc fca4 	bl	800cb08 <ucdr_serialize_uint32_t>
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	b303      	cbz	r3, 8010206 <uxr_serialize_AGENT_Representation+0x8e>
 80101c4:	b1d0      	cbz	r0, 80101fc <uxr_serialize_AGENT_Representation+0x84>
 80101c6:	463e      	mov	r6, r7
 80101c8:	f04f 0900 	mov.w	r9, #0
 80101cc:	e001      	b.n	80101d2 <uxr_serialize_AGENT_Representation+0x5a>
 80101ce:	3608      	adds	r6, #8
 80101d0:	b1a4      	cbz	r4, 80101fc <uxr_serialize_AGENT_Representation+0x84>
 80101d2:	6931      	ldr	r1, [r6, #16]
 80101d4:	4628      	mov	r0, r5
 80101d6:	f004 fecf 	bl	8014f78 <ucdr_serialize_string>
 80101da:	6971      	ldr	r1, [r6, #20]
 80101dc:	4604      	mov	r4, r0
 80101de:	4628      	mov	r0, r5
 80101e0:	f004 feca 	bl	8014f78 <ucdr_serialize_string>
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	f109 0901 	add.w	r9, r9, #1
 80101ea:	4004      	ands	r4, r0
 80101ec:	4599      	cmp	r9, r3
 80101ee:	b2e4      	uxtb	r4, r4
 80101f0:	d3ed      	bcc.n	80101ce <uxr_serialize_AGENT_Representation+0x56>
 80101f2:	ea08 0804 	and.w	r8, r8, r4
 80101f6:	4640      	mov	r0, r8
 80101f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101fc:	f04f 0800 	mov.w	r8, #0
 8010200:	4640      	mov	r0, r8
 8010202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010206:	ea08 0800 	and.w	r8, r8, r0
 801020a:	e7d2      	b.n	80101b2 <uxr_serialize_AGENT_Representation+0x3a>

0801020c <uxr_serialize_DATAWRITER_Representation>:
 801020c:	b570      	push	{r4, r5, r6, lr}
 801020e:	460d      	mov	r5, r1
 8010210:	7809      	ldrb	r1, [r1, #0]
 8010212:	4606      	mov	r6, r0
 8010214:	f7fc fa62 	bl	800c6dc <ucdr_serialize_uint8_t>
 8010218:	4604      	mov	r4, r0
 801021a:	b130      	cbz	r0, 801022a <uxr_serialize_DATAWRITER_Representation+0x1e>
 801021c:	782b      	ldrb	r3, [r5, #0]
 801021e:	2b02      	cmp	r3, #2
 8010220:	d00c      	beq.n	801023c <uxr_serialize_DATAWRITER_Representation+0x30>
 8010222:	2b03      	cmp	r3, #3
 8010224:	d010      	beq.n	8010248 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8010226:	2b01      	cmp	r3, #1
 8010228:	d008      	beq.n	801023c <uxr_serialize_DATAWRITER_Representation+0x30>
 801022a:	2202      	movs	r2, #2
 801022c:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8010230:	4630      	mov	r0, r6
 8010232:	f7fc f809 	bl	800c248 <ucdr_serialize_array_uint8_t>
 8010236:	4020      	ands	r0, r4
 8010238:	b2c0      	uxtb	r0, r0
 801023a:	bd70      	pop	{r4, r5, r6, pc}
 801023c:	6869      	ldr	r1, [r5, #4]
 801023e:	4630      	mov	r0, r6
 8010240:	f004 fe9a 	bl	8014f78 <ucdr_serialize_string>
 8010244:	4604      	mov	r4, r0
 8010246:	e7f0      	b.n	801022a <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010248:	4629      	mov	r1, r5
 801024a:	4630      	mov	r0, r6
 801024c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8010250:	3104      	adds	r1, #4
 8010252:	f7fd fef1 	bl	800e038 <ucdr_serialize_sequence_uint8_t>
 8010256:	4604      	mov	r4, r0
 8010258:	e7e7      	b.n	801022a <uxr_serialize_DATAWRITER_Representation+0x1e>
 801025a:	bf00      	nop

0801025c <uxr_serialize_ObjectVariant.part.0>:
 801025c:	b570      	push	{r4, r5, r6, lr}
 801025e:	780b      	ldrb	r3, [r1, #0]
 8010260:	3b01      	subs	r3, #1
 8010262:	460c      	mov	r4, r1
 8010264:	4605      	mov	r5, r0
 8010266:	2b0d      	cmp	r3, #13
 8010268:	d854      	bhi.n	8010314 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801026a:	e8df f003 	tbb	[pc, r3]
 801026e:	0730      	.short	0x0730
 8010270:	07071b1b 	.word	0x07071b1b
 8010274:	0c530707 	.word	0x0c530707
 8010278:	494e0c0c 	.word	0x494e0c0c
 801027c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010280:	3104      	adds	r1, #4
 8010282:	f7ff bfc3 	b.w	801020c <uxr_serialize_DATAWRITER_Representation>
 8010286:	7909      	ldrb	r1, [r1, #4]
 8010288:	f7fc fa28 	bl	800c6dc <ucdr_serialize_uint8_t>
 801028c:	b1e8      	cbz	r0, 80102ca <uxr_serialize_ObjectVariant.part.0+0x6e>
 801028e:	7923      	ldrb	r3, [r4, #4]
 8010290:	2b01      	cmp	r3, #1
 8010292:	d001      	beq.n	8010298 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8010294:	2b02      	cmp	r3, #2
 8010296:	d13d      	bne.n	8010314 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8010298:	68a1      	ldr	r1, [r4, #8]
 801029a:	4628      	mov	r0, r5
 801029c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80102a0:	f004 be6a 	b.w	8014f78 <ucdr_serialize_string>
 80102a4:	7909      	ldrb	r1, [r1, #4]
 80102a6:	f7fc fa19 	bl	800c6dc <ucdr_serialize_uint8_t>
 80102aa:	4606      	mov	r6, r0
 80102ac:	b120      	cbz	r0, 80102b8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80102ae:	7923      	ldrb	r3, [r4, #4]
 80102b0:	2b02      	cmp	r3, #2
 80102b2:	d039      	beq.n	8010328 <uxr_serialize_ObjectVariant.part.0+0xcc>
 80102b4:	2b03      	cmp	r3, #3
 80102b6:	d02f      	beq.n	8010318 <uxr_serialize_ObjectVariant.part.0+0xbc>
 80102b8:	2202      	movs	r2, #2
 80102ba:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80102be:	4628      	mov	r0, r5
 80102c0:	f7fb ffc2 	bl	800c248 <ucdr_serialize_array_uint8_t>
 80102c4:	4030      	ands	r0, r6
 80102c6:	b2c0      	uxtb	r0, r0
 80102c8:	bd70      	pop	{r4, r5, r6, pc}
 80102ca:	2000      	movs	r0, #0
 80102cc:	bd70      	pop	{r4, r5, r6, pc}
 80102ce:	7909      	ldrb	r1, [r1, #4]
 80102d0:	f7fc fa04 	bl	800c6dc <ucdr_serialize_uint8_t>
 80102d4:	4606      	mov	r6, r0
 80102d6:	b158      	cbz	r0, 80102f0 <uxr_serialize_ObjectVariant.part.0+0x94>
 80102d8:	7923      	ldrb	r3, [r4, #4]
 80102da:	2b02      	cmp	r3, #2
 80102dc:	d003      	beq.n	80102e6 <uxr_serialize_ObjectVariant.part.0+0x8a>
 80102de:	2b03      	cmp	r3, #3
 80102e0:	d028      	beq.n	8010334 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80102e2:	2b01      	cmp	r3, #1
 80102e4:	d104      	bne.n	80102f0 <uxr_serialize_ObjectVariant.part.0+0x94>
 80102e6:	68a1      	ldr	r1, [r4, #8]
 80102e8:	4628      	mov	r0, r5
 80102ea:	f004 fe45 	bl	8014f78 <ucdr_serialize_string>
 80102ee:	4606      	mov	r6, r0
 80102f0:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 80102f4:	4628      	mov	r0, r5
 80102f6:	f7fc ff2d 	bl	800d154 <ucdr_serialize_int16_t>
 80102fa:	4030      	ands	r0, r6
 80102fc:	b2c0      	uxtb	r0, r0
 80102fe:	bd70      	pop	{r4, r5, r6, pc}
 8010300:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010304:	3104      	adds	r1, #4
 8010306:	f7ff be7b 	b.w	8010000 <uxr_serialize_CLIENT_Representation>
 801030a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801030e:	3104      	adds	r1, #4
 8010310:	f7ff bf32 	b.w	8010178 <uxr_serialize_AGENT_Representation>
 8010314:	2001      	movs	r0, #1
 8010316:	bd70      	pop	{r4, r5, r6, pc}
 8010318:	68a2      	ldr	r2, [r4, #8]
 801031a:	f104 010c 	add.w	r1, r4, #12
 801031e:	4628      	mov	r0, r5
 8010320:	f7fd fe8a 	bl	800e038 <ucdr_serialize_sequence_uint8_t>
 8010324:	4606      	mov	r6, r0
 8010326:	e7c7      	b.n	80102b8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010328:	68a1      	ldr	r1, [r4, #8]
 801032a:	4628      	mov	r0, r5
 801032c:	f004 fe24 	bl	8014f78 <ucdr_serialize_string>
 8010330:	4606      	mov	r6, r0
 8010332:	e7c1      	b.n	80102b8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010334:	68a2      	ldr	r2, [r4, #8]
 8010336:	f104 010c 	add.w	r1, r4, #12
 801033a:	4628      	mov	r0, r5
 801033c:	f7fd fe7c 	bl	800e038 <ucdr_serialize_sequence_uint8_t>
 8010340:	4606      	mov	r6, r0
 8010342:	e7d5      	b.n	80102f0 <uxr_serialize_ObjectVariant.part.0+0x94>

08010344 <uxr_deserialize_DATAWRITER_Representation>:
 8010344:	b570      	push	{r4, r5, r6, lr}
 8010346:	4606      	mov	r6, r0
 8010348:	460d      	mov	r5, r1
 801034a:	f7fc f9dd 	bl	800c708 <ucdr_deserialize_uint8_t>
 801034e:	4604      	mov	r4, r0
 8010350:	b130      	cbz	r0, 8010360 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010352:	782b      	ldrb	r3, [r5, #0]
 8010354:	2b02      	cmp	r3, #2
 8010356:	d00c      	beq.n	8010372 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010358:	2b03      	cmp	r3, #3
 801035a:	d012      	beq.n	8010382 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801035c:	2b01      	cmp	r3, #1
 801035e:	d008      	beq.n	8010372 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010360:	2202      	movs	r2, #2
 8010362:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8010366:	4630      	mov	r0, r6
 8010368:	f7fb ffd2 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 801036c:	4020      	ands	r0, r4
 801036e:	b2c0      	uxtb	r0, r0
 8010370:	bd70      	pop	{r4, r5, r6, pc}
 8010372:	6869      	ldr	r1, [r5, #4]
 8010374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010378:	4630      	mov	r0, r6
 801037a:	f004 fe0d 	bl	8014f98 <ucdr_deserialize_string>
 801037e:	4604      	mov	r4, r0
 8010380:	e7ee      	b.n	8010360 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010382:	1d2b      	adds	r3, r5, #4
 8010384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010388:	f105 0108 	add.w	r1, r5, #8
 801038c:	4630      	mov	r0, r6
 801038e:	f7fd fe65 	bl	800e05c <ucdr_deserialize_sequence_uint8_t>
 8010392:	4604      	mov	r4, r0
 8010394:	e7e4      	b.n	8010360 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010396:	bf00      	nop

08010398 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8010398:	b570      	push	{r4, r5, r6, lr}
 801039a:	460d      	mov	r5, r1
 801039c:	7809      	ldrb	r1, [r1, #0]
 801039e:	4606      	mov	r6, r0
 80103a0:	f7fc f96e 	bl	800c680 <ucdr_serialize_bool>
 80103a4:	782b      	ldrb	r3, [r5, #0]
 80103a6:	4604      	mov	r4, r0
 80103a8:	b94b      	cbnz	r3, 80103be <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80103aa:	7a29      	ldrb	r1, [r5, #8]
 80103ac:	4630      	mov	r0, r6
 80103ae:	f7fc f967 	bl	800c680 <ucdr_serialize_bool>
 80103b2:	7a2b      	ldrb	r3, [r5, #8]
 80103b4:	4004      	ands	r4, r0
 80103b6:	b2e4      	uxtb	r4, r4
 80103b8:	b943      	cbnz	r3, 80103cc <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80103ba:	4620      	mov	r0, r4
 80103bc:	bd70      	pop	{r4, r5, r6, pc}
 80103be:	6869      	ldr	r1, [r5, #4]
 80103c0:	4630      	mov	r0, r6
 80103c2:	f004 fdd9 	bl	8014f78 <ucdr_serialize_string>
 80103c6:	4004      	ands	r4, r0
 80103c8:	b2e4      	uxtb	r4, r4
 80103ca:	e7ee      	b.n	80103aa <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80103cc:	68e9      	ldr	r1, [r5, #12]
 80103ce:	4630      	mov	r0, r6
 80103d0:	f004 fdd2 	bl	8014f78 <ucdr_serialize_string>
 80103d4:	4004      	ands	r4, r0
 80103d6:	4620      	mov	r0, r4
 80103d8:	bd70      	pop	{r4, r5, r6, pc}
 80103da:	bf00      	nop

080103dc <uxr_serialize_OBJK_Topic_Binary>:
 80103dc:	b570      	push	{r4, r5, r6, lr}
 80103de:	460d      	mov	r5, r1
 80103e0:	6809      	ldr	r1, [r1, #0]
 80103e2:	4606      	mov	r6, r0
 80103e4:	f004 fdc8 	bl	8014f78 <ucdr_serialize_string>
 80103e8:	7929      	ldrb	r1, [r5, #4]
 80103ea:	4604      	mov	r4, r0
 80103ec:	4630      	mov	r0, r6
 80103ee:	f7fc f947 	bl	800c680 <ucdr_serialize_bool>
 80103f2:	792b      	ldrb	r3, [r5, #4]
 80103f4:	4004      	ands	r4, r0
 80103f6:	b2e4      	uxtb	r4, r4
 80103f8:	b943      	cbnz	r3, 801040c <uxr_serialize_OBJK_Topic_Binary+0x30>
 80103fa:	7b29      	ldrb	r1, [r5, #12]
 80103fc:	4630      	mov	r0, r6
 80103fe:	f7fc f93f 	bl	800c680 <ucdr_serialize_bool>
 8010402:	7b2b      	ldrb	r3, [r5, #12]
 8010404:	4004      	ands	r4, r0
 8010406:	b93b      	cbnz	r3, 8010418 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8010408:	4620      	mov	r0, r4
 801040a:	bd70      	pop	{r4, r5, r6, pc}
 801040c:	68a9      	ldr	r1, [r5, #8]
 801040e:	4630      	mov	r0, r6
 8010410:	f004 fdb2 	bl	8014f78 <ucdr_serialize_string>
 8010414:	4004      	ands	r4, r0
 8010416:	e7f0      	b.n	80103fa <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8010418:	6929      	ldr	r1, [r5, #16]
 801041a:	4630      	mov	r0, r6
 801041c:	f004 fdac 	bl	8014f78 <ucdr_serialize_string>
 8010420:	4004      	ands	r4, r0
 8010422:	b2e4      	uxtb	r4, r4
 8010424:	4620      	mov	r0, r4
 8010426:	bd70      	pop	{r4, r5, r6, pc}

08010428 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8010428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801042c:	460c      	mov	r4, r1
 801042e:	7809      	ldrb	r1, [r1, #0]
 8010430:	4606      	mov	r6, r0
 8010432:	f7fc f925 	bl	800c680 <ucdr_serialize_bool>
 8010436:	7823      	ldrb	r3, [r4, #0]
 8010438:	4605      	mov	r5, r0
 801043a:	b96b      	cbnz	r3, 8010458 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801043c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8010440:	4630      	mov	r0, r6
 8010442:	f7fc f91d 	bl	800c680 <ucdr_serialize_bool>
 8010446:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801044a:	4005      	ands	r5, r0
 801044c:	b2ed      	uxtb	r5, r5
 801044e:	2b00      	cmp	r3, #0
 8010450:	d169      	bne.n	8010526 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8010452:	4628      	mov	r0, r5
 8010454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010458:	6861      	ldr	r1, [r4, #4]
 801045a:	4630      	mov	r0, r6
 801045c:	f7fc fb54 	bl	800cb08 <ucdr_serialize_uint32_t>
 8010460:	6863      	ldr	r3, [r4, #4]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d06b      	beq.n	801053e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8010466:	2800      	cmp	r0, #0
 8010468:	d067      	beq.n	801053a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801046a:	68a1      	ldr	r1, [r4, #8]
 801046c:	4630      	mov	r0, r6
 801046e:	f004 fd83 	bl	8014f78 <ucdr_serialize_string>
 8010472:	6863      	ldr	r3, [r4, #4]
 8010474:	2b01      	cmp	r3, #1
 8010476:	d953      	bls.n	8010520 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010478:	2800      	cmp	r0, #0
 801047a:	d05e      	beq.n	801053a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801047c:	68e1      	ldr	r1, [r4, #12]
 801047e:	4630      	mov	r0, r6
 8010480:	f004 fd7a 	bl	8014f78 <ucdr_serialize_string>
 8010484:	6863      	ldr	r3, [r4, #4]
 8010486:	2b02      	cmp	r3, #2
 8010488:	d94a      	bls.n	8010520 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801048a:	2800      	cmp	r0, #0
 801048c:	d055      	beq.n	801053a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801048e:	6921      	ldr	r1, [r4, #16]
 8010490:	4630      	mov	r0, r6
 8010492:	f004 fd71 	bl	8014f78 <ucdr_serialize_string>
 8010496:	6863      	ldr	r3, [r4, #4]
 8010498:	2b03      	cmp	r3, #3
 801049a:	d941      	bls.n	8010520 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801049c:	2800      	cmp	r0, #0
 801049e:	d04c      	beq.n	801053a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80104a0:	6961      	ldr	r1, [r4, #20]
 80104a2:	4630      	mov	r0, r6
 80104a4:	f004 fd68 	bl	8014f78 <ucdr_serialize_string>
 80104a8:	6863      	ldr	r3, [r4, #4]
 80104aa:	2b04      	cmp	r3, #4
 80104ac:	d938      	bls.n	8010520 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80104ae:	2800      	cmp	r0, #0
 80104b0:	d043      	beq.n	801053a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80104b2:	69a1      	ldr	r1, [r4, #24]
 80104b4:	4630      	mov	r0, r6
 80104b6:	f004 fd5f 	bl	8014f78 <ucdr_serialize_string>
 80104ba:	6863      	ldr	r3, [r4, #4]
 80104bc:	2b05      	cmp	r3, #5
 80104be:	d92f      	bls.n	8010520 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80104c0:	2800      	cmp	r0, #0
 80104c2:	d03a      	beq.n	801053a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80104c4:	69e1      	ldr	r1, [r4, #28]
 80104c6:	4630      	mov	r0, r6
 80104c8:	f004 fd56 	bl	8014f78 <ucdr_serialize_string>
 80104cc:	6863      	ldr	r3, [r4, #4]
 80104ce:	2b06      	cmp	r3, #6
 80104d0:	d926      	bls.n	8010520 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80104d2:	b390      	cbz	r0, 801053a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80104d4:	6a21      	ldr	r1, [r4, #32]
 80104d6:	4630      	mov	r0, r6
 80104d8:	f004 fd4e 	bl	8014f78 <ucdr_serialize_string>
 80104dc:	6863      	ldr	r3, [r4, #4]
 80104de:	2b07      	cmp	r3, #7
 80104e0:	d91e      	bls.n	8010520 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80104e2:	b350      	cbz	r0, 801053a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80104e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80104e6:	4630      	mov	r0, r6
 80104e8:	f004 fd46 	bl	8014f78 <ucdr_serialize_string>
 80104ec:	6863      	ldr	r3, [r4, #4]
 80104ee:	2b08      	cmp	r3, #8
 80104f0:	d916      	bls.n	8010520 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80104f2:	b310      	cbz	r0, 801053a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80104f4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80104f6:	4630      	mov	r0, r6
 80104f8:	f004 fd3e 	bl	8014f78 <ucdr_serialize_string>
 80104fc:	6863      	ldr	r3, [r4, #4]
 80104fe:	2b09      	cmp	r3, #9
 8010500:	d90e      	bls.n	8010520 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010502:	b1d0      	cbz	r0, 801053a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010504:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8010508:	2709      	movs	r7, #9
 801050a:	e000      	b.n	801050e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 801050c:	b1a8      	cbz	r0, 801053a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801050e:	f858 1b04 	ldr.w	r1, [r8], #4
 8010512:	4630      	mov	r0, r6
 8010514:	f004 fd30 	bl	8014f78 <ucdr_serialize_string>
 8010518:	6862      	ldr	r2, [r4, #4]
 801051a:	3701      	adds	r7, #1
 801051c:	4297      	cmp	r7, r2
 801051e:	d3f5      	bcc.n	801050c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8010520:	4005      	ands	r5, r0
 8010522:	b2ed      	uxtb	r5, r5
 8010524:	e78a      	b.n	801043c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8010526:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010528:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801052c:	4630      	mov	r0, r6
 801052e:	f7fd fd83 	bl	800e038 <ucdr_serialize_sequence_uint8_t>
 8010532:	4005      	ands	r5, r0
 8010534:	4628      	mov	r0, r5
 8010536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801053a:	2500      	movs	r5, #0
 801053c:	e77e      	b.n	801043c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801053e:	4028      	ands	r0, r5
 8010540:	b2c5      	uxtb	r5, r0
 8010542:	e77b      	b.n	801043c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08010544 <uxr_serialize_OBJK_Publisher_Binary>:
 8010544:	b570      	push	{r4, r5, r6, lr}
 8010546:	460d      	mov	r5, r1
 8010548:	7809      	ldrb	r1, [r1, #0]
 801054a:	4606      	mov	r6, r0
 801054c:	f7fc f898 	bl	800c680 <ucdr_serialize_bool>
 8010550:	782b      	ldrb	r3, [r5, #0]
 8010552:	4604      	mov	r4, r0
 8010554:	b94b      	cbnz	r3, 801056a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8010556:	7a29      	ldrb	r1, [r5, #8]
 8010558:	4630      	mov	r0, r6
 801055a:	f7fc f891 	bl	800c680 <ucdr_serialize_bool>
 801055e:	7a2b      	ldrb	r3, [r5, #8]
 8010560:	4004      	ands	r4, r0
 8010562:	b2e4      	uxtb	r4, r4
 8010564:	b943      	cbnz	r3, 8010578 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8010566:	4620      	mov	r0, r4
 8010568:	bd70      	pop	{r4, r5, r6, pc}
 801056a:	6869      	ldr	r1, [r5, #4]
 801056c:	4630      	mov	r0, r6
 801056e:	f004 fd03 	bl	8014f78 <ucdr_serialize_string>
 8010572:	4004      	ands	r4, r0
 8010574:	b2e4      	uxtb	r4, r4
 8010576:	e7ee      	b.n	8010556 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8010578:	f105 010c 	add.w	r1, r5, #12
 801057c:	4630      	mov	r0, r6
 801057e:	f7ff ff53 	bl	8010428 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8010582:	4004      	ands	r4, r0
 8010584:	4620      	mov	r0, r4
 8010586:	bd70      	pop	{r4, r5, r6, pc}

08010588 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8010588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801058c:	460c      	mov	r4, r1
 801058e:	7809      	ldrb	r1, [r1, #0]
 8010590:	4606      	mov	r6, r0
 8010592:	f7fc f875 	bl	800c680 <ucdr_serialize_bool>
 8010596:	7823      	ldrb	r3, [r4, #0]
 8010598:	4605      	mov	r5, r0
 801059a:	b96b      	cbnz	r3, 80105b8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801059c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80105a0:	4630      	mov	r0, r6
 80105a2:	f7fc f86d 	bl	800c680 <ucdr_serialize_bool>
 80105a6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80105aa:	4005      	ands	r5, r0
 80105ac:	b2ed      	uxtb	r5, r5
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d169      	bne.n	8010686 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 80105b2:	4628      	mov	r0, r5
 80105b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105b8:	6861      	ldr	r1, [r4, #4]
 80105ba:	4630      	mov	r0, r6
 80105bc:	f7fc faa4 	bl	800cb08 <ucdr_serialize_uint32_t>
 80105c0:	6863      	ldr	r3, [r4, #4]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d06b      	beq.n	801069e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 80105c6:	2800      	cmp	r0, #0
 80105c8:	d067      	beq.n	801069a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80105ca:	68a1      	ldr	r1, [r4, #8]
 80105cc:	4630      	mov	r0, r6
 80105ce:	f004 fcd3 	bl	8014f78 <ucdr_serialize_string>
 80105d2:	6863      	ldr	r3, [r4, #4]
 80105d4:	2b01      	cmp	r3, #1
 80105d6:	d953      	bls.n	8010680 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80105d8:	2800      	cmp	r0, #0
 80105da:	d05e      	beq.n	801069a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80105dc:	68e1      	ldr	r1, [r4, #12]
 80105de:	4630      	mov	r0, r6
 80105e0:	f004 fcca 	bl	8014f78 <ucdr_serialize_string>
 80105e4:	6863      	ldr	r3, [r4, #4]
 80105e6:	2b02      	cmp	r3, #2
 80105e8:	d94a      	bls.n	8010680 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80105ea:	2800      	cmp	r0, #0
 80105ec:	d055      	beq.n	801069a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80105ee:	6921      	ldr	r1, [r4, #16]
 80105f0:	4630      	mov	r0, r6
 80105f2:	f004 fcc1 	bl	8014f78 <ucdr_serialize_string>
 80105f6:	6863      	ldr	r3, [r4, #4]
 80105f8:	2b03      	cmp	r3, #3
 80105fa:	d941      	bls.n	8010680 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80105fc:	2800      	cmp	r0, #0
 80105fe:	d04c      	beq.n	801069a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010600:	6961      	ldr	r1, [r4, #20]
 8010602:	4630      	mov	r0, r6
 8010604:	f004 fcb8 	bl	8014f78 <ucdr_serialize_string>
 8010608:	6863      	ldr	r3, [r4, #4]
 801060a:	2b04      	cmp	r3, #4
 801060c:	d938      	bls.n	8010680 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801060e:	2800      	cmp	r0, #0
 8010610:	d043      	beq.n	801069a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010612:	69a1      	ldr	r1, [r4, #24]
 8010614:	4630      	mov	r0, r6
 8010616:	f004 fcaf 	bl	8014f78 <ucdr_serialize_string>
 801061a:	6863      	ldr	r3, [r4, #4]
 801061c:	2b05      	cmp	r3, #5
 801061e:	d92f      	bls.n	8010680 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010620:	2800      	cmp	r0, #0
 8010622:	d03a      	beq.n	801069a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010624:	69e1      	ldr	r1, [r4, #28]
 8010626:	4630      	mov	r0, r6
 8010628:	f004 fca6 	bl	8014f78 <ucdr_serialize_string>
 801062c:	6863      	ldr	r3, [r4, #4]
 801062e:	2b06      	cmp	r3, #6
 8010630:	d926      	bls.n	8010680 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010632:	b390      	cbz	r0, 801069a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010634:	6a21      	ldr	r1, [r4, #32]
 8010636:	4630      	mov	r0, r6
 8010638:	f004 fc9e 	bl	8014f78 <ucdr_serialize_string>
 801063c:	6863      	ldr	r3, [r4, #4]
 801063e:	2b07      	cmp	r3, #7
 8010640:	d91e      	bls.n	8010680 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010642:	b350      	cbz	r0, 801069a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010644:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010646:	4630      	mov	r0, r6
 8010648:	f004 fc96 	bl	8014f78 <ucdr_serialize_string>
 801064c:	6863      	ldr	r3, [r4, #4]
 801064e:	2b08      	cmp	r3, #8
 8010650:	d916      	bls.n	8010680 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010652:	b310      	cbz	r0, 801069a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010654:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8010656:	4630      	mov	r0, r6
 8010658:	f004 fc8e 	bl	8014f78 <ucdr_serialize_string>
 801065c:	6863      	ldr	r3, [r4, #4]
 801065e:	2b09      	cmp	r3, #9
 8010660:	d90e      	bls.n	8010680 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010662:	b1d0      	cbz	r0, 801069a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010664:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8010668:	2709      	movs	r7, #9
 801066a:	e000      	b.n	801066e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801066c:	b1a8      	cbz	r0, 801069a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801066e:	f858 1b04 	ldr.w	r1, [r8], #4
 8010672:	4630      	mov	r0, r6
 8010674:	f004 fc80 	bl	8014f78 <ucdr_serialize_string>
 8010678:	6862      	ldr	r2, [r4, #4]
 801067a:	3701      	adds	r7, #1
 801067c:	4297      	cmp	r7, r2
 801067e:	d3f5      	bcc.n	801066c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8010680:	4005      	ands	r5, r0
 8010682:	b2ed      	uxtb	r5, r5
 8010684:	e78a      	b.n	801059c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8010686:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010688:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801068c:	4630      	mov	r0, r6
 801068e:	f7fd fcd3 	bl	800e038 <ucdr_serialize_sequence_uint8_t>
 8010692:	4005      	ands	r5, r0
 8010694:	4628      	mov	r0, r5
 8010696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801069a:	2500      	movs	r5, #0
 801069c:	e77e      	b.n	801059c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801069e:	4028      	ands	r0, r5
 80106a0:	b2c5      	uxtb	r5, r0
 80106a2:	e77b      	b.n	801059c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

080106a4 <uxr_serialize_OBJK_Subscriber_Binary>:
 80106a4:	b570      	push	{r4, r5, r6, lr}
 80106a6:	460d      	mov	r5, r1
 80106a8:	7809      	ldrb	r1, [r1, #0]
 80106aa:	4606      	mov	r6, r0
 80106ac:	f7fb ffe8 	bl	800c680 <ucdr_serialize_bool>
 80106b0:	782b      	ldrb	r3, [r5, #0]
 80106b2:	4604      	mov	r4, r0
 80106b4:	b94b      	cbnz	r3, 80106ca <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 80106b6:	7a29      	ldrb	r1, [r5, #8]
 80106b8:	4630      	mov	r0, r6
 80106ba:	f7fb ffe1 	bl	800c680 <ucdr_serialize_bool>
 80106be:	7a2b      	ldrb	r3, [r5, #8]
 80106c0:	4004      	ands	r4, r0
 80106c2:	b2e4      	uxtb	r4, r4
 80106c4:	b943      	cbnz	r3, 80106d8 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 80106c6:	4620      	mov	r0, r4
 80106c8:	bd70      	pop	{r4, r5, r6, pc}
 80106ca:	6869      	ldr	r1, [r5, #4]
 80106cc:	4630      	mov	r0, r6
 80106ce:	f004 fc53 	bl	8014f78 <ucdr_serialize_string>
 80106d2:	4004      	ands	r4, r0
 80106d4:	b2e4      	uxtb	r4, r4
 80106d6:	e7ee      	b.n	80106b6 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 80106d8:	f105 010c 	add.w	r1, r5, #12
 80106dc:	4630      	mov	r0, r6
 80106de:	f7ff ff53 	bl	8010588 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 80106e2:	4004      	ands	r4, r0
 80106e4:	4620      	mov	r0, r4
 80106e6:	bd70      	pop	{r4, r5, r6, pc}

080106e8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80106e8:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80106ec:	4688      	mov	r8, r1
 80106ee:	8809      	ldrh	r1, [r1, #0]
 80106f0:	4681      	mov	r9, r0
 80106f2:	f7fc f81f 	bl	800c734 <ucdr_serialize_uint16_t>
 80106f6:	f898 1002 	ldrb.w	r1, [r8, #2]
 80106fa:	4606      	mov	r6, r0
 80106fc:	4648      	mov	r0, r9
 80106fe:	f7fb ffbf 	bl	800c680 <ucdr_serialize_bool>
 8010702:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010706:	4006      	ands	r6, r0
 8010708:	b2f5      	uxtb	r5, r6
 801070a:	b9eb      	cbnz	r3, 8010748 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801070c:	f898 1006 	ldrb.w	r1, [r8, #6]
 8010710:	4648      	mov	r0, r9
 8010712:	f7fb ffb5 	bl	800c680 <ucdr_serialize_bool>
 8010716:	f898 3006 	ldrb.w	r3, [r8, #6]
 801071a:	4005      	ands	r5, r0
 801071c:	bb7b      	cbnz	r3, 801077e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801071e:	f898 100c 	ldrb.w	r1, [r8, #12]
 8010722:	4648      	mov	r0, r9
 8010724:	f7fb ffac 	bl	800c680 <ucdr_serialize_bool>
 8010728:	f898 300c 	ldrb.w	r3, [r8, #12]
 801072c:	4005      	ands	r5, r0
 801072e:	b9f3      	cbnz	r3, 801076e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8010730:	f898 1014 	ldrb.w	r1, [r8, #20]
 8010734:	4648      	mov	r0, r9
 8010736:	f7fb ffa3 	bl	800c680 <ucdr_serialize_bool>
 801073a:	f898 3014 	ldrb.w	r3, [r8, #20]
 801073e:	4005      	ands	r5, r0
 8010740:	b94b      	cbnz	r3, 8010756 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8010742:	4628      	mov	r0, r5
 8010744:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8010748:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801074c:	4648      	mov	r0, r9
 801074e:	f7fb fff1 	bl	800c734 <ucdr_serialize_uint16_t>
 8010752:	4005      	ands	r5, r0
 8010754:	e7da      	b.n	801070c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8010756:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801075a:	f108 011c 	add.w	r1, r8, #28
 801075e:	4648      	mov	r0, r9
 8010760:	f7fd fc6a 	bl	800e038 <ucdr_serialize_sequence_uint8_t>
 8010764:	4028      	ands	r0, r5
 8010766:	b2c5      	uxtb	r5, r0
 8010768:	4628      	mov	r0, r5
 801076a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801076e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010772:	4648      	mov	r0, r9
 8010774:	f7fc f9c8 	bl	800cb08 <ucdr_serialize_uint32_t>
 8010778:	4028      	ands	r0, r5
 801077a:	b2c5      	uxtb	r5, r0
 801077c:	e7d8      	b.n	8010730 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801077e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8010782:	4648      	mov	r0, r9
 8010784:	f7fc f9c0 	bl	800cb08 <ucdr_serialize_uint32_t>
 8010788:	4028      	ands	r0, r5
 801078a:	b2c5      	uxtb	r5, r0
 801078c:	e7c7      	b.n	801071e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801078e:	bf00      	nop

08010790 <uxr_serialize_OBJK_DataReader_Binary>:
 8010790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010792:	2202      	movs	r2, #2
 8010794:	460c      	mov	r4, r1
 8010796:	4606      	mov	r6, r0
 8010798:	f7fb fd56 	bl	800c248 <ucdr_serialize_array_uint8_t>
 801079c:	78a1      	ldrb	r1, [r4, #2]
 801079e:	4605      	mov	r5, r0
 80107a0:	4630      	mov	r0, r6
 80107a2:	f7fb ff6d 	bl	800c680 <ucdr_serialize_bool>
 80107a6:	78a3      	ldrb	r3, [r4, #2]
 80107a8:	4005      	ands	r5, r0
 80107aa:	b2ed      	uxtb	r5, r5
 80107ac:	b90b      	cbnz	r3, 80107b2 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 80107ae:	4628      	mov	r0, r5
 80107b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107b2:	f104 0108 	add.w	r1, r4, #8
 80107b6:	4630      	mov	r0, r6
 80107b8:	f7ff ff96 	bl	80106e8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80107bc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80107c0:	4607      	mov	r7, r0
 80107c2:	4630      	mov	r0, r6
 80107c4:	f7fb ff5c 	bl	800c680 <ucdr_serialize_bool>
 80107c8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80107cc:	4038      	ands	r0, r7
 80107ce:	b2c7      	uxtb	r7, r0
 80107d0:	b95b      	cbnz	r3, 80107ea <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 80107d2:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 80107d6:	4630      	mov	r0, r6
 80107d8:	f7fb ff52 	bl	800c680 <ucdr_serialize_bool>
 80107dc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80107e0:	4007      	ands	r7, r0
 80107e2:	b94b      	cbnz	r3, 80107f8 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80107e4:	403d      	ands	r5, r7
 80107e6:	4628      	mov	r0, r5
 80107e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107ea:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 80107ee:	4630      	mov	r0, r6
 80107f0:	f7fc fbe0 	bl	800cfb4 <ucdr_serialize_uint64_t>
 80107f4:	4007      	ands	r7, r0
 80107f6:	e7ec      	b.n	80107d2 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80107f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80107fa:	4630      	mov	r0, r6
 80107fc:	f004 fbbc 	bl	8014f78 <ucdr_serialize_string>
 8010800:	4007      	ands	r7, r0
 8010802:	b2ff      	uxtb	r7, r7
 8010804:	e7ee      	b.n	80107e4 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8010806:	bf00      	nop

08010808 <uxr_serialize_OBJK_DataWriter_Binary>:
 8010808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801080a:	2202      	movs	r2, #2
 801080c:	460d      	mov	r5, r1
 801080e:	4606      	mov	r6, r0
 8010810:	f7fb fd1a 	bl	800c248 <ucdr_serialize_array_uint8_t>
 8010814:	78a9      	ldrb	r1, [r5, #2]
 8010816:	4604      	mov	r4, r0
 8010818:	4630      	mov	r0, r6
 801081a:	f7fb ff31 	bl	800c680 <ucdr_serialize_bool>
 801081e:	78ab      	ldrb	r3, [r5, #2]
 8010820:	4004      	ands	r4, r0
 8010822:	b2e4      	uxtb	r4, r4
 8010824:	b90b      	cbnz	r3, 801082a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8010826:	4620      	mov	r0, r4
 8010828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801082a:	f105 0108 	add.w	r1, r5, #8
 801082e:	4630      	mov	r0, r6
 8010830:	f7ff ff5a 	bl	80106e8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8010834:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8010838:	4607      	mov	r7, r0
 801083a:	4630      	mov	r0, r6
 801083c:	f7fb ff20 	bl	800c680 <ucdr_serialize_bool>
 8010840:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8010844:	4038      	ands	r0, r7
 8010846:	b2c7      	uxtb	r7, r0
 8010848:	b913      	cbnz	r3, 8010850 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801084a:	403c      	ands	r4, r7
 801084c:	4620      	mov	r0, r4
 801084e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010850:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8010854:	4630      	mov	r0, r6
 8010856:	f7fc fbad 	bl	800cfb4 <ucdr_serialize_uint64_t>
 801085a:	4007      	ands	r7, r0
 801085c:	e7f5      	b.n	801084a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801085e:	bf00      	nop

08010860 <uxr_deserialize_ObjectVariant>:
 8010860:	b570      	push	{r4, r5, r6, lr}
 8010862:	4605      	mov	r5, r0
 8010864:	460e      	mov	r6, r1
 8010866:	f7fb ff4f 	bl	800c708 <ucdr_deserialize_uint8_t>
 801086a:	b168      	cbz	r0, 8010888 <uxr_deserialize_ObjectVariant+0x28>
 801086c:	7833      	ldrb	r3, [r6, #0]
 801086e:	3b01      	subs	r3, #1
 8010870:	4604      	mov	r4, r0
 8010872:	2b0d      	cmp	r3, #13
 8010874:	d809      	bhi.n	801088a <uxr_deserialize_ObjectVariant+0x2a>
 8010876:	e8df f003 	tbb	[pc, r3]
 801087a:	0a41      	.short	0x0a41
 801087c:	0a0a2323 	.word	0x0a0a2323
 8010880:	10080a0a 	.word	0x10080a0a
 8010884:	565c1010 	.word	0x565c1010
 8010888:	2400      	movs	r4, #0
 801088a:	4620      	mov	r0, r4
 801088c:	bd70      	pop	{r4, r5, r6, pc}
 801088e:	1d31      	adds	r1, r6, #4
 8010890:	4628      	mov	r0, r5
 8010892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010896:	f7ff bd55 	b.w	8010344 <uxr_deserialize_DATAWRITER_Representation>
 801089a:	1d31      	adds	r1, r6, #4
 801089c:	4628      	mov	r0, r5
 801089e:	f7fb ff33 	bl	800c708 <ucdr_deserialize_uint8_t>
 80108a2:	2800      	cmp	r0, #0
 80108a4:	d0f0      	beq.n	8010888 <uxr_deserialize_ObjectVariant+0x28>
 80108a6:	7933      	ldrb	r3, [r6, #4]
 80108a8:	2b01      	cmp	r3, #1
 80108aa:	d001      	beq.n	80108b0 <uxr_deserialize_ObjectVariant+0x50>
 80108ac:	2b02      	cmp	r3, #2
 80108ae:	d1ec      	bne.n	801088a <uxr_deserialize_ObjectVariant+0x2a>
 80108b0:	68b1      	ldr	r1, [r6, #8]
 80108b2:	4628      	mov	r0, r5
 80108b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80108b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80108bc:	f004 bb6c 	b.w	8014f98 <ucdr_deserialize_string>
 80108c0:	1d31      	adds	r1, r6, #4
 80108c2:	4628      	mov	r0, r5
 80108c4:	f7fb ff20 	bl	800c708 <ucdr_deserialize_uint8_t>
 80108c8:	4604      	mov	r4, r0
 80108ca:	b170      	cbz	r0, 80108ea <uxr_deserialize_ObjectVariant+0x8a>
 80108cc:	7933      	ldrb	r3, [r6, #4]
 80108ce:	2b02      	cmp	r3, #2
 80108d0:	d04c      	beq.n	801096c <uxr_deserialize_ObjectVariant+0x10c>
 80108d2:	2b03      	cmp	r3, #3
 80108d4:	d109      	bne.n	80108ea <uxr_deserialize_ObjectVariant+0x8a>
 80108d6:	f106 0308 	add.w	r3, r6, #8
 80108da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80108de:	f106 010c 	add.w	r1, r6, #12
 80108e2:	4628      	mov	r0, r5
 80108e4:	f7fd fbba 	bl	800e05c <ucdr_deserialize_sequence_uint8_t>
 80108e8:	4604      	mov	r4, r0
 80108ea:	2202      	movs	r2, #2
 80108ec:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80108f0:	4628      	mov	r0, r5
 80108f2:	f7fb fd0d 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 80108f6:	4020      	ands	r0, r4
 80108f8:	b2c4      	uxtb	r4, r0
 80108fa:	e7c6      	b.n	801088a <uxr_deserialize_ObjectVariant+0x2a>
 80108fc:	1d31      	adds	r1, r6, #4
 80108fe:	4628      	mov	r0, r5
 8010900:	f7fb ff02 	bl	800c708 <ucdr_deserialize_uint8_t>
 8010904:	4604      	mov	r4, r0
 8010906:	b130      	cbz	r0, 8010916 <uxr_deserialize_ObjectVariant+0xb6>
 8010908:	7933      	ldrb	r3, [r6, #4]
 801090a:	2b02      	cmp	r3, #2
 801090c:	d036      	beq.n	801097c <uxr_deserialize_ObjectVariant+0x11c>
 801090e:	2b03      	cmp	r3, #3
 8010910:	d03c      	beq.n	801098c <uxr_deserialize_ObjectVariant+0x12c>
 8010912:	2b01      	cmp	r3, #1
 8010914:	d032      	beq.n	801097c <uxr_deserialize_ObjectVariant+0x11c>
 8010916:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801091a:	4628      	mov	r0, r5
 801091c:	f7fc fc9a 	bl	800d254 <ucdr_deserialize_int16_t>
 8010920:	4020      	ands	r0, r4
 8010922:	b2c4      	uxtb	r4, r0
 8010924:	e7b1      	b.n	801088a <uxr_deserialize_ObjectVariant+0x2a>
 8010926:	1d31      	adds	r1, r6, #4
 8010928:	4628      	mov	r0, r5
 801092a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801092e:	f7ff bbbf 	b.w	80100b0 <uxr_deserialize_CLIENT_Representation>
 8010932:	2204      	movs	r2, #4
 8010934:	18b1      	adds	r1, r6, r2
 8010936:	4628      	mov	r0, r5
 8010938:	f7fb fcea 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 801093c:	2202      	movs	r2, #2
 801093e:	f106 0108 	add.w	r1, r6, #8
 8010942:	4604      	mov	r4, r0
 8010944:	4628      	mov	r0, r5
 8010946:	f7fb fce3 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 801094a:	2202      	movs	r2, #2
 801094c:	4004      	ands	r4, r0
 801094e:	f106 010a 	add.w	r1, r6, #10
 8010952:	4628      	mov	r0, r5
 8010954:	f7fb fcdc 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 8010958:	b2e4      	uxtb	r4, r4
 801095a:	4603      	mov	r3, r0
 801095c:	f106 010c 	add.w	r1, r6, #12
 8010960:	4628      	mov	r0, r5
 8010962:	401c      	ands	r4, r3
 8010964:	f7fb fea2 	bl	800c6ac <ucdr_deserialize_bool>
 8010968:	4004      	ands	r4, r0
 801096a:	e78e      	b.n	801088a <uxr_deserialize_ObjectVariant+0x2a>
 801096c:	68b1      	ldr	r1, [r6, #8]
 801096e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010972:	4628      	mov	r0, r5
 8010974:	f004 fb10 	bl	8014f98 <ucdr_deserialize_string>
 8010978:	4604      	mov	r4, r0
 801097a:	e7b6      	b.n	80108ea <uxr_deserialize_ObjectVariant+0x8a>
 801097c:	68b1      	ldr	r1, [r6, #8]
 801097e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010982:	4628      	mov	r0, r5
 8010984:	f004 fb08 	bl	8014f98 <ucdr_deserialize_string>
 8010988:	4604      	mov	r4, r0
 801098a:	e7c4      	b.n	8010916 <uxr_deserialize_ObjectVariant+0xb6>
 801098c:	f106 0308 	add.w	r3, r6, #8
 8010990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010994:	f106 010c 	add.w	r1, r6, #12
 8010998:	4628      	mov	r0, r5
 801099a:	f7fd fb5f 	bl	800e05c <ucdr_deserialize_sequence_uint8_t>
 801099e:	4604      	mov	r4, r0
 80109a0:	e7b9      	b.n	8010916 <uxr_deserialize_ObjectVariant+0xb6>
 80109a2:	bf00      	nop

080109a4 <uxr_deserialize_BaseObjectRequest>:
 80109a4:	b570      	push	{r4, r5, r6, lr}
 80109a6:	2202      	movs	r2, #2
 80109a8:	4605      	mov	r5, r0
 80109aa:	460e      	mov	r6, r1
 80109ac:	f7fb fcb0 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 80109b0:	2202      	movs	r2, #2
 80109b2:	4604      	mov	r4, r0
 80109b4:	18b1      	adds	r1, r6, r2
 80109b6:	4628      	mov	r0, r5
 80109b8:	f7fb fcaa 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 80109bc:	4020      	ands	r0, r4
 80109be:	b2c0      	uxtb	r0, r0
 80109c0:	bd70      	pop	{r4, r5, r6, pc}
 80109c2:	bf00      	nop

080109c4 <uxr_serialize_ActivityInfoVariant>:
 80109c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109c8:	460d      	mov	r5, r1
 80109ca:	7809      	ldrb	r1, [r1, #0]
 80109cc:	4607      	mov	r7, r0
 80109ce:	f7fb fe85 	bl	800c6dc <ucdr_serialize_uint8_t>
 80109d2:	4681      	mov	r9, r0
 80109d4:	b138      	cbz	r0, 80109e6 <uxr_serialize_ActivityInfoVariant+0x22>
 80109d6:	782b      	ldrb	r3, [r5, #0]
 80109d8:	2b06      	cmp	r3, #6
 80109da:	f000 8082 	beq.w	8010ae2 <uxr_serialize_ActivityInfoVariant+0x11e>
 80109de:	2b0d      	cmp	r3, #13
 80109e0:	d016      	beq.n	8010a10 <uxr_serialize_ActivityInfoVariant+0x4c>
 80109e2:	2b05      	cmp	r3, #5
 80109e4:	d002      	beq.n	80109ec <uxr_serialize_ActivityInfoVariant+0x28>
 80109e6:	4648      	mov	r0, r9
 80109e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109ec:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80109f0:	4638      	mov	r0, r7
 80109f2:	f7fc fbaf 	bl	800d154 <ucdr_serialize_int16_t>
 80109f6:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80109fa:	4681      	mov	r9, r0
 80109fc:	4638      	mov	r0, r7
 80109fe:	f7fc fad9 	bl	800cfb4 <ucdr_serialize_uint64_t>
 8010a02:	ea09 0000 	and.w	r0, r9, r0
 8010a06:	fa5f f980 	uxtb.w	r9, r0
 8010a0a:	4648      	mov	r0, r9
 8010a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a10:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010a14:	4638      	mov	r0, r7
 8010a16:	f7fc fb9d 	bl	800d154 <ucdr_serialize_int16_t>
 8010a1a:	68e9      	ldr	r1, [r5, #12]
 8010a1c:	4681      	mov	r9, r0
 8010a1e:	4638      	mov	r0, r7
 8010a20:	f7fc f872 	bl	800cb08 <ucdr_serialize_uint32_t>
 8010a24:	68eb      	ldr	r3, [r5, #12]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d0eb      	beq.n	8010a02 <uxr_serialize_ActivityInfoVariant+0x3e>
 8010a2a:	b320      	cbz	r0, 8010a76 <uxr_serialize_ActivityInfoVariant+0xb2>
 8010a2c:	f105 080c 	add.w	r8, r5, #12
 8010a30:	2600      	movs	r6, #0
 8010a32:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8010a36:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8010a3a:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8010a3e:	4638      	mov	r0, r7
 8010a40:	f7fb fe4c 	bl	800c6dc <ucdr_serialize_uint8_t>
 8010a44:	2800      	cmp	r0, #0
 8010a46:	d053      	beq.n	8010af0 <uxr_serialize_ActivityInfoVariant+0x12c>
 8010a48:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8010a4c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8010a50:	0074      	lsls	r4, r6, #1
 8010a52:	00c9      	lsls	r1, r1, #3
 8010a54:	2b03      	cmp	r3, #3
 8010a56:	d854      	bhi.n	8010b02 <uxr_serialize_ActivityInfoVariant+0x13e>
 8010a58:	e8df f003 	tbb	[pc, r3]
 8010a5c:	02102132 	.word	0x02102132
 8010a60:	4441      	add	r1, r8
 8010a62:	4638      	mov	r0, r7
 8010a64:	6889      	ldr	r1, [r1, #8]
 8010a66:	f004 fa87 	bl	8014f78 <ucdr_serialize_string>
 8010a6a:	68ea      	ldr	r2, [r5, #12]
 8010a6c:	3601      	adds	r6, #1
 8010a6e:	4296      	cmp	r6, r2
 8010a70:	d242      	bcs.n	8010af8 <uxr_serialize_ActivityInfoVariant+0x134>
 8010a72:	2800      	cmp	r0, #0
 8010a74:	d1dd      	bne.n	8010a32 <uxr_serialize_ActivityInfoVariant+0x6e>
 8010a76:	f04f 0900 	mov.w	r9, #0
 8010a7a:	e7b4      	b.n	80109e6 <uxr_serialize_ActivityInfoVariant+0x22>
 8010a7c:	3108      	adds	r1, #8
 8010a7e:	4441      	add	r1, r8
 8010a80:	2210      	movs	r2, #16
 8010a82:	4638      	mov	r0, r7
 8010a84:	f7fb fbe0 	bl	800c248 <ucdr_serialize_array_uint8_t>
 8010a88:	4434      	add	r4, r6
 8010a8a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8010a8e:	4604      	mov	r4, r0
 8010a90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010a92:	4638      	mov	r0, r7
 8010a94:	f7fc f838 	bl	800cb08 <ucdr_serialize_uint32_t>
 8010a98:	4020      	ands	r0, r4
 8010a9a:	b2c0      	uxtb	r0, r0
 8010a9c:	e7e5      	b.n	8010a6a <uxr_serialize_ActivityInfoVariant+0xa6>
 8010a9e:	3108      	adds	r1, #8
 8010aa0:	4441      	add	r1, r8
 8010aa2:	2204      	movs	r2, #4
 8010aa4:	4638      	mov	r0, r7
 8010aa6:	f7fb fbcf 	bl	800c248 <ucdr_serialize_array_uint8_t>
 8010aaa:	4434      	add	r4, r6
 8010aac:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8010ab0:	4604      	mov	r4, r0
 8010ab2:	8b19      	ldrh	r1, [r3, #24]
 8010ab4:	4638      	mov	r0, r7
 8010ab6:	f7fb fe3d 	bl	800c734 <ucdr_serialize_uint16_t>
 8010aba:	4020      	ands	r0, r4
 8010abc:	b2c0      	uxtb	r0, r0
 8010abe:	e7d4      	b.n	8010a6a <uxr_serialize_ActivityInfoVariant+0xa6>
 8010ac0:	3108      	adds	r1, #8
 8010ac2:	4441      	add	r1, r8
 8010ac4:	2202      	movs	r2, #2
 8010ac6:	4638      	mov	r0, r7
 8010ac8:	f7fb fbbe 	bl	800c248 <ucdr_serialize_array_uint8_t>
 8010acc:	4434      	add	r4, r6
 8010ace:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8010ad2:	4604      	mov	r4, r0
 8010ad4:	7d99      	ldrb	r1, [r3, #22]
 8010ad6:	4638      	mov	r0, r7
 8010ad8:	f7fb fe00 	bl	800c6dc <ucdr_serialize_uint8_t>
 8010adc:	4020      	ands	r0, r4
 8010ade:	b2c0      	uxtb	r0, r0
 8010ae0:	e7c3      	b.n	8010a6a <uxr_serialize_ActivityInfoVariant+0xa6>
 8010ae2:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010ae6:	4638      	mov	r0, r7
 8010ae8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010aec:	f7fc bb32 	b.w	800d154 <ucdr_serialize_int16_t>
 8010af0:	68ea      	ldr	r2, [r5, #12]
 8010af2:	3601      	adds	r6, #1
 8010af4:	42b2      	cmp	r2, r6
 8010af6:	d8be      	bhi.n	8010a76 <uxr_serialize_ActivityInfoVariant+0xb2>
 8010af8:	ea09 0900 	and.w	r9, r9, r0
 8010afc:	fa5f f989 	uxtb.w	r9, r9
 8010b00:	e771      	b.n	80109e6 <uxr_serialize_ActivityInfoVariant+0x22>
 8010b02:	68eb      	ldr	r3, [r5, #12]
 8010b04:	3601      	adds	r6, #1
 8010b06:	429e      	cmp	r6, r3
 8010b08:	f10a 0a18 	add.w	sl, sl, #24
 8010b0c:	d395      	bcc.n	8010a3a <uxr_serialize_ActivityInfoVariant+0x76>
 8010b0e:	e76a      	b.n	80109e6 <uxr_serialize_ActivityInfoVariant+0x22>

08010b10 <uxr_deserialize_BaseObjectReply>:
 8010b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b14:	2202      	movs	r2, #2
 8010b16:	4606      	mov	r6, r0
 8010b18:	460f      	mov	r7, r1
 8010b1a:	f7fb fbf9 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 8010b1e:	2202      	movs	r2, #2
 8010b20:	18b9      	adds	r1, r7, r2
 8010b22:	4605      	mov	r5, r0
 8010b24:	4630      	mov	r0, r6
 8010b26:	f7fb fbf3 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 8010b2a:	1d39      	adds	r1, r7, #4
 8010b2c:	4680      	mov	r8, r0
 8010b2e:	4630      	mov	r0, r6
 8010b30:	f7fb fdea 	bl	800c708 <ucdr_deserialize_uint8_t>
 8010b34:	1d79      	adds	r1, r7, #5
 8010b36:	4604      	mov	r4, r0
 8010b38:	4630      	mov	r0, r6
 8010b3a:	f7fb fde5 	bl	800c708 <ucdr_deserialize_uint8_t>
 8010b3e:	ea05 0508 	and.w	r5, r5, r8
 8010b42:	402c      	ands	r4, r5
 8010b44:	4020      	ands	r0, r4
 8010b46:	b2c0      	uxtb	r0, r0
 8010b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010b4c <uxr_serialize_ReadSpecification>:
 8010b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b50:	460e      	mov	r6, r1
 8010b52:	7809      	ldrb	r1, [r1, #0]
 8010b54:	4607      	mov	r7, r0
 8010b56:	f7fb fdc1 	bl	800c6dc <ucdr_serialize_uint8_t>
 8010b5a:	7871      	ldrb	r1, [r6, #1]
 8010b5c:	4604      	mov	r4, r0
 8010b5e:	4638      	mov	r0, r7
 8010b60:	f7fb fdbc 	bl	800c6dc <ucdr_serialize_uint8_t>
 8010b64:	78b1      	ldrb	r1, [r6, #2]
 8010b66:	4004      	ands	r4, r0
 8010b68:	4638      	mov	r0, r7
 8010b6a:	f7fb fd89 	bl	800c680 <ucdr_serialize_bool>
 8010b6e:	78b3      	ldrb	r3, [r6, #2]
 8010b70:	b2e4      	uxtb	r4, r4
 8010b72:	4004      	ands	r4, r0
 8010b74:	b94b      	cbnz	r3, 8010b8a <uxr_serialize_ReadSpecification+0x3e>
 8010b76:	7a31      	ldrb	r1, [r6, #8]
 8010b78:	4638      	mov	r0, r7
 8010b7a:	f7fb fd81 	bl	800c680 <ucdr_serialize_bool>
 8010b7e:	7a33      	ldrb	r3, [r6, #8]
 8010b80:	4004      	ands	r4, r0
 8010b82:	b943      	cbnz	r3, 8010b96 <uxr_serialize_ReadSpecification+0x4a>
 8010b84:	4620      	mov	r0, r4
 8010b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b8a:	6871      	ldr	r1, [r6, #4]
 8010b8c:	4638      	mov	r0, r7
 8010b8e:	f004 f9f3 	bl	8014f78 <ucdr_serialize_string>
 8010b92:	4004      	ands	r4, r0
 8010b94:	e7ef      	b.n	8010b76 <uxr_serialize_ReadSpecification+0x2a>
 8010b96:	8971      	ldrh	r1, [r6, #10]
 8010b98:	4638      	mov	r0, r7
 8010b9a:	f7fb fdcb 	bl	800c734 <ucdr_serialize_uint16_t>
 8010b9e:	89b1      	ldrh	r1, [r6, #12]
 8010ba0:	4605      	mov	r5, r0
 8010ba2:	4638      	mov	r0, r7
 8010ba4:	f7fb fdc6 	bl	800c734 <ucdr_serialize_uint16_t>
 8010ba8:	89f1      	ldrh	r1, [r6, #14]
 8010baa:	4005      	ands	r5, r0
 8010bac:	4638      	mov	r0, r7
 8010bae:	f7fb fdc1 	bl	800c734 <ucdr_serialize_uint16_t>
 8010bb2:	8a31      	ldrh	r1, [r6, #16]
 8010bb4:	4680      	mov	r8, r0
 8010bb6:	4638      	mov	r0, r7
 8010bb8:	f7fb fdbc 	bl	800c734 <ucdr_serialize_uint16_t>
 8010bbc:	b2ed      	uxtb	r5, r5
 8010bbe:	4025      	ands	r5, r4
 8010bc0:	ea08 0505 	and.w	r5, r8, r5
 8010bc4:	ea00 0405 	and.w	r4, r0, r5
 8010bc8:	4620      	mov	r0, r4
 8010bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bce:	bf00      	nop

08010bd0 <uxr_serialize_CREATE_CLIENT_Payload>:
 8010bd0:	f7ff ba16 	b.w	8010000 <uxr_serialize_CLIENT_Representation>

08010bd4 <uxr_serialize_CREATE_Payload>:
 8010bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bd6:	2202      	movs	r2, #2
 8010bd8:	4607      	mov	r7, r0
 8010bda:	460e      	mov	r6, r1
 8010bdc:	f7fb fb34 	bl	800c248 <ucdr_serialize_array_uint8_t>
 8010be0:	2202      	movs	r2, #2
 8010be2:	18b1      	adds	r1, r6, r2
 8010be4:	4605      	mov	r5, r0
 8010be6:	4638      	mov	r0, r7
 8010be8:	f7fb fb2e 	bl	800c248 <ucdr_serialize_array_uint8_t>
 8010bec:	7931      	ldrb	r1, [r6, #4]
 8010bee:	4604      	mov	r4, r0
 8010bf0:	4638      	mov	r0, r7
 8010bf2:	f7fb fd73 	bl	800c6dc <ucdr_serialize_uint8_t>
 8010bf6:	b170      	cbz	r0, 8010c16 <uxr_serialize_CREATE_Payload+0x42>
 8010bf8:	7933      	ldrb	r3, [r6, #4]
 8010bfa:	402c      	ands	r4, r5
 8010bfc:	3b01      	subs	r3, #1
 8010bfe:	b2e4      	uxtb	r4, r4
 8010c00:	2b0d      	cmp	r3, #13
 8010c02:	d809      	bhi.n	8010c18 <uxr_serialize_CREATE_Payload+0x44>
 8010c04:	e8df f003 	tbb	[pc, r3]
 8010c08:	23230a4c 	.word	0x23230a4c
 8010c0c:	0a0a0a0a 	.word	0x0a0a0a0a
 8010c10:	12121208 	.word	0x12121208
 8010c14:	3e45      	.short	0x3e45
 8010c16:	2400      	movs	r4, #0
 8010c18:	4620      	mov	r0, r4
 8010c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c1c:	f106 0108 	add.w	r1, r6, #8
 8010c20:	4638      	mov	r0, r7
 8010c22:	f7ff faf3 	bl	801020c <uxr_serialize_DATAWRITER_Representation>
 8010c26:	4004      	ands	r4, r0
 8010c28:	4620      	mov	r0, r4
 8010c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c2c:	7a31      	ldrb	r1, [r6, #8]
 8010c2e:	4638      	mov	r0, r7
 8010c30:	f7fb fd54 	bl	800c6dc <ucdr_serialize_uint8_t>
 8010c34:	2800      	cmp	r0, #0
 8010c36:	d0ee      	beq.n	8010c16 <uxr_serialize_CREATE_Payload+0x42>
 8010c38:	7a33      	ldrb	r3, [r6, #8]
 8010c3a:	2b01      	cmp	r3, #1
 8010c3c:	d001      	beq.n	8010c42 <uxr_serialize_CREATE_Payload+0x6e>
 8010c3e:	2b02      	cmp	r3, #2
 8010c40:	d1ea      	bne.n	8010c18 <uxr_serialize_CREATE_Payload+0x44>
 8010c42:	68f1      	ldr	r1, [r6, #12]
 8010c44:	4638      	mov	r0, r7
 8010c46:	f004 f997 	bl	8014f78 <ucdr_serialize_string>
 8010c4a:	4004      	ands	r4, r0
 8010c4c:	e7e4      	b.n	8010c18 <uxr_serialize_CREATE_Payload+0x44>
 8010c4e:	7a31      	ldrb	r1, [r6, #8]
 8010c50:	4638      	mov	r0, r7
 8010c52:	f7fb fd43 	bl	800c6dc <ucdr_serialize_uint8_t>
 8010c56:	4605      	mov	r5, r0
 8010c58:	b158      	cbz	r0, 8010c72 <uxr_serialize_CREATE_Payload+0x9e>
 8010c5a:	7a33      	ldrb	r3, [r6, #8]
 8010c5c:	2b02      	cmp	r3, #2
 8010c5e:	d034      	beq.n	8010cca <uxr_serialize_CREATE_Payload+0xf6>
 8010c60:	2b03      	cmp	r3, #3
 8010c62:	d106      	bne.n	8010c72 <uxr_serialize_CREATE_Payload+0x9e>
 8010c64:	68f2      	ldr	r2, [r6, #12]
 8010c66:	f106 0110 	add.w	r1, r6, #16
 8010c6a:	4638      	mov	r0, r7
 8010c6c:	f7fd f9e4 	bl	800e038 <ucdr_serialize_sequence_uint8_t>
 8010c70:	4605      	mov	r5, r0
 8010c72:	2202      	movs	r2, #2
 8010c74:	f506 7104 	add.w	r1, r6, #528	; 0x210
 8010c78:	4638      	mov	r0, r7
 8010c7a:	f7fb fae5 	bl	800c248 <ucdr_serialize_array_uint8_t>
 8010c7e:	4028      	ands	r0, r5
 8010c80:	4004      	ands	r4, r0
 8010c82:	e7c9      	b.n	8010c18 <uxr_serialize_CREATE_Payload+0x44>
 8010c84:	f106 0108 	add.w	r1, r6, #8
 8010c88:	4638      	mov	r0, r7
 8010c8a:	f7ff f9b9 	bl	8010000 <uxr_serialize_CLIENT_Representation>
 8010c8e:	4004      	ands	r4, r0
 8010c90:	e7c2      	b.n	8010c18 <uxr_serialize_CREATE_Payload+0x44>
 8010c92:	f106 0108 	add.w	r1, r6, #8
 8010c96:	4638      	mov	r0, r7
 8010c98:	f7ff fa6e 	bl	8010178 <uxr_serialize_AGENT_Representation>
 8010c9c:	4004      	ands	r4, r0
 8010c9e:	e7bb      	b.n	8010c18 <uxr_serialize_CREATE_Payload+0x44>
 8010ca0:	7a31      	ldrb	r1, [r6, #8]
 8010ca2:	4638      	mov	r0, r7
 8010ca4:	f7fb fd1a 	bl	800c6dc <ucdr_serialize_uint8_t>
 8010ca8:	4605      	mov	r5, r0
 8010caa:	b130      	cbz	r0, 8010cba <uxr_serialize_CREATE_Payload+0xe6>
 8010cac:	7a33      	ldrb	r3, [r6, #8]
 8010cae:	2b02      	cmp	r3, #2
 8010cb0:	d011      	beq.n	8010cd6 <uxr_serialize_CREATE_Payload+0x102>
 8010cb2:	2b03      	cmp	r3, #3
 8010cb4:	d015      	beq.n	8010ce2 <uxr_serialize_CREATE_Payload+0x10e>
 8010cb6:	2b01      	cmp	r3, #1
 8010cb8:	d00d      	beq.n	8010cd6 <uxr_serialize_CREATE_Payload+0x102>
 8010cba:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 8010cbe:	4638      	mov	r0, r7
 8010cc0:	f7fc fa48 	bl	800d154 <ucdr_serialize_int16_t>
 8010cc4:	4028      	ands	r0, r5
 8010cc6:	4004      	ands	r4, r0
 8010cc8:	e7a6      	b.n	8010c18 <uxr_serialize_CREATE_Payload+0x44>
 8010cca:	68f1      	ldr	r1, [r6, #12]
 8010ccc:	4638      	mov	r0, r7
 8010cce:	f004 f953 	bl	8014f78 <ucdr_serialize_string>
 8010cd2:	4605      	mov	r5, r0
 8010cd4:	e7cd      	b.n	8010c72 <uxr_serialize_CREATE_Payload+0x9e>
 8010cd6:	68f1      	ldr	r1, [r6, #12]
 8010cd8:	4638      	mov	r0, r7
 8010cda:	f004 f94d 	bl	8014f78 <ucdr_serialize_string>
 8010cde:	4605      	mov	r5, r0
 8010ce0:	e7eb      	b.n	8010cba <uxr_serialize_CREATE_Payload+0xe6>
 8010ce2:	68f2      	ldr	r2, [r6, #12]
 8010ce4:	f106 0110 	add.w	r1, r6, #16
 8010ce8:	4638      	mov	r0, r7
 8010cea:	f7fd f9a5 	bl	800e038 <ucdr_serialize_sequence_uint8_t>
 8010cee:	4605      	mov	r5, r0
 8010cf0:	e7e3      	b.n	8010cba <uxr_serialize_CREATE_Payload+0xe6>
 8010cf2:	bf00      	nop

08010cf4 <uxr_deserialize_GET_INFO_Payload>:
 8010cf4:	b570      	push	{r4, r5, r6, lr}
 8010cf6:	2202      	movs	r2, #2
 8010cf8:	4605      	mov	r5, r0
 8010cfa:	460e      	mov	r6, r1
 8010cfc:	f7fb fb08 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 8010d00:	2202      	movs	r2, #2
 8010d02:	18b1      	adds	r1, r6, r2
 8010d04:	4604      	mov	r4, r0
 8010d06:	4628      	mov	r0, r5
 8010d08:	f7fb fb02 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 8010d0c:	1d31      	adds	r1, r6, #4
 8010d0e:	4004      	ands	r4, r0
 8010d10:	4628      	mov	r0, r5
 8010d12:	f7fc f829 	bl	800cd68 <ucdr_deserialize_uint32_t>
 8010d16:	b2e4      	uxtb	r4, r4
 8010d18:	4020      	ands	r0, r4
 8010d1a:	bd70      	pop	{r4, r5, r6, pc}

08010d1c <uxr_serialize_DELETE_Payload>:
 8010d1c:	b570      	push	{r4, r5, r6, lr}
 8010d1e:	2202      	movs	r2, #2
 8010d20:	4605      	mov	r5, r0
 8010d22:	460e      	mov	r6, r1
 8010d24:	f7fb fa90 	bl	800c248 <ucdr_serialize_array_uint8_t>
 8010d28:	2202      	movs	r2, #2
 8010d2a:	4604      	mov	r4, r0
 8010d2c:	18b1      	adds	r1, r6, r2
 8010d2e:	4628      	mov	r0, r5
 8010d30:	f7fb fa8a 	bl	800c248 <ucdr_serialize_array_uint8_t>
 8010d34:	4020      	ands	r0, r4
 8010d36:	b2c0      	uxtb	r0, r0
 8010d38:	bd70      	pop	{r4, r5, r6, pc}
 8010d3a:	bf00      	nop

08010d3c <uxr_deserialize_STATUS_AGENT_Payload>:
 8010d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d40:	4605      	mov	r5, r0
 8010d42:	460e      	mov	r6, r1
 8010d44:	f7fb fce0 	bl	800c708 <ucdr_deserialize_uint8_t>
 8010d48:	1c71      	adds	r1, r6, #1
 8010d4a:	4604      	mov	r4, r0
 8010d4c:	4628      	mov	r0, r5
 8010d4e:	f7fb fcdb 	bl	800c708 <ucdr_deserialize_uint8_t>
 8010d52:	2204      	movs	r2, #4
 8010d54:	18b1      	adds	r1, r6, r2
 8010d56:	4680      	mov	r8, r0
 8010d58:	4628      	mov	r0, r5
 8010d5a:	f7fb fad9 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 8010d5e:	f106 0108 	add.w	r1, r6, #8
 8010d62:	4607      	mov	r7, r0
 8010d64:	2202      	movs	r2, #2
 8010d66:	4628      	mov	r0, r5
 8010d68:	f7fb fad2 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 8010d6c:	ea04 0308 	and.w	r3, r4, r8
 8010d70:	b2db      	uxtb	r3, r3
 8010d72:	ea03 0407 	and.w	r4, r3, r7
 8010d76:	2202      	movs	r2, #2
 8010d78:	4607      	mov	r7, r0
 8010d7a:	f106 010a 	add.w	r1, r6, #10
 8010d7e:	4628      	mov	r0, r5
 8010d80:	f7fb fac6 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 8010d84:	f106 010c 	add.w	r1, r6, #12
 8010d88:	4603      	mov	r3, r0
 8010d8a:	4628      	mov	r0, r5
 8010d8c:	461d      	mov	r5, r3
 8010d8e:	f7fb fc8d 	bl	800c6ac <ucdr_deserialize_bool>
 8010d92:	403c      	ands	r4, r7
 8010d94:	4025      	ands	r5, r4
 8010d96:	4028      	ands	r0, r5
 8010d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010d9c <uxr_deserialize_STATUS_Payload>:
 8010d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010da0:	2202      	movs	r2, #2
 8010da2:	4606      	mov	r6, r0
 8010da4:	460f      	mov	r7, r1
 8010da6:	f7fb fab3 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 8010daa:	2202      	movs	r2, #2
 8010dac:	18b9      	adds	r1, r7, r2
 8010dae:	4605      	mov	r5, r0
 8010db0:	4630      	mov	r0, r6
 8010db2:	f7fb faad 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 8010db6:	1d39      	adds	r1, r7, #4
 8010db8:	4680      	mov	r8, r0
 8010dba:	4630      	mov	r0, r6
 8010dbc:	f7fb fca4 	bl	800c708 <ucdr_deserialize_uint8_t>
 8010dc0:	1d79      	adds	r1, r7, #5
 8010dc2:	4604      	mov	r4, r0
 8010dc4:	4630      	mov	r0, r6
 8010dc6:	f7fb fc9f 	bl	800c708 <ucdr_deserialize_uint8_t>
 8010dca:	ea05 0508 	and.w	r5, r5, r8
 8010dce:	402c      	ands	r4, r5
 8010dd0:	4020      	ands	r0, r4
 8010dd2:	b2c0      	uxtb	r0, r0
 8010dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010dd8 <uxr_serialize_INFO_Payload>:
 8010dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ddc:	2202      	movs	r2, #2
 8010dde:	460c      	mov	r4, r1
 8010de0:	4605      	mov	r5, r0
 8010de2:	f7fb fa31 	bl	800c248 <ucdr_serialize_array_uint8_t>
 8010de6:	2202      	movs	r2, #2
 8010de8:	18a1      	adds	r1, r4, r2
 8010dea:	4680      	mov	r8, r0
 8010dec:	4628      	mov	r0, r5
 8010dee:	f7fb fa2b 	bl	800c248 <ucdr_serialize_array_uint8_t>
 8010df2:	7921      	ldrb	r1, [r4, #4]
 8010df4:	4607      	mov	r7, r0
 8010df6:	4628      	mov	r0, r5
 8010df8:	f7fb fc70 	bl	800c6dc <ucdr_serialize_uint8_t>
 8010dfc:	7961      	ldrb	r1, [r4, #5]
 8010dfe:	4606      	mov	r6, r0
 8010e00:	4628      	mov	r0, r5
 8010e02:	f7fb fc6b 	bl	800c6dc <ucdr_serialize_uint8_t>
 8010e06:	ea08 0807 	and.w	r8, r8, r7
 8010e0a:	ea06 0608 	and.w	r6, r6, r8
 8010e0e:	4006      	ands	r6, r0
 8010e10:	7a21      	ldrb	r1, [r4, #8]
 8010e12:	4628      	mov	r0, r5
 8010e14:	f7fb fc34 	bl	800c680 <ucdr_serialize_bool>
 8010e18:	7a23      	ldrb	r3, [r4, #8]
 8010e1a:	b2f7      	uxtb	r7, r6
 8010e1c:	4606      	mov	r6, r0
 8010e1e:	b96b      	cbnz	r3, 8010e3c <uxr_serialize_INFO_Payload+0x64>
 8010e20:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 8010e24:	4628      	mov	r0, r5
 8010e26:	f7fb fc2b 	bl	800c680 <ucdr_serialize_bool>
 8010e2a:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8010e2e:	4030      	ands	r0, r6
 8010e30:	b2c6      	uxtb	r6, r0
 8010e32:	b983      	cbnz	r3, 8010e56 <uxr_serialize_INFO_Payload+0x7e>
 8010e34:	ea06 0007 	and.w	r0, r6, r7
 8010e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e3c:	7b21      	ldrb	r1, [r4, #12]
 8010e3e:	4628      	mov	r0, r5
 8010e40:	f7fb fc4c 	bl	800c6dc <ucdr_serialize_uint8_t>
 8010e44:	b188      	cbz	r0, 8010e6a <uxr_serialize_INFO_Payload+0x92>
 8010e46:	f104 010c 	add.w	r1, r4, #12
 8010e4a:	4628      	mov	r0, r5
 8010e4c:	f7ff fa06 	bl	801025c <uxr_serialize_ObjectVariant.part.0>
 8010e50:	4030      	ands	r0, r6
 8010e52:	b2c6      	uxtb	r6, r0
 8010e54:	e7e4      	b.n	8010e20 <uxr_serialize_INFO_Payload+0x48>
 8010e56:	f504 7108 	add.w	r1, r4, #544	; 0x220
 8010e5a:	4628      	mov	r0, r5
 8010e5c:	f7ff fdb2 	bl	80109c4 <uxr_serialize_ActivityInfoVariant>
 8010e60:	4006      	ands	r6, r0
 8010e62:	ea06 0007 	and.w	r0, r6, r7
 8010e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e6a:	4606      	mov	r6, r0
 8010e6c:	e7d8      	b.n	8010e20 <uxr_serialize_INFO_Payload+0x48>
 8010e6e:	bf00      	nop

08010e70 <uxr_serialize_READ_DATA_Payload>:
 8010e70:	b570      	push	{r4, r5, r6, lr}
 8010e72:	2202      	movs	r2, #2
 8010e74:	4605      	mov	r5, r0
 8010e76:	460e      	mov	r6, r1
 8010e78:	f7fb f9e6 	bl	800c248 <ucdr_serialize_array_uint8_t>
 8010e7c:	2202      	movs	r2, #2
 8010e7e:	18b1      	adds	r1, r6, r2
 8010e80:	4604      	mov	r4, r0
 8010e82:	4628      	mov	r0, r5
 8010e84:	f7fb f9e0 	bl	800c248 <ucdr_serialize_array_uint8_t>
 8010e88:	1d31      	adds	r1, r6, #4
 8010e8a:	4004      	ands	r4, r0
 8010e8c:	4628      	mov	r0, r5
 8010e8e:	f7ff fe5d 	bl	8010b4c <uxr_serialize_ReadSpecification>
 8010e92:	b2e4      	uxtb	r4, r4
 8010e94:	4020      	ands	r0, r4
 8010e96:	bd70      	pop	{r4, r5, r6, pc}

08010e98 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8010e98:	b570      	push	{r4, r5, r6, lr}
 8010e9a:	2202      	movs	r2, #2
 8010e9c:	4605      	mov	r5, r0
 8010e9e:	460e      	mov	r6, r1
 8010ea0:	f7fb f9d2 	bl	800c248 <ucdr_serialize_array_uint8_t>
 8010ea4:	2202      	movs	r2, #2
 8010ea6:	4604      	mov	r4, r0
 8010ea8:	18b1      	adds	r1, r6, r2
 8010eaa:	4628      	mov	r0, r5
 8010eac:	f7fb f9cc 	bl	800c248 <ucdr_serialize_array_uint8_t>
 8010eb0:	4020      	ands	r0, r4
 8010eb2:	b2c0      	uxtb	r0, r0
 8010eb4:	bd70      	pop	{r4, r5, r6, pc}
 8010eb6:	bf00      	nop

08010eb8 <uxr_serialize_ACKNACK_Payload>:
 8010eb8:	b570      	push	{r4, r5, r6, lr}
 8010eba:	460c      	mov	r4, r1
 8010ebc:	460e      	mov	r6, r1
 8010ebe:	f834 1b02 	ldrh.w	r1, [r4], #2
 8010ec2:	4605      	mov	r5, r0
 8010ec4:	f7fb fc36 	bl	800c734 <ucdr_serialize_uint16_t>
 8010ec8:	2202      	movs	r2, #2
 8010eca:	4621      	mov	r1, r4
 8010ecc:	4604      	mov	r4, r0
 8010ece:	4628      	mov	r0, r5
 8010ed0:	f7fb f9ba 	bl	800c248 <ucdr_serialize_array_uint8_t>
 8010ed4:	7931      	ldrb	r1, [r6, #4]
 8010ed6:	4004      	ands	r4, r0
 8010ed8:	4628      	mov	r0, r5
 8010eda:	f7fb fbff 	bl	800c6dc <ucdr_serialize_uint8_t>
 8010ede:	b2e4      	uxtb	r4, r4
 8010ee0:	4020      	ands	r0, r4
 8010ee2:	bd70      	pop	{r4, r5, r6, pc}

08010ee4 <uxr_deserialize_ACKNACK_Payload>:
 8010ee4:	b570      	push	{r4, r5, r6, lr}
 8010ee6:	4605      	mov	r5, r0
 8010ee8:	460e      	mov	r6, r1
 8010eea:	f7fb fd23 	bl	800c934 <ucdr_deserialize_uint16_t>
 8010eee:	2202      	movs	r2, #2
 8010ef0:	18b1      	adds	r1, r6, r2
 8010ef2:	4604      	mov	r4, r0
 8010ef4:	4628      	mov	r0, r5
 8010ef6:	f7fb fa0b 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 8010efa:	1d31      	adds	r1, r6, #4
 8010efc:	4004      	ands	r4, r0
 8010efe:	4628      	mov	r0, r5
 8010f00:	f7fb fc02 	bl	800c708 <ucdr_deserialize_uint8_t>
 8010f04:	b2e4      	uxtb	r4, r4
 8010f06:	4020      	ands	r0, r4
 8010f08:	bd70      	pop	{r4, r5, r6, pc}
 8010f0a:	bf00      	nop

08010f0c <uxr_serialize_HEARTBEAT_Payload>:
 8010f0c:	b570      	push	{r4, r5, r6, lr}
 8010f0e:	460d      	mov	r5, r1
 8010f10:	8809      	ldrh	r1, [r1, #0]
 8010f12:	4606      	mov	r6, r0
 8010f14:	f7fb fc0e 	bl	800c734 <ucdr_serialize_uint16_t>
 8010f18:	8869      	ldrh	r1, [r5, #2]
 8010f1a:	4604      	mov	r4, r0
 8010f1c:	4630      	mov	r0, r6
 8010f1e:	f7fb fc09 	bl	800c734 <ucdr_serialize_uint16_t>
 8010f22:	7929      	ldrb	r1, [r5, #4]
 8010f24:	4004      	ands	r4, r0
 8010f26:	4630      	mov	r0, r6
 8010f28:	f7fb fbd8 	bl	800c6dc <ucdr_serialize_uint8_t>
 8010f2c:	b2e4      	uxtb	r4, r4
 8010f2e:	4020      	ands	r0, r4
 8010f30:	bd70      	pop	{r4, r5, r6, pc}
 8010f32:	bf00      	nop

08010f34 <uxr_deserialize_HEARTBEAT_Payload>:
 8010f34:	b570      	push	{r4, r5, r6, lr}
 8010f36:	4605      	mov	r5, r0
 8010f38:	460e      	mov	r6, r1
 8010f3a:	f7fb fcfb 	bl	800c934 <ucdr_deserialize_uint16_t>
 8010f3e:	1cb1      	adds	r1, r6, #2
 8010f40:	4604      	mov	r4, r0
 8010f42:	4628      	mov	r0, r5
 8010f44:	f7fb fcf6 	bl	800c934 <ucdr_deserialize_uint16_t>
 8010f48:	1d31      	adds	r1, r6, #4
 8010f4a:	4004      	ands	r4, r0
 8010f4c:	4628      	mov	r0, r5
 8010f4e:	f7fb fbdb 	bl	800c708 <ucdr_deserialize_uint8_t>
 8010f52:	b2e4      	uxtb	r4, r4
 8010f54:	4020      	ands	r0, r4
 8010f56:	bd70      	pop	{r4, r5, r6, pc}

08010f58 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8010f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f5c:	4605      	mov	r5, r0
 8010f5e:	460e      	mov	r6, r1
 8010f60:	f7fc fa84 	bl	800d46c <ucdr_deserialize_int32_t>
 8010f64:	1d31      	adds	r1, r6, #4
 8010f66:	4607      	mov	r7, r0
 8010f68:	4628      	mov	r0, r5
 8010f6a:	f7fb fefd 	bl	800cd68 <ucdr_deserialize_uint32_t>
 8010f6e:	f106 0108 	add.w	r1, r6, #8
 8010f72:	4680      	mov	r8, r0
 8010f74:	4628      	mov	r0, r5
 8010f76:	f7fc fa79 	bl	800d46c <ucdr_deserialize_int32_t>
 8010f7a:	f106 010c 	add.w	r1, r6, #12
 8010f7e:	4604      	mov	r4, r0
 8010f80:	4628      	mov	r0, r5
 8010f82:	f7fb fef1 	bl	800cd68 <ucdr_deserialize_uint32_t>
 8010f86:	ea07 0708 	and.w	r7, r7, r8
 8010f8a:	403c      	ands	r4, r7
 8010f8c:	f106 0110 	add.w	r1, r6, #16
 8010f90:	4004      	ands	r4, r0
 8010f92:	4628      	mov	r0, r5
 8010f94:	f7fc fa6a 	bl	800d46c <ucdr_deserialize_int32_t>
 8010f98:	f106 0114 	add.w	r1, r6, #20
 8010f9c:	4607      	mov	r7, r0
 8010f9e:	4628      	mov	r0, r5
 8010fa0:	f7fb fee2 	bl	800cd68 <ucdr_deserialize_uint32_t>
 8010fa4:	b2e4      	uxtb	r4, r4
 8010fa6:	403c      	ands	r4, r7
 8010fa8:	4020      	ands	r0, r4
 8010faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fae:	bf00      	nop

08010fb0 <uxr_serialize_SampleIdentity>:
 8010fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fb4:	220c      	movs	r2, #12
 8010fb6:	4604      	mov	r4, r0
 8010fb8:	460d      	mov	r5, r1
 8010fba:	f7fb f945 	bl	800c248 <ucdr_serialize_array_uint8_t>
 8010fbe:	2203      	movs	r2, #3
 8010fc0:	f105 010c 	add.w	r1, r5, #12
 8010fc4:	4607      	mov	r7, r0
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	f7fb f93e 	bl	800c248 <ucdr_serialize_array_uint8_t>
 8010fcc:	7be9      	ldrb	r1, [r5, #15]
 8010fce:	4680      	mov	r8, r0
 8010fd0:	4620      	mov	r0, r4
 8010fd2:	f7fb fb83 	bl	800c6dc <ucdr_serialize_uint8_t>
 8010fd6:	6929      	ldr	r1, [r5, #16]
 8010fd8:	4606      	mov	r6, r0
 8010fda:	4620      	mov	r0, r4
 8010fdc:	f7fc f9ae 	bl	800d33c <ucdr_serialize_int32_t>
 8010fe0:	6969      	ldr	r1, [r5, #20]
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	4620      	mov	r0, r4
 8010fe6:	ea07 0708 	and.w	r7, r7, r8
 8010fea:	461c      	mov	r4, r3
 8010fec:	f7fb fd8c 	bl	800cb08 <ucdr_serialize_uint32_t>
 8010ff0:	403e      	ands	r6, r7
 8010ff2:	4034      	ands	r4, r6
 8010ff4:	4020      	ands	r0, r4
 8010ff6:	b2c0      	uxtb	r0, r0
 8010ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010ffc <uxr_deserialize_SampleIdentity>:
 8010ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011000:	220c      	movs	r2, #12
 8011002:	4604      	mov	r4, r0
 8011004:	460d      	mov	r5, r1
 8011006:	f7fb f983 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 801100a:	2203      	movs	r2, #3
 801100c:	f105 010c 	add.w	r1, r5, #12
 8011010:	4607      	mov	r7, r0
 8011012:	4620      	mov	r0, r4
 8011014:	f7fb f97c 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 8011018:	f105 010f 	add.w	r1, r5, #15
 801101c:	4680      	mov	r8, r0
 801101e:	4620      	mov	r0, r4
 8011020:	f7fb fb72 	bl	800c708 <ucdr_deserialize_uint8_t>
 8011024:	f105 0110 	add.w	r1, r5, #16
 8011028:	4606      	mov	r6, r0
 801102a:	4620      	mov	r0, r4
 801102c:	f7fc fa1e 	bl	800d46c <ucdr_deserialize_int32_t>
 8011030:	f105 0114 	add.w	r1, r5, #20
 8011034:	4603      	mov	r3, r0
 8011036:	4620      	mov	r0, r4
 8011038:	ea07 0708 	and.w	r7, r7, r8
 801103c:	461c      	mov	r4, r3
 801103e:	f7fb fe93 	bl	800cd68 <ucdr_deserialize_uint32_t>
 8011042:	403e      	ands	r6, r7
 8011044:	4034      	ands	r4, r6
 8011046:	4020      	ands	r0, r4
 8011048:	b2c0      	uxtb	r0, r0
 801104a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801104e:	bf00      	nop

08011050 <rcl_client_get_rmw_handle>:
 8011050:	b118      	cbz	r0, 801105a <rcl_client_get_rmw_handle+0xa>
 8011052:	6800      	ldr	r0, [r0, #0]
 8011054:	b108      	cbz	r0, 801105a <rcl_client_get_rmw_handle+0xa>
 8011056:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801105a:	4770      	bx	lr

0801105c <rcl_send_request>:
 801105c:	b570      	push	{r4, r5, r6, lr}
 801105e:	b082      	sub	sp, #8
 8011060:	b1e8      	cbz	r0, 801109e <rcl_send_request+0x42>
 8011062:	4604      	mov	r4, r0
 8011064:	6800      	ldr	r0, [r0, #0]
 8011066:	b1d0      	cbz	r0, 801109e <rcl_send_request+0x42>
 8011068:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 801106c:	b1bb      	cbz	r3, 801109e <rcl_send_request+0x42>
 801106e:	460e      	mov	r6, r1
 8011070:	b1d1      	cbz	r1, 80110a8 <rcl_send_request+0x4c>
 8011072:	4615      	mov	r5, r2
 8011074:	b1c2      	cbz	r2, 80110a8 <rcl_send_request+0x4c>
 8011076:	2105      	movs	r1, #5
 8011078:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801107c:	f002 fb3c 	bl	80136f8 <__atomic_load_8>
 8011080:	6823      	ldr	r3, [r4, #0]
 8011082:	e9c5 0100 	strd	r0, r1, [r5]
 8011086:	462a      	mov	r2, r5
 8011088:	4631      	mov	r1, r6
 801108a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801108e:	f003 f9c1 	bl	8014414 <rmw_send_request>
 8011092:	4606      	mov	r6, r0
 8011094:	b160      	cbz	r0, 80110b0 <rcl_send_request+0x54>
 8011096:	2601      	movs	r6, #1
 8011098:	4630      	mov	r0, r6
 801109a:	b002      	add	sp, #8
 801109c:	bd70      	pop	{r4, r5, r6, pc}
 801109e:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 80110a2:	4630      	mov	r0, r6
 80110a4:	b002      	add	sp, #8
 80110a6:	bd70      	pop	{r4, r5, r6, pc}
 80110a8:	260b      	movs	r6, #11
 80110aa:	4630      	mov	r0, r6
 80110ac:	b002      	add	sp, #8
 80110ae:	bd70      	pop	{r4, r5, r6, pc}
 80110b0:	6820      	ldr	r0, [r4, #0]
 80110b2:	2105      	movs	r1, #5
 80110b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80110b8:	f500 7088 	add.w	r0, r0, #272	; 0x110
 80110bc:	9100      	str	r1, [sp, #0]
 80110be:	f002 fb87 	bl	80137d0 <__atomic_exchange_8>
 80110c2:	4630      	mov	r0, r6
 80110c4:	b002      	add	sp, #8
 80110c6:	bd70      	pop	{r4, r5, r6, pc}

080110c8 <rcl_take_response>:
 80110c8:	b570      	push	{r4, r5, r6, lr}
 80110ca:	468e      	mov	lr, r1
 80110cc:	460c      	mov	r4, r1
 80110ce:	4616      	mov	r6, r2
 80110d0:	4605      	mov	r5, r0
 80110d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80110d6:	b08c      	sub	sp, #48	; 0x30
 80110d8:	f10d 0c18 	add.w	ip, sp, #24
 80110dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80110e0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80110e4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80110e8:	b35d      	cbz	r5, 8011142 <rcl_take_response+0x7a>
 80110ea:	682b      	ldr	r3, [r5, #0]
 80110ec:	b34b      	cbz	r3, 8011142 <rcl_take_response+0x7a>
 80110ee:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80110f2:	b330      	cbz	r0, 8011142 <rcl_take_response+0x7a>
 80110f4:	b346      	cbz	r6, 8011148 <rcl_take_response+0x80>
 80110f6:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011150 <rcl_take_response+0x88>
 80110fa:	2300      	movs	r3, #0
 80110fc:	f88d 3007 	strb.w	r3, [sp, #7]
 8011100:	4632      	mov	r2, r6
 8011102:	f10d 0307 	add.w	r3, sp, #7
 8011106:	a902      	add	r1, sp, #8
 8011108:	ed8d 7b02 	vstr	d7, [sp, #8]
 801110c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011110:	f003 fa88 	bl	8014624 <rmw_take_response>
 8011114:	4605      	mov	r5, r0
 8011116:	b9c8      	cbnz	r0, 801114c <rcl_take_response+0x84>
 8011118:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801111c:	f240 13f5 	movw	r3, #501	; 0x1f5
 8011120:	2a00      	cmp	r2, #0
 8011122:	bf08      	it	eq
 8011124:	461d      	moveq	r5, r3
 8011126:	f10d 0e18 	add.w	lr, sp, #24
 801112a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801112e:	46a4      	mov	ip, r4
 8011130:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011134:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011138:	e88c 0003 	stmia.w	ip, {r0, r1}
 801113c:	4628      	mov	r0, r5
 801113e:	b00c      	add	sp, #48	; 0x30
 8011140:	bd70      	pop	{r4, r5, r6, pc}
 8011142:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 8011146:	e7ee      	b.n	8011126 <rcl_take_response+0x5e>
 8011148:	250b      	movs	r5, #11
 801114a:	e7ec      	b.n	8011126 <rcl_take_response+0x5e>
 801114c:	2501      	movs	r5, #1
 801114e:	e7ea      	b.n	8011126 <rcl_take_response+0x5e>
	...

08011158 <rcl_client_is_valid>:
 8011158:	b130      	cbz	r0, 8011168 <rcl_client_is_valid+0x10>
 801115a:	6800      	ldr	r0, [r0, #0]
 801115c:	b120      	cbz	r0, 8011168 <rcl_client_is_valid+0x10>
 801115e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8011162:	3800      	subs	r0, #0
 8011164:	bf18      	it	ne
 8011166:	2001      	movne	r0, #1
 8011168:	4770      	bx	lr
 801116a:	bf00      	nop

0801116c <rcl_convert_rmw_ret_to_rcl_ret>:
 801116c:	280b      	cmp	r0, #11
 801116e:	dc0d      	bgt.n	801118c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8011170:	2800      	cmp	r0, #0
 8011172:	db09      	blt.n	8011188 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011174:	280b      	cmp	r0, #11
 8011176:	d807      	bhi.n	8011188 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011178:	e8df f000 	tbb	[pc, r0]
 801117c:	07060607 	.word	0x07060607
 8011180:	06060606 	.word	0x06060606
 8011184:	07070606 	.word	0x07070606
 8011188:	2001      	movs	r0, #1
 801118a:	4770      	bx	lr
 801118c:	28cb      	cmp	r0, #203	; 0xcb
 801118e:	bf18      	it	ne
 8011190:	2001      	movne	r0, #1
 8011192:	4770      	bx	lr

08011194 <rcl_get_zero_initialized_context>:
 8011194:	4a03      	ldr	r2, [pc, #12]	; (80111a4 <rcl_get_zero_initialized_context+0x10>)
 8011196:	4603      	mov	r3, r0
 8011198:	e892 0003 	ldmia.w	r2, {r0, r1}
 801119c:	e883 0003 	stmia.w	r3, {r0, r1}
 80111a0:	4618      	mov	r0, r3
 80111a2:	4770      	bx	lr
 80111a4:	08019288 	.word	0x08019288

080111a8 <rcl_context_is_valid>:
 80111a8:	b118      	cbz	r0, 80111b2 <rcl_context_is_valid+0xa>
 80111aa:	6840      	ldr	r0, [r0, #4]
 80111ac:	3800      	subs	r0, #0
 80111ae:	bf18      	it	ne
 80111b0:	2001      	movne	r0, #1
 80111b2:	4770      	bx	lr

080111b4 <__cleanup_context>:
 80111b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111b8:	4606      	mov	r6, r0
 80111ba:	6800      	ldr	r0, [r0, #0]
 80111bc:	2300      	movs	r3, #0
 80111be:	6073      	str	r3, [r6, #4]
 80111c0:	2800      	cmp	r0, #0
 80111c2:	d049      	beq.n	8011258 <__cleanup_context+0xa4>
 80111c4:	6947      	ldr	r7, [r0, #20]
 80111c6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80111ca:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80111ce:	b137      	cbz	r7, 80111de <__cleanup_context+0x2a>
 80111d0:	3014      	adds	r0, #20
 80111d2:	f000 fa6d 	bl	80116b0 <rcl_init_options_fini>
 80111d6:	4607      	mov	r7, r0
 80111d8:	2800      	cmp	r0, #0
 80111da:	d144      	bne.n	8011266 <__cleanup_context+0xb2>
 80111dc:	6830      	ldr	r0, [r6, #0]
 80111de:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80111e0:	b143      	cbz	r3, 80111f4 <__cleanup_context+0x40>
 80111e2:	3028      	adds	r0, #40	; 0x28
 80111e4:	f003 f872 	bl	80142cc <rmw_context_fini>
 80111e8:	b118      	cbz	r0, 80111f2 <__cleanup_context+0x3e>
 80111ea:	2f00      	cmp	r7, #0
 80111ec:	d03e      	beq.n	801126c <__cleanup_context+0xb8>
 80111ee:	f7f8 fe63 	bl	8009eb8 <rcutils_reset_error>
 80111f2:	6830      	ldr	r0, [r6, #0]
 80111f4:	6a03      	ldr	r3, [r0, #32]
 80111f6:	b1db      	cbz	r3, 8011230 <__cleanup_context+0x7c>
 80111f8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80111fc:	2a01      	cmp	r2, #1
 80111fe:	f17c 0100 	sbcs.w	r1, ip, #0
 8011202:	db11      	blt.n	8011228 <__cleanup_context+0x74>
 8011204:	2400      	movs	r4, #0
 8011206:	4625      	mov	r5, r4
 8011208:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801120c:	4649      	mov	r1, r9
 801120e:	b1b8      	cbz	r0, 8011240 <__cleanup_context+0x8c>
 8011210:	47c0      	blx	r8
 8011212:	6833      	ldr	r3, [r6, #0]
 8011214:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8011218:	3401      	adds	r4, #1
 801121a:	f145 0500 	adc.w	r5, r5, #0
 801121e:	4294      	cmp	r4, r2
 8011220:	eb75 010c 	sbcs.w	r1, r5, ip
 8011224:	6a1b      	ldr	r3, [r3, #32]
 8011226:	dbef      	blt.n	8011208 <__cleanup_context+0x54>
 8011228:	4618      	mov	r0, r3
 801122a:	4649      	mov	r1, r9
 801122c:	47c0      	blx	r8
 801122e:	6830      	ldr	r0, [r6, #0]
 8011230:	4649      	mov	r1, r9
 8011232:	47c0      	blx	r8
 8011234:	2300      	movs	r3, #0
 8011236:	e9c6 3300 	strd	r3, r3, [r6]
 801123a:	4638      	mov	r0, r7
 801123c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011240:	3401      	adds	r4, #1
 8011242:	f145 0500 	adc.w	r5, r5, #0
 8011246:	4294      	cmp	r4, r2
 8011248:	eb75 010c 	sbcs.w	r1, r5, ip
 801124c:	dbdc      	blt.n	8011208 <__cleanup_context+0x54>
 801124e:	4618      	mov	r0, r3
 8011250:	4649      	mov	r1, r9
 8011252:	47c0      	blx	r8
 8011254:	6830      	ldr	r0, [r6, #0]
 8011256:	e7eb      	b.n	8011230 <__cleanup_context+0x7c>
 8011258:	4607      	mov	r7, r0
 801125a:	2300      	movs	r3, #0
 801125c:	e9c6 3300 	strd	r3, r3, [r6]
 8011260:	4638      	mov	r0, r7
 8011262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011266:	f7f8 fe27 	bl	8009eb8 <rcutils_reset_error>
 801126a:	e7b7      	b.n	80111dc <__cleanup_context+0x28>
 801126c:	f7ff ff7e 	bl	801116c <rcl_convert_rmw_ret_to_rcl_ret>
 8011270:	4607      	mov	r7, r0
 8011272:	e7bc      	b.n	80111ee <__cleanup_context+0x3a>

08011274 <rcl_get_zero_initialized_guard_condition>:
 8011274:	4a03      	ldr	r2, [pc, #12]	; (8011284 <rcl_get_zero_initialized_guard_condition+0x10>)
 8011276:	4603      	mov	r3, r0
 8011278:	e892 0003 	ldmia.w	r2, {r0, r1}
 801127c:	e883 0003 	stmia.w	r3, {r0, r1}
 8011280:	4618      	mov	r0, r3
 8011282:	4770      	bx	lr
 8011284:	08019290 	.word	0x08019290

08011288 <rcl_guard_condition_init_from_rmw>:
 8011288:	b082      	sub	sp, #8
 801128a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801128e:	b086      	sub	sp, #24
 8011290:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8011294:	4604      	mov	r4, r0
 8011296:	f84c 3f04 	str.w	r3, [ip, #4]!
 801129a:	460e      	mov	r6, r1
 801129c:	4617      	mov	r7, r2
 801129e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80112a2:	f10d 0e04 	add.w	lr, sp, #4
 80112a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80112aa:	f8dc 3000 	ldr.w	r3, [ip]
 80112ae:	f8ce 3000 	str.w	r3, [lr]
 80112b2:	a801      	add	r0, sp, #4
 80112b4:	f7f8 fdc4 	bl	8009e40 <rcutils_allocator_is_valid>
 80112b8:	b350      	cbz	r0, 8011310 <rcl_guard_condition_init_from_rmw+0x88>
 80112ba:	b34c      	cbz	r4, 8011310 <rcl_guard_condition_init_from_rmw+0x88>
 80112bc:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80112c0:	f1b8 0f00 	cmp.w	r8, #0
 80112c4:	d11e      	bne.n	8011304 <rcl_guard_condition_init_from_rmw+0x7c>
 80112c6:	b31f      	cbz	r7, 8011310 <rcl_guard_condition_init_from_rmw+0x88>
 80112c8:	4638      	mov	r0, r7
 80112ca:	f7ff ff6d 	bl	80111a8 <rcl_context_is_valid>
 80112ce:	b328      	cbz	r0, 801131c <rcl_guard_condition_init_from_rmw+0x94>
 80112d0:	9b01      	ldr	r3, [sp, #4]
 80112d2:	9905      	ldr	r1, [sp, #20]
 80112d4:	201c      	movs	r0, #28
 80112d6:	4798      	blx	r3
 80112d8:	4605      	mov	r5, r0
 80112da:	6060      	str	r0, [r4, #4]
 80112dc:	b358      	cbz	r0, 8011336 <rcl_guard_condition_init_from_rmw+0xae>
 80112de:	b1fe      	cbz	r6, 8011320 <rcl_guard_condition_init_from_rmw+0x98>
 80112e0:	6006      	str	r6, [r0, #0]
 80112e2:	f880 8004 	strb.w	r8, [r0, #4]
 80112e6:	ac01      	add	r4, sp, #4
 80112e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80112ea:	f105 0c08 	add.w	ip, r5, #8
 80112ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80112f2:	6823      	ldr	r3, [r4, #0]
 80112f4:	f8cc 3000 	str.w	r3, [ip]
 80112f8:	2000      	movs	r0, #0
 80112fa:	b006      	add	sp, #24
 80112fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011300:	b002      	add	sp, #8
 8011302:	4770      	bx	lr
 8011304:	2064      	movs	r0, #100	; 0x64
 8011306:	b006      	add	sp, #24
 8011308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801130c:	b002      	add	sp, #8
 801130e:	4770      	bx	lr
 8011310:	200b      	movs	r0, #11
 8011312:	b006      	add	sp, #24
 8011314:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011318:	b002      	add	sp, #8
 801131a:	4770      	bx	lr
 801131c:	2065      	movs	r0, #101	; 0x65
 801131e:	e7f2      	b.n	8011306 <rcl_guard_condition_init_from_rmw+0x7e>
 8011320:	6838      	ldr	r0, [r7, #0]
 8011322:	3028      	adds	r0, #40	; 0x28
 8011324:	f002 fd7c 	bl	8013e20 <rmw_create_guard_condition>
 8011328:	6028      	str	r0, [r5, #0]
 801132a:	6865      	ldr	r5, [r4, #4]
 801132c:	682e      	ldr	r6, [r5, #0]
 801132e:	b126      	cbz	r6, 801133a <rcl_guard_condition_init_from_rmw+0xb2>
 8011330:	2301      	movs	r3, #1
 8011332:	712b      	strb	r3, [r5, #4]
 8011334:	e7d7      	b.n	80112e6 <rcl_guard_condition_init_from_rmw+0x5e>
 8011336:	200a      	movs	r0, #10
 8011338:	e7e5      	b.n	8011306 <rcl_guard_condition_init_from_rmw+0x7e>
 801133a:	4628      	mov	r0, r5
 801133c:	9b02      	ldr	r3, [sp, #8]
 801133e:	9905      	ldr	r1, [sp, #20]
 8011340:	4798      	blx	r3
 8011342:	6066      	str	r6, [r4, #4]
 8011344:	2001      	movs	r0, #1
 8011346:	e7de      	b.n	8011306 <rcl_guard_condition_init_from_rmw+0x7e>

08011348 <rcl_guard_condition_fini>:
 8011348:	b570      	push	{r4, r5, r6, lr}
 801134a:	b082      	sub	sp, #8
 801134c:	b1f0      	cbz	r0, 801138c <rcl_guard_condition_fini+0x44>
 801134e:	6843      	ldr	r3, [r0, #4]
 8011350:	4604      	mov	r4, r0
 8011352:	b163      	cbz	r3, 801136e <rcl_guard_condition_fini+0x26>
 8011354:	6818      	ldr	r0, [r3, #0]
 8011356:	68de      	ldr	r6, [r3, #12]
 8011358:	6999      	ldr	r1, [r3, #24]
 801135a:	b160      	cbz	r0, 8011376 <rcl_guard_condition_fini+0x2e>
 801135c:	791d      	ldrb	r5, [r3, #4]
 801135e:	b965      	cbnz	r5, 801137a <rcl_guard_condition_fini+0x32>
 8011360:	4618      	mov	r0, r3
 8011362:	47b0      	blx	r6
 8011364:	2300      	movs	r3, #0
 8011366:	4628      	mov	r0, r5
 8011368:	6063      	str	r3, [r4, #4]
 801136a:	b002      	add	sp, #8
 801136c:	bd70      	pop	{r4, r5, r6, pc}
 801136e:	461d      	mov	r5, r3
 8011370:	4628      	mov	r0, r5
 8011372:	b002      	add	sp, #8
 8011374:	bd70      	pop	{r4, r5, r6, pc}
 8011376:	4605      	mov	r5, r0
 8011378:	e7f2      	b.n	8011360 <rcl_guard_condition_fini+0x18>
 801137a:	9101      	str	r1, [sp, #4]
 801137c:	f002 fd64 	bl	8013e48 <rmw_destroy_guard_condition>
 8011380:	1e05      	subs	r5, r0, #0
 8011382:	6863      	ldr	r3, [r4, #4]
 8011384:	9901      	ldr	r1, [sp, #4]
 8011386:	bf18      	it	ne
 8011388:	2501      	movne	r5, #1
 801138a:	e7e9      	b.n	8011360 <rcl_guard_condition_fini+0x18>
 801138c:	250b      	movs	r5, #11
 801138e:	4628      	mov	r0, r5
 8011390:	b002      	add	sp, #8
 8011392:	bd70      	pop	{r4, r5, r6, pc}

08011394 <rcl_guard_condition_get_default_options>:
 8011394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011396:	b087      	sub	sp, #28
 8011398:	4606      	mov	r6, r0
 801139a:	4668      	mov	r0, sp
 801139c:	f7f8 fd42 	bl	8009e24 <rcutils_get_default_allocator>
 80113a0:	4b09      	ldr	r3, [pc, #36]	; (80113c8 <rcl_guard_condition_get_default_options+0x34>)
 80113a2:	46ee      	mov	lr, sp
 80113a4:	469c      	mov	ip, r3
 80113a6:	461d      	mov	r5, r3
 80113a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80113ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80113b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80113b2:	4634      	mov	r4, r6
 80113b4:	f8de 7000 	ldr.w	r7, [lr]
 80113b8:	f8cc 7000 	str.w	r7, [ip]
 80113bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80113be:	4630      	mov	r0, r6
 80113c0:	6027      	str	r7, [r4, #0]
 80113c2:	b007      	add	sp, #28
 80113c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113c6:	bf00      	nop
 80113c8:	2000e4a4 	.word	0x2000e4a4

080113cc <rcl_guard_condition_get_rmw_handle>:
 80113cc:	b110      	cbz	r0, 80113d4 <rcl_guard_condition_get_rmw_handle+0x8>
 80113ce:	6840      	ldr	r0, [r0, #4]
 80113d0:	b100      	cbz	r0, 80113d4 <rcl_guard_condition_get_rmw_handle+0x8>
 80113d2:	6800      	ldr	r0, [r0, #0]
 80113d4:	4770      	bx	lr
 80113d6:	bf00      	nop

080113d8 <rcl_init>:
 80113d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113dc:	1e05      	subs	r5, r0, #0
 80113de:	b09e      	sub	sp, #120	; 0x78
 80113e0:	460e      	mov	r6, r1
 80113e2:	4690      	mov	r8, r2
 80113e4:	461f      	mov	r7, r3
 80113e6:	f340 809c 	ble.w	8011522 <rcl_init+0x14a>
 80113ea:	2900      	cmp	r1, #0
 80113ec:	f000 809c 	beq.w	8011528 <rcl_init+0x150>
 80113f0:	f1a1 0e04 	sub.w	lr, r1, #4
 80113f4:	f04f 0c00 	mov.w	ip, #0
 80113f8:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80113fc:	f10c 0c01 	add.w	ip, ip, #1
 8011400:	2c00      	cmp	r4, #0
 8011402:	f000 8091 	beq.w	8011528 <rcl_init+0x150>
 8011406:	4565      	cmp	r5, ip
 8011408:	d1f6      	bne.n	80113f8 <rcl_init+0x20>
 801140a:	f1b8 0f00 	cmp.w	r8, #0
 801140e:	f000 808b 	beq.w	8011528 <rcl_init+0x150>
 8011412:	f8d8 4000 	ldr.w	r4, [r8]
 8011416:	2c00      	cmp	r4, #0
 8011418:	f000 8086 	beq.w	8011528 <rcl_init+0x150>
 801141c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801141e:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8011422:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011426:	6823      	ldr	r3, [r4, #0]
 8011428:	f8cc 3000 	str.w	r3, [ip]
 801142c:	a819      	add	r0, sp, #100	; 0x64
 801142e:	f7f8 fd07 	bl	8009e40 <rcutils_allocator_is_valid>
 8011432:	2800      	cmp	r0, #0
 8011434:	d078      	beq.n	8011528 <rcl_init+0x150>
 8011436:	2f00      	cmp	r7, #0
 8011438:	d076      	beq.n	8011528 <rcl_init+0x150>
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d178      	bne.n	8011532 <rcl_init+0x15a>
 8011440:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8011444:	2178      	movs	r1, #120	; 0x78
 8011446:	2001      	movs	r0, #1
 8011448:	4798      	blx	r3
 801144a:	4604      	mov	r4, r0
 801144c:	6038      	str	r0, [r7, #0]
 801144e:	2800      	cmp	r0, #0
 8011450:	f000 80b6 	beq.w	80115c0 <rcl_init+0x1e8>
 8011454:	a802      	add	r0, sp, #8
 8011456:	f002 fb57 	bl	8013b08 <rmw_get_zero_initialized_context>
 801145a:	a902      	add	r1, sp, #8
 801145c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8011460:	2250      	movs	r2, #80	; 0x50
 8011462:	ac19      	add	r4, sp, #100	; 0x64
 8011464:	f006 fa3d 	bl	80178e2 <memcpy>
 8011468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801146a:	f8d7 e000 	ldr.w	lr, [r7]
 801146e:	46f4      	mov	ip, lr
 8011470:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011474:	6823      	ldr	r3, [r4, #0]
 8011476:	f8cc 3000 	str.w	r3, [ip]
 801147a:	f10e 0114 	add.w	r1, lr, #20
 801147e:	4640      	mov	r0, r8
 8011480:	f000 f940 	bl	8011704 <rcl_init_options_copy>
 8011484:	4604      	mov	r4, r0
 8011486:	2800      	cmp	r0, #0
 8011488:	d144      	bne.n	8011514 <rcl_init+0x13c>
 801148a:	f8d7 9000 	ldr.w	r9, [r7]
 801148e:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8011492:	f8c9 0020 	str.w	r0, [r9, #32]
 8011496:	f8c9 5018 	str.w	r5, [r9, #24]
 801149a:	f8c9 801c 	str.w	r8, [r9, #28]
 801149e:	2d00      	cmp	r5, #0
 80114a0:	d04e      	beq.n	8011540 <rcl_init+0x168>
 80114a2:	2e00      	cmp	r6, #0
 80114a4:	d04c      	beq.n	8011540 <rcl_init+0x168>
 80114a6:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 80114aa:	2104      	movs	r1, #4
 80114ac:	4628      	mov	r0, r5
 80114ae:	4798      	blx	r3
 80114b0:	f8c9 0020 	str.w	r0, [r9, #32]
 80114b4:	f8d7 9000 	ldr.w	r9, [r7]
 80114b8:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80114bc:	46ca      	mov	sl, r9
 80114be:	b343      	cbz	r3, 8011512 <rcl_init+0x13a>
 80114c0:	2d01      	cmp	r5, #1
 80114c2:	f178 0300 	sbcs.w	r3, r8, #0
 80114c6:	db3b      	blt.n	8011540 <rcl_init+0x168>
 80114c8:	2400      	movs	r4, #0
 80114ca:	3e04      	subs	r6, #4
 80114cc:	46a1      	mov	r9, r4
 80114ce:	e00b      	b.n	80114e8 <rcl_init+0x110>
 80114d0:	6831      	ldr	r1, [r6, #0]
 80114d2:	f006 fa06 	bl	80178e2 <memcpy>
 80114d6:	3401      	adds	r4, #1
 80114d8:	f149 0900 	adc.w	r9, r9, #0
 80114dc:	45c8      	cmp	r8, r9
 80114de:	bf08      	it	eq
 80114e0:	42a5      	cmpeq	r5, r4
 80114e2:	d02b      	beq.n	801153c <rcl_init+0x164>
 80114e4:	f8d7 a000 	ldr.w	sl, [r7]
 80114e8:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80114ec:	f7ee fe9a 	bl	8000224 <strlen>
 80114f0:	1c42      	adds	r2, r0, #1
 80114f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80114f4:	991d      	ldr	r1, [sp, #116]	; 0x74
 80114f6:	f8da a020 	ldr.w	sl, [sl, #32]
 80114fa:	9201      	str	r2, [sp, #4]
 80114fc:	4610      	mov	r0, r2
 80114fe:	4798      	blx	r3
 8011500:	683b      	ldr	r3, [r7, #0]
 8011502:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8011506:	6a1b      	ldr	r3, [r3, #32]
 8011508:	9a01      	ldr	r2, [sp, #4]
 801150a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801150e:	2800      	cmp	r0, #0
 8011510:	d1de      	bne.n	80114d0 <rcl_init+0xf8>
 8011512:	240a      	movs	r4, #10
 8011514:	4638      	mov	r0, r7
 8011516:	f7ff fe4d 	bl	80111b4 <__cleanup_context>
 801151a:	4620      	mov	r0, r4
 801151c:	b01e      	add	sp, #120	; 0x78
 801151e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011522:	2900      	cmp	r1, #0
 8011524:	f43f af71 	beq.w	801140a <rcl_init+0x32>
 8011528:	240b      	movs	r4, #11
 801152a:	4620      	mov	r0, r4
 801152c:	b01e      	add	sp, #120	; 0x78
 801152e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011532:	2464      	movs	r4, #100	; 0x64
 8011534:	4620      	mov	r0, r4
 8011536:	b01e      	add	sp, #120	; 0x78
 8011538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801153c:	f8d7 9000 	ldr.w	r9, [r7]
 8011540:	4926      	ldr	r1, [pc, #152]	; (80115dc <rcl_init+0x204>)
 8011542:	680b      	ldr	r3, [r1, #0]
 8011544:	3301      	adds	r3, #1
 8011546:	d036      	beq.n	80115b6 <rcl_init+0x1de>
 8011548:	600b      	str	r3, [r1, #0]
 801154a:	461a      	mov	r2, r3
 801154c:	2400      	movs	r4, #0
 801154e:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8011552:	607b      	str	r3, [r7, #4]
 8011554:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011556:	3301      	adds	r3, #1
 8011558:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801155c:	d034      	beq.n	80115c8 <rcl_init+0x1f0>
 801155e:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8011562:	b93b      	cbnz	r3, 8011574 <rcl_init+0x19c>
 8011564:	3030      	adds	r0, #48	; 0x30
 8011566:	f000 f939 	bl	80117dc <rcl_get_localhost_only>
 801156a:	4604      	mov	r4, r0
 801156c:	2800      	cmp	r0, #0
 801156e:	d1d1      	bne.n	8011514 <rcl_init+0x13c>
 8011570:	683b      	ldr	r3, [r7, #0]
 8011572:	6958      	ldr	r0, [r3, #20]
 8011574:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8011576:	aa18      	add	r2, sp, #96	; 0x60
 8011578:	a917      	add	r1, sp, #92	; 0x5c
 801157a:	f000 fd59 	bl	8012030 <rcl_validate_enclave_name>
 801157e:	4604      	mov	r4, r0
 8011580:	2800      	cmp	r0, #0
 8011582:	d1c7      	bne.n	8011514 <rcl_init+0x13c>
 8011584:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011586:	b9eb      	cbnz	r3, 80115c4 <rcl_init+0x1ec>
 8011588:	6839      	ldr	r1, [r7, #0]
 801158a:	694b      	ldr	r3, [r1, #20]
 801158c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801158e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8011592:	f000 fa99 	bl	8011ac8 <rcl_get_security_options_from_environment>
 8011596:	4604      	mov	r4, r0
 8011598:	2800      	cmp	r0, #0
 801159a:	d1bb      	bne.n	8011514 <rcl_init+0x13c>
 801159c:	6839      	ldr	r1, [r7, #0]
 801159e:	6948      	ldr	r0, [r1, #20]
 80115a0:	3128      	adds	r1, #40	; 0x28
 80115a2:	3018      	adds	r0, #24
 80115a4:	f002 fd5c 	bl	8014060 <rmw_init>
 80115a8:	4604      	mov	r4, r0
 80115aa:	2800      	cmp	r0, #0
 80115ac:	d0bd      	beq.n	801152a <rcl_init+0x152>
 80115ae:	f7ff fddd 	bl	801116c <rcl_convert_rmw_ret_to_rcl_ret>
 80115b2:	4604      	mov	r4, r0
 80115b4:	e7ae      	b.n	8011514 <rcl_init+0x13c>
 80115b6:	2201      	movs	r2, #1
 80115b8:	461c      	mov	r4, r3
 80115ba:	600a      	str	r2, [r1, #0]
 80115bc:	4613      	mov	r3, r2
 80115be:	e7c6      	b.n	801154e <rcl_init+0x176>
 80115c0:	240a      	movs	r4, #10
 80115c2:	e7b2      	b.n	801152a <rcl_init+0x152>
 80115c4:	2401      	movs	r4, #1
 80115c6:	e7a5      	b.n	8011514 <rcl_init+0x13c>
 80115c8:	3024      	adds	r0, #36	; 0x24
 80115ca:	f004 ffa9 	bl	8016520 <rcl_get_default_domain_id>
 80115ce:	4604      	mov	r4, r0
 80115d0:	2800      	cmp	r0, #0
 80115d2:	d19f      	bne.n	8011514 <rcl_init+0x13c>
 80115d4:	683b      	ldr	r3, [r7, #0]
 80115d6:	6958      	ldr	r0, [r3, #20]
 80115d8:	e7c1      	b.n	801155e <rcl_init+0x186>
 80115da:	bf00      	nop
 80115dc:	2000e4b8 	.word	0x2000e4b8

080115e0 <rcl_get_zero_initialized_init_options>:
 80115e0:	2000      	movs	r0, #0
 80115e2:	4770      	bx	lr

080115e4 <rcl_init_options_init>:
 80115e4:	b084      	sub	sp, #16
 80115e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115e8:	b097      	sub	sp, #92	; 0x5c
 80115ea:	ae1d      	add	r6, sp, #116	; 0x74
 80115ec:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 80115f0:	2800      	cmp	r0, #0
 80115f2:	d058      	beq.n	80116a6 <rcl_init_options_init+0xc2>
 80115f4:	6803      	ldr	r3, [r0, #0]
 80115f6:	4605      	mov	r5, r0
 80115f8:	b133      	cbz	r3, 8011608 <rcl_init_options_init+0x24>
 80115fa:	2464      	movs	r4, #100	; 0x64
 80115fc:	4620      	mov	r0, r4
 80115fe:	b017      	add	sp, #92	; 0x5c
 8011600:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011604:	b004      	add	sp, #16
 8011606:	4770      	bx	lr
 8011608:	4630      	mov	r0, r6
 801160a:	f7f8 fc19 	bl	8009e40 <rcutils_allocator_is_valid>
 801160e:	2800      	cmp	r0, #0
 8011610:	d049      	beq.n	80116a6 <rcl_init_options_init+0xc2>
 8011612:	46b4      	mov	ip, r6
 8011614:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011618:	ac11      	add	r4, sp, #68	; 0x44
 801161a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801161c:	f8dc 3000 	ldr.w	r3, [ip]
 8011620:	6023      	str	r3, [r4, #0]
 8011622:	9921      	ldr	r1, [sp, #132]	; 0x84
 8011624:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011626:	2050      	movs	r0, #80	; 0x50
 8011628:	4798      	blx	r3
 801162a:	4604      	mov	r4, r0
 801162c:	6028      	str	r0, [r5, #0]
 801162e:	2800      	cmp	r0, #0
 8011630:	d03b      	beq.n	80116aa <rcl_init_options_init+0xc6>
 8011632:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8011636:	4686      	mov	lr, r0
 8011638:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801163c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011640:	f8dc 3000 	ldr.w	r3, [ip]
 8011644:	f8ce 3000 	str.w	r3, [lr]
 8011648:	a802      	add	r0, sp, #8
 801164a:	f002 fa6d 	bl	8013b28 <rmw_get_zero_initialized_init_options>
 801164e:	f10d 0e08 	add.w	lr, sp, #8
 8011652:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011656:	f104 0c18 	add.w	ip, r4, #24
 801165a:	682f      	ldr	r7, [r5, #0]
 801165c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011660:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011664:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011668:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801166c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011670:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011674:	ac20      	add	r4, sp, #128	; 0x80
 8011676:	e88c 0003 	stmia.w	ip, {r0, r1}
 801167a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801167e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011682:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8011686:	f107 0018 	add.w	r0, r7, #24
 801168a:	f002 fbf1 	bl	8013e70 <rmw_init_options_init>
 801168e:	4604      	mov	r4, r0
 8011690:	2800      	cmp	r0, #0
 8011692:	d0b3      	beq.n	80115fc <rcl_init_options_init+0x18>
 8011694:	9921      	ldr	r1, [sp, #132]	; 0x84
 8011696:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011698:	6828      	ldr	r0, [r5, #0]
 801169a:	4798      	blx	r3
 801169c:	4620      	mov	r0, r4
 801169e:	f7ff fd65 	bl	801116c <rcl_convert_rmw_ret_to_rcl_ret>
 80116a2:	4604      	mov	r4, r0
 80116a4:	e7aa      	b.n	80115fc <rcl_init_options_init+0x18>
 80116a6:	240b      	movs	r4, #11
 80116a8:	e7a8      	b.n	80115fc <rcl_init_options_init+0x18>
 80116aa:	240a      	movs	r4, #10
 80116ac:	e7a6      	b.n	80115fc <rcl_init_options_init+0x18>
 80116ae:	bf00      	nop

080116b0 <rcl_init_options_fini>:
 80116b0:	b530      	push	{r4, r5, lr}
 80116b2:	b087      	sub	sp, #28
 80116b4:	b1f0      	cbz	r0, 80116f4 <rcl_init_options_fini+0x44>
 80116b6:	6803      	ldr	r3, [r0, #0]
 80116b8:	4604      	mov	r4, r0
 80116ba:	b1db      	cbz	r3, 80116f4 <rcl_init_options_fini+0x44>
 80116bc:	469c      	mov	ip, r3
 80116be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80116c2:	f10d 0e04 	add.w	lr, sp, #4
 80116c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80116ca:	f8dc 3000 	ldr.w	r3, [ip]
 80116ce:	f8ce 3000 	str.w	r3, [lr]
 80116d2:	a801      	add	r0, sp, #4
 80116d4:	f7f8 fbb4 	bl	8009e40 <rcutils_allocator_is_valid>
 80116d8:	b160      	cbz	r0, 80116f4 <rcl_init_options_fini+0x44>
 80116da:	6820      	ldr	r0, [r4, #0]
 80116dc:	3018      	adds	r0, #24
 80116de:	f002 fc77 	bl	8013fd0 <rmw_init_options_fini>
 80116e2:	4605      	mov	r5, r0
 80116e4:	b950      	cbnz	r0, 80116fc <rcl_init_options_fini+0x4c>
 80116e6:	6820      	ldr	r0, [r4, #0]
 80116e8:	9b02      	ldr	r3, [sp, #8]
 80116ea:	9905      	ldr	r1, [sp, #20]
 80116ec:	4798      	blx	r3
 80116ee:	4628      	mov	r0, r5
 80116f0:	b007      	add	sp, #28
 80116f2:	bd30      	pop	{r4, r5, pc}
 80116f4:	250b      	movs	r5, #11
 80116f6:	4628      	mov	r0, r5
 80116f8:	b007      	add	sp, #28
 80116fa:	bd30      	pop	{r4, r5, pc}
 80116fc:	f7ff fd36 	bl	801116c <rcl_convert_rmw_ret_to_rcl_ret>
 8011700:	4605      	mov	r5, r0
 8011702:	e7f8      	b.n	80116f6 <rcl_init_options_fini+0x46>

08011704 <rcl_init_options_copy>:
 8011704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011708:	b094      	sub	sp, #80	; 0x50
 801170a:	2800      	cmp	r0, #0
 801170c:	d058      	beq.n	80117c0 <rcl_init_options_copy+0xbc>
 801170e:	4604      	mov	r4, r0
 8011710:	6800      	ldr	r0, [r0, #0]
 8011712:	2800      	cmp	r0, #0
 8011714:	d054      	beq.n	80117c0 <rcl_init_options_copy+0xbc>
 8011716:	460e      	mov	r6, r1
 8011718:	f7f8 fb92 	bl	8009e40 <rcutils_allocator_is_valid>
 801171c:	2800      	cmp	r0, #0
 801171e:	d04f      	beq.n	80117c0 <rcl_init_options_copy+0xbc>
 8011720:	2e00      	cmp	r6, #0
 8011722:	d04d      	beq.n	80117c0 <rcl_init_options_copy+0xbc>
 8011724:	6833      	ldr	r3, [r6, #0]
 8011726:	b123      	cbz	r3, 8011732 <rcl_init_options_copy+0x2e>
 8011728:	2464      	movs	r4, #100	; 0x64
 801172a:	4620      	mov	r0, r4
 801172c:	b014      	add	sp, #80	; 0x50
 801172e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011732:	6827      	ldr	r7, [r4, #0]
 8011734:	46bc      	mov	ip, r7
 8011736:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801173a:	ad0f      	add	r5, sp, #60	; 0x3c
 801173c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801173e:	f8dc 3000 	ldr.w	r3, [ip]
 8011742:	f8d7 8000 	ldr.w	r8, [r7]
 8011746:	602b      	str	r3, [r5, #0]
 8011748:	4619      	mov	r1, r3
 801174a:	2050      	movs	r0, #80	; 0x50
 801174c:	47c0      	blx	r8
 801174e:	4605      	mov	r5, r0
 8011750:	6030      	str	r0, [r6, #0]
 8011752:	b3d0      	cbz	r0, 80117ca <rcl_init_options_copy+0xc6>
 8011754:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8011758:	4686      	mov	lr, r0
 801175a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801175e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011762:	f8dc 3000 	ldr.w	r3, [ip]
 8011766:	f8ce 3000 	str.w	r3, [lr]
 801176a:	4668      	mov	r0, sp
 801176c:	f002 f9dc 	bl	8013b28 <rmw_get_zero_initialized_init_options>
 8011770:	46ee      	mov	lr, sp
 8011772:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011776:	f105 0c18 	add.w	ip, r5, #24
 801177a:	6824      	ldr	r4, [r4, #0]
 801177c:	6835      	ldr	r5, [r6, #0]
 801177e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011782:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011786:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801178a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801178e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011792:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011796:	e88c 0003 	stmia.w	ip, {r0, r1}
 801179a:	f104 0018 	add.w	r0, r4, #24
 801179e:	f105 0118 	add.w	r1, r5, #24
 80117a2:	f002 fbcd 	bl	8013f40 <rmw_init_options_copy>
 80117a6:	4604      	mov	r4, r0
 80117a8:	2800      	cmp	r0, #0
 80117aa:	d0be      	beq.n	801172a <rcl_init_options_copy+0x26>
 80117ac:	f7f8 fb6e 	bl	8009e8c <rcutils_get_error_string>
 80117b0:	f7f8 fb82 	bl	8009eb8 <rcutils_reset_error>
 80117b4:	4630      	mov	r0, r6
 80117b6:	f7ff ff7b 	bl	80116b0 <rcl_init_options_fini>
 80117ba:	b140      	cbz	r0, 80117ce <rcl_init_options_copy+0xca>
 80117bc:	4604      	mov	r4, r0
 80117be:	e7b4      	b.n	801172a <rcl_init_options_copy+0x26>
 80117c0:	240b      	movs	r4, #11
 80117c2:	4620      	mov	r0, r4
 80117c4:	b014      	add	sp, #80	; 0x50
 80117c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117ca:	240a      	movs	r4, #10
 80117cc:	e7ad      	b.n	801172a <rcl_init_options_copy+0x26>
 80117ce:	4620      	mov	r0, r4
 80117d0:	b014      	add	sp, #80	; 0x50
 80117d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117d6:	f7ff bcc9 	b.w	801116c <rcl_convert_rmw_ret_to_rcl_ret>
 80117da:	bf00      	nop

080117dc <rcl_get_localhost_only>:
 80117dc:	b510      	push	{r4, lr}
 80117de:	b082      	sub	sp, #8
 80117e0:	2300      	movs	r3, #0
 80117e2:	9301      	str	r3, [sp, #4]
 80117e4:	b1b8      	cbz	r0, 8011816 <rcl_get_localhost_only+0x3a>
 80117e6:	4604      	mov	r4, r0
 80117e8:	a901      	add	r1, sp, #4
 80117ea:	480c      	ldr	r0, [pc, #48]	; (801181c <rcl_get_localhost_only+0x40>)
 80117ec:	f7f8 fb36 	bl	8009e5c <rcutils_get_env>
 80117f0:	b110      	cbz	r0, 80117f8 <rcl_get_localhost_only+0x1c>
 80117f2:	2001      	movs	r0, #1
 80117f4:	b002      	add	sp, #8
 80117f6:	bd10      	pop	{r4, pc}
 80117f8:	9b01      	ldr	r3, [sp, #4]
 80117fa:	b113      	cbz	r3, 8011802 <rcl_get_localhost_only+0x26>
 80117fc:	781a      	ldrb	r2, [r3, #0]
 80117fe:	2a31      	cmp	r2, #49	; 0x31
 8011800:	d004      	beq.n	801180c <rcl_get_localhost_only+0x30>
 8011802:	2302      	movs	r3, #2
 8011804:	2000      	movs	r0, #0
 8011806:	7023      	strb	r3, [r4, #0]
 8011808:	b002      	add	sp, #8
 801180a:	bd10      	pop	{r4, pc}
 801180c:	785b      	ldrb	r3, [r3, #1]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d1f7      	bne.n	8011802 <rcl_get_localhost_only+0x26>
 8011812:	2301      	movs	r3, #1
 8011814:	e7f6      	b.n	8011804 <rcl_get_localhost_only+0x28>
 8011816:	200b      	movs	r0, #11
 8011818:	b002      	add	sp, #8
 801181a:	bd10      	pop	{r4, pc}
 801181c:	08019298 	.word	0x08019298

08011820 <rcl_node_resolve_name>:
 8011820:	b082      	sub	sp, #8
 8011822:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011826:	b091      	sub	sp, #68	; 0x44
 8011828:	ac1a      	add	r4, sp, #104	; 0x68
 801182a:	e884 000c 	stmia.w	r4, {r2, r3}
 801182e:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 8011832:	2800      	cmp	r0, #0
 8011834:	d03b      	beq.n	80118ae <rcl_node_resolve_name+0x8e>
 8011836:	460c      	mov	r4, r1
 8011838:	4605      	mov	r5, r0
 801183a:	f7f7 f86b 	bl	8008914 <rcl_node_get_options>
 801183e:	2800      	cmp	r0, #0
 8011840:	d037      	beq.n	80118b2 <rcl_node_resolve_name+0x92>
 8011842:	4628      	mov	r0, r5
 8011844:	f7f7 f856 	bl	80088f4 <rcl_node_get_name>
 8011848:	4606      	mov	r6, r0
 801184a:	4628      	mov	r0, r5
 801184c:	f7f7 f85a 	bl	8008904 <rcl_node_get_namespace>
 8011850:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8011854:	4681      	mov	r9, r0
 8011856:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801185a:	ad0b      	add	r5, sp, #44	; 0x2c
 801185c:	46ac      	mov	ip, r5
 801185e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011862:	f8de 3000 	ldr.w	r3, [lr]
 8011866:	f8cc 3000 	str.w	r3, [ip]
 801186a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801186c:	b1fb      	cbz	r3, 80118ae <rcl_node_resolve_name+0x8e>
 801186e:	468a      	mov	sl, r1
 8011870:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8011874:	f002 f81c 	bl	80138b0 <rcutils_get_zero_initialized_string_map>
 8011878:	ab10      	add	r3, sp, #64	; 0x40
 801187a:	9008      	str	r0, [sp, #32]
 801187c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8011880:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011884:	2100      	movs	r1, #0
 8011886:	e895 000c 	ldmia.w	r5, {r2, r3}
 801188a:	a808      	add	r0, sp, #32
 801188c:	f002 f888 	bl	80139a0 <rcutils_string_map_init>
 8011890:	4607      	mov	r7, r0
 8011892:	b180      	cbz	r0, 80118b6 <rcl_node_resolve_name+0x96>
 8011894:	f7f8 fafa 	bl	8009e8c <rcutils_get_error_string>
 8011898:	f7f8 fb0e 	bl	8009eb8 <rcutils_reset_error>
 801189c:	2f0a      	cmp	r7, #10
 801189e:	bf18      	it	ne
 80118a0:	2701      	movne	r7, #1
 80118a2:	4638      	mov	r0, r7
 80118a4:	b011      	add	sp, #68	; 0x44
 80118a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118aa:	b002      	add	sp, #8
 80118ac:	4770      	bx	lr
 80118ae:	270b      	movs	r7, #11
 80118b0:	e7f7      	b.n	80118a2 <rcl_node_resolve_name+0x82>
 80118b2:	2701      	movs	r7, #1
 80118b4:	e7f5      	b.n	80118a2 <rcl_node_resolve_name+0x82>
 80118b6:	9009      	str	r0, [sp, #36]	; 0x24
 80118b8:	9007      	str	r0, [sp, #28]
 80118ba:	a808      	add	r0, sp, #32
 80118bc:	f004 ffc2 	bl	8016844 <rcl_get_default_topic_name_substitutions>
 80118c0:	4607      	mov	r7, r0
 80118c2:	b1a8      	cbz	r0, 80118f0 <rcl_node_resolve_name+0xd0>
 80118c4:	280a      	cmp	r0, #10
 80118c6:	9c07      	ldr	r4, [sp, #28]
 80118c8:	d000      	beq.n	80118cc <rcl_node_resolve_name+0xac>
 80118ca:	2701      	movs	r7, #1
 80118cc:	a808      	add	r0, sp, #32
 80118ce:	f002 f8a7 	bl	8013a20 <rcutils_string_map_fini>
 80118d2:	2800      	cmp	r0, #0
 80118d4:	d13d      	bne.n	8011952 <rcl_node_resolve_name+0x132>
 80118d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80118d8:	4659      	mov	r1, fp
 80118da:	47d0      	blx	sl
 80118dc:	4659      	mov	r1, fp
 80118de:	4620      	mov	r0, r4
 80118e0:	47d0      	blx	sl
 80118e2:	f1b8 0f00 	cmp.w	r8, #0
 80118e6:	d0dc      	beq.n	80118a2 <rcl_node_resolve_name+0x82>
 80118e8:	2f67      	cmp	r7, #103	; 0x67
 80118ea:	bf08      	it	eq
 80118ec:	2768      	moveq	r7, #104	; 0x68
 80118ee:	e7d8      	b.n	80118a2 <rcl_node_resolve_name+0x82>
 80118f0:	ab09      	add	r3, sp, #36	; 0x24
 80118f2:	9305      	str	r3, [sp, #20]
 80118f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118f6:	46ec      	mov	ip, sp
 80118f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80118fc:	682b      	ldr	r3, [r5, #0]
 80118fe:	f8cc 3000 	str.w	r3, [ip]
 8011902:	464a      	mov	r2, r9
 8011904:	4631      	mov	r1, r6
 8011906:	4620      	mov	r0, r4
 8011908:	ab08      	add	r3, sp, #32
 801190a:	f004 fe3d 	bl	8016588 <rcl_expand_topic_name>
 801190e:	4607      	mov	r7, r0
 8011910:	b9b8      	cbnz	r0, 8011942 <rcl_node_resolve_name+0x122>
 8011912:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8011914:	9009      	str	r0, [sp, #36]	; 0x24
 8011916:	4602      	mov	r2, r0
 8011918:	a90a      	add	r1, sp, #40	; 0x28
 801191a:	4620      	mov	r0, r4
 801191c:	f002 f99c 	bl	8013c58 <rmw_validate_full_topic_name>
 8011920:	b988      	cbnz	r0, 8011946 <rcl_node_resolve_name+0x126>
 8011922:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011924:	b9d5      	cbnz	r5, 801195c <rcl_node_resolve_name+0x13c>
 8011926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011928:	a808      	add	r0, sp, #32
 801192a:	601c      	str	r4, [r3, #0]
 801192c:	f002 f878 	bl	8013a20 <rcutils_string_map_fini>
 8011930:	4607      	mov	r7, r0
 8011932:	b1a8      	cbz	r0, 8011960 <rcl_node_resolve_name+0x140>
 8011934:	f7f8 faaa 	bl	8009e8c <rcutils_get_error_string>
 8011938:	462c      	mov	r4, r5
 801193a:	f7f8 fabd 	bl	8009eb8 <rcutils_reset_error>
 801193e:	2701      	movs	r7, #1
 8011940:	e7c9      	b.n	80118d6 <rcl_node_resolve_name+0xb6>
 8011942:	9c07      	ldr	r4, [sp, #28]
 8011944:	e7c2      	b.n	80118cc <rcl_node_resolve_name+0xac>
 8011946:	f7f8 faa1 	bl	8009e8c <rcutils_get_error_string>
 801194a:	2701      	movs	r7, #1
 801194c:	f7f8 fab4 	bl	8009eb8 <rcutils_reset_error>
 8011950:	e7bc      	b.n	80118cc <rcl_node_resolve_name+0xac>
 8011952:	f7f8 fa9b 	bl	8009e8c <rcutils_get_error_string>
 8011956:	f7f8 faaf 	bl	8009eb8 <rcutils_reset_error>
 801195a:	e7bc      	b.n	80118d6 <rcl_node_resolve_name+0xb6>
 801195c:	2767      	movs	r7, #103	; 0x67
 801195e:	e7b5      	b.n	80118cc <rcl_node_resolve_name+0xac>
 8011960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011962:	4659      	mov	r1, fp
 8011964:	47d0      	blx	sl
 8011966:	4659      	mov	r1, fp
 8011968:	4638      	mov	r0, r7
 801196a:	47d0      	blx	sl
 801196c:	e799      	b.n	80118a2 <rcl_node_resolve_name+0x82>
 801196e:	bf00      	nop

08011970 <exact_match_lookup>:
 8011970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011972:	f102 0708 	add.w	r7, r2, #8
 8011976:	460b      	mov	r3, r1
 8011978:	4614      	mov	r4, r2
 801197a:	4606      	mov	r6, r0
 801197c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8011980:	b085      	sub	sp, #20
 8011982:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011986:	4618      	mov	r0, r3
 8011988:	4919      	ldr	r1, [pc, #100]	; (80119f0 <exact_match_lookup+0x80>)
 801198a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801198e:	f001 ff59 	bl	8013844 <rcutils_join_path>
 8011992:	7833      	ldrb	r3, [r6, #0]
 8011994:	2b2f      	cmp	r3, #47	; 0x2f
 8011996:	4605      	mov	r5, r0
 8011998:	d023      	beq.n	80119e2 <exact_match_lookup+0x72>
 801199a:	f104 030c 	add.w	r3, r4, #12
 801199e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80119a2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80119a6:	1c70      	adds	r0, r6, #1
 80119a8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80119ac:	f001 ff50 	bl	8013850 <rcutils_to_native_path>
 80119b0:	4606      	mov	r6, r0
 80119b2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80119b6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80119ba:	4631      	mov	r1, r6
 80119bc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80119c0:	4628      	mov	r0, r5
 80119c2:	f001 ff3f 	bl	8013844 <rcutils_join_path>
 80119c6:	6862      	ldr	r2, [r4, #4]
 80119c8:	6921      	ldr	r1, [r4, #16]
 80119ca:	4603      	mov	r3, r0
 80119cc:	4630      	mov	r0, r6
 80119ce:	461e      	mov	r6, r3
 80119d0:	4790      	blx	r2
 80119d2:	4628      	mov	r0, r5
 80119d4:	6863      	ldr	r3, [r4, #4]
 80119d6:	6921      	ldr	r1, [r4, #16]
 80119d8:	4798      	blx	r3
 80119da:	4635      	mov	r5, r6
 80119dc:	4628      	mov	r0, r5
 80119de:	b005      	add	sp, #20
 80119e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119e2:	7873      	ldrb	r3, [r6, #1]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d1d8      	bne.n	801199a <exact_match_lookup+0x2a>
 80119e8:	4628      	mov	r0, r5
 80119ea:	b005      	add	sp, #20
 80119ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119ee:	bf00      	nop
 80119f0:	080192e8 	.word	0x080192e8

080119f4 <rcl_get_secure_root>:
 80119f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80119f8:	b085      	sub	sp, #20
 80119fa:	b168      	cbz	r0, 8011a18 <rcl_get_secure_root+0x24>
 80119fc:	4607      	mov	r7, r0
 80119fe:	4608      	mov	r0, r1
 8011a00:	460c      	mov	r4, r1
 8011a02:	f7f8 fa1d 	bl	8009e40 <rcutils_allocator_is_valid>
 8011a06:	b138      	cbz	r0, 8011a18 <rcl_get_secure_root+0x24>
 8011a08:	2300      	movs	r3, #0
 8011a0a:	482d      	ldr	r0, [pc, #180]	; (8011ac0 <rcl_get_secure_root+0xcc>)
 8011a0c:	9303      	str	r3, [sp, #12]
 8011a0e:	a903      	add	r1, sp, #12
 8011a10:	f7f8 fa24 	bl	8009e5c <rcutils_get_env>
 8011a14:	4605      	mov	r5, r0
 8011a16:	b120      	cbz	r0, 8011a22 <rcl_get_secure_root+0x2e>
 8011a18:	2500      	movs	r5, #0
 8011a1a:	4628      	mov	r0, r5
 8011a1c:	b005      	add	sp, #20
 8011a1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a22:	9b03      	ldr	r3, [sp, #12]
 8011a24:	781a      	ldrb	r2, [r3, #0]
 8011a26:	2a00      	cmp	r2, #0
 8011a28:	d0f6      	beq.n	8011a18 <rcl_get_secure_root+0x24>
 8011a2a:	f104 090c 	add.w	r9, r4, #12
 8011a2e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8011a32:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011a36:	4618      	mov	r0, r3
 8011a38:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011a3c:	f7f8 fb72 	bl	800a124 <rcutils_strdup>
 8011a40:	4680      	mov	r8, r0
 8011a42:	2800      	cmp	r0, #0
 8011a44:	d0e8      	beq.n	8011a18 <rcl_get_secure_root+0x24>
 8011a46:	481f      	ldr	r0, [pc, #124]	; (8011ac4 <rcl_get_secure_root+0xd0>)
 8011a48:	9503      	str	r5, [sp, #12]
 8011a4a:	a903      	add	r1, sp, #12
 8011a4c:	f7f8 fa06 	bl	8009e5c <rcutils_get_env>
 8011a50:	b160      	cbz	r0, 8011a6c <rcl_get_secure_root+0x78>
 8011a52:	2600      	movs	r6, #0
 8011a54:	6863      	ldr	r3, [r4, #4]
 8011a56:	6921      	ldr	r1, [r4, #16]
 8011a58:	4630      	mov	r0, r6
 8011a5a:	4798      	blx	r3
 8011a5c:	4640      	mov	r0, r8
 8011a5e:	6863      	ldr	r3, [r4, #4]
 8011a60:	6921      	ldr	r1, [r4, #16]
 8011a62:	4798      	blx	r3
 8011a64:	4628      	mov	r0, r5
 8011a66:	b005      	add	sp, #20
 8011a68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a6c:	9b03      	ldr	r3, [sp, #12]
 8011a6e:	781e      	ldrb	r6, [r3, #0]
 8011a70:	b1f6      	cbz	r6, 8011ab0 <rcl_get_secure_root+0xbc>
 8011a72:	e899 0003 	ldmia.w	r9, {r0, r1}
 8011a76:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011a80:	f7f8 fb50 	bl	800a124 <rcutils_strdup>
 8011a84:	4606      	mov	r6, r0
 8011a86:	2800      	cmp	r0, #0
 8011a88:	d0e3      	beq.n	8011a52 <rcl_get_secure_root+0x5e>
 8011a8a:	4622      	mov	r2, r4
 8011a8c:	4641      	mov	r1, r8
 8011a8e:	f7ff ff6f 	bl	8011970 <exact_match_lookup>
 8011a92:	4605      	mov	r5, r0
 8011a94:	2d00      	cmp	r5, #0
 8011a96:	d0dd      	beq.n	8011a54 <rcl_get_secure_root+0x60>
 8011a98:	4628      	mov	r0, r5
 8011a9a:	f001 fed1 	bl	8013840 <rcutils_is_directory>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	2800      	cmp	r0, #0
 8011aa2:	d1d7      	bne.n	8011a54 <rcl_get_secure_root+0x60>
 8011aa4:	4628      	mov	r0, r5
 8011aa6:	6921      	ldr	r1, [r4, #16]
 8011aa8:	461d      	mov	r5, r3
 8011aaa:	6863      	ldr	r3, [r4, #4]
 8011aac:	4798      	blx	r3
 8011aae:	e7d1      	b.n	8011a54 <rcl_get_secure_root+0x60>
 8011ab0:	4622      	mov	r2, r4
 8011ab2:	4638      	mov	r0, r7
 8011ab4:	4641      	mov	r1, r8
 8011ab6:	f7ff ff5b 	bl	8011970 <exact_match_lookup>
 8011aba:	4605      	mov	r5, r0
 8011abc:	e7ea      	b.n	8011a94 <rcl_get_secure_root+0xa0>
 8011abe:	bf00      	nop
 8011ac0:	080192f4 	.word	0x080192f4
 8011ac4:	0801930c 	.word	0x0801930c

08011ac8 <rcl_get_security_options_from_environment>:
 8011ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011acc:	b082      	sub	sp, #8
 8011ace:	2300      	movs	r3, #0
 8011ad0:	4606      	mov	r6, r0
 8011ad2:	460f      	mov	r7, r1
 8011ad4:	4820      	ldr	r0, [pc, #128]	; (8011b58 <rcl_get_security_options_from_environment+0x90>)
 8011ad6:	9301      	str	r3, [sp, #4]
 8011ad8:	a901      	add	r1, sp, #4
 8011ada:	4690      	mov	r8, r2
 8011adc:	f7f8 f9be 	bl	8009e5c <rcutils_get_env>
 8011ae0:	b120      	cbz	r0, 8011aec <rcl_get_security_options_from_environment+0x24>
 8011ae2:	2501      	movs	r5, #1
 8011ae4:	4628      	mov	r0, r5
 8011ae6:	b002      	add	sp, #8
 8011ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011aec:	491b      	ldr	r1, [pc, #108]	; (8011b5c <rcl_get_security_options_from_environment+0x94>)
 8011aee:	4604      	mov	r4, r0
 8011af0:	9801      	ldr	r0, [sp, #4]
 8011af2:	f7ee fb8d 	bl	8000210 <strcmp>
 8011af6:	4605      	mov	r5, r0
 8011af8:	b9e8      	cbnz	r0, 8011b36 <rcl_get_security_options_from_environment+0x6e>
 8011afa:	9001      	str	r0, [sp, #4]
 8011afc:	f1b8 0f00 	cmp.w	r8, #0
 8011b00:	d020      	beq.n	8011b44 <rcl_get_security_options_from_environment+0x7c>
 8011b02:	4817      	ldr	r0, [pc, #92]	; (8011b60 <rcl_get_security_options_from_environment+0x98>)
 8011b04:	a901      	add	r1, sp, #4
 8011b06:	f7f8 f9a9 	bl	8009e5c <rcutils_get_env>
 8011b0a:	2800      	cmp	r0, #0
 8011b0c:	d1e9      	bne.n	8011ae2 <rcl_get_security_options_from_environment+0x1a>
 8011b0e:	4915      	ldr	r1, [pc, #84]	; (8011b64 <rcl_get_security_options_from_environment+0x9c>)
 8011b10:	9801      	ldr	r0, [sp, #4]
 8011b12:	f7ee fb7d 	bl	8000210 <strcmp>
 8011b16:	fab0 f080 	clz	r0, r0
 8011b1a:	0940      	lsrs	r0, r0, #5
 8011b1c:	f888 0000 	strb.w	r0, [r8]
 8011b20:	4639      	mov	r1, r7
 8011b22:	4630      	mov	r0, r6
 8011b24:	f7ff ff66 	bl	80119f4 <rcl_get_secure_root>
 8011b28:	b170      	cbz	r0, 8011b48 <rcl_get_security_options_from_environment+0x80>
 8011b2a:	f8c8 0004 	str.w	r0, [r8, #4]
 8011b2e:	4628      	mov	r0, r5
 8011b30:	b002      	add	sp, #8
 8011b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b36:	4625      	mov	r5, r4
 8011b38:	4628      	mov	r0, r5
 8011b3a:	f888 4000 	strb.w	r4, [r8]
 8011b3e:	b002      	add	sp, #8
 8011b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b44:	250b      	movs	r5, #11
 8011b46:	e7cd      	b.n	8011ae4 <rcl_get_security_options_from_environment+0x1c>
 8011b48:	f898 5000 	ldrb.w	r5, [r8]
 8011b4c:	f1a5 0501 	sub.w	r5, r5, #1
 8011b50:	fab5 f585 	clz	r5, r5
 8011b54:	096d      	lsrs	r5, r5, #5
 8011b56:	e7c5      	b.n	8011ae4 <rcl_get_security_options_from_environment+0x1c>
 8011b58:	080192ac 	.word	0x080192ac
 8011b5c:	080192c0 	.word	0x080192c0
 8011b60:	080192c8 	.word	0x080192c8
 8011b64:	080192e0 	.word	0x080192e0

08011b68 <rcl_service_get_rmw_handle>:
 8011b68:	b118      	cbz	r0, 8011b72 <rcl_service_get_rmw_handle+0xa>
 8011b6a:	6800      	ldr	r0, [r0, #0]
 8011b6c:	b108      	cbz	r0, 8011b72 <rcl_service_get_rmw_handle+0xa>
 8011b6e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8011b72:	4770      	bx	lr

08011b74 <rcl_take_request>:
 8011b74:	b570      	push	{r4, r5, r6, lr}
 8011b76:	468e      	mov	lr, r1
 8011b78:	460c      	mov	r4, r1
 8011b7a:	4616      	mov	r6, r2
 8011b7c:	4605      	mov	r5, r0
 8011b7e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011b82:	b08c      	sub	sp, #48	; 0x30
 8011b84:	f10d 0c18 	add.w	ip, sp, #24
 8011b88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011b8c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011b90:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011b94:	b30d      	cbz	r5, 8011bda <rcl_take_request+0x66>
 8011b96:	682b      	ldr	r3, [r5, #0]
 8011b98:	b1fb      	cbz	r3, 8011bda <rcl_take_request+0x66>
 8011b9a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8011b9e:	b1e0      	cbz	r0, 8011bda <rcl_take_request+0x66>
 8011ba0:	b336      	cbz	r6, 8011bf0 <rcl_take_request+0x7c>
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	f88d 3007 	strb.w	r3, [sp, #7]
 8011ba8:	4632      	mov	r2, r6
 8011baa:	f10d 0307 	add.w	r3, sp, #7
 8011bae:	a902      	add	r1, sp, #8
 8011bb0:	f002 fc7e 	bl	80144b0 <rmw_take_request>
 8011bb4:	4605      	mov	r5, r0
 8011bb6:	b198      	cbz	r0, 8011be0 <rcl_take_request+0x6c>
 8011bb8:	280a      	cmp	r0, #10
 8011bba:	bf18      	it	ne
 8011bbc:	2501      	movne	r5, #1
 8011bbe:	f10d 0e18 	add.w	lr, sp, #24
 8011bc2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011bc6:	46a4      	mov	ip, r4
 8011bc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011bcc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011bd0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011bd4:	4628      	mov	r0, r5
 8011bd6:	b00c      	add	sp, #48	; 0x30
 8011bd8:	bd70      	pop	{r4, r5, r6, pc}
 8011bda:	f44f 7516 	mov.w	r5, #600	; 0x258
 8011bde:	e7ee      	b.n	8011bbe <rcl_take_request+0x4a>
 8011be0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011be4:	f240 2359 	movw	r3, #601	; 0x259
 8011be8:	2a00      	cmp	r2, #0
 8011bea:	bf08      	it	eq
 8011bec:	461d      	moveq	r5, r3
 8011bee:	e7e6      	b.n	8011bbe <rcl_take_request+0x4a>
 8011bf0:	250b      	movs	r5, #11
 8011bf2:	e7e4      	b.n	8011bbe <rcl_take_request+0x4a>

08011bf4 <rcl_send_response>:
 8011bf4:	b170      	cbz	r0, 8011c14 <rcl_send_response+0x20>
 8011bf6:	6800      	ldr	r0, [r0, #0]
 8011bf8:	b160      	cbz	r0, 8011c14 <rcl_send_response+0x20>
 8011bfa:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8011bfe:	b148      	cbz	r0, 8011c14 <rcl_send_response+0x20>
 8011c00:	b159      	cbz	r1, 8011c1a <rcl_send_response+0x26>
 8011c02:	b510      	push	{r4, lr}
 8011c04:	b15a      	cbz	r2, 8011c1e <rcl_send_response+0x2a>
 8011c06:	f002 fcb1 	bl	801456c <rmw_send_response>
 8011c0a:	b110      	cbz	r0, 8011c12 <rcl_send_response+0x1e>
 8011c0c:	2802      	cmp	r0, #2
 8011c0e:	bf18      	it	ne
 8011c10:	2001      	movne	r0, #1
 8011c12:	bd10      	pop	{r4, pc}
 8011c14:	f44f 7016 	mov.w	r0, #600	; 0x258
 8011c18:	4770      	bx	lr
 8011c1a:	200b      	movs	r0, #11
 8011c1c:	4770      	bx	lr
 8011c1e:	200b      	movs	r0, #11
 8011c20:	bd10      	pop	{r4, pc}
 8011c22:	bf00      	nop

08011c24 <rcl_service_is_valid>:
 8011c24:	b130      	cbz	r0, 8011c34 <rcl_service_is_valid+0x10>
 8011c26:	6800      	ldr	r0, [r0, #0]
 8011c28:	b120      	cbz	r0, 8011c34 <rcl_service_is_valid+0x10>
 8011c2a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8011c2e:	3800      	subs	r0, #0
 8011c30:	bf18      	it	ne
 8011c32:	2001      	movne	r0, #1
 8011c34:	4770      	bx	lr
 8011c36:	bf00      	nop

08011c38 <rcl_get_system_time>:
 8011c38:	4608      	mov	r0, r1
 8011c3a:	f7f8 bab1 	b.w	800a1a0 <rcutils_system_time_now>
 8011c3e:	bf00      	nop

08011c40 <rcl_get_steady_time>:
 8011c40:	4608      	mov	r0, r1
 8011c42:	f7f8 bad5 	b.w	800a1f0 <rcutils_steady_time_now>
 8011c46:	bf00      	nop

08011c48 <rcl_get_ros_time>:
 8011c48:	7a03      	ldrb	r3, [r0, #8]
 8011c4a:	b510      	push	{r4, lr}
 8011c4c:	460c      	mov	r4, r1
 8011c4e:	b133      	cbz	r3, 8011c5e <rcl_get_ros_time+0x16>
 8011c50:	2105      	movs	r1, #5
 8011c52:	f001 fd51 	bl	80136f8 <__atomic_load_8>
 8011c56:	e9c4 0100 	strd	r0, r1, [r4]
 8011c5a:	2000      	movs	r0, #0
 8011c5c:	bd10      	pop	{r4, pc}
 8011c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c62:	4608      	mov	r0, r1
 8011c64:	f7f8 ba9c 	b.w	800a1a0 <rcutils_system_time_now>

08011c68 <rcl_clock_init>:
 8011c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c6a:	4605      	mov	r5, r0
 8011c6c:	4610      	mov	r0, r2
 8011c6e:	4614      	mov	r4, r2
 8011c70:	460e      	mov	r6, r1
 8011c72:	f7f8 f8e5 	bl	8009e40 <rcutils_allocator_is_valid>
 8011c76:	b128      	cbz	r0, 8011c84 <rcl_clock_init+0x1c>
 8011c78:	2d03      	cmp	r5, #3
 8011c7a:	d803      	bhi.n	8011c84 <rcl_clock_init+0x1c>
 8011c7c:	e8df f005 	tbb	[pc, r5]
 8011c80:	06532e1d 	.word	0x06532e1d
 8011c84:	f04f 0c0b 	mov.w	ip, #11
 8011c88:	4660      	mov	r0, ip
 8011c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c8c:	2e00      	cmp	r6, #0
 8011c8e:	d0f9      	beq.n	8011c84 <rcl_clock_init+0x1c>
 8011c90:	2c00      	cmp	r4, #0
 8011c92:	d0f7      	beq.n	8011c84 <rcl_clock_init+0x1c>
 8011c94:	2300      	movs	r3, #0
 8011c96:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011c9a:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8011d50 <rcl_clock_init+0xe8>
 8011c9e:	6133      	str	r3, [r6, #16]
 8011ca0:	f106 0514 	add.w	r5, r6, #20
 8011ca4:	469c      	mov	ip, r3
 8011ca6:	2703      	movs	r7, #3
 8011ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011cac:	6823      	ldr	r3, [r4, #0]
 8011cae:	602b      	str	r3, [r5, #0]
 8011cb0:	7037      	strb	r7, [r6, #0]
 8011cb2:	f8c6 e00c 	str.w	lr, [r6, #12]
 8011cb6:	4660      	mov	r0, ip
 8011cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cba:	2e00      	cmp	r6, #0
 8011cbc:	d0e2      	beq.n	8011c84 <rcl_clock_init+0x1c>
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	7033      	strb	r3, [r6, #0]
 8011cc2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011cc6:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8011cca:	469c      	mov	ip, r3
 8011ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011cce:	f106 0514 	add.w	r5, r6, #20
 8011cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011cd4:	6823      	ldr	r3, [r4, #0]
 8011cd6:	602b      	str	r3, [r5, #0]
 8011cd8:	4660      	mov	r0, ip
 8011cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cdc:	2e00      	cmp	r6, #0
 8011cde:	d0d1      	beq.n	8011c84 <rcl_clock_init+0x1c>
 8011ce0:	2c00      	cmp	r4, #0
 8011ce2:	d0cf      	beq.n	8011c84 <rcl_clock_init+0x1c>
 8011ce4:	2700      	movs	r7, #0
 8011ce6:	7037      	strb	r7, [r6, #0]
 8011ce8:	46a4      	mov	ip, r4
 8011cea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011cee:	f106 0514 	add.w	r5, r6, #20
 8011cf2:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8011cf6:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8011cfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011cfc:	f8dc 3000 	ldr.w	r3, [ip]
 8011d00:	602b      	str	r3, [r5, #0]
 8011d02:	6921      	ldr	r1, [r4, #16]
 8011d04:	6823      	ldr	r3, [r4, #0]
 8011d06:	2010      	movs	r0, #16
 8011d08:	4798      	blx	r3
 8011d0a:	6130      	str	r0, [r6, #16]
 8011d0c:	b1d0      	cbz	r0, 8011d44 <rcl_clock_init+0xdc>
 8011d0e:	2200      	movs	r2, #0
 8011d10:	2300      	movs	r3, #0
 8011d12:	e9c0 2300 	strd	r2, r3, [r0]
 8011d16:	2301      	movs	r3, #1
 8011d18:	7207      	strb	r7, [r0, #8]
 8011d1a:	4a0c      	ldr	r2, [pc, #48]	; (8011d4c <rcl_clock_init+0xe4>)
 8011d1c:	7033      	strb	r3, [r6, #0]
 8011d1e:	46bc      	mov	ip, r7
 8011d20:	60f2      	str	r2, [r6, #12]
 8011d22:	4660      	mov	r0, ip
 8011d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d26:	2e00      	cmp	r6, #0
 8011d28:	d0ac      	beq.n	8011c84 <rcl_clock_init+0x1c>
 8011d2a:	2c00      	cmp	r4, #0
 8011d2c:	d0aa      	beq.n	8011c84 <rcl_clock_init+0x1c>
 8011d2e:	2300      	movs	r3, #0
 8011d30:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011d34:	f8df e01c 	ldr.w	lr, [pc, #28]	; 8011d54 <rcl_clock_init+0xec>
 8011d38:	6133      	str	r3, [r6, #16]
 8011d3a:	f106 0514 	add.w	r5, r6, #20
 8011d3e:	469c      	mov	ip, r3
 8011d40:	2702      	movs	r7, #2
 8011d42:	e7b1      	b.n	8011ca8 <rcl_clock_init+0x40>
 8011d44:	f04f 0c0a 	mov.w	ip, #10
 8011d48:	e79e      	b.n	8011c88 <rcl_clock_init+0x20>
 8011d4a:	bf00      	nop
 8011d4c:	08011c49 	.word	0x08011c49
 8011d50:	08011c41 	.word	0x08011c41
 8011d54:	08011c39 	.word	0x08011c39

08011d58 <rcl_clock_get_now>:
 8011d58:	b140      	cbz	r0, 8011d6c <rcl_clock_get_now+0x14>
 8011d5a:	b139      	cbz	r1, 8011d6c <rcl_clock_get_now+0x14>
 8011d5c:	7803      	ldrb	r3, [r0, #0]
 8011d5e:	b11b      	cbz	r3, 8011d68 <rcl_clock_get_now+0x10>
 8011d60:	68c3      	ldr	r3, [r0, #12]
 8011d62:	b10b      	cbz	r3, 8011d68 <rcl_clock_get_now+0x10>
 8011d64:	6900      	ldr	r0, [r0, #16]
 8011d66:	4718      	bx	r3
 8011d68:	2001      	movs	r0, #1
 8011d6a:	4770      	bx	lr
 8011d6c:	200b      	movs	r0, #11
 8011d6e:	4770      	bx	lr

08011d70 <rcl_timer_call>:
 8011d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d74:	b087      	sub	sp, #28
 8011d76:	2800      	cmp	r0, #0
 8011d78:	d06d      	beq.n	8011e56 <rcl_timer_call+0xe6>
 8011d7a:	6803      	ldr	r3, [r0, #0]
 8011d7c:	4604      	mov	r4, r0
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d063      	beq.n	8011e4a <rcl_timer_call+0xda>
 8011d82:	f3bf 8f5b 	dmb	ish
 8011d86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011d8a:	f3bf 8f5b 	dmb	ish
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d150      	bne.n	8011e34 <rcl_timer_call+0xc4>
 8011d92:	6803      	ldr	r3, [r0, #0]
 8011d94:	a904      	add	r1, sp, #16
 8011d96:	6818      	ldr	r0, [r3, #0]
 8011d98:	f7ff ffde 	bl	8011d58 <rcl_clock_get_now>
 8011d9c:	4605      	mov	r5, r0
 8011d9e:	2800      	cmp	r0, #0
 8011da0:	d14a      	bne.n	8011e38 <rcl_timer_call+0xc8>
 8011da2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	db4a      	blt.n	8011e40 <rcl_timer_call+0xd0>
 8011daa:	6820      	ldr	r0, [r4, #0]
 8011dac:	f04f 0a05 	mov.w	sl, #5
 8011db0:	f8cd a000 	str.w	sl, [sp]
 8011db4:	3020      	adds	r0, #32
 8011db6:	f001 fd0b 	bl	80137d0 <__atomic_exchange_8>
 8011dba:	6823      	ldr	r3, [r4, #0]
 8011dbc:	f3bf 8f5b 	dmb	ish
 8011dc0:	4680      	mov	r8, r0
 8011dc2:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8011dc6:	f3bf 8f5b 	dmb	ish
 8011dca:	6820      	ldr	r0, [r4, #0]
 8011dcc:	4689      	mov	r9, r1
 8011dce:	3028      	adds	r0, #40	; 0x28
 8011dd0:	4651      	mov	r1, sl
 8011dd2:	f001 fc91 	bl	80136f8 <__atomic_load_8>
 8011dd6:	4606      	mov	r6, r0
 8011dd8:	6820      	ldr	r0, [r4, #0]
 8011dda:	460f      	mov	r7, r1
 8011ddc:	3018      	adds	r0, #24
 8011dde:	4651      	mov	r1, sl
 8011de0:	f001 fc8a 	bl	80136f8 <__atomic_load_8>
 8011de4:	1836      	adds	r6, r6, r0
 8011de6:	4602      	mov	r2, r0
 8011de8:	4682      	mov	sl, r0
 8011dea:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8011dee:	eb47 0701 	adc.w	r7, r7, r1
 8011df2:	4286      	cmp	r6, r0
 8011df4:	460b      	mov	r3, r1
 8011df6:	eb77 010c 	sbcs.w	r1, r7, ip
 8011dfa:	da04      	bge.n	8011e06 <rcl_timer_call+0x96>
 8011dfc:	ea53 0102 	orrs.w	r1, r3, r2
 8011e00:	d12e      	bne.n	8011e60 <rcl_timer_call+0xf0>
 8011e02:	4606      	mov	r6, r0
 8011e04:	4667      	mov	r7, ip
 8011e06:	6820      	ldr	r0, [r4, #0]
 8011e08:	2105      	movs	r1, #5
 8011e0a:	4632      	mov	r2, r6
 8011e0c:	463b      	mov	r3, r7
 8011e0e:	3028      	adds	r0, #40	; 0x28
 8011e10:	9100      	str	r1, [sp, #0]
 8011e12:	f001 fca7 	bl	8013764 <__atomic_store_8>
 8011e16:	f1bb 0f00 	cmp.w	fp, #0
 8011e1a:	d00d      	beq.n	8011e38 <rcl_timer_call+0xc8>
 8011e1c:	9a04      	ldr	r2, [sp, #16]
 8011e1e:	9b05      	ldr	r3, [sp, #20]
 8011e20:	ebb2 0208 	subs.w	r2, r2, r8
 8011e24:	4620      	mov	r0, r4
 8011e26:	eb63 0309 	sbc.w	r3, r3, r9
 8011e2a:	47d8      	blx	fp
 8011e2c:	4628      	mov	r0, r5
 8011e2e:	b007      	add	sp, #28
 8011e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e34:	f240 3521 	movw	r5, #801	; 0x321
 8011e38:	4628      	mov	r0, r5
 8011e3a:	b007      	add	sp, #28
 8011e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e40:	2501      	movs	r5, #1
 8011e42:	4628      	mov	r0, r5
 8011e44:	b007      	add	sp, #28
 8011e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e4a:	f44f 7548 	mov.w	r5, #800	; 0x320
 8011e4e:	4628      	mov	r0, r5
 8011e50:	b007      	add	sp, #28
 8011e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e56:	250b      	movs	r5, #11
 8011e58:	4628      	mov	r0, r5
 8011e5a:	b007      	add	sp, #28
 8011e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e60:	1b80      	subs	r0, r0, r6
 8011e62:	eb6c 0107 	sbc.w	r1, ip, r7
 8011e66:	3801      	subs	r0, #1
 8011e68:	f161 0100 	sbc.w	r1, r1, #0
 8011e6c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8011e70:	f7ee fa36 	bl	80002e0 <__aeabi_ldivmod>
 8011e74:	9b02      	ldr	r3, [sp, #8]
 8011e76:	3001      	adds	r0, #1
 8011e78:	f141 0100 	adc.w	r1, r1, #0
 8011e7c:	fb00 f303 	mul.w	r3, r0, r3
 8011e80:	fb01 330a 	mla	r3, r1, sl, r3
 8011e84:	fba0 0a0a 	umull	r0, sl, r0, sl
 8011e88:	1986      	adds	r6, r0, r6
 8011e8a:	4453      	add	r3, sl
 8011e8c:	eb43 0707 	adc.w	r7, r3, r7
 8011e90:	e7b9      	b.n	8011e06 <rcl_timer_call+0x96>
 8011e92:	bf00      	nop

08011e94 <rcl_timer_is_ready>:
 8011e94:	b570      	push	{r4, r5, r6, lr}
 8011e96:	b082      	sub	sp, #8
 8011e98:	b378      	cbz	r0, 8011efa <rcl_timer_is_ready+0x66>
 8011e9a:	6803      	ldr	r3, [r0, #0]
 8011e9c:	4604      	mov	r4, r0
 8011e9e:	b383      	cbz	r3, 8011f02 <rcl_timer_is_ready+0x6e>
 8011ea0:	460d      	mov	r5, r1
 8011ea2:	b351      	cbz	r1, 8011efa <rcl_timer_is_ready+0x66>
 8011ea4:	f3bf 8f5b 	dmb	ish
 8011ea8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011eac:	f3bf 8f5b 	dmb	ish
 8011eb0:	b953      	cbnz	r3, 8011ec8 <rcl_timer_is_ready+0x34>
 8011eb2:	6803      	ldr	r3, [r0, #0]
 8011eb4:	4669      	mov	r1, sp
 8011eb6:	6818      	ldr	r0, [r3, #0]
 8011eb8:	f7ff ff4e 	bl	8011d58 <rcl_clock_get_now>
 8011ebc:	4606      	mov	r6, r0
 8011ebe:	b140      	cbz	r0, 8011ed2 <rcl_timer_is_ready+0x3e>
 8011ec0:	f240 3321 	movw	r3, #801	; 0x321
 8011ec4:	4298      	cmp	r0, r3
 8011ec6:	d101      	bne.n	8011ecc <rcl_timer_is_ready+0x38>
 8011ec8:	2600      	movs	r6, #0
 8011eca:	702e      	strb	r6, [r5, #0]
 8011ecc:	4630      	mov	r0, r6
 8011ece:	b002      	add	sp, #8
 8011ed0:	bd70      	pop	{r4, r5, r6, pc}
 8011ed2:	6820      	ldr	r0, [r4, #0]
 8011ed4:	2105      	movs	r1, #5
 8011ed6:	3028      	adds	r0, #40	; 0x28
 8011ed8:	f001 fc0e 	bl	80136f8 <__atomic_load_8>
 8011edc:	9b00      	ldr	r3, [sp, #0]
 8011ede:	1ac0      	subs	r0, r0, r3
 8011ee0:	9b01      	ldr	r3, [sp, #4]
 8011ee2:	eb61 0103 	sbc.w	r1, r1, r3
 8011ee6:	2801      	cmp	r0, #1
 8011ee8:	f171 0300 	sbcs.w	r3, r1, #0
 8011eec:	bfb4      	ite	lt
 8011eee:	2301      	movlt	r3, #1
 8011ef0:	2300      	movge	r3, #0
 8011ef2:	4630      	mov	r0, r6
 8011ef4:	702b      	strb	r3, [r5, #0]
 8011ef6:	b002      	add	sp, #8
 8011ef8:	bd70      	pop	{r4, r5, r6, pc}
 8011efa:	260b      	movs	r6, #11
 8011efc:	4630      	mov	r0, r6
 8011efe:	b002      	add	sp, #8
 8011f00:	bd70      	pop	{r4, r5, r6, pc}
 8011f02:	f44f 7648 	mov.w	r6, #800	; 0x320
 8011f06:	e7e1      	b.n	8011ecc <rcl_timer_is_ready+0x38>

08011f08 <rcl_timer_get_time_until_next_call>:
 8011f08:	b570      	push	{r4, r5, r6, lr}
 8011f0a:	b082      	sub	sp, #8
 8011f0c:	b330      	cbz	r0, 8011f5c <rcl_timer_get_time_until_next_call+0x54>
 8011f0e:	6803      	ldr	r3, [r0, #0]
 8011f10:	4604      	mov	r4, r0
 8011f12:	b33b      	cbz	r3, 8011f64 <rcl_timer_get_time_until_next_call+0x5c>
 8011f14:	460d      	mov	r5, r1
 8011f16:	b309      	cbz	r1, 8011f5c <rcl_timer_get_time_until_next_call+0x54>
 8011f18:	f3bf 8f5b 	dmb	ish
 8011f1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011f20:	f3bf 8f5b 	dmb	ish
 8011f24:	b9ab      	cbnz	r3, 8011f52 <rcl_timer_get_time_until_next_call+0x4a>
 8011f26:	6803      	ldr	r3, [r0, #0]
 8011f28:	4669      	mov	r1, sp
 8011f2a:	6818      	ldr	r0, [r3, #0]
 8011f2c:	f7ff ff14 	bl	8011d58 <rcl_clock_get_now>
 8011f30:	4606      	mov	r6, r0
 8011f32:	b958      	cbnz	r0, 8011f4c <rcl_timer_get_time_until_next_call+0x44>
 8011f34:	6820      	ldr	r0, [r4, #0]
 8011f36:	2105      	movs	r1, #5
 8011f38:	3028      	adds	r0, #40	; 0x28
 8011f3a:	f001 fbdd 	bl	80136f8 <__atomic_load_8>
 8011f3e:	9b00      	ldr	r3, [sp, #0]
 8011f40:	1ac0      	subs	r0, r0, r3
 8011f42:	9b01      	ldr	r3, [sp, #4]
 8011f44:	6028      	str	r0, [r5, #0]
 8011f46:	eb61 0103 	sbc.w	r1, r1, r3
 8011f4a:	6069      	str	r1, [r5, #4]
 8011f4c:	4630      	mov	r0, r6
 8011f4e:	b002      	add	sp, #8
 8011f50:	bd70      	pop	{r4, r5, r6, pc}
 8011f52:	f240 3621 	movw	r6, #801	; 0x321
 8011f56:	4630      	mov	r0, r6
 8011f58:	b002      	add	sp, #8
 8011f5a:	bd70      	pop	{r4, r5, r6, pc}
 8011f5c:	260b      	movs	r6, #11
 8011f5e:	4630      	mov	r0, r6
 8011f60:	b002      	add	sp, #8
 8011f62:	bd70      	pop	{r4, r5, r6, pc}
 8011f64:	f44f 7648 	mov.w	r6, #800	; 0x320
 8011f68:	e7f0      	b.n	8011f4c <rcl_timer_get_time_until_next_call+0x44>
 8011f6a:	bf00      	nop

08011f6c <rcl_timer_get_guard_condition>:
 8011f6c:	b130      	cbz	r0, 8011f7c <rcl_timer_get_guard_condition+0x10>
 8011f6e:	6800      	ldr	r0, [r0, #0]
 8011f70:	b120      	cbz	r0, 8011f7c <rcl_timer_get_guard_condition+0x10>
 8011f72:	68c3      	ldr	r3, [r0, #12]
 8011f74:	b10b      	cbz	r3, 8011f7a <rcl_timer_get_guard_condition+0xe>
 8011f76:	3008      	adds	r0, #8
 8011f78:	4770      	bx	lr
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	4770      	bx	lr
 8011f7e:	bf00      	nop

08011f80 <rcl_validate_enclave_name_with_size>:
 8011f80:	b378      	cbz	r0, 8011fe2 <rcl_validate_enclave_name_with_size+0x62>
 8011f82:	b570      	push	{r4, r5, r6, lr}
 8011f84:	4615      	mov	r5, r2
 8011f86:	b0c2      	sub	sp, #264	; 0x108
 8011f88:	b302      	cbz	r2, 8011fcc <rcl_validate_enclave_name_with_size+0x4c>
 8011f8a:	461e      	mov	r6, r3
 8011f8c:	466a      	mov	r2, sp
 8011f8e:	ab01      	add	r3, sp, #4
 8011f90:	460c      	mov	r4, r1
 8011f92:	f7f8 f981 	bl	800a298 <rmw_validate_namespace_with_size>
 8011f96:	4684      	mov	ip, r0
 8011f98:	b9e8      	cbnz	r0, 8011fd6 <rcl_validate_enclave_name_with_size+0x56>
 8011f9a:	9b00      	ldr	r3, [sp, #0]
 8011f9c:	b923      	cbnz	r3, 8011fa8 <rcl_validate_enclave_name_with_size+0x28>
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	602b      	str	r3, [r5, #0]
 8011fa2:	4660      	mov	r0, ip
 8011fa4:	b042      	add	sp, #264	; 0x108
 8011fa6:	bd70      	pop	{r4, r5, r6, pc}
 8011fa8:	2b07      	cmp	r3, #7
 8011faa:	d007      	beq.n	8011fbc <rcl_validate_enclave_name_with_size+0x3c>
 8011fac:	1e5a      	subs	r2, r3, #1
 8011fae:	2a05      	cmp	r2, #5
 8011fb0:	d833      	bhi.n	801201a <rcl_validate_enclave_name_with_size+0x9a>
 8011fb2:	e8df f002 	tbb	[pc, r2]
 8011fb6:	2c2f      	.short	0x2c2f
 8011fb8:	1a232629 	.word	0x1a232629
 8011fbc:	2cff      	cmp	r4, #255	; 0xff
 8011fbe:	d9ee      	bls.n	8011f9e <rcl_validate_enclave_name_with_size+0x1e>
 8011fc0:	602b      	str	r3, [r5, #0]
 8011fc2:	2e00      	cmp	r6, #0
 8011fc4:	d0ed      	beq.n	8011fa2 <rcl_validate_enclave_name_with_size+0x22>
 8011fc6:	23fe      	movs	r3, #254	; 0xfe
 8011fc8:	6033      	str	r3, [r6, #0]
 8011fca:	e7ea      	b.n	8011fa2 <rcl_validate_enclave_name_with_size+0x22>
 8011fcc:	f04f 0c0b 	mov.w	ip, #11
 8011fd0:	4660      	mov	r0, ip
 8011fd2:	b042      	add	sp, #264	; 0x108
 8011fd4:	bd70      	pop	{r4, r5, r6, pc}
 8011fd6:	f7ff f8c9 	bl	801116c <rcl_convert_rmw_ret_to_rcl_ret>
 8011fda:	4684      	mov	ip, r0
 8011fdc:	4660      	mov	r0, ip
 8011fde:	b042      	add	sp, #264	; 0x108
 8011fe0:	bd70      	pop	{r4, r5, r6, pc}
 8011fe2:	f04f 0c0b 	mov.w	ip, #11
 8011fe6:	4660      	mov	r0, ip
 8011fe8:	4770      	bx	lr
 8011fea:	2306      	movs	r3, #6
 8011fec:	602b      	str	r3, [r5, #0]
 8011fee:	2e00      	cmp	r6, #0
 8011ff0:	d0d7      	beq.n	8011fa2 <rcl_validate_enclave_name_with_size+0x22>
 8011ff2:	9b01      	ldr	r3, [sp, #4]
 8011ff4:	6033      	str	r3, [r6, #0]
 8011ff6:	4660      	mov	r0, ip
 8011ff8:	b042      	add	sp, #264	; 0x108
 8011ffa:	bd70      	pop	{r4, r5, r6, pc}
 8011ffc:	2305      	movs	r3, #5
 8011ffe:	602b      	str	r3, [r5, #0]
 8012000:	e7f5      	b.n	8011fee <rcl_validate_enclave_name_with_size+0x6e>
 8012002:	2304      	movs	r3, #4
 8012004:	602b      	str	r3, [r5, #0]
 8012006:	e7f2      	b.n	8011fee <rcl_validate_enclave_name_with_size+0x6e>
 8012008:	2303      	movs	r3, #3
 801200a:	602b      	str	r3, [r5, #0]
 801200c:	e7ef      	b.n	8011fee <rcl_validate_enclave_name_with_size+0x6e>
 801200e:	2302      	movs	r3, #2
 8012010:	602b      	str	r3, [r5, #0]
 8012012:	e7ec      	b.n	8011fee <rcl_validate_enclave_name_with_size+0x6e>
 8012014:	2301      	movs	r3, #1
 8012016:	602b      	str	r3, [r5, #0]
 8012018:	e7e9      	b.n	8011fee <rcl_validate_enclave_name_with_size+0x6e>
 801201a:	4a04      	ldr	r2, [pc, #16]	; (801202c <rcl_validate_enclave_name_with_size+0xac>)
 801201c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012020:	a802      	add	r0, sp, #8
 8012022:	f7f8 f853 	bl	800a0cc <rcutils_snprintf>
 8012026:	f04f 0c01 	mov.w	ip, #1
 801202a:	e7ba      	b.n	8011fa2 <rcl_validate_enclave_name_with_size+0x22>
 801202c:	0801932c 	.word	0x0801932c

08012030 <rcl_validate_enclave_name>:
 8012030:	b168      	cbz	r0, 801204e <rcl_validate_enclave_name+0x1e>
 8012032:	b570      	push	{r4, r5, r6, lr}
 8012034:	460d      	mov	r5, r1
 8012036:	4616      	mov	r6, r2
 8012038:	4604      	mov	r4, r0
 801203a:	f7ee f8f3 	bl	8000224 <strlen>
 801203e:	4633      	mov	r3, r6
 8012040:	4601      	mov	r1, r0
 8012042:	462a      	mov	r2, r5
 8012044:	4620      	mov	r0, r4
 8012046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801204a:	f7ff bf99 	b.w	8011f80 <rcl_validate_enclave_name_with_size>
 801204e:	200b      	movs	r0, #11
 8012050:	4770      	bx	lr
 8012052:	bf00      	nop

08012054 <rcl_get_zero_initialized_wait_set>:
 8012054:	b510      	push	{r4, lr}
 8012056:	4c08      	ldr	r4, [pc, #32]	; (8012078 <rcl_get_zero_initialized_wait_set+0x24>)
 8012058:	4686      	mov	lr, r0
 801205a:	4684      	mov	ip, r0
 801205c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801205e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012064:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801206a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801206e:	6823      	ldr	r3, [r4, #0]
 8012070:	f8cc 3000 	str.w	r3, [ip]
 8012074:	4670      	mov	r0, lr
 8012076:	bd10      	pop	{r4, pc}
 8012078:	0801938c 	.word	0x0801938c

0801207c <rcl_wait_set_is_valid>:
 801207c:	b118      	cbz	r0, 8012086 <rcl_wait_set_is_valid+0xa>
 801207e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8012080:	3800      	subs	r0, #0
 8012082:	bf18      	it	ne
 8012084:	2001      	movne	r0, #1
 8012086:	4770      	bx	lr

08012088 <rcl_wait_set_fini>:
 8012088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801208c:	b082      	sub	sp, #8
 801208e:	2800      	cmp	r0, #0
 8012090:	f000 8095 	beq.w	80121be <rcl_wait_set_fini+0x136>
 8012094:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8012096:	4604      	mov	r4, r0
 8012098:	2e00      	cmp	r6, #0
 801209a:	f000 808c 	beq.w	80121b6 <rcl_wait_set_fini+0x12e>
 801209e:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 80120a0:	f002 fca4 	bl	80149ec <rmw_destroy_wait_set>
 80120a4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80120a6:	1e06      	subs	r6, r0, #0
 80120a8:	bf18      	it	ne
 80120aa:	f44f 7661 	movne.w	r6, #900	; 0x384
 80120ae:	2d00      	cmp	r5, #0
 80120b0:	f000 8081 	beq.w	80121b6 <rcl_wait_set_fini+0x12e>
 80120b4:	6820      	ldr	r0, [r4, #0]
 80120b6:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80120ba:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80120bc:	2700      	movs	r7, #0
 80120be:	6067      	str	r7, [r4, #4]
 80120c0:	602f      	str	r7, [r5, #0]
 80120c2:	b120      	cbz	r0, 80120ce <rcl_wait_set_fini+0x46>
 80120c4:	9101      	str	r1, [sp, #4]
 80120c6:	47c0      	blx	r8
 80120c8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80120ca:	9901      	ldr	r1, [sp, #4]
 80120cc:	6027      	str	r7, [r4, #0]
 80120ce:	68a8      	ldr	r0, [r5, #8]
 80120d0:	b120      	cbz	r0, 80120dc <rcl_wait_set_fini+0x54>
 80120d2:	47c0      	blx	r8
 80120d4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80120d6:	2300      	movs	r3, #0
 80120d8:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80120dc:	68a0      	ldr	r0, [r4, #8]
 80120de:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80120e0:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80120e2:	f04f 0800 	mov.w	r8, #0
 80120e6:	f8c4 800c 	str.w	r8, [r4, #12]
 80120ea:	f8c5 800c 	str.w	r8, [r5, #12]
 80120ee:	b128      	cbz	r0, 80120fc <rcl_wait_set_fini+0x74>
 80120f0:	47b8      	blx	r7
 80120f2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80120f4:	f8c4 8008 	str.w	r8, [r4, #8]
 80120f8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80120fa:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80120fc:	6968      	ldr	r0, [r5, #20]
 80120fe:	f04f 0800 	mov.w	r8, #0
 8012102:	f8c5 8010 	str.w	r8, [r5, #16]
 8012106:	b128      	cbz	r0, 8012114 <rcl_wait_set_fini+0x8c>
 8012108:	47b8      	blx	r7
 801210a:	f8c5 8014 	str.w	r8, [r5, #20]
 801210e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8012110:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8012112:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8012114:	6920      	ldr	r0, [r4, #16]
 8012116:	f04f 0800 	mov.w	r8, #0
 801211a:	f8c4 8014 	str.w	r8, [r4, #20]
 801211e:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8012122:	b128      	cbz	r0, 8012130 <rcl_wait_set_fini+0xa8>
 8012124:	47b8      	blx	r7
 8012126:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8012128:	f8c4 8010 	str.w	r8, [r4, #16]
 801212c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801212e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8012130:	69a0      	ldr	r0, [r4, #24]
 8012132:	f04f 0800 	mov.w	r8, #0
 8012136:	f8c4 801c 	str.w	r8, [r4, #28]
 801213a:	f8c5 8018 	str.w	r8, [r5, #24]
 801213e:	b128      	cbz	r0, 801214c <rcl_wait_set_fini+0xc4>
 8012140:	9101      	str	r1, [sp, #4]
 8012142:	47b8      	blx	r7
 8012144:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8012146:	9901      	ldr	r1, [sp, #4]
 8012148:	f8c4 8018 	str.w	r8, [r4, #24]
 801214c:	6a28      	ldr	r0, [r5, #32]
 801214e:	b120      	cbz	r0, 801215a <rcl_wait_set_fini+0xd2>
 8012150:	47b8      	blx	r7
 8012152:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8012154:	2300      	movs	r3, #0
 8012156:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801215a:	6a20      	ldr	r0, [r4, #32]
 801215c:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8012160:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8012162:	2700      	movs	r7, #0
 8012164:	6267      	str	r7, [r4, #36]	; 0x24
 8012166:	626f      	str	r7, [r5, #36]	; 0x24
 8012168:	b120      	cbz	r0, 8012174 <rcl_wait_set_fini+0xec>
 801216a:	9101      	str	r1, [sp, #4]
 801216c:	47c0      	blx	r8
 801216e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8012170:	9901      	ldr	r1, [sp, #4]
 8012172:	6227      	str	r7, [r4, #32]
 8012174:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8012176:	b120      	cbz	r0, 8012182 <rcl_wait_set_fini+0xfa>
 8012178:	47c0      	blx	r8
 801217a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801217c:	2300      	movs	r3, #0
 801217e:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8012182:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8012184:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8012188:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801218a:	2700      	movs	r7, #0
 801218c:	62e7      	str	r7, [r4, #44]	; 0x2c
 801218e:	632f      	str	r7, [r5, #48]	; 0x30
 8012190:	b120      	cbz	r0, 801219c <rcl_wait_set_fini+0x114>
 8012192:	9101      	str	r1, [sp, #4]
 8012194:	47c0      	blx	r8
 8012196:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8012198:	9901      	ldr	r1, [sp, #4]
 801219a:	62a7      	str	r7, [r4, #40]	; 0x28
 801219c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801219e:	b120      	cbz	r0, 80121aa <rcl_wait_set_fini+0x122>
 80121a0:	47c0      	blx	r8
 80121a2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80121a4:	2300      	movs	r3, #0
 80121a6:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 80121aa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80121ac:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80121ae:	4628      	mov	r0, r5
 80121b0:	4798      	blx	r3
 80121b2:	2300      	movs	r3, #0
 80121b4:	6323      	str	r3, [r4, #48]	; 0x30
 80121b6:	4630      	mov	r0, r6
 80121b8:	b002      	add	sp, #8
 80121ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121be:	260b      	movs	r6, #11
 80121c0:	4630      	mov	r0, r6
 80121c2:	b002      	add	sp, #8
 80121c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080121c8 <rcl_wait_set_add_subscription>:
 80121c8:	b318      	cbz	r0, 8012212 <rcl_wait_set_add_subscription+0x4a>
 80121ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80121cc:	b570      	push	{r4, r5, r6, lr}
 80121ce:	4604      	mov	r4, r0
 80121d0:	b30b      	cbz	r3, 8012216 <rcl_wait_set_add_subscription+0x4e>
 80121d2:	b319      	cbz	r1, 801221c <rcl_wait_set_add_subscription+0x54>
 80121d4:	681d      	ldr	r5, [r3, #0]
 80121d6:	6840      	ldr	r0, [r0, #4]
 80121d8:	4285      	cmp	r5, r0
 80121da:	d217      	bcs.n	801220c <rcl_wait_set_add_subscription+0x44>
 80121dc:	6820      	ldr	r0, [r4, #0]
 80121de:	1c6e      	adds	r6, r5, #1
 80121e0:	601e      	str	r6, [r3, #0]
 80121e2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80121e6:	b102      	cbz	r2, 80121ea <rcl_wait_set_add_subscription+0x22>
 80121e8:	6015      	str	r5, [r2, #0]
 80121ea:	4608      	mov	r0, r1
 80121ec:	f7f6 fe90 	bl	8008f10 <rcl_subscription_get_rmw_handle>
 80121f0:	b150      	cbz	r0, 8012208 <rcl_wait_set_add_subscription+0x40>
 80121f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80121f4:	6842      	ldr	r2, [r0, #4]
 80121f6:	689b      	ldr	r3, [r3, #8]
 80121f8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80121fc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80121fe:	6853      	ldr	r3, [r2, #4]
 8012200:	3301      	adds	r3, #1
 8012202:	2000      	movs	r0, #0
 8012204:	6053      	str	r3, [r2, #4]
 8012206:	bd70      	pop	{r4, r5, r6, pc}
 8012208:	2001      	movs	r0, #1
 801220a:	bd70      	pop	{r4, r5, r6, pc}
 801220c:	f240 3086 	movw	r0, #902	; 0x386
 8012210:	bd70      	pop	{r4, r5, r6, pc}
 8012212:	200b      	movs	r0, #11
 8012214:	4770      	bx	lr
 8012216:	f44f 7061 	mov.w	r0, #900	; 0x384
 801221a:	bd70      	pop	{r4, r5, r6, pc}
 801221c:	200b      	movs	r0, #11
 801221e:	bd70      	pop	{r4, r5, r6, pc}

08012220 <rcl_wait_set_clear>:
 8012220:	2800      	cmp	r0, #0
 8012222:	d073      	beq.n	801230c <rcl_wait_set_clear+0xec>
 8012224:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012226:	b510      	push	{r4, lr}
 8012228:	4604      	mov	r4, r0
 801222a:	2b00      	cmp	r3, #0
 801222c:	d070      	beq.n	8012310 <rcl_wait_set_clear+0xf0>
 801222e:	6800      	ldr	r0, [r0, #0]
 8012230:	b138      	cbz	r0, 8012242 <rcl_wait_set_clear+0x22>
 8012232:	6862      	ldr	r2, [r4, #4]
 8012234:	2100      	movs	r1, #0
 8012236:	0092      	lsls	r2, r2, #2
 8012238:	f005 fa34 	bl	80176a4 <memset>
 801223c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801223e:	2200      	movs	r2, #0
 8012240:	601a      	str	r2, [r3, #0]
 8012242:	68a0      	ldr	r0, [r4, #8]
 8012244:	b138      	cbz	r0, 8012256 <rcl_wait_set_clear+0x36>
 8012246:	68e2      	ldr	r2, [r4, #12]
 8012248:	2100      	movs	r1, #0
 801224a:	0092      	lsls	r2, r2, #2
 801224c:	f005 fa2a 	bl	80176a4 <memset>
 8012250:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012252:	2200      	movs	r2, #0
 8012254:	60da      	str	r2, [r3, #12]
 8012256:	69a0      	ldr	r0, [r4, #24]
 8012258:	b138      	cbz	r0, 801226a <rcl_wait_set_clear+0x4a>
 801225a:	69e2      	ldr	r2, [r4, #28]
 801225c:	2100      	movs	r1, #0
 801225e:	0092      	lsls	r2, r2, #2
 8012260:	f005 fa20 	bl	80176a4 <memset>
 8012264:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012266:	2200      	movs	r2, #0
 8012268:	619a      	str	r2, [r3, #24]
 801226a:	6a20      	ldr	r0, [r4, #32]
 801226c:	b138      	cbz	r0, 801227e <rcl_wait_set_clear+0x5e>
 801226e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8012270:	2100      	movs	r1, #0
 8012272:	0092      	lsls	r2, r2, #2
 8012274:	f005 fa16 	bl	80176a4 <memset>
 8012278:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801227a:	2200      	movs	r2, #0
 801227c:	625a      	str	r2, [r3, #36]	; 0x24
 801227e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8012280:	b138      	cbz	r0, 8012292 <rcl_wait_set_clear+0x72>
 8012282:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012284:	2100      	movs	r1, #0
 8012286:	0092      	lsls	r2, r2, #2
 8012288:	f005 fa0c 	bl	80176a4 <memset>
 801228c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801228e:	2200      	movs	r2, #0
 8012290:	631a      	str	r2, [r3, #48]	; 0x30
 8012292:	6920      	ldr	r0, [r4, #16]
 8012294:	b138      	cbz	r0, 80122a6 <rcl_wait_set_clear+0x86>
 8012296:	6962      	ldr	r2, [r4, #20]
 8012298:	2100      	movs	r1, #0
 801229a:	0092      	lsls	r2, r2, #2
 801229c:	f005 fa02 	bl	80176a4 <memset>
 80122a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80122a2:	2200      	movs	r2, #0
 80122a4:	641a      	str	r2, [r3, #64]	; 0x40
 80122a6:	6898      	ldr	r0, [r3, #8]
 80122a8:	b138      	cbz	r0, 80122ba <rcl_wait_set_clear+0x9a>
 80122aa:	685a      	ldr	r2, [r3, #4]
 80122ac:	2100      	movs	r1, #0
 80122ae:	0092      	lsls	r2, r2, #2
 80122b0:	f005 f9f8 	bl	80176a4 <memset>
 80122b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80122b6:	2200      	movs	r2, #0
 80122b8:	605a      	str	r2, [r3, #4]
 80122ba:	6958      	ldr	r0, [r3, #20]
 80122bc:	b138      	cbz	r0, 80122ce <rcl_wait_set_clear+0xae>
 80122be:	691a      	ldr	r2, [r3, #16]
 80122c0:	2100      	movs	r1, #0
 80122c2:	0092      	lsls	r2, r2, #2
 80122c4:	f005 f9ee 	bl	80176a4 <memset>
 80122c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80122ca:	2200      	movs	r2, #0
 80122cc:	611a      	str	r2, [r3, #16]
 80122ce:	6a18      	ldr	r0, [r3, #32]
 80122d0:	b138      	cbz	r0, 80122e2 <rcl_wait_set_clear+0xc2>
 80122d2:	69da      	ldr	r2, [r3, #28]
 80122d4:	2100      	movs	r1, #0
 80122d6:	0092      	lsls	r2, r2, #2
 80122d8:	f005 f9e4 	bl	80176a4 <memset>
 80122dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80122de:	2200      	movs	r2, #0
 80122e0:	61da      	str	r2, [r3, #28]
 80122e2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80122e4:	b138      	cbz	r0, 80122f6 <rcl_wait_set_clear+0xd6>
 80122e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80122e8:	2100      	movs	r1, #0
 80122ea:	0092      	lsls	r2, r2, #2
 80122ec:	f005 f9da 	bl	80176a4 <memset>
 80122f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80122f2:	2200      	movs	r2, #0
 80122f4:	629a      	str	r2, [r3, #40]	; 0x28
 80122f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80122f8:	b138      	cbz	r0, 801230a <rcl_wait_set_clear+0xea>
 80122fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80122fc:	2100      	movs	r1, #0
 80122fe:	0092      	lsls	r2, r2, #2
 8012300:	f005 f9d0 	bl	80176a4 <memset>
 8012304:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012306:	2000      	movs	r0, #0
 8012308:	6358      	str	r0, [r3, #52]	; 0x34
 801230a:	bd10      	pop	{r4, pc}
 801230c:	200b      	movs	r0, #11
 801230e:	4770      	bx	lr
 8012310:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012314:	bd10      	pop	{r4, pc}
 8012316:	bf00      	nop

08012318 <rcl_wait_set_resize>:
 8012318:	2800      	cmp	r0, #0
 801231a:	f000 8185 	beq.w	8012628 <rcl_wait_set_resize+0x310>
 801231e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012322:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8012324:	b083      	sub	sp, #12
 8012326:	4605      	mov	r5, r0
 8012328:	2c00      	cmp	r4, #0
 801232a:	f000 817f 	beq.w	801262c <rcl_wait_set_resize+0x314>
 801232e:	f04f 0900 	mov.w	r9, #0
 8012332:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012336:	461f      	mov	r7, r3
 8012338:	4688      	mov	r8, r1
 801233a:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 801233e:	4616      	mov	r6, r2
 8012340:	f8c0 9004 	str.w	r9, [r0, #4]
 8012344:	f8c4 9000 	str.w	r9, [r4]
 8012348:	2900      	cmp	r1, #0
 801234a:	f000 80bd 	beq.w	80124c8 <rcl_wait_set_resize+0x1b0>
 801234e:	008c      	lsls	r4, r1, #2
 8012350:	6800      	ldr	r0, [r0, #0]
 8012352:	9301      	str	r3, [sp, #4]
 8012354:	4652      	mov	r2, sl
 8012356:	4621      	mov	r1, r4
 8012358:	4798      	blx	r3
 801235a:	9b01      	ldr	r3, [sp, #4]
 801235c:	6028      	str	r0, [r5, #0]
 801235e:	2800      	cmp	r0, #0
 8012360:	f000 80cb 	beq.w	80124fa <rcl_wait_set_resize+0x1e2>
 8012364:	4622      	mov	r2, r4
 8012366:	4649      	mov	r1, r9
 8012368:	9301      	str	r3, [sp, #4]
 801236a:	f005 f99b 	bl	80176a4 <memset>
 801236e:	f8c5 8004 	str.w	r8, [r5, #4]
 8012372:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8012376:	9b01      	ldr	r3, [sp, #4]
 8012378:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801237c:	f8c8 9004 	str.w	r9, [r8, #4]
 8012380:	4652      	mov	r2, sl
 8012382:	4621      	mov	r1, r4
 8012384:	4798      	blx	r3
 8012386:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012388:	f8c8 0008 	str.w	r0, [r8, #8]
 801238c:	689b      	ldr	r3, [r3, #8]
 801238e:	2b00      	cmp	r3, #0
 8012390:	f000 80ac 	beq.w	80124ec <rcl_wait_set_resize+0x1d4>
 8012394:	4622      	mov	r2, r4
 8012396:	4649      	mov	r1, r9
 8012398:	4618      	mov	r0, r3
 801239a:	f005 f983 	bl	80176a4 <memset>
 801239e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80123a0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80123a4:	f04f 0800 	mov.w	r8, #0
 80123a8:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 80123ac:	f8c5 800c 	str.w	r8, [r5, #12]
 80123b0:	f8c4 800c 	str.w	r8, [r4, #12]
 80123b4:	2e00      	cmp	r6, #0
 80123b6:	f040 80a4 	bne.w	8012502 <rcl_wait_set_resize+0x1ea>
 80123ba:	68a8      	ldr	r0, [r5, #8]
 80123bc:	b128      	cbz	r0, 80123ca <rcl_wait_set_resize+0xb2>
 80123be:	4649      	mov	r1, r9
 80123c0:	4790      	blx	r2
 80123c2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80123c4:	60ae      	str	r6, [r5, #8]
 80123c6:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80123ca:	f04f 0800 	mov.w	r8, #0
 80123ce:	19f6      	adds	r6, r6, r7
 80123d0:	f8c4 8010 	str.w	r8, [r4, #16]
 80123d4:	f040 80ac 	bne.w	8012530 <rcl_wait_set_resize+0x218>
 80123d8:	6960      	ldr	r0, [r4, #20]
 80123da:	b130      	cbz	r0, 80123ea <rcl_wait_set_resize+0xd2>
 80123dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80123de:	4649      	mov	r1, r9
 80123e0:	4798      	blx	r3
 80123e2:	6166      	str	r6, [r4, #20]
 80123e4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80123e6:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80123ea:	2600      	movs	r6, #0
 80123ec:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 80123f0:	616e      	str	r6, [r5, #20]
 80123f2:	6426      	str	r6, [r4, #64]	; 0x40
 80123f4:	2f00      	cmp	r7, #0
 80123f6:	f040 80ad 	bne.w	8012554 <rcl_wait_set_resize+0x23c>
 80123fa:	6928      	ldr	r0, [r5, #16]
 80123fc:	b138      	cbz	r0, 801240e <rcl_wait_set_resize+0xf6>
 80123fe:	4649      	mov	r1, r9
 8012400:	47d0      	blx	sl
 8012402:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8012404:	612f      	str	r7, [r5, #16]
 8012406:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801240a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801240e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012410:	2600      	movs	r6, #0
 8012412:	61ee      	str	r6, [r5, #28]
 8012414:	61a6      	str	r6, [r4, #24]
 8012416:	2b00      	cmp	r3, #0
 8012418:	f040 80af 	bne.w	801257a <rcl_wait_set_resize+0x262>
 801241c:	69a8      	ldr	r0, [r5, #24]
 801241e:	b120      	cbz	r0, 801242a <rcl_wait_set_resize+0x112>
 8012420:	4649      	mov	r1, r9
 8012422:	47d0      	blx	sl
 8012424:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012426:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8012428:	61ab      	str	r3, [r5, #24]
 801242a:	6a20      	ldr	r0, [r4, #32]
 801242c:	b128      	cbz	r0, 801243a <rcl_wait_set_resize+0x122>
 801242e:	4649      	mov	r1, r9
 8012430:	47d0      	blx	sl
 8012432:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8012434:	2300      	movs	r3, #0
 8012436:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801243a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801243c:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801243e:	2600      	movs	r6, #0
 8012440:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 8012444:	626e      	str	r6, [r5, #36]	; 0x24
 8012446:	6266      	str	r6, [r4, #36]	; 0x24
 8012448:	2b00      	cmp	r3, #0
 801244a:	f000 80b6 	beq.w	80125ba <rcl_wait_set_resize+0x2a2>
 801244e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8012452:	6a28      	ldr	r0, [r5, #32]
 8012454:	463a      	mov	r2, r7
 8012456:	4651      	mov	r1, sl
 8012458:	47c8      	blx	r9
 801245a:	6228      	str	r0, [r5, #32]
 801245c:	2800      	cmp	r0, #0
 801245e:	d04c      	beq.n	80124fa <rcl_wait_set_resize+0x1e2>
 8012460:	4652      	mov	r2, sl
 8012462:	4631      	mov	r1, r6
 8012464:	f005 f91e 	bl	80176a4 <memset>
 8012468:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801246a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801246c:	626b      	str	r3, [r5, #36]	; 0x24
 801246e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8012470:	62a6      	str	r6, [r4, #40]	; 0x28
 8012472:	463a      	mov	r2, r7
 8012474:	4651      	mov	r1, sl
 8012476:	47c8      	blx	r9
 8012478:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801247a:	62e0      	str	r0, [r4, #44]	; 0x2c
 801247c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801247e:	2c00      	cmp	r4, #0
 8012480:	f000 80f0 	beq.w	8012664 <rcl_wait_set_resize+0x34c>
 8012484:	4620      	mov	r0, r4
 8012486:	4652      	mov	r2, sl
 8012488:	4631      	mov	r1, r6
 801248a:	f005 f90b 	bl	80176a4 <memset>
 801248e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8012490:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012492:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8012494:	2600      	movs	r6, #0
 8012496:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801249a:	62ee      	str	r6, [r5, #44]	; 0x2c
 801249c:	6326      	str	r6, [r4, #48]	; 0x30
 801249e:	2b00      	cmp	r3, #0
 80124a0:	f040 809d 	bne.w	80125de <rcl_wait_set_resize+0x2c6>
 80124a4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80124a6:	b120      	cbz	r0, 80124b2 <rcl_wait_set_resize+0x19a>
 80124a8:	4639      	mov	r1, r7
 80124aa:	47c0      	blx	r8
 80124ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80124ae:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80124b0:	62ab      	str	r3, [r5, #40]	; 0x28
 80124b2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80124b4:	b310      	cbz	r0, 80124fc <rcl_wait_set_resize+0x1e4>
 80124b6:	4639      	mov	r1, r7
 80124b8:	47c0      	blx	r8
 80124ba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80124bc:	2000      	movs	r0, #0
 80124be:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 80124c2:	b003      	add	sp, #12
 80124c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124c8:	6800      	ldr	r0, [r0, #0]
 80124ca:	b120      	cbz	r0, 80124d6 <rcl_wait_set_resize+0x1be>
 80124cc:	4651      	mov	r1, sl
 80124ce:	47d8      	blx	fp
 80124d0:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80124d2:	f8c5 8000 	str.w	r8, [r5]
 80124d6:	68a0      	ldr	r0, [r4, #8]
 80124d8:	2800      	cmp	r0, #0
 80124da:	f43f af61 	beq.w	80123a0 <rcl_wait_set_resize+0x88>
 80124de:	4651      	mov	r1, sl
 80124e0:	47d8      	blx	fp
 80124e2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80124e4:	2300      	movs	r3, #0
 80124e6:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80124ea:	e759      	b.n	80123a0 <rcl_wait_set_resize+0x88>
 80124ec:	6828      	ldr	r0, [r5, #0]
 80124ee:	9301      	str	r3, [sp, #4]
 80124f0:	4651      	mov	r1, sl
 80124f2:	47d8      	blx	fp
 80124f4:	9b01      	ldr	r3, [sp, #4]
 80124f6:	e9c5 3300 	strd	r3, r3, [r5]
 80124fa:	200a      	movs	r0, #10
 80124fc:	b003      	add	sp, #12
 80124fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012502:	00b4      	lsls	r4, r6, #2
 8012504:	68a8      	ldr	r0, [r5, #8]
 8012506:	464a      	mov	r2, r9
 8012508:	4621      	mov	r1, r4
 801250a:	4798      	blx	r3
 801250c:	60a8      	str	r0, [r5, #8]
 801250e:	2800      	cmp	r0, #0
 8012510:	d0f3      	beq.n	80124fa <rcl_wait_set_resize+0x1e2>
 8012512:	4622      	mov	r2, r4
 8012514:	4641      	mov	r1, r8
 8012516:	f005 f8c5 	bl	80176a4 <memset>
 801251a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801251c:	60ee      	str	r6, [r5, #12]
 801251e:	f04f 0800 	mov.w	r8, #0
 8012522:	19f6      	adds	r6, r6, r7
 8012524:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8012528:	f8c4 8010 	str.w	r8, [r4, #16]
 801252c:	f43f af54 	beq.w	80123d8 <rcl_wait_set_resize+0xc0>
 8012530:	00b6      	lsls	r6, r6, #2
 8012532:	464a      	mov	r2, r9
 8012534:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8012536:	6960      	ldr	r0, [r4, #20]
 8012538:	4631      	mov	r1, r6
 801253a:	4798      	blx	r3
 801253c:	4681      	mov	r9, r0
 801253e:	6160      	str	r0, [r4, #20]
 8012540:	2800      	cmp	r0, #0
 8012542:	d076      	beq.n	8012632 <rcl_wait_set_resize+0x31a>
 8012544:	4632      	mov	r2, r6
 8012546:	4641      	mov	r1, r8
 8012548:	f005 f8ac 	bl	80176a4 <memset>
 801254c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801254e:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8012552:	e74a      	b.n	80123ea <rcl_wait_set_resize+0xd2>
 8012554:	00bc      	lsls	r4, r7, #2
 8012556:	6928      	ldr	r0, [r5, #16]
 8012558:	464a      	mov	r2, r9
 801255a:	4621      	mov	r1, r4
 801255c:	47c0      	blx	r8
 801255e:	6128      	str	r0, [r5, #16]
 8012560:	2800      	cmp	r0, #0
 8012562:	d0ca      	beq.n	80124fa <rcl_wait_set_resize+0x1e2>
 8012564:	4622      	mov	r2, r4
 8012566:	4631      	mov	r1, r6
 8012568:	f005 f89c 	bl	80176a4 <memset>
 801256c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801256e:	616f      	str	r7, [r5, #20]
 8012570:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8012574:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8012578:	e749      	b.n	801240e <rcl_wait_set_resize+0xf6>
 801257a:	009c      	lsls	r4, r3, #2
 801257c:	69a8      	ldr	r0, [r5, #24]
 801257e:	464a      	mov	r2, r9
 8012580:	4621      	mov	r1, r4
 8012582:	47c0      	blx	r8
 8012584:	61a8      	str	r0, [r5, #24]
 8012586:	2800      	cmp	r0, #0
 8012588:	d0b7      	beq.n	80124fa <rcl_wait_set_resize+0x1e2>
 801258a:	4622      	mov	r2, r4
 801258c:	4631      	mov	r1, r6
 801258e:	f005 f889 	bl	80176a4 <memset>
 8012592:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8012594:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012596:	61eb      	str	r3, [r5, #28]
 8012598:	6a38      	ldr	r0, [r7, #32]
 801259a:	61fe      	str	r6, [r7, #28]
 801259c:	464a      	mov	r2, r9
 801259e:	4621      	mov	r1, r4
 80125a0:	47c0      	blx	r8
 80125a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80125a4:	6238      	str	r0, [r7, #32]
 80125a6:	6a1f      	ldr	r7, [r3, #32]
 80125a8:	2f00      	cmp	r7, #0
 80125aa:	d054      	beq.n	8012656 <rcl_wait_set_resize+0x33e>
 80125ac:	4622      	mov	r2, r4
 80125ae:	4631      	mov	r1, r6
 80125b0:	4638      	mov	r0, r7
 80125b2:	f005 f877 	bl	80176a4 <memset>
 80125b6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80125b8:	e73f      	b.n	801243a <rcl_wait_set_resize+0x122>
 80125ba:	6a28      	ldr	r0, [r5, #32]
 80125bc:	b120      	cbz	r0, 80125c8 <rcl_wait_set_resize+0x2b0>
 80125be:	4639      	mov	r1, r7
 80125c0:	47c0      	blx	r8
 80125c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80125c4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80125c6:	622b      	str	r3, [r5, #32]
 80125c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80125ca:	2800      	cmp	r0, #0
 80125cc:	f43f af60 	beq.w	8012490 <rcl_wait_set_resize+0x178>
 80125d0:	4639      	mov	r1, r7
 80125d2:	47c0      	blx	r8
 80125d4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80125d6:	2300      	movs	r3, #0
 80125d8:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 80125dc:	e758      	b.n	8012490 <rcl_wait_set_resize+0x178>
 80125de:	009c      	lsls	r4, r3, #2
 80125e0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80125e2:	463a      	mov	r2, r7
 80125e4:	4621      	mov	r1, r4
 80125e6:	47c8      	blx	r9
 80125e8:	62a8      	str	r0, [r5, #40]	; 0x28
 80125ea:	2800      	cmp	r0, #0
 80125ec:	d085      	beq.n	80124fa <rcl_wait_set_resize+0x1e2>
 80125ee:	4622      	mov	r2, r4
 80125f0:	4631      	mov	r1, r6
 80125f2:	f005 f857 	bl	80176a4 <memset>
 80125f6:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 80125fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80125fc:	62eb      	str	r3, [r5, #44]	; 0x2c
 80125fe:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8012602:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 8012606:	463a      	mov	r2, r7
 8012608:	4621      	mov	r1, r4
 801260a:	47c8      	blx	r9
 801260c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801260e:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8012612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012614:	b36b      	cbz	r3, 8012672 <rcl_wait_set_resize+0x35a>
 8012616:	4622      	mov	r2, r4
 8012618:	4631      	mov	r1, r6
 801261a:	4618      	mov	r0, r3
 801261c:	f005 f842 	bl	80176a4 <memset>
 8012620:	4630      	mov	r0, r6
 8012622:	b003      	add	sp, #12
 8012624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012628:	200b      	movs	r0, #11
 801262a:	4770      	bx	lr
 801262c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012630:	e764      	b.n	80124fc <rcl_wait_set_resize+0x1e4>
 8012632:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012634:	68a8      	ldr	r0, [r5, #8]
 8012636:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8012638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801263a:	4798      	blx	r3
 801263c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801263e:	6928      	ldr	r0, [r5, #16]
 8012640:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012642:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8012644:	f8c5 900c 	str.w	r9, [r5, #12]
 8012648:	f8c5 9008 	str.w	r9, [r5, #8]
 801264c:	4790      	blx	r2
 801264e:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8012652:	200a      	movs	r0, #10
 8012654:	e752      	b.n	80124fc <rcl_wait_set_resize+0x1e4>
 8012656:	69a8      	ldr	r0, [r5, #24]
 8012658:	4649      	mov	r1, r9
 801265a:	47d0      	blx	sl
 801265c:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8012660:	200a      	movs	r0, #10
 8012662:	e74b      	b.n	80124fc <rcl_wait_set_resize+0x1e4>
 8012664:	6a28      	ldr	r0, [r5, #32]
 8012666:	4639      	mov	r1, r7
 8012668:	47c0      	blx	r8
 801266a:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801266e:	200a      	movs	r0, #10
 8012670:	e744      	b.n	80124fc <rcl_wait_set_resize+0x1e4>
 8012672:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8012674:	9301      	str	r3, [sp, #4]
 8012676:	4639      	mov	r1, r7
 8012678:	47c0      	blx	r8
 801267a:	9b01      	ldr	r3, [sp, #4]
 801267c:	200a      	movs	r0, #10
 801267e:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8012682:	e73b      	b.n	80124fc <rcl_wait_set_resize+0x1e4>

08012684 <rcl_wait_set_init>:
 8012684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012688:	b084      	sub	sp, #16
 801268a:	4604      	mov	r4, r0
 801268c:	a810      	add	r0, sp, #64	; 0x40
 801268e:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8012692:	460f      	mov	r7, r1
 8012694:	4690      	mov	r8, r2
 8012696:	4699      	mov	r9, r3
 8012698:	f7f7 fbd2 	bl	8009e40 <rcutils_allocator_is_valid>
 801269c:	2800      	cmp	r0, #0
 801269e:	d06b      	beq.n	8012778 <rcl_wait_set_init+0xf4>
 80126a0:	2c00      	cmp	r4, #0
 80126a2:	d069      	beq.n	8012778 <rcl_wait_set_init+0xf4>
 80126a4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80126a6:	b125      	cbz	r5, 80126b2 <rcl_wait_set_init+0x2e>
 80126a8:	2564      	movs	r5, #100	; 0x64
 80126aa:	4628      	mov	r0, r5
 80126ac:	b004      	add	sp, #16
 80126ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126b2:	f1ba 0f00 	cmp.w	sl, #0
 80126b6:	d05f      	beq.n	8012778 <rcl_wait_set_init+0xf4>
 80126b8:	4650      	mov	r0, sl
 80126ba:	f7fe fd75 	bl	80111a8 <rcl_context_is_valid>
 80126be:	2800      	cmp	r0, #0
 80126c0:	d067      	beq.n	8012792 <rcl_wait_set_init+0x10e>
 80126c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80126c4:	9914      	ldr	r1, [sp, #80]	; 0x50
 80126c6:	205c      	movs	r0, #92	; 0x5c
 80126c8:	4798      	blx	r3
 80126ca:	6320      	str	r0, [r4, #48]	; 0x30
 80126cc:	2800      	cmp	r0, #0
 80126ce:	d062      	beq.n	8012796 <rcl_wait_set_init+0x112>
 80126d0:	4629      	mov	r1, r5
 80126d2:	225c      	movs	r2, #92	; 0x5c
 80126d4:	f004 ffe6 	bl	80176a4 <memset>
 80126d8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80126dc:	eb03 0e02 	add.w	lr, r3, r2
 80126e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80126e2:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80126e4:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 80126e8:	449e      	add	lr, r3
 80126ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80126ee:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80126f2:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80126f6:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80126fa:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 80126fe:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 8012702:	f106 0548 	add.w	r5, r6, #72	; 0x48
 8012706:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 801270a:	f8da a000 	ldr.w	sl, [sl]
 801270e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012710:	44c6      	add	lr, r8
 8012712:	f8dc 3000 	ldr.w	r3, [ip]
 8012716:	602b      	str	r3, [r5, #0]
 8012718:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 801271c:	f10a 0028 	add.w	r0, sl, #40	; 0x28
 8012720:	f002 f95a 	bl	80149d8 <rmw_create_wait_set>
 8012724:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012726:	63f0      	str	r0, [r6, #60]	; 0x3c
 8012728:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801272a:	b350      	cbz	r0, 8012782 <rcl_wait_set_init+0xfe>
 801272c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801272e:	9302      	str	r3, [sp, #8]
 8012730:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012732:	9301      	str	r3, [sp, #4]
 8012734:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012736:	9300      	str	r3, [sp, #0]
 8012738:	4642      	mov	r2, r8
 801273a:	464b      	mov	r3, r9
 801273c:	4639      	mov	r1, r7
 801273e:	4620      	mov	r0, r4
 8012740:	f7ff fdea 	bl	8012318 <rcl_wait_set_resize>
 8012744:	4605      	mov	r5, r0
 8012746:	2800      	cmp	r0, #0
 8012748:	d0af      	beq.n	80126aa <rcl_wait_set_init+0x26>
 801274a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801274c:	bb2b      	cbnz	r3, 801279a <rcl_wait_set_init+0x116>
 801274e:	2600      	movs	r6, #0
 8012750:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8012754:	9600      	str	r6, [sp, #0]
 8012756:	4633      	mov	r3, r6
 8012758:	4632      	mov	r2, r6
 801275a:	4631      	mov	r1, r6
 801275c:	4620      	mov	r0, r4
 801275e:	f7ff fddb 	bl	8012318 <rcl_wait_set_resize>
 8012762:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8012764:	2800      	cmp	r0, #0
 8012766:	d0a0      	beq.n	80126aa <rcl_wait_set_init+0x26>
 8012768:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801276a:	6d81      	ldr	r1, [r0, #88]	; 0x58
 801276c:	4798      	blx	r3
 801276e:	4628      	mov	r0, r5
 8012770:	6326      	str	r6, [r4, #48]	; 0x30
 8012772:	b004      	add	sp, #16
 8012774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012778:	250b      	movs	r5, #11
 801277a:	4628      	mov	r0, r5
 801277c:	b004      	add	sp, #16
 801277e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012782:	2501      	movs	r5, #1
 8012784:	f002 f932 	bl	80149ec <rmw_destroy_wait_set>
 8012788:	2800      	cmp	r0, #0
 801278a:	bf18      	it	ne
 801278c:	f44f 7561 	movne.w	r5, #900	; 0x384
 8012790:	e7dd      	b.n	801274e <rcl_wait_set_init+0xca>
 8012792:	2565      	movs	r5, #101	; 0x65
 8012794:	e789      	b.n	80126aa <rcl_wait_set_init+0x26>
 8012796:	250a      	movs	r5, #10
 8012798:	e787      	b.n	80126aa <rcl_wait_set_init+0x26>
 801279a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801279c:	e7f2      	b.n	8012784 <rcl_wait_set_init+0x100>
 801279e:	bf00      	nop

080127a0 <rcl_wait_set_add_guard_condition>:
 80127a0:	b318      	cbz	r0, 80127ea <rcl_wait_set_add_guard_condition+0x4a>
 80127a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80127a4:	b570      	push	{r4, r5, r6, lr}
 80127a6:	4604      	mov	r4, r0
 80127a8:	b30b      	cbz	r3, 80127ee <rcl_wait_set_add_guard_condition+0x4e>
 80127aa:	b319      	cbz	r1, 80127f4 <rcl_wait_set_add_guard_condition+0x54>
 80127ac:	68dd      	ldr	r5, [r3, #12]
 80127ae:	68c0      	ldr	r0, [r0, #12]
 80127b0:	4285      	cmp	r5, r0
 80127b2:	d217      	bcs.n	80127e4 <rcl_wait_set_add_guard_condition+0x44>
 80127b4:	68a0      	ldr	r0, [r4, #8]
 80127b6:	1c6e      	adds	r6, r5, #1
 80127b8:	60de      	str	r6, [r3, #12]
 80127ba:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80127be:	b102      	cbz	r2, 80127c2 <rcl_wait_set_add_guard_condition+0x22>
 80127c0:	6015      	str	r5, [r2, #0]
 80127c2:	4608      	mov	r0, r1
 80127c4:	f7fe fe02 	bl	80113cc <rcl_guard_condition_get_rmw_handle>
 80127c8:	b150      	cbz	r0, 80127e0 <rcl_wait_set_add_guard_condition+0x40>
 80127ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80127cc:	6842      	ldr	r2, [r0, #4]
 80127ce:	695b      	ldr	r3, [r3, #20]
 80127d0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80127d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80127d6:	6913      	ldr	r3, [r2, #16]
 80127d8:	3301      	adds	r3, #1
 80127da:	2000      	movs	r0, #0
 80127dc:	6113      	str	r3, [r2, #16]
 80127de:	bd70      	pop	{r4, r5, r6, pc}
 80127e0:	2001      	movs	r0, #1
 80127e2:	bd70      	pop	{r4, r5, r6, pc}
 80127e4:	f240 3086 	movw	r0, #902	; 0x386
 80127e8:	bd70      	pop	{r4, r5, r6, pc}
 80127ea:	200b      	movs	r0, #11
 80127ec:	4770      	bx	lr
 80127ee:	f44f 7061 	mov.w	r0, #900	; 0x384
 80127f2:	bd70      	pop	{r4, r5, r6, pc}
 80127f4:	200b      	movs	r0, #11
 80127f6:	bd70      	pop	{r4, r5, r6, pc}

080127f8 <rcl_wait_set_add_timer>:
 80127f8:	b328      	cbz	r0, 8012846 <rcl_wait_set_add_timer+0x4e>
 80127fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80127fc:	b570      	push	{r4, r5, r6, lr}
 80127fe:	4604      	mov	r4, r0
 8012800:	b31b      	cbz	r3, 801284a <rcl_wait_set_add_timer+0x52>
 8012802:	b329      	cbz	r1, 8012850 <rcl_wait_set_add_timer+0x58>
 8012804:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8012806:	6965      	ldr	r5, [r4, #20]
 8012808:	42a8      	cmp	r0, r5
 801280a:	d219      	bcs.n	8012840 <rcl_wait_set_add_timer+0x48>
 801280c:	6925      	ldr	r5, [r4, #16]
 801280e:	1c46      	adds	r6, r0, #1
 8012810:	641e      	str	r6, [r3, #64]	; 0x40
 8012812:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8012816:	b102      	cbz	r2, 801281a <rcl_wait_set_add_timer+0x22>
 8012818:	6010      	str	r0, [r2, #0]
 801281a:	4608      	mov	r0, r1
 801281c:	f7ff fba6 	bl	8011f6c <rcl_timer_get_guard_condition>
 8012820:	b168      	cbz	r0, 801283e <rcl_wait_set_add_timer+0x46>
 8012822:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012824:	68e3      	ldr	r3, [r4, #12]
 8012826:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8012828:	3b01      	subs	r3, #1
 801282a:	441d      	add	r5, r3
 801282c:	f7fe fdce 	bl	80113cc <rcl_guard_condition_get_rmw_handle>
 8012830:	b180      	cbz	r0, 8012854 <rcl_wait_set_add_timer+0x5c>
 8012832:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012834:	6842      	ldr	r2, [r0, #4]
 8012836:	695b      	ldr	r3, [r3, #20]
 8012838:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801283c:	2000      	movs	r0, #0
 801283e:	bd70      	pop	{r4, r5, r6, pc}
 8012840:	f240 3086 	movw	r0, #902	; 0x386
 8012844:	bd70      	pop	{r4, r5, r6, pc}
 8012846:	200b      	movs	r0, #11
 8012848:	4770      	bx	lr
 801284a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801284e:	bd70      	pop	{r4, r5, r6, pc}
 8012850:	200b      	movs	r0, #11
 8012852:	bd70      	pop	{r4, r5, r6, pc}
 8012854:	2001      	movs	r0, #1
 8012856:	bd70      	pop	{r4, r5, r6, pc}

08012858 <rcl_wait_set_add_client>:
 8012858:	b318      	cbz	r0, 80128a2 <rcl_wait_set_add_client+0x4a>
 801285a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801285c:	b570      	push	{r4, r5, r6, lr}
 801285e:	4604      	mov	r4, r0
 8012860:	b30b      	cbz	r3, 80128a6 <rcl_wait_set_add_client+0x4e>
 8012862:	b319      	cbz	r1, 80128ac <rcl_wait_set_add_client+0x54>
 8012864:	699d      	ldr	r5, [r3, #24]
 8012866:	69c0      	ldr	r0, [r0, #28]
 8012868:	4285      	cmp	r5, r0
 801286a:	d217      	bcs.n	801289c <rcl_wait_set_add_client+0x44>
 801286c:	69a0      	ldr	r0, [r4, #24]
 801286e:	1c6e      	adds	r6, r5, #1
 8012870:	619e      	str	r6, [r3, #24]
 8012872:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012876:	b102      	cbz	r2, 801287a <rcl_wait_set_add_client+0x22>
 8012878:	6015      	str	r5, [r2, #0]
 801287a:	4608      	mov	r0, r1
 801287c:	f7fe fbe8 	bl	8011050 <rcl_client_get_rmw_handle>
 8012880:	b150      	cbz	r0, 8012898 <rcl_wait_set_add_client+0x40>
 8012882:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012884:	6842      	ldr	r2, [r0, #4]
 8012886:	6a1b      	ldr	r3, [r3, #32]
 8012888:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801288c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801288e:	69d3      	ldr	r3, [r2, #28]
 8012890:	3301      	adds	r3, #1
 8012892:	2000      	movs	r0, #0
 8012894:	61d3      	str	r3, [r2, #28]
 8012896:	bd70      	pop	{r4, r5, r6, pc}
 8012898:	2001      	movs	r0, #1
 801289a:	bd70      	pop	{r4, r5, r6, pc}
 801289c:	f240 3086 	movw	r0, #902	; 0x386
 80128a0:	bd70      	pop	{r4, r5, r6, pc}
 80128a2:	200b      	movs	r0, #11
 80128a4:	4770      	bx	lr
 80128a6:	f44f 7061 	mov.w	r0, #900	; 0x384
 80128aa:	bd70      	pop	{r4, r5, r6, pc}
 80128ac:	200b      	movs	r0, #11
 80128ae:	bd70      	pop	{r4, r5, r6, pc}

080128b0 <rcl_wait_set_add_service>:
 80128b0:	b318      	cbz	r0, 80128fa <rcl_wait_set_add_service+0x4a>
 80128b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80128b4:	b570      	push	{r4, r5, r6, lr}
 80128b6:	4604      	mov	r4, r0
 80128b8:	b30b      	cbz	r3, 80128fe <rcl_wait_set_add_service+0x4e>
 80128ba:	b319      	cbz	r1, 8012904 <rcl_wait_set_add_service+0x54>
 80128bc:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80128be:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80128c0:	4285      	cmp	r5, r0
 80128c2:	d217      	bcs.n	80128f4 <rcl_wait_set_add_service+0x44>
 80128c4:	6a20      	ldr	r0, [r4, #32]
 80128c6:	1c6e      	adds	r6, r5, #1
 80128c8:	625e      	str	r6, [r3, #36]	; 0x24
 80128ca:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80128ce:	b102      	cbz	r2, 80128d2 <rcl_wait_set_add_service+0x22>
 80128d0:	6015      	str	r5, [r2, #0]
 80128d2:	4608      	mov	r0, r1
 80128d4:	f7ff f948 	bl	8011b68 <rcl_service_get_rmw_handle>
 80128d8:	b150      	cbz	r0, 80128f0 <rcl_wait_set_add_service+0x40>
 80128da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80128dc:	6842      	ldr	r2, [r0, #4]
 80128de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128e0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80128e4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80128e6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80128e8:	3301      	adds	r3, #1
 80128ea:	2000      	movs	r0, #0
 80128ec:	6293      	str	r3, [r2, #40]	; 0x28
 80128ee:	bd70      	pop	{r4, r5, r6, pc}
 80128f0:	2001      	movs	r0, #1
 80128f2:	bd70      	pop	{r4, r5, r6, pc}
 80128f4:	f240 3086 	movw	r0, #902	; 0x386
 80128f8:	bd70      	pop	{r4, r5, r6, pc}
 80128fa:	200b      	movs	r0, #11
 80128fc:	4770      	bx	lr
 80128fe:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012902:	bd70      	pop	{r4, r5, r6, pc}
 8012904:	200b      	movs	r0, #11
 8012906:	bd70      	pop	{r4, r5, r6, pc}

08012908 <rcl_wait>:
 8012908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801290c:	ed2d 8b02 	vpush	{d8}
 8012910:	b08d      	sub	sp, #52	; 0x34
 8012912:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012916:	2800      	cmp	r0, #0
 8012918:	f000 8143 	beq.w	8012ba2 <rcl_wait+0x29a>
 801291c:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801291e:	4605      	mov	r5, r0
 8012920:	2e00      	cmp	r6, #0
 8012922:	f000 8112 	beq.w	8012b4a <rcl_wait+0x242>
 8012926:	6843      	ldr	r3, [r0, #4]
 8012928:	b983      	cbnz	r3, 801294c <rcl_wait+0x44>
 801292a:	68eb      	ldr	r3, [r5, #12]
 801292c:	b973      	cbnz	r3, 801294c <rcl_wait+0x44>
 801292e:	696b      	ldr	r3, [r5, #20]
 8012930:	b963      	cbnz	r3, 801294c <rcl_wait+0x44>
 8012932:	69eb      	ldr	r3, [r5, #28]
 8012934:	b953      	cbnz	r3, 801294c <rcl_wait+0x44>
 8012936:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012938:	b943      	cbnz	r3, 801294c <rcl_wait+0x44>
 801293a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801293c:	b933      	cbnz	r3, 801294c <rcl_wait+0x44>
 801293e:	f240 3085 	movw	r0, #901	; 0x385
 8012942:	b00d      	add	sp, #52	; 0x34
 8012944:	ecbd 8b02 	vpop	{d8}
 8012948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801294c:	9b04      	ldr	r3, [sp, #16]
 801294e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8012950:	2b01      	cmp	r3, #1
 8012952:	9b05      	ldr	r3, [sp, #20]
 8012954:	f173 0300 	sbcs.w	r3, r3, #0
 8012958:	f2c0 80f0 	blt.w	8012b3c <rcl_wait+0x234>
 801295c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8012960:	4643      	mov	r3, r8
 8012962:	2a00      	cmp	r2, #0
 8012964:	f000 8133 	beq.w	8012bce <rcl_wait+0x2c6>
 8012968:	2400      	movs	r4, #0
 801296a:	4613      	mov	r3, r2
 801296c:	ed9f 8b9c 	vldr	d8, [pc, #624]	; 8012be0 <rcl_wait+0x2d8>
 8012970:	46a2      	mov	sl, r4
 8012972:	46a3      	mov	fp, r4
 8012974:	f240 3921 	movw	r9, #801	; 0x321
 8012978:	4632      	mov	r2, r6
 801297a:	e014      	b.n	80129a6 <rcl_wait+0x9e>
 801297c:	2800      	cmp	r0, #0
 801297e:	d1e0      	bne.n	8012942 <rcl_wait+0x3a>
 8012980:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012984:	4542      	cmp	r2, r8
 8012986:	eb73 0107 	sbcs.w	r1, r3, r7
 801298a:	da03      	bge.n	8012994 <rcl_wait+0x8c>
 801298c:	4690      	mov	r8, r2
 801298e:	461f      	mov	r7, r3
 8012990:	f04f 0b01 	mov.w	fp, #1
 8012994:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8012996:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012998:	3401      	adds	r4, #1
 801299a:	f14a 0a00 	adc.w	sl, sl, #0
 801299e:	429c      	cmp	r4, r3
 80129a0:	f17a 0100 	sbcs.w	r1, sl, #0
 80129a4:	d228      	bcs.n	80129f8 <rcl_wait+0xf0>
 80129a6:	6928      	ldr	r0, [r5, #16]
 80129a8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80129ac:	a908      	add	r1, sp, #32
 80129ae:	00a6      	lsls	r6, r4, #2
 80129b0:	2800      	cmp	r0, #0
 80129b2:	d0f1      	beq.n	8012998 <rcl_wait+0x90>
 80129b4:	68eb      	ldr	r3, [r5, #12]
 80129b6:	f8d2 c014 	ldr.w	ip, [r2, #20]
 80129ba:	4423      	add	r3, r4
 80129bc:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 80129c0:	f1be 0f00 	cmp.w	lr, #0
 80129c4:	d006      	beq.n	80129d4 <rcl_wait+0xcc>
 80129c6:	6913      	ldr	r3, [r2, #16]
 80129c8:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 80129cc:	3301      	adds	r3, #1
 80129ce:	6113      	str	r3, [r2, #16]
 80129d0:	692b      	ldr	r3, [r5, #16]
 80129d2:	5998      	ldr	r0, [r3, r6]
 80129d4:	ed8d 8b08 	vstr	d8, [sp, #32]
 80129d8:	f7ff fa96 	bl	8011f08 <rcl_timer_get_time_until_next_call>
 80129dc:	4548      	cmp	r0, r9
 80129de:	d1cd      	bne.n	801297c <rcl_wait+0x74>
 80129e0:	692b      	ldr	r3, [r5, #16]
 80129e2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80129e4:	2100      	movs	r1, #0
 80129e6:	5199      	str	r1, [r3, r6]
 80129e8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80129ea:	3401      	adds	r4, #1
 80129ec:	f14a 0a00 	adc.w	sl, sl, #0
 80129f0:	429c      	cmp	r4, r3
 80129f2:	f17a 0100 	sbcs.w	r1, sl, #0
 80129f6:	d3d6      	bcc.n	80129a6 <rcl_wait+0x9e>
 80129f8:	4616      	mov	r6, r2
 80129fa:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80129fe:	4313      	orrs	r3, r2
 8012a00:	46d9      	mov	r9, fp
 8012a02:	f040 80a9 	bne.w	8012b58 <rcl_wait+0x250>
 8012a06:	2300      	movs	r3, #0
 8012a08:	2200      	movs	r2, #0
 8012a0a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012a0e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012a12:	ab08      	add	r3, sp, #32
 8012a14:	9302      	str	r3, [sp, #8]
 8012a16:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8012a18:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8012a1c:	e9cd 3200 	strd	r3, r2, [sp]
 8012a20:	f106 0110 	add.w	r1, r6, #16
 8012a24:	f106 031c 	add.w	r3, r6, #28
 8012a28:	f106 0228 	add.w	r2, r6, #40	; 0x28
 8012a2c:	1d30      	adds	r0, r6, #4
 8012a2e:	f001 fe5b 	bl	80146e8 <rmw_wait>
 8012a32:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012a34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012a36:	4680      	mov	r8, r0
 8012a38:	b1ca      	cbz	r2, 8012a6e <rcl_wait+0x166>
 8012a3a:	2400      	movs	r4, #0
 8012a3c:	4627      	mov	r7, r4
 8012a3e:	692a      	ldr	r2, [r5, #16]
 8012a40:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8012a44:	f10d 011f 	add.w	r1, sp, #31
 8012a48:	00a6      	lsls	r6, r4, #2
 8012a4a:	b160      	cbz	r0, 8012a66 <rcl_wait+0x15e>
 8012a4c:	f88d 701f 	strb.w	r7, [sp, #31]
 8012a50:	f7ff fa20 	bl	8011e94 <rcl_timer_is_ready>
 8012a54:	2800      	cmp	r0, #0
 8012a56:	f47f af74 	bne.w	8012942 <rcl_wait+0x3a>
 8012a5a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8012a5e:	b90b      	cbnz	r3, 8012a64 <rcl_wait+0x15c>
 8012a60:	692a      	ldr	r2, [r5, #16]
 8012a62:	5193      	str	r3, [r2, r6]
 8012a64:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012a68:	3401      	adds	r4, #1
 8012a6a:	42a2      	cmp	r2, r4
 8012a6c:	d8e7      	bhi.n	8012a3e <rcl_wait+0x136>
 8012a6e:	f038 0002 	bics.w	r0, r8, #2
 8012a72:	f040 8090 	bne.w	8012b96 <rcl_wait+0x28e>
 8012a76:	686e      	ldr	r6, [r5, #4]
 8012a78:	4602      	mov	r2, r0
 8012a7a:	b91e      	cbnz	r6, 8012a84 <rcl_wait+0x17c>
 8012a7c:	e00d      	b.n	8012a9a <rcl_wait+0x192>
 8012a7e:	3201      	adds	r2, #1
 8012a80:	42b2      	cmp	r2, r6
 8012a82:	d00a      	beq.n	8012a9a <rcl_wait+0x192>
 8012a84:	6899      	ldr	r1, [r3, #8]
 8012a86:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012a8a:	2900      	cmp	r1, #0
 8012a8c:	d1f7      	bne.n	8012a7e <rcl_wait+0x176>
 8012a8e:	682c      	ldr	r4, [r5, #0]
 8012a90:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012a94:	3201      	adds	r2, #1
 8012a96:	42b2      	cmp	r2, r6
 8012a98:	d1f4      	bne.n	8012a84 <rcl_wait+0x17c>
 8012a9a:	68ee      	ldr	r6, [r5, #12]
 8012a9c:	2200      	movs	r2, #0
 8012a9e:	b91e      	cbnz	r6, 8012aa8 <rcl_wait+0x1a0>
 8012aa0:	e00d      	b.n	8012abe <rcl_wait+0x1b6>
 8012aa2:	3201      	adds	r2, #1
 8012aa4:	42b2      	cmp	r2, r6
 8012aa6:	d00a      	beq.n	8012abe <rcl_wait+0x1b6>
 8012aa8:	6959      	ldr	r1, [r3, #20]
 8012aaa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012aae:	2900      	cmp	r1, #0
 8012ab0:	d1f7      	bne.n	8012aa2 <rcl_wait+0x19a>
 8012ab2:	68ac      	ldr	r4, [r5, #8]
 8012ab4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012ab8:	3201      	adds	r2, #1
 8012aba:	42b2      	cmp	r2, r6
 8012abc:	d1f4      	bne.n	8012aa8 <rcl_wait+0x1a0>
 8012abe:	69ee      	ldr	r6, [r5, #28]
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	b91e      	cbnz	r6, 8012acc <rcl_wait+0x1c4>
 8012ac4:	e00d      	b.n	8012ae2 <rcl_wait+0x1da>
 8012ac6:	3201      	adds	r2, #1
 8012ac8:	42b2      	cmp	r2, r6
 8012aca:	d00a      	beq.n	8012ae2 <rcl_wait+0x1da>
 8012acc:	6a19      	ldr	r1, [r3, #32]
 8012ace:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012ad2:	2900      	cmp	r1, #0
 8012ad4:	d1f7      	bne.n	8012ac6 <rcl_wait+0x1be>
 8012ad6:	69ac      	ldr	r4, [r5, #24]
 8012ad8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012adc:	3201      	adds	r2, #1
 8012ade:	42b2      	cmp	r2, r6
 8012ae0:	d1f4      	bne.n	8012acc <rcl_wait+0x1c4>
 8012ae2:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	b91e      	cbnz	r6, 8012af0 <rcl_wait+0x1e8>
 8012ae8:	e00d      	b.n	8012b06 <rcl_wait+0x1fe>
 8012aea:	3201      	adds	r2, #1
 8012aec:	4296      	cmp	r6, r2
 8012aee:	d00a      	beq.n	8012b06 <rcl_wait+0x1fe>
 8012af0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8012af2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012af6:	2900      	cmp	r1, #0
 8012af8:	d1f7      	bne.n	8012aea <rcl_wait+0x1e2>
 8012afa:	6a2c      	ldr	r4, [r5, #32]
 8012afc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012b00:	3201      	adds	r2, #1
 8012b02:	4296      	cmp	r6, r2
 8012b04:	d1f4      	bne.n	8012af0 <rcl_wait+0x1e8>
 8012b06:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 8012b08:	2200      	movs	r2, #0
 8012b0a:	b91e      	cbnz	r6, 8012b14 <rcl_wait+0x20c>
 8012b0c:	e00d      	b.n	8012b2a <rcl_wait+0x222>
 8012b0e:	3201      	adds	r2, #1
 8012b10:	42b2      	cmp	r2, r6
 8012b12:	d00a      	beq.n	8012b2a <rcl_wait+0x222>
 8012b14:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8012b16:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012b1a:	2900      	cmp	r1, #0
 8012b1c:	d1f7      	bne.n	8012b0e <rcl_wait+0x206>
 8012b1e:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8012b20:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012b24:	3201      	adds	r2, #1
 8012b26:	42b2      	cmp	r2, r6
 8012b28:	d1f4      	bne.n	8012b14 <rcl_wait+0x20c>
 8012b2a:	f1b8 0f02 	cmp.w	r8, #2
 8012b2e:	f47f af08 	bne.w	8012942 <rcl_wait+0x3a>
 8012b32:	464b      	mov	r3, r9
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	bf08      	it	eq
 8012b38:	2002      	moveq	r0, #2
 8012b3a:	e702      	b.n	8012942 <rcl_wait+0x3a>
 8012b3c:	2a00      	cmp	r2, #0
 8012b3e:	d03a      	beq.n	8012bb6 <rcl_wait+0x2ae>
 8012b40:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8012b44:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8012b48:	e70e      	b.n	8012968 <rcl_wait+0x60>
 8012b4a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012b4e:	b00d      	add	sp, #52	; 0x34
 8012b50:	ecbd 8b02 	vpop	{d8}
 8012b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b58:	9b04      	ldr	r3, [sp, #16]
 8012b5a:	2b01      	cmp	r3, #1
 8012b5c:	9b05      	ldr	r3, [sp, #20]
 8012b5e:	f173 0300 	sbcs.w	r3, r3, #0
 8012b62:	db24      	blt.n	8012bae <rcl_wait+0x2a6>
 8012b64:	2f00      	cmp	r7, #0
 8012b66:	bfbc      	itt	lt
 8012b68:	f04f 0800 	movlt.w	r8, #0
 8012b6c:	4647      	movlt	r7, r8
 8012b6e:	a31e      	add	r3, pc, #120	; (adr r3, 8012be8 <rcl_wait+0x2e0>)
 8012b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b74:	4640      	mov	r0, r8
 8012b76:	4639      	mov	r1, r7
 8012b78:	f7ed fbb2 	bl	80002e0 <__aeabi_ldivmod>
 8012b7c:	a31a      	add	r3, pc, #104	; (adr r3, 8012be8 <rcl_wait+0x2e0>)
 8012b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b82:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012b86:	4640      	mov	r0, r8
 8012b88:	4639      	mov	r1, r7
 8012b8a:	f7ed fba9 	bl	80002e0 <__aeabi_ldivmod>
 8012b8e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012b92:	ab08      	add	r3, sp, #32
 8012b94:	e73e      	b.n	8012a14 <rcl_wait+0x10c>
 8012b96:	2001      	movs	r0, #1
 8012b98:	b00d      	add	sp, #52	; 0x34
 8012b9a:	ecbd 8b02 	vpop	{d8}
 8012b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ba2:	200b      	movs	r0, #11
 8012ba4:	b00d      	add	sp, #52	; 0x34
 8012ba6:	ecbd 8b02 	vpop	{d8}
 8012baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bae:	465b      	mov	r3, fp
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d1d7      	bne.n	8012b64 <rcl_wait+0x25c>
 8012bb4:	e72e      	b.n	8012a14 <rcl_wait+0x10c>
 8012bb6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8012bba:	430b      	orrs	r3, r1
 8012bbc:	bf08      	it	eq
 8012bbe:	4691      	moveq	r9, r2
 8012bc0:	f43f af21 	beq.w	8012a06 <rcl_wait+0xfe>
 8012bc4:	9b04      	ldr	r3, [sp, #16]
 8012bc6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8012bca:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8012bce:	2b01      	cmp	r3, #1
 8012bd0:	9b05      	ldr	r3, [sp, #20]
 8012bd2:	f173 0300 	sbcs.w	r3, r3, #0
 8012bd6:	f04f 0300 	mov.w	r3, #0
 8012bda:	4699      	mov	r9, r3
 8012bdc:	dac2      	bge.n	8012b64 <rcl_wait+0x25c>
 8012bde:	e719      	b.n	8012a14 <rcl_wait+0x10c>
 8012be0:	ffffffff 	.word	0xffffffff
 8012be4:	7fffffff 	.word	0x7fffffff
 8012be8:	3b9aca00 	.word	0x3b9aca00
 8012bec:	00000000 	.word	0x00000000

08012bf0 <rcl_action_take_goal_response>:
 8012bf0:	2800      	cmp	r0, #0
 8012bf2:	d039      	beq.n	8012c68 <rcl_action_take_goal_response+0x78>
 8012bf4:	b570      	push	{r4, r5, r6, lr}
 8012bf6:	4604      	mov	r4, r0
 8012bf8:	6800      	ldr	r0, [r0, #0]
 8012bfa:	b380      	cbz	r0, 8012c5e <rcl_action_take_goal_response+0x6e>
 8012bfc:	460d      	mov	r5, r1
 8012bfe:	4616      	mov	r6, r2
 8012c00:	f7fe faaa 	bl	8011158 <rcl_client_is_valid>
 8012c04:	b330      	cbz	r0, 8012c54 <rcl_action_take_goal_response+0x64>
 8012c06:	6820      	ldr	r0, [r4, #0]
 8012c08:	3004      	adds	r0, #4
 8012c0a:	f7fe faa5 	bl	8011158 <rcl_client_is_valid>
 8012c0e:	b308      	cbz	r0, 8012c54 <rcl_action_take_goal_response+0x64>
 8012c10:	6820      	ldr	r0, [r4, #0]
 8012c12:	3008      	adds	r0, #8
 8012c14:	f7fe faa0 	bl	8011158 <rcl_client_is_valid>
 8012c18:	b1e0      	cbz	r0, 8012c54 <rcl_action_take_goal_response+0x64>
 8012c1a:	6820      	ldr	r0, [r4, #0]
 8012c1c:	300c      	adds	r0, #12
 8012c1e:	f7f6 f97d 	bl	8008f1c <rcl_subscription_is_valid>
 8012c22:	b1b8      	cbz	r0, 8012c54 <rcl_action_take_goal_response+0x64>
 8012c24:	6820      	ldr	r0, [r4, #0]
 8012c26:	3010      	adds	r0, #16
 8012c28:	f7f6 f978 	bl	8008f1c <rcl_subscription_is_valid>
 8012c2c:	b190      	cbz	r0, 8012c54 <rcl_action_take_goal_response+0x64>
 8012c2e:	b1cd      	cbz	r5, 8012c64 <rcl_action_take_goal_response+0x74>
 8012c30:	b1c6      	cbz	r6, 8012c64 <rcl_action_take_goal_response+0x74>
 8012c32:	6820      	ldr	r0, [r4, #0]
 8012c34:	4632      	mov	r2, r6
 8012c36:	4629      	mov	r1, r5
 8012c38:	f7fe fa46 	bl	80110c8 <rcl_take_response>
 8012c3c:	b148      	cbz	r0, 8012c52 <rcl_action_take_goal_response+0x62>
 8012c3e:	280a      	cmp	r0, #10
 8012c40:	d007      	beq.n	8012c52 <rcl_action_take_goal_response+0x62>
 8012c42:	f240 12f5 	movw	r2, #501	; 0x1f5
 8012c46:	f640 0337 	movw	r3, #2103	; 0x837
 8012c4a:	4290      	cmp	r0, r2
 8012c4c:	bf0c      	ite	eq
 8012c4e:	4618      	moveq	r0, r3
 8012c50:	2001      	movne	r0, #1
 8012c52:	bd70      	pop	{r4, r5, r6, pc}
 8012c54:	f7f7 f930 	bl	8009eb8 <rcutils_reset_error>
 8012c58:	f640 0036 	movw	r0, #2102	; 0x836
 8012c5c:	bd70      	pop	{r4, r5, r6, pc}
 8012c5e:	f640 0036 	movw	r0, #2102	; 0x836
 8012c62:	bd70      	pop	{r4, r5, r6, pc}
 8012c64:	200b      	movs	r0, #11
 8012c66:	bd70      	pop	{r4, r5, r6, pc}
 8012c68:	f640 0036 	movw	r0, #2102	; 0x836
 8012c6c:	4770      	bx	lr
 8012c6e:	bf00      	nop

08012c70 <rcl_action_send_result_request>:
 8012c70:	b390      	cbz	r0, 8012cd8 <rcl_action_send_result_request+0x68>
 8012c72:	b570      	push	{r4, r5, r6, lr}
 8012c74:	4604      	mov	r4, r0
 8012c76:	6800      	ldr	r0, [r0, #0]
 8012c78:	b348      	cbz	r0, 8012cce <rcl_action_send_result_request+0x5e>
 8012c7a:	460d      	mov	r5, r1
 8012c7c:	4616      	mov	r6, r2
 8012c7e:	f7fe fa6b 	bl	8011158 <rcl_client_is_valid>
 8012c82:	b1f8      	cbz	r0, 8012cc4 <rcl_action_send_result_request+0x54>
 8012c84:	6820      	ldr	r0, [r4, #0]
 8012c86:	3004      	adds	r0, #4
 8012c88:	f7fe fa66 	bl	8011158 <rcl_client_is_valid>
 8012c8c:	b1d0      	cbz	r0, 8012cc4 <rcl_action_send_result_request+0x54>
 8012c8e:	6820      	ldr	r0, [r4, #0]
 8012c90:	3008      	adds	r0, #8
 8012c92:	f7fe fa61 	bl	8011158 <rcl_client_is_valid>
 8012c96:	b1a8      	cbz	r0, 8012cc4 <rcl_action_send_result_request+0x54>
 8012c98:	6820      	ldr	r0, [r4, #0]
 8012c9a:	300c      	adds	r0, #12
 8012c9c:	f7f6 f93e 	bl	8008f1c <rcl_subscription_is_valid>
 8012ca0:	b180      	cbz	r0, 8012cc4 <rcl_action_send_result_request+0x54>
 8012ca2:	6820      	ldr	r0, [r4, #0]
 8012ca4:	3010      	adds	r0, #16
 8012ca6:	f7f6 f939 	bl	8008f1c <rcl_subscription_is_valid>
 8012caa:	b158      	cbz	r0, 8012cc4 <rcl_action_send_result_request+0x54>
 8012cac:	b195      	cbz	r5, 8012cd4 <rcl_action_send_result_request+0x64>
 8012cae:	b18e      	cbz	r6, 8012cd4 <rcl_action_send_result_request+0x64>
 8012cb0:	6820      	ldr	r0, [r4, #0]
 8012cb2:	4632      	mov	r2, r6
 8012cb4:	4629      	mov	r1, r5
 8012cb6:	3008      	adds	r0, #8
 8012cb8:	f7fe f9d0 	bl	801105c <rcl_send_request>
 8012cbc:	3800      	subs	r0, #0
 8012cbe:	bf18      	it	ne
 8012cc0:	2001      	movne	r0, #1
 8012cc2:	bd70      	pop	{r4, r5, r6, pc}
 8012cc4:	f7f7 f8f8 	bl	8009eb8 <rcutils_reset_error>
 8012cc8:	f640 0036 	movw	r0, #2102	; 0x836
 8012ccc:	bd70      	pop	{r4, r5, r6, pc}
 8012cce:	f640 0036 	movw	r0, #2102	; 0x836
 8012cd2:	bd70      	pop	{r4, r5, r6, pc}
 8012cd4:	200b      	movs	r0, #11
 8012cd6:	bd70      	pop	{r4, r5, r6, pc}
 8012cd8:	f640 0036 	movw	r0, #2102	; 0x836
 8012cdc:	4770      	bx	lr
 8012cde:	bf00      	nop

08012ce0 <rcl_action_take_result_response>:
 8012ce0:	2800      	cmp	r0, #0
 8012ce2:	d03a      	beq.n	8012d5a <rcl_action_take_result_response+0x7a>
 8012ce4:	b570      	push	{r4, r5, r6, lr}
 8012ce6:	4604      	mov	r4, r0
 8012ce8:	6800      	ldr	r0, [r0, #0]
 8012cea:	b388      	cbz	r0, 8012d50 <rcl_action_take_result_response+0x70>
 8012cec:	460d      	mov	r5, r1
 8012cee:	4616      	mov	r6, r2
 8012cf0:	f7fe fa32 	bl	8011158 <rcl_client_is_valid>
 8012cf4:	b338      	cbz	r0, 8012d46 <rcl_action_take_result_response+0x66>
 8012cf6:	6820      	ldr	r0, [r4, #0]
 8012cf8:	3004      	adds	r0, #4
 8012cfa:	f7fe fa2d 	bl	8011158 <rcl_client_is_valid>
 8012cfe:	b310      	cbz	r0, 8012d46 <rcl_action_take_result_response+0x66>
 8012d00:	6820      	ldr	r0, [r4, #0]
 8012d02:	3008      	adds	r0, #8
 8012d04:	f7fe fa28 	bl	8011158 <rcl_client_is_valid>
 8012d08:	b1e8      	cbz	r0, 8012d46 <rcl_action_take_result_response+0x66>
 8012d0a:	6820      	ldr	r0, [r4, #0]
 8012d0c:	300c      	adds	r0, #12
 8012d0e:	f7f6 f905 	bl	8008f1c <rcl_subscription_is_valid>
 8012d12:	b1c0      	cbz	r0, 8012d46 <rcl_action_take_result_response+0x66>
 8012d14:	6820      	ldr	r0, [r4, #0]
 8012d16:	3010      	adds	r0, #16
 8012d18:	f7f6 f900 	bl	8008f1c <rcl_subscription_is_valid>
 8012d1c:	b198      	cbz	r0, 8012d46 <rcl_action_take_result_response+0x66>
 8012d1e:	b1d5      	cbz	r5, 8012d56 <rcl_action_take_result_response+0x76>
 8012d20:	b1ce      	cbz	r6, 8012d56 <rcl_action_take_result_response+0x76>
 8012d22:	6820      	ldr	r0, [r4, #0]
 8012d24:	4632      	mov	r2, r6
 8012d26:	4629      	mov	r1, r5
 8012d28:	3008      	adds	r0, #8
 8012d2a:	f7fe f9cd 	bl	80110c8 <rcl_take_response>
 8012d2e:	b148      	cbz	r0, 8012d44 <rcl_action_take_result_response+0x64>
 8012d30:	280a      	cmp	r0, #10
 8012d32:	d007      	beq.n	8012d44 <rcl_action_take_result_response+0x64>
 8012d34:	f240 12f5 	movw	r2, #501	; 0x1f5
 8012d38:	f640 0337 	movw	r3, #2103	; 0x837
 8012d3c:	4290      	cmp	r0, r2
 8012d3e:	bf0c      	ite	eq
 8012d40:	4618      	moveq	r0, r3
 8012d42:	2001      	movne	r0, #1
 8012d44:	bd70      	pop	{r4, r5, r6, pc}
 8012d46:	f7f7 f8b7 	bl	8009eb8 <rcutils_reset_error>
 8012d4a:	f640 0036 	movw	r0, #2102	; 0x836
 8012d4e:	bd70      	pop	{r4, r5, r6, pc}
 8012d50:	f640 0036 	movw	r0, #2102	; 0x836
 8012d54:	bd70      	pop	{r4, r5, r6, pc}
 8012d56:	200b      	movs	r0, #11
 8012d58:	bd70      	pop	{r4, r5, r6, pc}
 8012d5a:	f640 0036 	movw	r0, #2102	; 0x836
 8012d5e:	4770      	bx	lr

08012d60 <rcl_action_take_cancel_response>:
 8012d60:	2800      	cmp	r0, #0
 8012d62:	d03a      	beq.n	8012dda <rcl_action_take_cancel_response+0x7a>
 8012d64:	b570      	push	{r4, r5, r6, lr}
 8012d66:	4604      	mov	r4, r0
 8012d68:	6800      	ldr	r0, [r0, #0]
 8012d6a:	b388      	cbz	r0, 8012dd0 <rcl_action_take_cancel_response+0x70>
 8012d6c:	460d      	mov	r5, r1
 8012d6e:	4616      	mov	r6, r2
 8012d70:	f7fe f9f2 	bl	8011158 <rcl_client_is_valid>
 8012d74:	b338      	cbz	r0, 8012dc6 <rcl_action_take_cancel_response+0x66>
 8012d76:	6820      	ldr	r0, [r4, #0]
 8012d78:	3004      	adds	r0, #4
 8012d7a:	f7fe f9ed 	bl	8011158 <rcl_client_is_valid>
 8012d7e:	b310      	cbz	r0, 8012dc6 <rcl_action_take_cancel_response+0x66>
 8012d80:	6820      	ldr	r0, [r4, #0]
 8012d82:	3008      	adds	r0, #8
 8012d84:	f7fe f9e8 	bl	8011158 <rcl_client_is_valid>
 8012d88:	b1e8      	cbz	r0, 8012dc6 <rcl_action_take_cancel_response+0x66>
 8012d8a:	6820      	ldr	r0, [r4, #0]
 8012d8c:	300c      	adds	r0, #12
 8012d8e:	f7f6 f8c5 	bl	8008f1c <rcl_subscription_is_valid>
 8012d92:	b1c0      	cbz	r0, 8012dc6 <rcl_action_take_cancel_response+0x66>
 8012d94:	6820      	ldr	r0, [r4, #0]
 8012d96:	3010      	adds	r0, #16
 8012d98:	f7f6 f8c0 	bl	8008f1c <rcl_subscription_is_valid>
 8012d9c:	b198      	cbz	r0, 8012dc6 <rcl_action_take_cancel_response+0x66>
 8012d9e:	b1d5      	cbz	r5, 8012dd6 <rcl_action_take_cancel_response+0x76>
 8012da0:	b1ce      	cbz	r6, 8012dd6 <rcl_action_take_cancel_response+0x76>
 8012da2:	6820      	ldr	r0, [r4, #0]
 8012da4:	4632      	mov	r2, r6
 8012da6:	4629      	mov	r1, r5
 8012da8:	3004      	adds	r0, #4
 8012daa:	f7fe f98d 	bl	80110c8 <rcl_take_response>
 8012dae:	b148      	cbz	r0, 8012dc4 <rcl_action_take_cancel_response+0x64>
 8012db0:	280a      	cmp	r0, #10
 8012db2:	d007      	beq.n	8012dc4 <rcl_action_take_cancel_response+0x64>
 8012db4:	f240 12f5 	movw	r2, #501	; 0x1f5
 8012db8:	f640 0337 	movw	r3, #2103	; 0x837
 8012dbc:	4290      	cmp	r0, r2
 8012dbe:	bf0c      	ite	eq
 8012dc0:	4618      	moveq	r0, r3
 8012dc2:	2001      	movne	r0, #1
 8012dc4:	bd70      	pop	{r4, r5, r6, pc}
 8012dc6:	f7f7 f877 	bl	8009eb8 <rcutils_reset_error>
 8012dca:	f640 0036 	movw	r0, #2102	; 0x836
 8012dce:	bd70      	pop	{r4, r5, r6, pc}
 8012dd0:	f640 0036 	movw	r0, #2102	; 0x836
 8012dd4:	bd70      	pop	{r4, r5, r6, pc}
 8012dd6:	200b      	movs	r0, #11
 8012dd8:	bd70      	pop	{r4, r5, r6, pc}
 8012dda:	f640 0036 	movw	r0, #2102	; 0x836
 8012dde:	4770      	bx	lr

08012de0 <rcl_action_take_feedback>:
 8012de0:	2800      	cmp	r0, #0
 8012de2:	d038      	beq.n	8012e56 <rcl_action_take_feedback+0x76>
 8012de4:	b530      	push	{r4, r5, lr}
 8012de6:	4604      	mov	r4, r0
 8012de8:	6800      	ldr	r0, [r0, #0]
 8012dea:	b091      	sub	sp, #68	; 0x44
 8012dec:	b378      	cbz	r0, 8012e4e <rcl_action_take_feedback+0x6e>
 8012dee:	460d      	mov	r5, r1
 8012df0:	f7fe f9b2 	bl	8011158 <rcl_client_is_valid>
 8012df4:	b328      	cbz	r0, 8012e42 <rcl_action_take_feedback+0x62>
 8012df6:	6820      	ldr	r0, [r4, #0]
 8012df8:	3004      	adds	r0, #4
 8012dfa:	f7fe f9ad 	bl	8011158 <rcl_client_is_valid>
 8012dfe:	b300      	cbz	r0, 8012e42 <rcl_action_take_feedback+0x62>
 8012e00:	6820      	ldr	r0, [r4, #0]
 8012e02:	3008      	adds	r0, #8
 8012e04:	f7fe f9a8 	bl	8011158 <rcl_client_is_valid>
 8012e08:	b1d8      	cbz	r0, 8012e42 <rcl_action_take_feedback+0x62>
 8012e0a:	6820      	ldr	r0, [r4, #0]
 8012e0c:	300c      	adds	r0, #12
 8012e0e:	f7f6 f885 	bl	8008f1c <rcl_subscription_is_valid>
 8012e12:	b1b0      	cbz	r0, 8012e42 <rcl_action_take_feedback+0x62>
 8012e14:	6820      	ldr	r0, [r4, #0]
 8012e16:	3010      	adds	r0, #16
 8012e18:	f7f6 f880 	bl	8008f1c <rcl_subscription_is_valid>
 8012e1c:	b188      	cbz	r0, 8012e42 <rcl_action_take_feedback+0x62>
 8012e1e:	b1ed      	cbz	r5, 8012e5c <rcl_action_take_feedback+0x7c>
 8012e20:	6820      	ldr	r0, [r4, #0]
 8012e22:	2300      	movs	r3, #0
 8012e24:	466a      	mov	r2, sp
 8012e26:	4629      	mov	r1, r5
 8012e28:	300c      	adds	r0, #12
 8012e2a:	f7f6 f819 	bl	8008e60 <rcl_take>
 8012e2e:	b160      	cbz	r0, 8012e4a <rcl_action_take_feedback+0x6a>
 8012e30:	f240 1391 	movw	r3, #401	; 0x191
 8012e34:	4298      	cmp	r0, r3
 8012e36:	d014      	beq.n	8012e62 <rcl_action_take_feedback+0x82>
 8012e38:	280a      	cmp	r0, #10
 8012e3a:	bf18      	it	ne
 8012e3c:	2001      	movne	r0, #1
 8012e3e:	b011      	add	sp, #68	; 0x44
 8012e40:	bd30      	pop	{r4, r5, pc}
 8012e42:	f7f7 f839 	bl	8009eb8 <rcutils_reset_error>
 8012e46:	f640 0036 	movw	r0, #2102	; 0x836
 8012e4a:	b011      	add	sp, #68	; 0x44
 8012e4c:	bd30      	pop	{r4, r5, pc}
 8012e4e:	f640 0036 	movw	r0, #2102	; 0x836
 8012e52:	b011      	add	sp, #68	; 0x44
 8012e54:	bd30      	pop	{r4, r5, pc}
 8012e56:	f640 0036 	movw	r0, #2102	; 0x836
 8012e5a:	4770      	bx	lr
 8012e5c:	200b      	movs	r0, #11
 8012e5e:	b011      	add	sp, #68	; 0x44
 8012e60:	bd30      	pop	{r4, r5, pc}
 8012e62:	f640 0037 	movw	r0, #2103	; 0x837
 8012e66:	e7f0      	b.n	8012e4a <rcl_action_take_feedback+0x6a>

08012e68 <rcl_action_wait_set_add_action_client>:
 8012e68:	2800      	cmp	r0, #0
 8012e6a:	d048      	beq.n	8012efe <rcl_action_wait_set_add_action_client+0x96>
 8012e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e6e:	460c      	mov	r4, r1
 8012e70:	2900      	cmp	r1, #0
 8012e72:	d03c      	beq.n	8012eee <rcl_action_wait_set_add_action_client+0x86>
 8012e74:	4605      	mov	r5, r0
 8012e76:	6808      	ldr	r0, [r1, #0]
 8012e78:	2800      	cmp	r0, #0
 8012e7a:	d038      	beq.n	8012eee <rcl_action_wait_set_add_action_client+0x86>
 8012e7c:	4617      	mov	r7, r2
 8012e7e:	461e      	mov	r6, r3
 8012e80:	f7fe f96a 	bl	8011158 <rcl_client_is_valid>
 8012e84:	b3b0      	cbz	r0, 8012ef4 <rcl_action_wait_set_add_action_client+0x8c>
 8012e86:	6820      	ldr	r0, [r4, #0]
 8012e88:	3004      	adds	r0, #4
 8012e8a:	f7fe f965 	bl	8011158 <rcl_client_is_valid>
 8012e8e:	b388      	cbz	r0, 8012ef4 <rcl_action_wait_set_add_action_client+0x8c>
 8012e90:	6820      	ldr	r0, [r4, #0]
 8012e92:	3008      	adds	r0, #8
 8012e94:	f7fe f960 	bl	8011158 <rcl_client_is_valid>
 8012e98:	b360      	cbz	r0, 8012ef4 <rcl_action_wait_set_add_action_client+0x8c>
 8012e9a:	6820      	ldr	r0, [r4, #0]
 8012e9c:	300c      	adds	r0, #12
 8012e9e:	f7f6 f83d 	bl	8008f1c <rcl_subscription_is_valid>
 8012ea2:	b338      	cbz	r0, 8012ef4 <rcl_action_wait_set_add_action_client+0x8c>
 8012ea4:	6820      	ldr	r0, [r4, #0]
 8012ea6:	3010      	adds	r0, #16
 8012ea8:	f7f6 f838 	bl	8008f1c <rcl_subscription_is_valid>
 8012eac:	b310      	cbz	r0, 8012ef4 <rcl_action_wait_set_add_action_client+0x8c>
 8012eae:	6821      	ldr	r1, [r4, #0]
 8012eb0:	4628      	mov	r0, r5
 8012eb2:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 8012eb6:	f7ff fccf 	bl	8012858 <rcl_wait_set_add_client>
 8012eba:	b9b8      	cbnz	r0, 8012eec <rcl_action_wait_set_add_action_client+0x84>
 8012ebc:	6821      	ldr	r1, [r4, #0]
 8012ebe:	4628      	mov	r0, r5
 8012ec0:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 8012ec4:	3104      	adds	r1, #4
 8012ec6:	f7ff fcc7 	bl	8012858 <rcl_wait_set_add_client>
 8012eca:	b978      	cbnz	r0, 8012eec <rcl_action_wait_set_add_action_client+0x84>
 8012ecc:	6821      	ldr	r1, [r4, #0]
 8012ece:	4628      	mov	r0, r5
 8012ed0:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 8012ed4:	3108      	adds	r1, #8
 8012ed6:	f7ff fcbf 	bl	8012858 <rcl_wait_set_add_client>
 8012eda:	b938      	cbnz	r0, 8012eec <rcl_action_wait_set_add_action_client+0x84>
 8012edc:	6821      	ldr	r1, [r4, #0]
 8012ede:	4628      	mov	r0, r5
 8012ee0:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 8012ee4:	310c      	adds	r1, #12
 8012ee6:	f7ff f96f 	bl	80121c8 <rcl_wait_set_add_subscription>
 8012eea:	b158      	cbz	r0, 8012f04 <rcl_action_wait_set_add_action_client+0x9c>
 8012eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012eee:	f640 0036 	movw	r0, #2102	; 0x836
 8012ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ef4:	f7f6 ffe0 	bl	8009eb8 <rcutils_reset_error>
 8012ef8:	f640 0036 	movw	r0, #2102	; 0x836
 8012efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012efe:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012f02:	4770      	bx	lr
 8012f04:	6821      	ldr	r1, [r4, #0]
 8012f06:	4628      	mov	r0, r5
 8012f08:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 8012f0c:	3110      	adds	r1, #16
 8012f0e:	f7ff f95b 	bl	80121c8 <rcl_wait_set_add_subscription>
 8012f12:	2800      	cmp	r0, #0
 8012f14:	d1ea      	bne.n	8012eec <rcl_action_wait_set_add_action_client+0x84>
 8012f16:	b11f      	cbz	r7, 8012f20 <rcl_action_wait_set_add_action_client+0xb8>
 8012f18:	6823      	ldr	r3, [r4, #0]
 8012f1a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8012f1e:	603b      	str	r3, [r7, #0]
 8012f20:	2e00      	cmp	r6, #0
 8012f22:	d0e3      	beq.n	8012eec <rcl_action_wait_set_add_action_client+0x84>
 8012f24:	6823      	ldr	r3, [r4, #0]
 8012f26:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8012f2a:	6033      	str	r3, [r6, #0]
 8012f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f2e:	bf00      	nop

08012f30 <rcl_action_client_wait_set_get_entities_ready>:
 8012f30:	2800      	cmp	r0, #0
 8012f32:	f000 808d 	beq.w	8013050 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8012f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f3a:	460c      	mov	r4, r1
 8012f3c:	2900      	cmp	r1, #0
 8012f3e:	d077      	beq.n	8013030 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012f40:	4605      	mov	r5, r0
 8012f42:	6808      	ldr	r0, [r1, #0]
 8012f44:	2800      	cmp	r0, #0
 8012f46:	d073      	beq.n	8013030 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012f48:	4616      	mov	r6, r2
 8012f4a:	461f      	mov	r7, r3
 8012f4c:	f7fe f904 	bl	8011158 <rcl_client_is_valid>
 8012f50:	2800      	cmp	r0, #0
 8012f52:	d071      	beq.n	8013038 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012f54:	6820      	ldr	r0, [r4, #0]
 8012f56:	3004      	adds	r0, #4
 8012f58:	f7fe f8fe 	bl	8011158 <rcl_client_is_valid>
 8012f5c:	2800      	cmp	r0, #0
 8012f5e:	d06b      	beq.n	8013038 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012f60:	6820      	ldr	r0, [r4, #0]
 8012f62:	3008      	adds	r0, #8
 8012f64:	f7fe f8f8 	bl	8011158 <rcl_client_is_valid>
 8012f68:	2800      	cmp	r0, #0
 8012f6a:	d065      	beq.n	8013038 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012f6c:	6820      	ldr	r0, [r4, #0]
 8012f6e:	300c      	adds	r0, #12
 8012f70:	f7f5 ffd4 	bl	8008f1c <rcl_subscription_is_valid>
 8012f74:	2800      	cmp	r0, #0
 8012f76:	d05f      	beq.n	8013038 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012f78:	6820      	ldr	r0, [r4, #0]
 8012f7a:	3010      	adds	r0, #16
 8012f7c:	f7f5 ffce 	bl	8008f1c <rcl_subscription_is_valid>
 8012f80:	2800      	cmp	r0, #0
 8012f82:	d059      	beq.n	8013038 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012f84:	2e00      	cmp	r6, #0
 8012f86:	d060      	beq.n	801304a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012f88:	2f00      	cmp	r7, #0
 8012f8a:	d05e      	beq.n	801304a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012f8c:	9b06      	ldr	r3, [sp, #24]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d05b      	beq.n	801304a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012f92:	9b07      	ldr	r3, [sp, #28]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d058      	beq.n	801304a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012f98:	9b08      	ldr	r3, [sp, #32]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d055      	beq.n	801304a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012f9e:	6823      	ldr	r3, [r4, #0]
 8012fa0:	686a      	ldr	r2, [r5, #4]
 8012fa2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 8012fa6:	428a      	cmp	r2, r1
 8012fa8:	d94c      	bls.n	8013044 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012faa:	f8d3 01d4 	ldr.w	r0, [r3, #468]	; 0x1d4
 8012fae:	4282      	cmp	r2, r0
 8012fb0:	d948      	bls.n	8013044 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012fb2:	f8d3 41c4 	ldr.w	r4, [r3, #452]	; 0x1c4
 8012fb6:	69ea      	ldr	r2, [r5, #28]
 8012fb8:	42a2      	cmp	r2, r4
 8012fba:	d943      	bls.n	8013044 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012fbc:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	; 0x1c8
 8012fc0:	4562      	cmp	r2, ip
 8012fc2:	d93f      	bls.n	8013044 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012fc4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	; 0x1cc
 8012fc8:	4572      	cmp	r2, lr
 8012fca:	d93b      	bls.n	8013044 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012fcc:	69aa      	ldr	r2, [r5, #24]
 8012fce:	682d      	ldr	r5, [r5, #0]
 8012fd0:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8012fd4:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8012fd8:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8012fdc:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8012fe0:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8012fe4:	f103 0c0c 	add.w	ip, r3, #12
 8012fe8:	eba5 050c 	sub.w	r5, r5, ip
 8012fec:	fab5 f585 	clz	r5, r5
 8012ff0:	096d      	lsrs	r5, r5, #5
 8012ff2:	7035      	strb	r5, [r6, #0]
 8012ff4:	f103 0510 	add.w	r5, r3, #16
 8012ff8:	1b64      	subs	r4, r4, r5
 8012ffa:	fab4 f484 	clz	r4, r4
 8012ffe:	0964      	lsrs	r4, r4, #5
 8013000:	703c      	strb	r4, [r7, #0]
 8013002:	eba3 0008 	sub.w	r0, r3, r8
 8013006:	1d1c      	adds	r4, r3, #4
 8013008:	3308      	adds	r3, #8
 801300a:	1ad3      	subs	r3, r2, r3
 801300c:	fab0 f080 	clz	r0, r0
 8013010:	9a06      	ldr	r2, [sp, #24]
 8013012:	0940      	lsrs	r0, r0, #5
 8013014:	1b09      	subs	r1, r1, r4
 8013016:	7010      	strb	r0, [r2, #0]
 8013018:	fab1 f181 	clz	r1, r1
 801301c:	9a07      	ldr	r2, [sp, #28]
 801301e:	0949      	lsrs	r1, r1, #5
 8013020:	7011      	strb	r1, [r2, #0]
 8013022:	fab3 f383 	clz	r3, r3
 8013026:	9a08      	ldr	r2, [sp, #32]
 8013028:	095b      	lsrs	r3, r3, #5
 801302a:	2000      	movs	r0, #0
 801302c:	7013      	strb	r3, [r2, #0]
 801302e:	e001      	b.n	8013034 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8013030:	f640 0036 	movw	r0, #2102	; 0x836
 8013034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013038:	f7f6 ff3e 	bl	8009eb8 <rcutils_reset_error>
 801303c:	f640 0036 	movw	r0, #2102	; 0x836
 8013040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013044:	2001      	movs	r0, #1
 8013046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801304a:	200b      	movs	r0, #11
 801304c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013050:	f44f 7061 	mov.w	r0, #900	; 0x384
 8013054:	4770      	bx	lr
 8013056:	bf00      	nop

08013058 <rcl_action_take_goal_request>:
 8013058:	2800      	cmp	r0, #0
 801305a:	d039      	beq.n	80130d0 <rcl_action_take_goal_request+0x78>
 801305c:	b570      	push	{r4, r5, r6, lr}
 801305e:	4604      	mov	r4, r0
 8013060:	6800      	ldr	r0, [r0, #0]
 8013062:	b380      	cbz	r0, 80130c6 <rcl_action_take_goal_request+0x6e>
 8013064:	460d      	mov	r5, r1
 8013066:	4616      	mov	r6, r2
 8013068:	f7fe fddc 	bl	8011c24 <rcl_service_is_valid>
 801306c:	b330      	cbz	r0, 80130bc <rcl_action_take_goal_request+0x64>
 801306e:	6820      	ldr	r0, [r4, #0]
 8013070:	3004      	adds	r0, #4
 8013072:	f7fe fdd7 	bl	8011c24 <rcl_service_is_valid>
 8013076:	b308      	cbz	r0, 80130bc <rcl_action_take_goal_request+0x64>
 8013078:	6820      	ldr	r0, [r4, #0]
 801307a:	3008      	adds	r0, #8
 801307c:	f7fe fdd2 	bl	8011c24 <rcl_service_is_valid>
 8013080:	b1e0      	cbz	r0, 80130bc <rcl_action_take_goal_request+0x64>
 8013082:	6820      	ldr	r0, [r4, #0]
 8013084:	300c      	adds	r0, #12
 8013086:	f7f5 fd99 	bl	8008bbc <rcl_publisher_is_valid>
 801308a:	b1b8      	cbz	r0, 80130bc <rcl_action_take_goal_request+0x64>
 801308c:	6820      	ldr	r0, [r4, #0]
 801308e:	3010      	adds	r0, #16
 8013090:	f7f5 fd94 	bl	8008bbc <rcl_publisher_is_valid>
 8013094:	b190      	cbz	r0, 80130bc <rcl_action_take_goal_request+0x64>
 8013096:	b1cd      	cbz	r5, 80130cc <rcl_action_take_goal_request+0x74>
 8013098:	b1c6      	cbz	r6, 80130cc <rcl_action_take_goal_request+0x74>
 801309a:	6820      	ldr	r0, [r4, #0]
 801309c:	4632      	mov	r2, r6
 801309e:	4629      	mov	r1, r5
 80130a0:	f7fe fd68 	bl	8011b74 <rcl_take_request>
 80130a4:	b148      	cbz	r0, 80130ba <rcl_action_take_goal_request+0x62>
 80130a6:	280a      	cmp	r0, #10
 80130a8:	d007      	beq.n	80130ba <rcl_action_take_goal_request+0x62>
 80130aa:	f240 2259 	movw	r2, #601	; 0x259
 80130ae:	f640 0399 	movw	r3, #2201	; 0x899
 80130b2:	4290      	cmp	r0, r2
 80130b4:	bf0c      	ite	eq
 80130b6:	4618      	moveq	r0, r3
 80130b8:	2001      	movne	r0, #1
 80130ba:	bd70      	pop	{r4, r5, r6, pc}
 80130bc:	f7f6 fefc 	bl	8009eb8 <rcutils_reset_error>
 80130c0:	f640 0098 	movw	r0, #2200	; 0x898
 80130c4:	bd70      	pop	{r4, r5, r6, pc}
 80130c6:	f640 0098 	movw	r0, #2200	; 0x898
 80130ca:	bd70      	pop	{r4, r5, r6, pc}
 80130cc:	200b      	movs	r0, #11
 80130ce:	bd70      	pop	{r4, r5, r6, pc}
 80130d0:	f640 0098 	movw	r0, #2200	; 0x898
 80130d4:	4770      	bx	lr
 80130d6:	bf00      	nop

080130d8 <rcl_action_send_goal_response>:
 80130d8:	b390      	cbz	r0, 8013140 <rcl_action_send_goal_response+0x68>
 80130da:	b570      	push	{r4, r5, r6, lr}
 80130dc:	4604      	mov	r4, r0
 80130de:	6800      	ldr	r0, [r0, #0]
 80130e0:	b348      	cbz	r0, 8013136 <rcl_action_send_goal_response+0x5e>
 80130e2:	460d      	mov	r5, r1
 80130e4:	4616      	mov	r6, r2
 80130e6:	f7fe fd9d 	bl	8011c24 <rcl_service_is_valid>
 80130ea:	b1f8      	cbz	r0, 801312c <rcl_action_send_goal_response+0x54>
 80130ec:	6820      	ldr	r0, [r4, #0]
 80130ee:	3004      	adds	r0, #4
 80130f0:	f7fe fd98 	bl	8011c24 <rcl_service_is_valid>
 80130f4:	b1d0      	cbz	r0, 801312c <rcl_action_send_goal_response+0x54>
 80130f6:	6820      	ldr	r0, [r4, #0]
 80130f8:	3008      	adds	r0, #8
 80130fa:	f7fe fd93 	bl	8011c24 <rcl_service_is_valid>
 80130fe:	b1a8      	cbz	r0, 801312c <rcl_action_send_goal_response+0x54>
 8013100:	6820      	ldr	r0, [r4, #0]
 8013102:	300c      	adds	r0, #12
 8013104:	f7f5 fd5a 	bl	8008bbc <rcl_publisher_is_valid>
 8013108:	b180      	cbz	r0, 801312c <rcl_action_send_goal_response+0x54>
 801310a:	6820      	ldr	r0, [r4, #0]
 801310c:	3010      	adds	r0, #16
 801310e:	f7f5 fd55 	bl	8008bbc <rcl_publisher_is_valid>
 8013112:	b158      	cbz	r0, 801312c <rcl_action_send_goal_response+0x54>
 8013114:	b195      	cbz	r5, 801313c <rcl_action_send_goal_response+0x64>
 8013116:	b18e      	cbz	r6, 801313c <rcl_action_send_goal_response+0x64>
 8013118:	6820      	ldr	r0, [r4, #0]
 801311a:	4632      	mov	r2, r6
 801311c:	4629      	mov	r1, r5
 801311e:	f7fe fd69 	bl	8011bf4 <rcl_send_response>
 8013122:	b110      	cbz	r0, 801312a <rcl_action_send_goal_response+0x52>
 8013124:	2802      	cmp	r0, #2
 8013126:	bf18      	it	ne
 8013128:	2001      	movne	r0, #1
 801312a:	bd70      	pop	{r4, r5, r6, pc}
 801312c:	f7f6 fec4 	bl	8009eb8 <rcutils_reset_error>
 8013130:	f640 0098 	movw	r0, #2200	; 0x898
 8013134:	bd70      	pop	{r4, r5, r6, pc}
 8013136:	f640 0098 	movw	r0, #2200	; 0x898
 801313a:	bd70      	pop	{r4, r5, r6, pc}
 801313c:	200b      	movs	r0, #11
 801313e:	bd70      	pop	{r4, r5, r6, pc}
 8013140:	f640 0098 	movw	r0, #2200	; 0x898
 8013144:	4770      	bx	lr
 8013146:	bf00      	nop

08013148 <rcl_action_take_result_request>:
 8013148:	2800      	cmp	r0, #0
 801314a:	d03a      	beq.n	80131c2 <rcl_action_take_result_request+0x7a>
 801314c:	b570      	push	{r4, r5, r6, lr}
 801314e:	4604      	mov	r4, r0
 8013150:	6800      	ldr	r0, [r0, #0]
 8013152:	b388      	cbz	r0, 80131b8 <rcl_action_take_result_request+0x70>
 8013154:	460d      	mov	r5, r1
 8013156:	4616      	mov	r6, r2
 8013158:	f7fe fd64 	bl	8011c24 <rcl_service_is_valid>
 801315c:	b338      	cbz	r0, 80131ae <rcl_action_take_result_request+0x66>
 801315e:	6820      	ldr	r0, [r4, #0]
 8013160:	3004      	adds	r0, #4
 8013162:	f7fe fd5f 	bl	8011c24 <rcl_service_is_valid>
 8013166:	b310      	cbz	r0, 80131ae <rcl_action_take_result_request+0x66>
 8013168:	6820      	ldr	r0, [r4, #0]
 801316a:	3008      	adds	r0, #8
 801316c:	f7fe fd5a 	bl	8011c24 <rcl_service_is_valid>
 8013170:	b1e8      	cbz	r0, 80131ae <rcl_action_take_result_request+0x66>
 8013172:	6820      	ldr	r0, [r4, #0]
 8013174:	300c      	adds	r0, #12
 8013176:	f7f5 fd21 	bl	8008bbc <rcl_publisher_is_valid>
 801317a:	b1c0      	cbz	r0, 80131ae <rcl_action_take_result_request+0x66>
 801317c:	6820      	ldr	r0, [r4, #0]
 801317e:	3010      	adds	r0, #16
 8013180:	f7f5 fd1c 	bl	8008bbc <rcl_publisher_is_valid>
 8013184:	b198      	cbz	r0, 80131ae <rcl_action_take_result_request+0x66>
 8013186:	b1d5      	cbz	r5, 80131be <rcl_action_take_result_request+0x76>
 8013188:	b1ce      	cbz	r6, 80131be <rcl_action_take_result_request+0x76>
 801318a:	6820      	ldr	r0, [r4, #0]
 801318c:	4632      	mov	r2, r6
 801318e:	4629      	mov	r1, r5
 8013190:	3008      	adds	r0, #8
 8013192:	f7fe fcef 	bl	8011b74 <rcl_take_request>
 8013196:	b148      	cbz	r0, 80131ac <rcl_action_take_result_request+0x64>
 8013198:	280a      	cmp	r0, #10
 801319a:	d007      	beq.n	80131ac <rcl_action_take_result_request+0x64>
 801319c:	f240 2259 	movw	r2, #601	; 0x259
 80131a0:	f640 0399 	movw	r3, #2201	; 0x899
 80131a4:	4290      	cmp	r0, r2
 80131a6:	bf0c      	ite	eq
 80131a8:	4618      	moveq	r0, r3
 80131aa:	2001      	movne	r0, #1
 80131ac:	bd70      	pop	{r4, r5, r6, pc}
 80131ae:	f7f6 fe83 	bl	8009eb8 <rcutils_reset_error>
 80131b2:	f640 0098 	movw	r0, #2200	; 0x898
 80131b6:	bd70      	pop	{r4, r5, r6, pc}
 80131b8:	f640 0098 	movw	r0, #2200	; 0x898
 80131bc:	bd70      	pop	{r4, r5, r6, pc}
 80131be:	200b      	movs	r0, #11
 80131c0:	bd70      	pop	{r4, r5, r6, pc}
 80131c2:	f640 0098 	movw	r0, #2200	; 0x898
 80131c6:	4770      	bx	lr

080131c8 <rcl_action_take_cancel_request>:
 80131c8:	2800      	cmp	r0, #0
 80131ca:	d03a      	beq.n	8013242 <rcl_action_take_cancel_request+0x7a>
 80131cc:	b570      	push	{r4, r5, r6, lr}
 80131ce:	4604      	mov	r4, r0
 80131d0:	6800      	ldr	r0, [r0, #0]
 80131d2:	b388      	cbz	r0, 8013238 <rcl_action_take_cancel_request+0x70>
 80131d4:	460d      	mov	r5, r1
 80131d6:	4616      	mov	r6, r2
 80131d8:	f7fe fd24 	bl	8011c24 <rcl_service_is_valid>
 80131dc:	b338      	cbz	r0, 801322e <rcl_action_take_cancel_request+0x66>
 80131de:	6820      	ldr	r0, [r4, #0]
 80131e0:	3004      	adds	r0, #4
 80131e2:	f7fe fd1f 	bl	8011c24 <rcl_service_is_valid>
 80131e6:	b310      	cbz	r0, 801322e <rcl_action_take_cancel_request+0x66>
 80131e8:	6820      	ldr	r0, [r4, #0]
 80131ea:	3008      	adds	r0, #8
 80131ec:	f7fe fd1a 	bl	8011c24 <rcl_service_is_valid>
 80131f0:	b1e8      	cbz	r0, 801322e <rcl_action_take_cancel_request+0x66>
 80131f2:	6820      	ldr	r0, [r4, #0]
 80131f4:	300c      	adds	r0, #12
 80131f6:	f7f5 fce1 	bl	8008bbc <rcl_publisher_is_valid>
 80131fa:	b1c0      	cbz	r0, 801322e <rcl_action_take_cancel_request+0x66>
 80131fc:	6820      	ldr	r0, [r4, #0]
 80131fe:	3010      	adds	r0, #16
 8013200:	f7f5 fcdc 	bl	8008bbc <rcl_publisher_is_valid>
 8013204:	b198      	cbz	r0, 801322e <rcl_action_take_cancel_request+0x66>
 8013206:	b1d5      	cbz	r5, 801323e <rcl_action_take_cancel_request+0x76>
 8013208:	b1ce      	cbz	r6, 801323e <rcl_action_take_cancel_request+0x76>
 801320a:	6820      	ldr	r0, [r4, #0]
 801320c:	4632      	mov	r2, r6
 801320e:	4629      	mov	r1, r5
 8013210:	3004      	adds	r0, #4
 8013212:	f7fe fcaf 	bl	8011b74 <rcl_take_request>
 8013216:	b148      	cbz	r0, 801322c <rcl_action_take_cancel_request+0x64>
 8013218:	280a      	cmp	r0, #10
 801321a:	d007      	beq.n	801322c <rcl_action_take_cancel_request+0x64>
 801321c:	f240 2259 	movw	r2, #601	; 0x259
 8013220:	f640 0399 	movw	r3, #2201	; 0x899
 8013224:	4290      	cmp	r0, r2
 8013226:	bf0c      	ite	eq
 8013228:	4618      	moveq	r0, r3
 801322a:	2001      	movne	r0, #1
 801322c:	bd70      	pop	{r4, r5, r6, pc}
 801322e:	f7f6 fe43 	bl	8009eb8 <rcutils_reset_error>
 8013232:	f640 0098 	movw	r0, #2200	; 0x898
 8013236:	bd70      	pop	{r4, r5, r6, pc}
 8013238:	f640 0098 	movw	r0, #2200	; 0x898
 801323c:	bd70      	pop	{r4, r5, r6, pc}
 801323e:	200b      	movs	r0, #11
 8013240:	bd70      	pop	{r4, r5, r6, pc}
 8013242:	f640 0098 	movw	r0, #2200	; 0x898
 8013246:	4770      	bx	lr

08013248 <rcl_action_send_cancel_response>:
 8013248:	b398      	cbz	r0, 80132b2 <rcl_action_send_cancel_response+0x6a>
 801324a:	b570      	push	{r4, r5, r6, lr}
 801324c:	4604      	mov	r4, r0
 801324e:	6800      	ldr	r0, [r0, #0]
 8013250:	b350      	cbz	r0, 80132a8 <rcl_action_send_cancel_response+0x60>
 8013252:	460d      	mov	r5, r1
 8013254:	4616      	mov	r6, r2
 8013256:	f7fe fce5 	bl	8011c24 <rcl_service_is_valid>
 801325a:	b300      	cbz	r0, 801329e <rcl_action_send_cancel_response+0x56>
 801325c:	6820      	ldr	r0, [r4, #0]
 801325e:	3004      	adds	r0, #4
 8013260:	f7fe fce0 	bl	8011c24 <rcl_service_is_valid>
 8013264:	b1d8      	cbz	r0, 801329e <rcl_action_send_cancel_response+0x56>
 8013266:	6820      	ldr	r0, [r4, #0]
 8013268:	3008      	adds	r0, #8
 801326a:	f7fe fcdb 	bl	8011c24 <rcl_service_is_valid>
 801326e:	b1b0      	cbz	r0, 801329e <rcl_action_send_cancel_response+0x56>
 8013270:	6820      	ldr	r0, [r4, #0]
 8013272:	300c      	adds	r0, #12
 8013274:	f7f5 fca2 	bl	8008bbc <rcl_publisher_is_valid>
 8013278:	b188      	cbz	r0, 801329e <rcl_action_send_cancel_response+0x56>
 801327a:	6820      	ldr	r0, [r4, #0]
 801327c:	3010      	adds	r0, #16
 801327e:	f7f5 fc9d 	bl	8008bbc <rcl_publisher_is_valid>
 8013282:	b160      	cbz	r0, 801329e <rcl_action_send_cancel_response+0x56>
 8013284:	b19d      	cbz	r5, 80132ae <rcl_action_send_cancel_response+0x66>
 8013286:	b196      	cbz	r6, 80132ae <rcl_action_send_cancel_response+0x66>
 8013288:	6820      	ldr	r0, [r4, #0]
 801328a:	4632      	mov	r2, r6
 801328c:	4629      	mov	r1, r5
 801328e:	3004      	adds	r0, #4
 8013290:	f7fe fcb0 	bl	8011bf4 <rcl_send_response>
 8013294:	b110      	cbz	r0, 801329c <rcl_action_send_cancel_response+0x54>
 8013296:	2802      	cmp	r0, #2
 8013298:	bf18      	it	ne
 801329a:	2001      	movne	r0, #1
 801329c:	bd70      	pop	{r4, r5, r6, pc}
 801329e:	f7f6 fe0b 	bl	8009eb8 <rcutils_reset_error>
 80132a2:	f640 0098 	movw	r0, #2200	; 0x898
 80132a6:	bd70      	pop	{r4, r5, r6, pc}
 80132a8:	f640 0098 	movw	r0, #2200	; 0x898
 80132ac:	bd70      	pop	{r4, r5, r6, pc}
 80132ae:	200b      	movs	r0, #11
 80132b0:	bd70      	pop	{r4, r5, r6, pc}
 80132b2:	f640 0098 	movw	r0, #2200	; 0x898
 80132b6:	4770      	bx	lr

080132b8 <rcl_action_wait_set_add_action_server>:
 80132b8:	2800      	cmp	r0, #0
 80132ba:	d04d      	beq.n	8013358 <rcl_action_wait_set_add_action_server+0xa0>
 80132bc:	b570      	push	{r4, r5, r6, lr}
 80132be:	460c      	mov	r4, r1
 80132c0:	b159      	cbz	r1, 80132da <rcl_action_wait_set_add_action_server+0x22>
 80132c2:	4605      	mov	r5, r0
 80132c4:	6808      	ldr	r0, [r1, #0]
 80132c6:	b140      	cbz	r0, 80132da <rcl_action_wait_set_add_action_server+0x22>
 80132c8:	4616      	mov	r6, r2
 80132ca:	f7fe fcab 	bl	8011c24 <rcl_service_is_valid>
 80132ce:	b120      	cbz	r0, 80132da <rcl_action_wait_set_add_action_server+0x22>
 80132d0:	6820      	ldr	r0, [r4, #0]
 80132d2:	3004      	adds	r0, #4
 80132d4:	f7fe fca6 	bl	8011c24 <rcl_service_is_valid>
 80132d8:	b910      	cbnz	r0, 80132e0 <rcl_action_wait_set_add_action_server+0x28>
 80132da:	f640 0098 	movw	r0, #2200	; 0x898
 80132de:	bd70      	pop	{r4, r5, r6, pc}
 80132e0:	6820      	ldr	r0, [r4, #0]
 80132e2:	3008      	adds	r0, #8
 80132e4:	f7fe fc9e 	bl	8011c24 <rcl_service_is_valid>
 80132e8:	2800      	cmp	r0, #0
 80132ea:	d0f6      	beq.n	80132da <rcl_action_wait_set_add_action_server+0x22>
 80132ec:	6820      	ldr	r0, [r4, #0]
 80132ee:	300c      	adds	r0, #12
 80132f0:	f7f5 fc7c 	bl	8008bec <rcl_publisher_is_valid_except_context>
 80132f4:	2800      	cmp	r0, #0
 80132f6:	d0f0      	beq.n	80132da <rcl_action_wait_set_add_action_server+0x22>
 80132f8:	6820      	ldr	r0, [r4, #0]
 80132fa:	3010      	adds	r0, #16
 80132fc:	f7f5 fc76 	bl	8008bec <rcl_publisher_is_valid_except_context>
 8013300:	2800      	cmp	r0, #0
 8013302:	d0ea      	beq.n	80132da <rcl_action_wait_set_add_action_server+0x22>
 8013304:	6821      	ldr	r1, [r4, #0]
 8013306:	4628      	mov	r0, r5
 8013308:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 801330c:	f7ff fad0 	bl	80128b0 <rcl_wait_set_add_service>
 8013310:	2800      	cmp	r0, #0
 8013312:	d1e4      	bne.n	80132de <rcl_action_wait_set_add_action_server+0x26>
 8013314:	6821      	ldr	r1, [r4, #0]
 8013316:	4628      	mov	r0, r5
 8013318:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 801331c:	3104      	adds	r1, #4
 801331e:	f7ff fac7 	bl	80128b0 <rcl_wait_set_add_service>
 8013322:	2800      	cmp	r0, #0
 8013324:	d1db      	bne.n	80132de <rcl_action_wait_set_add_action_server+0x26>
 8013326:	6821      	ldr	r1, [r4, #0]
 8013328:	4628      	mov	r0, r5
 801332a:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 801332e:	3108      	adds	r1, #8
 8013330:	f7ff fabe 	bl	80128b0 <rcl_wait_set_add_service>
 8013334:	2800      	cmp	r0, #0
 8013336:	d1d2      	bne.n	80132de <rcl_action_wait_set_add_action_server+0x26>
 8013338:	6821      	ldr	r1, [r4, #0]
 801333a:	4628      	mov	r0, r5
 801333c:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 8013340:	3114      	adds	r1, #20
 8013342:	f7ff fa59 	bl	80127f8 <rcl_wait_set_add_timer>
 8013346:	2800      	cmp	r0, #0
 8013348:	d1c9      	bne.n	80132de <rcl_action_wait_set_add_action_server+0x26>
 801334a:	2e00      	cmp	r6, #0
 801334c:	d0c7      	beq.n	80132de <rcl_action_wait_set_add_action_server+0x26>
 801334e:	6823      	ldr	r3, [r4, #0]
 8013350:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8013354:	6033      	str	r3, [r6, #0]
 8013356:	bd70      	pop	{r4, r5, r6, pc}
 8013358:	f44f 7061 	mov.w	r0, #900	; 0x384
 801335c:	4770      	bx	lr
 801335e:	bf00      	nop

08013360 <rcl_action_server_wait_set_get_entities_ready>:
 8013360:	2800      	cmp	r0, #0
 8013362:	d05a      	beq.n	801341a <rcl_action_server_wait_set_get_entities_ready+0xba>
 8013364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013366:	460c      	mov	r4, r1
 8013368:	b161      	cbz	r1, 8013384 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801336a:	4605      	mov	r5, r0
 801336c:	6808      	ldr	r0, [r1, #0]
 801336e:	b148      	cbz	r0, 8013384 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013370:	4616      	mov	r6, r2
 8013372:	461f      	mov	r7, r3
 8013374:	f7fe fc56 	bl	8011c24 <rcl_service_is_valid>
 8013378:	b120      	cbz	r0, 8013384 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801337a:	6820      	ldr	r0, [r4, #0]
 801337c:	3004      	adds	r0, #4
 801337e:	f7fe fc51 	bl	8011c24 <rcl_service_is_valid>
 8013382:	b910      	cbnz	r0, 801338a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8013384:	f640 0098 	movw	r0, #2200	; 0x898
 8013388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801338a:	6820      	ldr	r0, [r4, #0]
 801338c:	3008      	adds	r0, #8
 801338e:	f7fe fc49 	bl	8011c24 <rcl_service_is_valid>
 8013392:	2800      	cmp	r0, #0
 8013394:	d0f6      	beq.n	8013384 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013396:	6820      	ldr	r0, [r4, #0]
 8013398:	300c      	adds	r0, #12
 801339a:	f7f5 fc27 	bl	8008bec <rcl_publisher_is_valid_except_context>
 801339e:	2800      	cmp	r0, #0
 80133a0:	d0f0      	beq.n	8013384 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80133a2:	6820      	ldr	r0, [r4, #0]
 80133a4:	3010      	adds	r0, #16
 80133a6:	f7f5 fc21 	bl	8008bec <rcl_publisher_is_valid_except_context>
 80133aa:	2800      	cmp	r0, #0
 80133ac:	d0ea      	beq.n	8013384 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80133ae:	b3be      	cbz	r6, 8013420 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80133b0:	b3b7      	cbz	r7, 8013420 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80133b2:	9b06      	ldr	r3, [sp, #24]
 80133b4:	b3a3      	cbz	r3, 8013420 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80133b6:	9b07      	ldr	r3, [sp, #28]
 80133b8:	b393      	cbz	r3, 8013420 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80133ba:	6821      	ldr	r1, [r4, #0]
 80133bc:	692a      	ldr	r2, [r5, #16]
 80133be:	6a2c      	ldr	r4, [r5, #32]
 80133c0:	f8d1 51e8 	ldr.w	r5, [r1, #488]	; 0x1e8
 80133c4:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 80133c8:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80133cc:	f8d1 01e4 	ldr.w	r0, [r1, #484]	; 0x1e4
 80133d0:	f8d1 51dc 	ldr.w	r5, [r1, #476]	; 0x1dc
 80133d4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80133d8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80133dc:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80133e0:	1a64      	subs	r4, r4, r1
 80133e2:	fab4 f484 	clz	r4, r4
 80133e6:	0964      	lsrs	r4, r4, #5
 80133e8:	7034      	strb	r4, [r6, #0]
 80133ea:	1d0c      	adds	r4, r1, #4
 80133ec:	1b1b      	subs	r3, r3, r4
 80133ee:	fab3 f383 	clz	r3, r3
 80133f2:	095b      	lsrs	r3, r3, #5
 80133f4:	f101 0408 	add.w	r4, r1, #8
 80133f8:	703b      	strb	r3, [r7, #0]
 80133fa:	f101 0314 	add.w	r3, r1, #20
 80133fe:	1b01      	subs	r1, r0, r4
 8013400:	1ad3      	subs	r3, r2, r3
 8013402:	fab1 f181 	clz	r1, r1
 8013406:	9a06      	ldr	r2, [sp, #24]
 8013408:	0949      	lsrs	r1, r1, #5
 801340a:	7011      	strb	r1, [r2, #0]
 801340c:	fab3 f383 	clz	r3, r3
 8013410:	9a07      	ldr	r2, [sp, #28]
 8013412:	095b      	lsrs	r3, r3, #5
 8013414:	2000      	movs	r0, #0
 8013416:	7013      	strb	r3, [r2, #0]
 8013418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801341a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801341e:	4770      	bx	lr
 8013420:	200b      	movs	r0, #11
 8013422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013424 <_execute_event_handler>:
 8013424:	2002      	movs	r0, #2
 8013426:	4770      	bx	lr

08013428 <_cancel_goal_event_handler>:
 8013428:	2003      	movs	r0, #3
 801342a:	4770      	bx	lr

0801342c <_succeed_event_handler>:
 801342c:	2004      	movs	r0, #4
 801342e:	4770      	bx	lr

08013430 <_abort_event_handler>:
 8013430:	2006      	movs	r0, #6
 8013432:	4770      	bx	lr

08013434 <_canceled_event_handler>:
 8013434:	2005      	movs	r0, #5
 8013436:	4770      	bx	lr

08013438 <rcl_action_transition_goal_state>:
 8013438:	b2c2      	uxtb	r2, r0
 801343a:	2a06      	cmp	r2, #6
 801343c:	d80c      	bhi.n	8013458 <rcl_action_transition_goal_state+0x20>
 801343e:	2904      	cmp	r1, #4
 8013440:	d80a      	bhi.n	8013458 <rcl_action_transition_goal_state+0x20>
 8013442:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8013446:	b410      	push	{r4}
 8013448:	1853      	adds	r3, r2, r1
 801344a:	4c06      	ldr	r4, [pc, #24]	; (8013464 <rcl_action_transition_goal_state+0x2c>)
 801344c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8013450:	b123      	cbz	r3, 801345c <rcl_action_transition_goal_state+0x24>
 8013452:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013456:	4718      	bx	r3
 8013458:	2000      	movs	r0, #0
 801345a:	4770      	bx	lr
 801345c:	2000      	movs	r0, #0
 801345e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013462:	4770      	bx	lr
 8013464:	080193c0 	.word	0x080193c0

08013468 <rcl_action_get_zero_initialized_cancel_response>:
 8013468:	b510      	push	{r4, lr}
 801346a:	4c07      	ldr	r4, [pc, #28]	; (8013488 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801346c:	4686      	mov	lr, r0
 801346e:	4684      	mov	ip, r0
 8013470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013472:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013478:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801347c:	6823      	ldr	r3, [r4, #0]
 801347e:	f8cc 3000 	str.w	r3, [ip]
 8013482:	4670      	mov	r0, lr
 8013484:	bd10      	pop	{r4, pc}
 8013486:	bf00      	nop
 8013488:	0801944c 	.word	0x0801944c

0801348c <rclc_action_send_result_request>:
 801348c:	b1d0      	cbz	r0, 80134c4 <rclc_action_send_result_request+0x38>
 801348e:	b500      	push	{lr}
 8013490:	4684      	mov	ip, r0
 8013492:	b087      	sub	sp, #28
 8013494:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8013498:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801349c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80134a0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80134a4:	f10d 0e08 	add.w	lr, sp, #8
 80134a8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80134ac:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80134b0:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 80134b4:	a902      	add	r1, sp, #8
 80134b6:	3010      	adds	r0, #16
 80134b8:	f7ff fbda 	bl	8012c70 <rcl_action_send_result_request>
 80134bc:	b920      	cbnz	r0, 80134c8 <rclc_action_send_result_request+0x3c>
 80134be:	b007      	add	sp, #28
 80134c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80134c4:	200b      	movs	r0, #11
 80134c6:	4770      	bx	lr
 80134c8:	9001      	str	r0, [sp, #4]
 80134ca:	f7f6 fcf5 	bl	8009eb8 <rcutils_reset_error>
 80134ce:	9801      	ldr	r0, [sp, #4]
 80134d0:	b007      	add	sp, #28
 80134d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80134d6:	bf00      	nop

080134d8 <rclc_action_take_goal_handle>:
 80134d8:	b160      	cbz	r0, 80134f4 <rclc_action_take_goal_handle+0x1c>
 80134da:	6883      	ldr	r3, [r0, #8]
 80134dc:	b143      	cbz	r3, 80134f0 <rclc_action_take_goal_handle+0x18>
 80134de:	6819      	ldr	r1, [r3, #0]
 80134e0:	6081      	str	r1, [r0, #8]
 80134e2:	2200      	movs	r2, #0
 80134e4:	721a      	strb	r2, [r3, #8]
 80134e6:	68c1      	ldr	r1, [r0, #12]
 80134e8:	6019      	str	r1, [r3, #0]
 80134ea:	621a      	str	r2, [r3, #32]
 80134ec:	849a      	strh	r2, [r3, #36]	; 0x24
 80134ee:	60c3      	str	r3, [r0, #12]
 80134f0:	4618      	mov	r0, r3
 80134f2:	4770      	bx	lr
 80134f4:	4603      	mov	r3, r0
 80134f6:	e7fb      	b.n	80134f0 <rclc_action_take_goal_handle+0x18>

080134f8 <rclc_action_remove_used_goal_handle>:
 80134f8:	b180      	cbz	r0, 801351c <rclc_action_remove_used_goal_handle+0x24>
 80134fa:	b179      	cbz	r1, 801351c <rclc_action_remove_used_goal_handle+0x24>
 80134fc:	68c3      	ldr	r3, [r0, #12]
 80134fe:	4299      	cmp	r1, r3
 8013500:	d00d      	beq.n	801351e <rclc_action_remove_used_goal_handle+0x26>
 8013502:	b12b      	cbz	r3, 8013510 <rclc_action_remove_used_goal_handle+0x18>
 8013504:	681a      	ldr	r2, [r3, #0]
 8013506:	4291      	cmp	r1, r2
 8013508:	d003      	beq.n	8013512 <rclc_action_remove_used_goal_handle+0x1a>
 801350a:	4613      	mov	r3, r2
 801350c:	2b00      	cmp	r3, #0
 801350e:	d1f9      	bne.n	8013504 <rclc_action_remove_used_goal_handle+0xc>
 8013510:	4770      	bx	lr
 8013512:	680a      	ldr	r2, [r1, #0]
 8013514:	601a      	str	r2, [r3, #0]
 8013516:	6883      	ldr	r3, [r0, #8]
 8013518:	600b      	str	r3, [r1, #0]
 801351a:	6081      	str	r1, [r0, #8]
 801351c:	4770      	bx	lr
 801351e:	680b      	ldr	r3, [r1, #0]
 8013520:	60c3      	str	r3, [r0, #12]
 8013522:	e7f8      	b.n	8013516 <rclc_action_remove_used_goal_handle+0x1e>

08013524 <rclc_action_find_goal_handle_by_uuid>:
 8013524:	b538      	push	{r3, r4, r5, lr}
 8013526:	b180      	cbz	r0, 801354a <rclc_action_find_goal_handle_by_uuid+0x26>
 8013528:	460d      	mov	r5, r1
 801352a:	b181      	cbz	r1, 801354e <rclc_action_find_goal_handle_by_uuid+0x2a>
 801352c:	68c4      	ldr	r4, [r0, #12]
 801352e:	b914      	cbnz	r4, 8013536 <rclc_action_find_goal_handle_by_uuid+0x12>
 8013530:	e009      	b.n	8013546 <rclc_action_find_goal_handle_by_uuid+0x22>
 8013532:	6824      	ldr	r4, [r4, #0]
 8013534:	b13c      	cbz	r4, 8013546 <rclc_action_find_goal_handle_by_uuid+0x22>
 8013536:	f104 0009 	add.w	r0, r4, #9
 801353a:	2210      	movs	r2, #16
 801353c:	4629      	mov	r1, r5
 801353e:	f004 f887 	bl	8017650 <memcmp>
 8013542:	2800      	cmp	r0, #0
 8013544:	d1f5      	bne.n	8013532 <rclc_action_find_goal_handle_by_uuid+0xe>
 8013546:	4620      	mov	r0, r4
 8013548:	bd38      	pop	{r3, r4, r5, pc}
 801354a:	4604      	mov	r4, r0
 801354c:	e7fb      	b.n	8013546 <rclc_action_find_goal_handle_by_uuid+0x22>
 801354e:	460c      	mov	r4, r1
 8013550:	e7f9      	b.n	8013546 <rclc_action_find_goal_handle_by_uuid+0x22>
 8013552:	bf00      	nop

08013554 <rclc_action_find_first_handle_by_status>:
 8013554:	b140      	cbz	r0, 8013568 <rclc_action_find_first_handle_by_status+0x14>
 8013556:	68c0      	ldr	r0, [r0, #12]
 8013558:	b910      	cbnz	r0, 8013560 <rclc_action_find_first_handle_by_status+0xc>
 801355a:	e005      	b.n	8013568 <rclc_action_find_first_handle_by_status+0x14>
 801355c:	6800      	ldr	r0, [r0, #0]
 801355e:	b118      	cbz	r0, 8013568 <rclc_action_find_first_handle_by_status+0x14>
 8013560:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8013564:	428b      	cmp	r3, r1
 8013566:	d1f9      	bne.n	801355c <rclc_action_find_first_handle_by_status+0x8>
 8013568:	4770      	bx	lr
 801356a:	bf00      	nop

0801356c <rclc_action_find_first_terminated_handle>:
 801356c:	b140      	cbz	r0, 8013580 <rclc_action_find_first_terminated_handle+0x14>
 801356e:	68c0      	ldr	r0, [r0, #12]
 8013570:	b910      	cbnz	r0, 8013578 <rclc_action_find_first_terminated_handle+0xc>
 8013572:	e005      	b.n	8013580 <rclc_action_find_first_terminated_handle+0x14>
 8013574:	6800      	ldr	r0, [r0, #0]
 8013576:	b118      	cbz	r0, 8013580 <rclc_action_find_first_terminated_handle+0x14>
 8013578:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801357c:	2b03      	cmp	r3, #3
 801357e:	ddf9      	ble.n	8013574 <rclc_action_find_first_terminated_handle+0x8>
 8013580:	4770      	bx	lr
 8013582:	bf00      	nop

08013584 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8013584:	b170      	cbz	r0, 80135a4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8013586:	68c0      	ldr	r0, [r0, #12]
 8013588:	b160      	cbz	r0, 80135a4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801358a:	b410      	push	{r4}
 801358c:	e001      	b.n	8013592 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801358e:	6800      	ldr	r0, [r0, #0]
 8013590:	b128      	cbz	r0, 801359e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8013592:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 8013596:	4299      	cmp	r1, r3
 8013598:	bf08      	it	eq
 801359a:	4294      	cmpeq	r4, r2
 801359c:	d1f7      	bne.n	801358e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801359e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135a2:	4770      	bx	lr
 80135a4:	4770      	bx	lr
 80135a6:	bf00      	nop

080135a8 <rclc_action_find_handle_by_result_request_sequence_number>:
 80135a8:	b170      	cbz	r0, 80135c8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80135aa:	68c0      	ldr	r0, [r0, #12]
 80135ac:	b160      	cbz	r0, 80135c8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80135ae:	b410      	push	{r4}
 80135b0:	e001      	b.n	80135b6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80135b2:	6800      	ldr	r0, [r0, #0]
 80135b4:	b128      	cbz	r0, 80135c2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80135b6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 80135ba:	4299      	cmp	r1, r3
 80135bc:	bf08      	it	eq
 80135be:	4294      	cmpeq	r4, r2
 80135c0:	d1f7      	bne.n	80135b2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80135c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135c6:	4770      	bx	lr
 80135c8:	4770      	bx	lr
 80135ca:	bf00      	nop

080135cc <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80135cc:	b170      	cbz	r0, 80135ec <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80135ce:	68c0      	ldr	r0, [r0, #12]
 80135d0:	b160      	cbz	r0, 80135ec <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80135d2:	b410      	push	{r4}
 80135d4:	e001      	b.n	80135da <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80135d6:	6800      	ldr	r0, [r0, #0]
 80135d8:	b128      	cbz	r0, 80135e6 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80135da:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 80135de:	4299      	cmp	r1, r3
 80135e0:	bf08      	it	eq
 80135e2:	4294      	cmpeq	r4, r2
 80135e4:	d1f7      	bne.n	80135d6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80135e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135ea:	4770      	bx	lr
 80135ec:	4770      	bx	lr
 80135ee:	bf00      	nop

080135f0 <rclc_action_find_first_handle_with_goal_response>:
 80135f0:	b140      	cbz	r0, 8013604 <rclc_action_find_first_handle_with_goal_response+0x14>
 80135f2:	68c0      	ldr	r0, [r0, #12]
 80135f4:	b910      	cbnz	r0, 80135fc <rclc_action_find_first_handle_with_goal_response+0xc>
 80135f6:	e005      	b.n	8013604 <rclc_action_find_first_handle_with_goal_response+0x14>
 80135f8:	6800      	ldr	r0, [r0, #0]
 80135fa:	b118      	cbz	r0, 8013604 <rclc_action_find_first_handle_with_goal_response+0x14>
 80135fc:	f890 3020 	ldrb.w	r3, [r0, #32]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d0f9      	beq.n	80135f8 <rclc_action_find_first_handle_with_goal_response+0x8>
 8013604:	4770      	bx	lr
 8013606:	bf00      	nop

08013608 <rclc_action_find_first_handle_with_result_response>:
 8013608:	b140      	cbz	r0, 801361c <rclc_action_find_first_handle_with_result_response+0x14>
 801360a:	68c0      	ldr	r0, [r0, #12]
 801360c:	b910      	cbnz	r0, 8013614 <rclc_action_find_first_handle_with_result_response+0xc>
 801360e:	e005      	b.n	801361c <rclc_action_find_first_handle_with_result_response+0x14>
 8013610:	6800      	ldr	r0, [r0, #0]
 8013612:	b118      	cbz	r0, 801361c <rclc_action_find_first_handle_with_result_response+0x14>
 8013614:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8013618:	2b00      	cmp	r3, #0
 801361a:	d0f9      	beq.n	8013610 <rclc_action_find_first_handle_with_result_response+0x8>
 801361c:	4770      	bx	lr
 801361e:	bf00      	nop

08013620 <rclc_action_server_response_goal_request>:
 8013620:	b198      	cbz	r0, 801364a <rclc_action_server_response_goal_request+0x2a>
 8013622:	b510      	push	{r4, lr}
 8013624:	6844      	ldr	r4, [r0, #4]
 8013626:	b086      	sub	sp, #24
 8013628:	2200      	movs	r2, #0
 801362a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801362e:	460b      	mov	r3, r1
 8013630:	9205      	str	r2, [sp, #20]
 8013632:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8013636:	aa03      	add	r2, sp, #12
 8013638:	f104 0010 	add.w	r0, r4, #16
 801363c:	f88d 300c 	strb.w	r3, [sp, #12]
 8013640:	f7ff fd4a 	bl	80130d8 <rcl_action_send_goal_response>
 8013644:	b918      	cbnz	r0, 801364e <rclc_action_server_response_goal_request+0x2e>
 8013646:	b006      	add	sp, #24
 8013648:	bd10      	pop	{r4, pc}
 801364a:	200b      	movs	r0, #11
 801364c:	4770      	bx	lr
 801364e:	9001      	str	r0, [sp, #4]
 8013650:	f7f6 fc32 	bl	8009eb8 <rcutils_reset_error>
 8013654:	9801      	ldr	r0, [sp, #4]
 8013656:	b006      	add	sp, #24
 8013658:	bd10      	pop	{r4, pc}
 801365a:	bf00      	nop
 801365c:	0000      	movs	r0, r0
	...

08013660 <rclc_action_server_goal_cancel_accept>:
 8013660:	b310      	cbz	r0, 80136a8 <rclc_action_server_goal_cancel_accept+0x48>
 8013662:	b510      	push	{r4, lr}
 8013664:	b090      	sub	sp, #64	; 0x40
 8013666:	4604      	mov	r4, r0
 8013668:	a806      	add	r0, sp, #24
 801366a:	f7ff fefd 	bl	8013468 <rcl_action_get_zero_initialized_cancel_response>
 801366e:	2300      	movs	r3, #0
 8013670:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8013674:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8013678:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801367c:	f88d 3018 	strb.w	r3, [sp, #24]
 8013680:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8013684:	f8cd d01c 	str.w	sp, [sp, #28]
 8013688:	46ec      	mov	ip, sp
 801368a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801368e:	ed9f 7b08 	vldr	d7, [pc, #32]	; 80136b0 <rclc_action_server_goal_cancel_accept+0x50>
 8013692:	6860      	ldr	r0, [r4, #4]
 8013694:	aa06      	add	r2, sp, #24
 8013696:	f104 0158 	add.w	r1, r4, #88	; 0x58
 801369a:	3010      	adds	r0, #16
 801369c:	ed8d 7b08 	vstr	d7, [sp, #32]
 80136a0:	f7ff fdd2 	bl	8013248 <rcl_action_send_cancel_response>
 80136a4:	b010      	add	sp, #64	; 0x40
 80136a6:	bd10      	pop	{r4, pc}
 80136a8:	200b      	movs	r0, #11
 80136aa:	4770      	bx	lr
 80136ac:	f3af 8000 	nop.w
 80136b0:	00000001 	.word	0x00000001
 80136b4:	00000001 	.word	0x00000001

080136b8 <rclc_action_server_goal_cancel_reject>:
 80136b8:	b082      	sub	sp, #8
 80136ba:	b530      	push	{r4, r5, lr}
 80136bc:	b08b      	sub	sp, #44	; 0x2c
 80136be:	ac0e      	add	r4, sp, #56	; 0x38
 80136c0:	e884 000c 	stmia.w	r4, {r2, r3}
 80136c4:	b188      	cbz	r0, 80136ea <rclc_action_server_goal_cancel_reject+0x32>
 80136c6:	4604      	mov	r4, r0
 80136c8:	a801      	add	r0, sp, #4
 80136ca:	460d      	mov	r5, r1
 80136cc:	f7ff fecc 	bl	8013468 <rcl_action_get_zero_initialized_cancel_response>
 80136d0:	aa01      	add	r2, sp, #4
 80136d2:	a90e      	add	r1, sp, #56	; 0x38
 80136d4:	f104 0010 	add.w	r0, r4, #16
 80136d8:	f88d 5004 	strb.w	r5, [sp, #4]
 80136dc:	f7ff fdb4 	bl	8013248 <rcl_action_send_cancel_response>
 80136e0:	b00b      	add	sp, #44	; 0x2c
 80136e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80136e6:	b002      	add	sp, #8
 80136e8:	4770      	bx	lr
 80136ea:	200b      	movs	r0, #11
 80136ec:	b00b      	add	sp, #44	; 0x2c
 80136ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80136f2:	b002      	add	sp, #8
 80136f4:	4770      	bx	lr
 80136f6:	bf00      	nop

080136f8 <__atomic_load_8>:
 80136f8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80136fc:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8013700:	4a15      	ldr	r2, [pc, #84]	; (8013758 <__atomic_load_8+0x60>)
 8013702:	4b16      	ldr	r3, [pc, #88]	; (801375c <__atomic_load_8+0x64>)
 8013704:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8013708:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801370c:	fb02 f101 	mul.w	r1, r2, r1
 8013710:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8013714:	fba3 2301 	umull	r2, r3, r3, r1
 8013718:	091b      	lsrs	r3, r3, #4
 801371a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801371e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8013722:	b4d0      	push	{r4, r6, r7}
 8013724:	4c0e      	ldr	r4, [pc, #56]	; (8013760 <__atomic_load_8+0x68>)
 8013726:	1ac9      	subs	r1, r1, r3
 8013728:	1862      	adds	r2, r4, r1
 801372a:	f04f 0c01 	mov.w	ip, #1
 801372e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8013732:	e8c2 cf46 	strexb	r6, ip, [r2]
 8013736:	2e00      	cmp	r6, #0
 8013738:	d1f9      	bne.n	801372e <__atomic_load_8+0x36>
 801373a:	f3bf 8f5b 	dmb	ish
 801373e:	b2db      	uxtb	r3, r3
 8013740:	2b00      	cmp	r3, #0
 8013742:	d1f4      	bne.n	801372e <__atomic_load_8+0x36>
 8013744:	e9d0 6700 	ldrd	r6, r7, [r0]
 8013748:	f3bf 8f5b 	dmb	ish
 801374c:	5463      	strb	r3, [r4, r1]
 801374e:	4630      	mov	r0, r6
 8013750:	4639      	mov	r1, r7
 8013752:	bcd0      	pop	{r4, r6, r7}
 8013754:	4770      	bx	lr
 8013756:	bf00      	nop
 8013758:	27d4eb2d 	.word	0x27d4eb2d
 801375c:	b21642c9 	.word	0xb21642c9
 8013760:	2000e4bc 	.word	0x2000e4bc

08013764 <__atomic_store_8>:
 8013764:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8013768:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 801376c:	b570      	push	{r4, r5, r6, lr}
 801376e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8013772:	4c14      	ldr	r4, [pc, #80]	; (80137c4 <__atomic_store_8+0x60>)
 8013774:	4d14      	ldr	r5, [pc, #80]	; (80137c8 <__atomic_store_8+0x64>)
 8013776:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801377a:	fb04 f101 	mul.w	r1, r4, r1
 801377e:	4c13      	ldr	r4, [pc, #76]	; (80137cc <__atomic_store_8+0x68>)
 8013780:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8013784:	fba4 4e01 	umull	r4, lr, r4, r1
 8013788:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801378c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8013790:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8013794:	eba1 0e0e 	sub.w	lr, r1, lr
 8013798:	eb05 0c0e 	add.w	ip, r5, lr
 801379c:	f04f 0401 	mov.w	r4, #1
 80137a0:	e8dc 1f4f 	ldrexb	r1, [ip]
 80137a4:	e8cc 4f46 	strexb	r6, r4, [ip]
 80137a8:	2e00      	cmp	r6, #0
 80137aa:	d1f9      	bne.n	80137a0 <__atomic_store_8+0x3c>
 80137ac:	f3bf 8f5b 	dmb	ish
 80137b0:	b2c9      	uxtb	r1, r1
 80137b2:	2900      	cmp	r1, #0
 80137b4:	d1f4      	bne.n	80137a0 <__atomic_store_8+0x3c>
 80137b6:	e9c0 2300 	strd	r2, r3, [r0]
 80137ba:	f3bf 8f5b 	dmb	ish
 80137be:	f805 100e 	strb.w	r1, [r5, lr]
 80137c2:	bd70      	pop	{r4, r5, r6, pc}
 80137c4:	27d4eb2d 	.word	0x27d4eb2d
 80137c8:	2000e4bc 	.word	0x2000e4bc
 80137cc:	b21642c9 	.word	0xb21642c9

080137d0 <__atomic_exchange_8>:
 80137d0:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 80137d4:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 80137d8:	4916      	ldr	r1, [pc, #88]	; (8013834 <__atomic_exchange_8+0x64>)
 80137da:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 80137de:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 80137e2:	fb01 fc0c 	mul.w	ip, r1, ip
 80137e6:	4914      	ldr	r1, [pc, #80]	; (8013838 <__atomic_exchange_8+0x68>)
 80137e8:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 80137ec:	b570      	push	{r4, r5, r6, lr}
 80137ee:	4605      	mov	r5, r0
 80137f0:	fba1 010c 	umull	r0, r1, r1, ip
 80137f4:	0909      	lsrs	r1, r1, #4
 80137f6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80137fa:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 80137fe:	4e0f      	ldr	r6, [pc, #60]	; (801383c <__atomic_exchange_8+0x6c>)
 8013800:	ebac 0c01 	sub.w	ip, ip, r1
 8013804:	eb06 010c 	add.w	r1, r6, ip
 8013808:	f04f 0e01 	mov.w	lr, #1
 801380c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8013810:	e8c1 ef40 	strexb	r0, lr, [r1]
 8013814:	2800      	cmp	r0, #0
 8013816:	d1f9      	bne.n	801380c <__atomic_exchange_8+0x3c>
 8013818:	f3bf 8f5b 	dmb	ish
 801381c:	b2e4      	uxtb	r4, r4
 801381e:	2c00      	cmp	r4, #0
 8013820:	d1f4      	bne.n	801380c <__atomic_exchange_8+0x3c>
 8013822:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013826:	e9c5 2300 	strd	r2, r3, [r5]
 801382a:	f3bf 8f5b 	dmb	ish
 801382e:	f806 400c 	strb.w	r4, [r6, ip]
 8013832:	bd70      	pop	{r4, r5, r6, pc}
 8013834:	27d4eb2d 	.word	0x27d4eb2d
 8013838:	b21642c9 	.word	0xb21642c9
 801383c:	2000e4bc 	.word	0x2000e4bc

08013840 <rcutils_is_directory>:
 8013840:	2000      	movs	r0, #0
 8013842:	4770      	bx	lr

08013844 <rcutils_join_path>:
 8013844:	b082      	sub	sp, #8
 8013846:	e88d 000c 	stmia.w	sp, {r2, r3}
 801384a:	2000      	movs	r0, #0
 801384c:	b002      	add	sp, #8
 801384e:	4770      	bx	lr

08013850 <rcutils_to_native_path>:
 8013850:	b084      	sub	sp, #16
 8013852:	a801      	add	r0, sp, #4
 8013854:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8013858:	b004      	add	sp, #16
 801385a:	2000      	movs	r0, #0
 801385c:	4770      	bx	lr
 801385e:	bf00      	nop

08013860 <rcutils_string_array_fini>:
 8013860:	b320      	cbz	r0, 80138ac <rcutils_string_array_fini+0x4c>
 8013862:	b570      	push	{r4, r5, r6, lr}
 8013864:	4604      	mov	r4, r0
 8013866:	6840      	ldr	r0, [r0, #4]
 8013868:	b1d8      	cbz	r0, 80138a2 <rcutils_string_array_fini+0x42>
 801386a:	f104 0008 	add.w	r0, r4, #8
 801386e:	f7f6 fae7 	bl	8009e40 <rcutils_allocator_is_valid>
 8013872:	b1b8      	cbz	r0, 80138a4 <rcutils_string_array_fini+0x44>
 8013874:	6823      	ldr	r3, [r4, #0]
 8013876:	b1bb      	cbz	r3, 80138a8 <rcutils_string_array_fini+0x48>
 8013878:	2500      	movs	r5, #0
 801387a:	6860      	ldr	r0, [r4, #4]
 801387c:	462e      	mov	r6, r5
 801387e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8013882:	68e3      	ldr	r3, [r4, #12]
 8013884:	69a1      	ldr	r1, [r4, #24]
 8013886:	4798      	blx	r3
 8013888:	e9d4 3000 	ldrd	r3, r0, [r4]
 801388c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8013890:	3501      	adds	r5, #1
 8013892:	429d      	cmp	r5, r3
 8013894:	d3f3      	bcc.n	801387e <rcutils_string_array_fini+0x1e>
 8013896:	68e3      	ldr	r3, [r4, #12]
 8013898:	69a1      	ldr	r1, [r4, #24]
 801389a:	4798      	blx	r3
 801389c:	2000      	movs	r0, #0
 801389e:	e9c4 0000 	strd	r0, r0, [r4]
 80138a2:	bd70      	pop	{r4, r5, r6, pc}
 80138a4:	200b      	movs	r0, #11
 80138a6:	bd70      	pop	{r4, r5, r6, pc}
 80138a8:	6860      	ldr	r0, [r4, #4]
 80138aa:	e7f4      	b.n	8013896 <rcutils_string_array_fini+0x36>
 80138ac:	200b      	movs	r0, #11
 80138ae:	4770      	bx	lr

080138b0 <rcutils_get_zero_initialized_string_map>:
 80138b0:	4b01      	ldr	r3, [pc, #4]	; (80138b8 <rcutils_get_zero_initialized_string_map+0x8>)
 80138b2:	2000      	movs	r0, #0
 80138b4:	6018      	str	r0, [r3, #0]
 80138b6:	4770      	bx	lr
 80138b8:	2000e4d4 	.word	0x2000e4d4

080138bc <rcutils_string_map_reserve>:
 80138bc:	2800      	cmp	r0, #0
 80138be:	d05f      	beq.n	8013980 <rcutils_string_map_reserve+0xc4>
 80138c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138c4:	460c      	mov	r4, r1
 80138c6:	6801      	ldr	r1, [r0, #0]
 80138c8:	b082      	sub	sp, #8
 80138ca:	4605      	mov	r5, r0
 80138cc:	b129      	cbz	r1, 80138da <rcutils_string_map_reserve+0x1e>
 80138ce:	68cb      	ldr	r3, [r1, #12]
 80138d0:	42a3      	cmp	r3, r4
 80138d2:	d906      	bls.n	80138e2 <rcutils_string_map_reserve+0x26>
 80138d4:	461c      	mov	r4, r3
 80138d6:	2900      	cmp	r1, #0
 80138d8:	d1f9      	bne.n	80138ce <rcutils_string_map_reserve+0x12>
 80138da:	201f      	movs	r0, #31
 80138dc:	b002      	add	sp, #8
 80138de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138e2:	688b      	ldr	r3, [r1, #8]
 80138e4:	42a3      	cmp	r3, r4
 80138e6:	d047      	beq.n	8013978 <rcutils_string_map_reserve+0xbc>
 80138e8:	6a0e      	ldr	r6, [r1, #32]
 80138ea:	2c00      	cmp	r4, #0
 80138ec:	d034      	beq.n	8013958 <rcutils_string_map_reserve+0x9c>
 80138ee:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80138f2:	d243      	bcs.n	801397c <rcutils_string_map_reserve+0xc0>
 80138f4:	00a7      	lsls	r7, r4, #2
 80138f6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80138fa:	6808      	ldr	r0, [r1, #0]
 80138fc:	4632      	mov	r2, r6
 80138fe:	4639      	mov	r1, r7
 8013900:	47c0      	blx	r8
 8013902:	2800      	cmp	r0, #0
 8013904:	d03a      	beq.n	801397c <rcutils_string_map_reserve+0xc0>
 8013906:	682b      	ldr	r3, [r5, #0]
 8013908:	4632      	mov	r2, r6
 801390a:	6018      	str	r0, [r3, #0]
 801390c:	4639      	mov	r1, r7
 801390e:	6858      	ldr	r0, [r3, #4]
 8013910:	47c0      	blx	r8
 8013912:	2800      	cmp	r0, #0
 8013914:	d032      	beq.n	801397c <rcutils_string_map_reserve+0xc0>
 8013916:	682d      	ldr	r5, [r5, #0]
 8013918:	68ab      	ldr	r3, [r5, #8]
 801391a:	6068      	str	r0, [r5, #4]
 801391c:	42a3      	cmp	r3, r4
 801391e:	d226      	bcs.n	801396e <rcutils_string_map_reserve+0xb2>
 8013920:	682a      	ldr	r2, [r5, #0]
 8013922:	eb00 0c07 	add.w	ip, r0, r7
 8013926:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801392a:	45e6      	cmp	lr, ip
 801392c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8013930:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8013934:	d203      	bcs.n	801393e <rcutils_string_map_reserve+0x82>
 8013936:	eb02 0c07 	add.w	ip, r2, r7
 801393a:	4566      	cmp	r6, ip
 801393c:	d322      	bcc.n	8013984 <rcutils_string_map_reserve+0xc8>
 801393e:	1ae3      	subs	r3, r4, r3
 8013940:	009a      	lsls	r2, r3, #2
 8013942:	4670      	mov	r0, lr
 8013944:	2100      	movs	r1, #0
 8013946:	9201      	str	r2, [sp, #4]
 8013948:	f003 feac 	bl	80176a4 <memset>
 801394c:	9a01      	ldr	r2, [sp, #4]
 801394e:	2100      	movs	r1, #0
 8013950:	4630      	mov	r0, r6
 8013952:	f003 fea7 	bl	80176a4 <memset>
 8013956:	e00a      	b.n	801396e <rcutils_string_map_reserve+0xb2>
 8013958:	694f      	ldr	r7, [r1, #20]
 801395a:	6808      	ldr	r0, [r1, #0]
 801395c:	4631      	mov	r1, r6
 801395e:	47b8      	blx	r7
 8013960:	682b      	ldr	r3, [r5, #0]
 8013962:	4631      	mov	r1, r6
 8013964:	6858      	ldr	r0, [r3, #4]
 8013966:	601c      	str	r4, [r3, #0]
 8013968:	47b8      	blx	r7
 801396a:	682d      	ldr	r5, [r5, #0]
 801396c:	606c      	str	r4, [r5, #4]
 801396e:	2000      	movs	r0, #0
 8013970:	60ac      	str	r4, [r5, #8]
 8013972:	b002      	add	sp, #8
 8013974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013978:	2000      	movs	r0, #0
 801397a:	e7af      	b.n	80138dc <rcutils_string_map_reserve+0x20>
 801397c:	200a      	movs	r0, #10
 801397e:	e7ad      	b.n	80138dc <rcutils_string_map_reserve+0x20>
 8013980:	200b      	movs	r0, #11
 8013982:	4770      	bx	lr
 8013984:	1f0b      	subs	r3, r1, #4
 8013986:	4418      	add	r0, r3
 8013988:	4413      	add	r3, r2
 801398a:	3a04      	subs	r2, #4
 801398c:	4417      	add	r7, r2
 801398e:	2200      	movs	r2, #0
 8013990:	f843 2f04 	str.w	r2, [r3, #4]!
 8013994:	42bb      	cmp	r3, r7
 8013996:	f840 2f04 	str.w	r2, [r0, #4]!
 801399a:	d1f9      	bne.n	8013990 <rcutils_string_map_reserve+0xd4>
 801399c:	e7e7      	b.n	801396e <rcutils_string_map_reserve+0xb2>
 801399e:	bf00      	nop

080139a0 <rcutils_string_map_init>:
 80139a0:	b082      	sub	sp, #8
 80139a2:	b570      	push	{r4, r5, r6, lr}
 80139a4:	ac04      	add	r4, sp, #16
 80139a6:	e884 000c 	stmia.w	r4, {r2, r3}
 80139aa:	b380      	cbz	r0, 8013a0e <rcutils_string_map_init+0x6e>
 80139ac:	6806      	ldr	r6, [r0, #0]
 80139ae:	4604      	mov	r4, r0
 80139b0:	b12e      	cbz	r6, 80139be <rcutils_string_map_init+0x1e>
 80139b2:	251e      	movs	r5, #30
 80139b4:	4628      	mov	r0, r5
 80139b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80139ba:	b002      	add	sp, #8
 80139bc:	4770      	bx	lr
 80139be:	a804      	add	r0, sp, #16
 80139c0:	460d      	mov	r5, r1
 80139c2:	f7f6 fa3d 	bl	8009e40 <rcutils_allocator_is_valid>
 80139c6:	b310      	cbz	r0, 8013a0e <rcutils_string_map_init+0x6e>
 80139c8:	9b04      	ldr	r3, [sp, #16]
 80139ca:	9908      	ldr	r1, [sp, #32]
 80139cc:	2024      	movs	r0, #36	; 0x24
 80139ce:	4798      	blx	r3
 80139d0:	6020      	str	r0, [r4, #0]
 80139d2:	b310      	cbz	r0, 8013a1a <rcutils_string_map_init+0x7a>
 80139d4:	f10d 0e10 	add.w	lr, sp, #16
 80139d8:	e9c0 6600 	strd	r6, r6, [r0]
 80139dc:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80139e0:	f100 0c10 	add.w	ip, r0, #16
 80139e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80139e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80139ec:	f8de 3000 	ldr.w	r3, [lr]
 80139f0:	f8cc 3000 	str.w	r3, [ip]
 80139f4:	4629      	mov	r1, r5
 80139f6:	4620      	mov	r0, r4
 80139f8:	f7ff ff60 	bl	80138bc <rcutils_string_map_reserve>
 80139fc:	4605      	mov	r5, r0
 80139fe:	2800      	cmp	r0, #0
 8013a00:	d0d8      	beq.n	80139b4 <rcutils_string_map_init+0x14>
 8013a02:	9b05      	ldr	r3, [sp, #20]
 8013a04:	9908      	ldr	r1, [sp, #32]
 8013a06:	6820      	ldr	r0, [r4, #0]
 8013a08:	4798      	blx	r3
 8013a0a:	6026      	str	r6, [r4, #0]
 8013a0c:	e7d2      	b.n	80139b4 <rcutils_string_map_init+0x14>
 8013a0e:	250b      	movs	r5, #11
 8013a10:	4628      	mov	r0, r5
 8013a12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a16:	b002      	add	sp, #8
 8013a18:	4770      	bx	lr
 8013a1a:	250a      	movs	r5, #10
 8013a1c:	e7ca      	b.n	80139b4 <rcutils_string_map_init+0x14>
 8013a1e:	bf00      	nop

08013a20 <rcutils_string_map_fini>:
 8013a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a24:	b082      	sub	sp, #8
 8013a26:	2800      	cmp	r0, #0
 8013a28:	d03a      	beq.n	8013aa0 <rcutils_string_map_fini+0x80>
 8013a2a:	6804      	ldr	r4, [r0, #0]
 8013a2c:	4606      	mov	r6, r0
 8013a2e:	2c00      	cmp	r4, #0
 8013a30:	d032      	beq.n	8013a98 <rcutils_string_map_fini+0x78>
 8013a32:	68a3      	ldr	r3, [r4, #8]
 8013a34:	b32b      	cbz	r3, 8013a82 <rcutils_string_map_fini+0x62>
 8013a36:	2500      	movs	r5, #0
 8013a38:	6822      	ldr	r2, [r4, #0]
 8013a3a:	462f      	mov	r7, r5
 8013a3c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8013a40:	b1e0      	cbz	r0, 8013a7c <rcutils_string_map_fini+0x5c>
 8013a42:	6a21      	ldr	r1, [r4, #32]
 8013a44:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8013a48:	9101      	str	r1, [sp, #4]
 8013a4a:	47c0      	blx	r8
 8013a4c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013a50:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8013a54:	9901      	ldr	r1, [sp, #4]
 8013a56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013a5a:	47c0      	blx	r8
 8013a5c:	68e3      	ldr	r3, [r4, #12]
 8013a5e:	6862      	ldr	r2, [r4, #4]
 8013a60:	3b01      	subs	r3, #1
 8013a62:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8013a66:	60e3      	str	r3, [r4, #12]
 8013a68:	6834      	ldr	r4, [r6, #0]
 8013a6a:	68a3      	ldr	r3, [r4, #8]
 8013a6c:	3501      	adds	r5, #1
 8013a6e:	429d      	cmp	r5, r3
 8013a70:	d207      	bcs.n	8013a82 <rcutils_string_map_fini+0x62>
 8013a72:	6822      	ldr	r2, [r4, #0]
 8013a74:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8013a78:	2800      	cmp	r0, #0
 8013a7a:	d1e2      	bne.n	8013a42 <rcutils_string_map_fini+0x22>
 8013a7c:	3501      	adds	r5, #1
 8013a7e:	429d      	cmp	r5, r3
 8013a80:	d3dc      	bcc.n	8013a3c <rcutils_string_map_fini+0x1c>
 8013a82:	2100      	movs	r1, #0
 8013a84:	4630      	mov	r0, r6
 8013a86:	f7ff ff19 	bl	80138bc <rcutils_string_map_reserve>
 8013a8a:	4604      	mov	r4, r0
 8013a8c:	b920      	cbnz	r0, 8013a98 <rcutils_string_map_fini+0x78>
 8013a8e:	6830      	ldr	r0, [r6, #0]
 8013a90:	6943      	ldr	r3, [r0, #20]
 8013a92:	6a01      	ldr	r1, [r0, #32]
 8013a94:	4798      	blx	r3
 8013a96:	6034      	str	r4, [r6, #0]
 8013a98:	4620      	mov	r0, r4
 8013a9a:	b002      	add	sp, #8
 8013a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013aa0:	240b      	movs	r4, #11
 8013aa2:	4620      	mov	r0, r4
 8013aa4:	b002      	add	sp, #8
 8013aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013aaa:	bf00      	nop

08013aac <rcutils_string_map_getn>:
 8013aac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ab0:	b300      	cbz	r0, 8013af4 <rcutils_string_map_getn+0x48>
 8013ab2:	6807      	ldr	r7, [r0, #0]
 8013ab4:	b1ff      	cbz	r7, 8013af6 <rcutils_string_map_getn+0x4a>
 8013ab6:	4688      	mov	r8, r1
 8013ab8:	b1e1      	cbz	r1, 8013af4 <rcutils_string_map_getn+0x48>
 8013aba:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8013abe:	683e      	ldr	r6, [r7, #0]
 8013ac0:	f1ba 0f00 	cmp.w	sl, #0
 8013ac4:	d016      	beq.n	8013af4 <rcutils_string_map_getn+0x48>
 8013ac6:	4691      	mov	r9, r2
 8013ac8:	3e04      	subs	r6, #4
 8013aca:	2400      	movs	r4, #0
 8013acc:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8013ad0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013ad4:	4628      	mov	r0, r5
 8013ad6:	3401      	adds	r4, #1
 8013ad8:	b155      	cbz	r5, 8013af0 <rcutils_string_map_getn+0x44>
 8013ada:	f7ec fba3 	bl	8000224 <strlen>
 8013ade:	4548      	cmp	r0, r9
 8013ae0:	4602      	mov	r2, r0
 8013ae2:	4629      	mov	r1, r5
 8013ae4:	bf38      	it	cc
 8013ae6:	464a      	movcc	r2, r9
 8013ae8:	4640      	mov	r0, r8
 8013aea:	f003 fdf0 	bl	80176ce <strncmp>
 8013aee:	b128      	cbz	r0, 8013afc <rcutils_string_map_getn+0x50>
 8013af0:	45a2      	cmp	sl, r4
 8013af2:	d1eb      	bne.n	8013acc <rcutils_string_map_getn+0x20>
 8013af4:	2700      	movs	r7, #0
 8013af6:	4638      	mov	r0, r7
 8013af8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	f853 700b 	ldr.w	r7, [r3, fp]
 8013b02:	4638      	mov	r0, r7
 8013b04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013b08 <rmw_get_zero_initialized_context>:
 8013b08:	b510      	push	{r4, lr}
 8013b0a:	4604      	mov	r4, r0
 8013b0c:	3010      	adds	r0, #16
 8013b0e:	f000 f80b 	bl	8013b28 <rmw_get_zero_initialized_init_options>
 8013b12:	2300      	movs	r3, #0
 8013b14:	2000      	movs	r0, #0
 8013b16:	2100      	movs	r1, #0
 8013b18:	e9c4 0100 	strd	r0, r1, [r4]
 8013b1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013b20:	60a3      	str	r3, [r4, #8]
 8013b22:	4620      	mov	r0, r4
 8013b24:	bd10      	pop	{r4, pc}
 8013b26:	bf00      	nop

08013b28 <rmw_get_zero_initialized_init_options>:
 8013b28:	b510      	push	{r4, lr}
 8013b2a:	2238      	movs	r2, #56	; 0x38
 8013b2c:	4604      	mov	r4, r0
 8013b2e:	2100      	movs	r1, #0
 8013b30:	f003 fdb8 	bl	80176a4 <memset>
 8013b34:	f104 0010 	add.w	r0, r4, #16
 8013b38:	f000 f806 	bl	8013b48 <rmw_get_default_security_options>
 8013b3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b40:	60e3      	str	r3, [r4, #12]
 8013b42:	4620      	mov	r0, r4
 8013b44:	bd10      	pop	{r4, pc}
 8013b46:	bf00      	nop

08013b48 <rmw_get_default_security_options>:
 8013b48:	2200      	movs	r2, #0
 8013b4a:	7002      	strb	r2, [r0, #0]
 8013b4c:	6042      	str	r2, [r0, #4]
 8013b4e:	4770      	bx	lr

08013b50 <rmw_time_equal>:
 8013b50:	b4f0      	push	{r4, r5, r6, r7}
 8013b52:	b084      	sub	sp, #16
 8013b54:	ac04      	add	r4, sp, #16
 8013b56:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	4924      	ldr	r1, [pc, #144]	; (8013bf0 <rmw_time_equal+0xa0>)
 8013b5e:	9e03      	ldr	r6, [sp, #12]
 8013b60:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8013b64:	2202      	movs	r2, #2
 8013b66:	4299      	cmp	r1, r3
 8013b68:	41aa      	sbcs	r2, r5
 8013b6a:	d330      	bcc.n	8013bce <rmw_time_equal+0x7e>
 8013b6c:	4c21      	ldr	r4, [pc, #132]	; (8013bf4 <rmw_time_equal+0xa4>)
 8013b6e:	fba3 3204 	umull	r3, r2, r3, r4
 8013b72:	fb04 2205 	mla	r2, r4, r5, r2
 8013b76:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013b7a:	43dd      	mvns	r5, r3
 8013b7c:	1a8c      	subs	r4, r1, r2
 8013b7e:	4285      	cmp	r5, r0
 8013b80:	41b4      	sbcs	r4, r6
 8013b82:	d332      	bcc.n	8013bea <rmw_time_equal+0x9a>
 8013b84:	eb10 0c03 	adds.w	ip, r0, r3
 8013b88:	eb42 0106 	adc.w	r1, r2, r6
 8013b8c:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8013b90:	4817      	ldr	r0, [pc, #92]	; (8013bf0 <rmw_time_equal+0xa0>)
 8013b92:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8013b94:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8013b96:	2202      	movs	r2, #2
 8013b98:	4298      	cmp	r0, r3
 8013b9a:	41b2      	sbcs	r2, r6
 8013b9c:	d31c      	bcc.n	8013bd8 <rmw_time_equal+0x88>
 8013b9e:	4c15      	ldr	r4, [pc, #84]	; (8013bf4 <rmw_time_equal+0xa4>)
 8013ba0:	fba3 3204 	umull	r3, r2, r3, r4
 8013ba4:	fb04 2206 	mla	r2, r4, r6, r2
 8013ba8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8013bac:	43de      	mvns	r6, r3
 8013bae:	1a84      	subs	r4, r0, r2
 8013bb0:	42ae      	cmp	r6, r5
 8013bb2:	41bc      	sbcs	r4, r7
 8013bb4:	d315      	bcc.n	8013be2 <rmw_time_equal+0x92>
 8013bb6:	195b      	adds	r3, r3, r5
 8013bb8:	eb42 0207 	adc.w	r2, r2, r7
 8013bbc:	428a      	cmp	r2, r1
 8013bbe:	bf08      	it	eq
 8013bc0:	4563      	cmpeq	r3, ip
 8013bc2:	bf0c      	ite	eq
 8013bc4:	2001      	moveq	r0, #1
 8013bc6:	2000      	movne	r0, #0
 8013bc8:	b004      	add	sp, #16
 8013bca:	bcf0      	pop	{r4, r5, r6, r7}
 8013bcc:	4770      	bx	lr
 8013bce:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8013bd2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013bd6:	e7d9      	b.n	8013b8c <rmw_time_equal+0x3c>
 8013bd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013bdc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8013be0:	e7ec      	b.n	8013bbc <rmw_time_equal+0x6c>
 8013be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013be6:	4602      	mov	r2, r0
 8013be8:	e7e8      	b.n	8013bbc <rmw_time_equal+0x6c>
 8013bea:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8013bee:	e7cd      	b.n	8013b8c <rmw_time_equal+0x3c>
 8013bf0:	25c17d04 	.word	0x25c17d04
 8013bf4:	3b9aca00 	.word	0x3b9aca00

08013bf8 <rmw_time_total_nsec>:
 8013bf8:	b470      	push	{r4, r5, r6}
 8013bfa:	b085      	sub	sp, #20
 8013bfc:	ac04      	add	r4, sp, #16
 8013bfe:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8013c02:	4603      	mov	r3, r0
 8013c04:	4912      	ldr	r1, [pc, #72]	; (8013c50 <rmw_time_total_nsec+0x58>)
 8013c06:	9e03      	ldr	r6, [sp, #12]
 8013c08:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8013c0c:	2202      	movs	r2, #2
 8013c0e:	4299      	cmp	r1, r3
 8013c10:	41aa      	sbcs	r2, r5
 8013c12:	d311      	bcc.n	8013c38 <rmw_time_total_nsec+0x40>
 8013c14:	4c0f      	ldr	r4, [pc, #60]	; (8013c54 <rmw_time_total_nsec+0x5c>)
 8013c16:	fba3 3204 	umull	r3, r2, r3, r4
 8013c1a:	fb04 2205 	mla	r2, r4, r5, r2
 8013c1e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013c22:	43dd      	mvns	r5, r3
 8013c24:	1a8c      	subs	r4, r1, r2
 8013c26:	4285      	cmp	r5, r0
 8013c28:	41b4      	sbcs	r4, r6
 8013c2a:	d30c      	bcc.n	8013c46 <rmw_time_total_nsec+0x4e>
 8013c2c:	1818      	adds	r0, r3, r0
 8013c2e:	eb42 0106 	adc.w	r1, r2, r6
 8013c32:	b005      	add	sp, #20
 8013c34:	bc70      	pop	{r4, r5, r6}
 8013c36:	4770      	bx	lr
 8013c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013c40:	b005      	add	sp, #20
 8013c42:	bc70      	pop	{r4, r5, r6}
 8013c44:	4770      	bx	lr
 8013c46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c4a:	b005      	add	sp, #20
 8013c4c:	bc70      	pop	{r4, r5, r6}
 8013c4e:	4770      	bx	lr
 8013c50:	25c17d04 	.word	0x25c17d04
 8013c54:	3b9aca00 	.word	0x3b9aca00

08013c58 <rmw_validate_full_topic_name>:
 8013c58:	2800      	cmp	r0, #0
 8013c5a:	d057      	beq.n	8013d0c <rmw_validate_full_topic_name+0xb4>
 8013c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c60:	460d      	mov	r5, r1
 8013c62:	2900      	cmp	r1, #0
 8013c64:	d054      	beq.n	8013d10 <rmw_validate_full_topic_name+0xb8>
 8013c66:	4616      	mov	r6, r2
 8013c68:	4604      	mov	r4, r0
 8013c6a:	f7ec fadb 	bl	8000224 <strlen>
 8013c6e:	b148      	cbz	r0, 8013c84 <rmw_validate_full_topic_name+0x2c>
 8013c70:	7823      	ldrb	r3, [r4, #0]
 8013c72:	2b2f      	cmp	r3, #47	; 0x2f
 8013c74:	d00d      	beq.n	8013c92 <rmw_validate_full_topic_name+0x3a>
 8013c76:	2302      	movs	r3, #2
 8013c78:	602b      	str	r3, [r5, #0]
 8013c7a:	b13e      	cbz	r6, 8013c8c <rmw_validate_full_topic_name+0x34>
 8013c7c:	2000      	movs	r0, #0
 8013c7e:	6030      	str	r0, [r6, #0]
 8013c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c84:	2301      	movs	r3, #1
 8013c86:	602b      	str	r3, [r5, #0]
 8013c88:	2e00      	cmp	r6, #0
 8013c8a:	d1f7      	bne.n	8013c7c <rmw_validate_full_topic_name+0x24>
 8013c8c:	2000      	movs	r0, #0
 8013c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c92:	1e43      	subs	r3, r0, #1
 8013c94:	5ce2      	ldrb	r2, [r4, r3]
 8013c96:	2a2f      	cmp	r2, #47	; 0x2f
 8013c98:	d03c      	beq.n	8013d14 <rmw_validate_full_topic_name+0xbc>
 8013c9a:	1e63      	subs	r3, r4, #1
 8013c9c:	eb03 0800 	add.w	r8, r3, r0
 8013ca0:	f1c4 0e01 	rsb	lr, r4, #1
 8013ca4:	eb0e 0703 	add.w	r7, lr, r3
 8013ca8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8013cac:	f021 0220 	bic.w	r2, r1, #32
 8013cb0:	3a41      	subs	r2, #65	; 0x41
 8013cb2:	2a19      	cmp	r2, #25
 8013cb4:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 8013cb8:	d90b      	bls.n	8013cd2 <rmw_validate_full_topic_name+0x7a>
 8013cba:	295f      	cmp	r1, #95	; 0x5f
 8013cbc:	d009      	beq.n	8013cd2 <rmw_validate_full_topic_name+0x7a>
 8013cbe:	f1bc 0f0a 	cmp.w	ip, #10
 8013cc2:	d906      	bls.n	8013cd2 <rmw_validate_full_topic_name+0x7a>
 8013cc4:	2304      	movs	r3, #4
 8013cc6:	602b      	str	r3, [r5, #0]
 8013cc8:	2e00      	cmp	r6, #0
 8013cca:	d0df      	beq.n	8013c8c <rmw_validate_full_topic_name+0x34>
 8013ccc:	6037      	str	r7, [r6, #0]
 8013cce:	2000      	movs	r0, #0
 8013cd0:	e7d6      	b.n	8013c80 <rmw_validate_full_topic_name+0x28>
 8013cd2:	4543      	cmp	r3, r8
 8013cd4:	d1e6      	bne.n	8013ca4 <rmw_validate_full_topic_name+0x4c>
 8013cd6:	4f1a      	ldr	r7, [pc, #104]	; (8013d40 <rmw_validate_full_topic_name+0xe8>)
 8013cd8:	2301      	movs	r3, #1
 8013cda:	e004      	b.n	8013ce6 <rmw_validate_full_topic_name+0x8e>
 8013cdc:	4298      	cmp	r0, r3
 8013cde:	f104 0401 	add.w	r4, r4, #1
 8013ce2:	d91c      	bls.n	8013d1e <rmw_validate_full_topic_name+0xc6>
 8013ce4:	4613      	mov	r3, r2
 8013ce6:	4298      	cmp	r0, r3
 8013ce8:	f103 0201 	add.w	r2, r3, #1
 8013cec:	d0f6      	beq.n	8013cdc <rmw_validate_full_topic_name+0x84>
 8013cee:	7821      	ldrb	r1, [r4, #0]
 8013cf0:	292f      	cmp	r1, #47	; 0x2f
 8013cf2:	d1f3      	bne.n	8013cdc <rmw_validate_full_topic_name+0x84>
 8013cf4:	7861      	ldrb	r1, [r4, #1]
 8013cf6:	292f      	cmp	r1, #47	; 0x2f
 8013cf8:	d01c      	beq.n	8013d34 <rmw_validate_full_topic_name+0xdc>
 8013cfa:	5dc9      	ldrb	r1, [r1, r7]
 8013cfc:	0749      	lsls	r1, r1, #29
 8013cfe:	d5ed      	bpl.n	8013cdc <rmw_validate_full_topic_name+0x84>
 8013d00:	2206      	movs	r2, #6
 8013d02:	602a      	str	r2, [r5, #0]
 8013d04:	2e00      	cmp	r6, #0
 8013d06:	d0c1      	beq.n	8013c8c <rmw_validate_full_topic_name+0x34>
 8013d08:	6033      	str	r3, [r6, #0]
 8013d0a:	e7bf      	b.n	8013c8c <rmw_validate_full_topic_name+0x34>
 8013d0c:	200b      	movs	r0, #11
 8013d0e:	4770      	bx	lr
 8013d10:	200b      	movs	r0, #11
 8013d12:	e7b5      	b.n	8013c80 <rmw_validate_full_topic_name+0x28>
 8013d14:	2203      	movs	r2, #3
 8013d16:	602a      	str	r2, [r5, #0]
 8013d18:	2e00      	cmp	r6, #0
 8013d1a:	d1f5      	bne.n	8013d08 <rmw_validate_full_topic_name+0xb0>
 8013d1c:	e7b6      	b.n	8013c8c <rmw_validate_full_topic_name+0x34>
 8013d1e:	28f7      	cmp	r0, #247	; 0xf7
 8013d20:	d802      	bhi.n	8013d28 <rmw_validate_full_topic_name+0xd0>
 8013d22:	2000      	movs	r0, #0
 8013d24:	6028      	str	r0, [r5, #0]
 8013d26:	e7ab      	b.n	8013c80 <rmw_validate_full_topic_name+0x28>
 8013d28:	2307      	movs	r3, #7
 8013d2a:	602b      	str	r3, [r5, #0]
 8013d2c:	2e00      	cmp	r6, #0
 8013d2e:	d0ad      	beq.n	8013c8c <rmw_validate_full_topic_name+0x34>
 8013d30:	23f6      	movs	r3, #246	; 0xf6
 8013d32:	e7e9      	b.n	8013d08 <rmw_validate_full_topic_name+0xb0>
 8013d34:	2205      	movs	r2, #5
 8013d36:	602a      	str	r2, [r5, #0]
 8013d38:	2e00      	cmp	r6, #0
 8013d3a:	d1e5      	bne.n	8013d08 <rmw_validate_full_topic_name+0xb0>
 8013d3c:	e7a6      	b.n	8013c8c <rmw_validate_full_topic_name+0x34>
 8013d3e:	bf00      	nop
 8013d40:	08019882 	.word	0x08019882

08013d44 <get_memory>:
 8013d44:	4603      	mov	r3, r0
 8013d46:	6840      	ldr	r0, [r0, #4]
 8013d48:	b158      	cbz	r0, 8013d62 <get_memory+0x1e>
 8013d4a:	6842      	ldr	r2, [r0, #4]
 8013d4c:	605a      	str	r2, [r3, #4]
 8013d4e:	b10a      	cbz	r2, 8013d54 <get_memory+0x10>
 8013d50:	2100      	movs	r1, #0
 8013d52:	6011      	str	r1, [r2, #0]
 8013d54:	681a      	ldr	r2, [r3, #0]
 8013d56:	6042      	str	r2, [r0, #4]
 8013d58:	b102      	cbz	r2, 8013d5c <get_memory+0x18>
 8013d5a:	6010      	str	r0, [r2, #0]
 8013d5c:	2200      	movs	r2, #0
 8013d5e:	6002      	str	r2, [r0, #0]
 8013d60:	6018      	str	r0, [r3, #0]
 8013d62:	4770      	bx	lr

08013d64 <put_memory>:
 8013d64:	680b      	ldr	r3, [r1, #0]
 8013d66:	b10b      	cbz	r3, 8013d6c <put_memory+0x8>
 8013d68:	684a      	ldr	r2, [r1, #4]
 8013d6a:	605a      	str	r2, [r3, #4]
 8013d6c:	684a      	ldr	r2, [r1, #4]
 8013d6e:	b102      	cbz	r2, 8013d72 <put_memory+0xe>
 8013d70:	6013      	str	r3, [r2, #0]
 8013d72:	6803      	ldr	r3, [r0, #0]
 8013d74:	428b      	cmp	r3, r1
 8013d76:	6843      	ldr	r3, [r0, #4]
 8013d78:	bf08      	it	eq
 8013d7a:	6002      	streq	r2, [r0, #0]
 8013d7c:	604b      	str	r3, [r1, #4]
 8013d7e:	b103      	cbz	r3, 8013d82 <put_memory+0x1e>
 8013d80:	6019      	str	r1, [r3, #0]
 8013d82:	2300      	movs	r3, #0
 8013d84:	600b      	str	r3, [r1, #0]
 8013d86:	6041      	str	r1, [r0, #4]
 8013d88:	4770      	bx	lr
 8013d8a:	bf00      	nop

08013d8c <rmw_destroy_client>:
 8013d8c:	b570      	push	{r4, r5, r6, lr}
 8013d8e:	b128      	cbz	r0, 8013d9c <rmw_destroy_client+0x10>
 8013d90:	4604      	mov	r4, r0
 8013d92:	6800      	ldr	r0, [r0, #0]
 8013d94:	460d      	mov	r5, r1
 8013d96:	f7f7 fb59 	bl	800b44c <is_uxrce_rmw_identifier_valid>
 8013d9a:	b910      	cbnz	r0, 8013da2 <rmw_destroy_client+0x16>
 8013d9c:	2401      	movs	r4, #1
 8013d9e:	4620      	mov	r0, r4
 8013da0:	bd70      	pop	{r4, r5, r6, pc}
 8013da2:	6863      	ldr	r3, [r4, #4]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d0f9      	beq.n	8013d9c <rmw_destroy_client+0x10>
 8013da8:	2d00      	cmp	r5, #0
 8013daa:	d0f7      	beq.n	8013d9c <rmw_destroy_client+0x10>
 8013dac:	6828      	ldr	r0, [r5, #0]
 8013dae:	f7f7 fb4d 	bl	800b44c <is_uxrce_rmw_identifier_valid>
 8013db2:	2800      	cmp	r0, #0
 8013db4:	d0f2      	beq.n	8013d9c <rmw_destroy_client+0x10>
 8013db6:	686e      	ldr	r6, [r5, #4]
 8013db8:	2e00      	cmp	r6, #0
 8013dba:	d0ef      	beq.n	8013d9c <rmw_destroy_client+0x10>
 8013dbc:	6864      	ldr	r4, [r4, #4]
 8013dbe:	6932      	ldr	r2, [r6, #16]
 8013dc0:	6920      	ldr	r0, [r4, #16]
 8013dc2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013dc6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013dca:	6819      	ldr	r1, [r3, #0]
 8013dcc:	f7fa fbf8 	bl	800e5c0 <uxr_buffer_cancel_data>
 8013dd0:	4602      	mov	r2, r0
 8013dd2:	6920      	ldr	r0, [r4, #16]
 8013dd4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013dd8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013ddc:	f7f7 fab6 	bl	800b34c <run_xrce_session>
 8013de0:	6920      	ldr	r0, [r4, #16]
 8013de2:	6932      	ldr	r2, [r6, #16]
 8013de4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013de8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013dec:	6819      	ldr	r1, [r3, #0]
 8013dee:	f7fa f97b 	bl	800e0e8 <uxr_buffer_delete_entity>
 8013df2:	4602      	mov	r2, r0
 8013df4:	6920      	ldr	r0, [r4, #16]
 8013df6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013dfa:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013dfe:	f7f7 faa5 	bl	800b34c <run_xrce_session>
 8013e02:	2800      	cmp	r0, #0
 8013e04:	4628      	mov	r0, r5
 8013e06:	bf14      	ite	ne
 8013e08:	2400      	movne	r4, #0
 8013e0a:	2402      	moveq	r4, #2
 8013e0c:	f7f7 f986 	bl	800b11c <rmw_uxrce_fini_client_memory>
 8013e10:	e7c5      	b.n	8013d9e <rmw_destroy_client+0x12>
 8013e12:	bf00      	nop

08013e14 <rmw_get_implementation_identifier>:
 8013e14:	4b01      	ldr	r3, [pc, #4]	; (8013e1c <rmw_get_implementation_identifier+0x8>)
 8013e16:	6818      	ldr	r0, [r3, #0]
 8013e18:	4770      	bx	lr
 8013e1a:	bf00      	nop
 8013e1c:	08019488 	.word	0x08019488

08013e20 <rmw_create_guard_condition>:
 8013e20:	b538      	push	{r3, r4, r5, lr}
 8013e22:	4605      	mov	r5, r0
 8013e24:	4807      	ldr	r0, [pc, #28]	; (8013e44 <rmw_create_guard_condition+0x24>)
 8013e26:	f7ff ff8d 	bl	8013d44 <get_memory>
 8013e2a:	b148      	cbz	r0, 8013e40 <rmw_create_guard_condition+0x20>
 8013e2c:	6884      	ldr	r4, [r0, #8]
 8013e2e:	2300      	movs	r3, #0
 8013e30:	7423      	strb	r3, [r4, #16]
 8013e32:	61e5      	str	r5, [r4, #28]
 8013e34:	f7ff ffee 	bl	8013e14 <rmw_get_implementation_identifier>
 8013e38:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8013e3c:	f104 0014 	add.w	r0, r4, #20
 8013e40:	bd38      	pop	{r3, r4, r5, pc}
 8013e42:	bf00      	nop
 8013e44:	2000e404 	.word	0x2000e404

08013e48 <rmw_destroy_guard_condition>:
 8013e48:	b508      	push	{r3, lr}
 8013e4a:	4b08      	ldr	r3, [pc, #32]	; (8013e6c <rmw_destroy_guard_condition+0x24>)
 8013e4c:	6819      	ldr	r1, [r3, #0]
 8013e4e:	b911      	cbnz	r1, 8013e56 <rmw_destroy_guard_condition+0xe>
 8013e50:	e00a      	b.n	8013e68 <rmw_destroy_guard_condition+0x20>
 8013e52:	6849      	ldr	r1, [r1, #4]
 8013e54:	b141      	cbz	r1, 8013e68 <rmw_destroy_guard_condition+0x20>
 8013e56:	688b      	ldr	r3, [r1, #8]
 8013e58:	3314      	adds	r3, #20
 8013e5a:	4298      	cmp	r0, r3
 8013e5c:	d1f9      	bne.n	8013e52 <rmw_destroy_guard_condition+0xa>
 8013e5e:	4803      	ldr	r0, [pc, #12]	; (8013e6c <rmw_destroy_guard_condition+0x24>)
 8013e60:	f7ff ff80 	bl	8013d64 <put_memory>
 8013e64:	2000      	movs	r0, #0
 8013e66:	bd08      	pop	{r3, pc}
 8013e68:	2001      	movs	r0, #1
 8013e6a:	bd08      	pop	{r3, pc}
 8013e6c:	2000e404 	.word	0x2000e404

08013e70 <rmw_init_options_init>:
 8013e70:	b084      	sub	sp, #16
 8013e72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e74:	b083      	sub	sp, #12
 8013e76:	ad09      	add	r5, sp, #36	; 0x24
 8013e78:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8013e7c:	b130      	cbz	r0, 8013e8c <rmw_init_options_init+0x1c>
 8013e7e:	4604      	mov	r4, r0
 8013e80:	4628      	mov	r0, r5
 8013e82:	f7f5 ffdd 	bl	8009e40 <rcutils_allocator_is_valid>
 8013e86:	b108      	cbz	r0, 8013e8c <rmw_init_options_init+0x1c>
 8013e88:	68a6      	ldr	r6, [r4, #8]
 8013e8a:	b12e      	cbz	r6, 8013e98 <rmw_init_options_init+0x28>
 8013e8c:	200b      	movs	r0, #11
 8013e8e:	b003      	add	sp, #12
 8013e90:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013e94:	b004      	add	sp, #16
 8013e96:	4770      	bx	lr
 8013e98:	2200      	movs	r2, #0
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	e9c4 2300 	strd	r2, r3, [r4]
 8013ea0:	4b22      	ldr	r3, [pc, #136]	; (8013f2c <rmw_init_options_init+0xbc>)
 8013ea2:	f8df e098 	ldr.w	lr, [pc, #152]	; 8013f3c <rmw_init_options_init+0xcc>
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	60a3      	str	r3, [r4, #8]
 8013eaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013eac:	f104 0c20 	add.w	ip, r4, #32
 8013eb0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013eb4:	466f      	mov	r7, sp
 8013eb6:	682b      	ldr	r3, [r5, #0]
 8013eb8:	f8cc 3000 	str.w	r3, [ip]
 8013ebc:	4638      	mov	r0, r7
 8013ebe:	f8c4 e01c 	str.w	lr, [r4, #28]
 8013ec2:	60e6      	str	r6, [r4, #12]
 8013ec4:	f7ff fe40 	bl	8013b48 <rmw_get_default_security_options>
 8013ec8:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013ecc:	f104 0310 	add.w	r3, r4, #16
 8013ed0:	e883 0003 	stmia.w	r3, {r0, r1}
 8013ed4:	2203      	movs	r2, #3
 8013ed6:	4816      	ldr	r0, [pc, #88]	; (8013f30 <rmw_init_options_init+0xc0>)
 8013ed8:	4916      	ldr	r1, [pc, #88]	; (8013f34 <rmw_init_options_init+0xc4>)
 8013eda:	7626      	strb	r6, [r4, #24]
 8013edc:	f7f7 f85e 	bl	800af9c <rmw_uxrce_init_init_options_impl_memory>
 8013ee0:	4813      	ldr	r0, [pc, #76]	; (8013f30 <rmw_init_options_init+0xc0>)
 8013ee2:	f7ff ff2f 	bl	8013d44 <get_memory>
 8013ee6:	b1f0      	cbz	r0, 8013f26 <rmw_init_options_init+0xb6>
 8013ee8:	4a13      	ldr	r2, [pc, #76]	; (8013f38 <rmw_init_options_init+0xc8>)
 8013eea:	6883      	ldr	r3, [r0, #8]
 8013eec:	6851      	ldr	r1, [r2, #4]
 8013eee:	7810      	ldrb	r0, [r2, #0]
 8013ef0:	6363      	str	r3, [r4, #52]	; 0x34
 8013ef2:	7418      	strb	r0, [r3, #16]
 8013ef4:	6159      	str	r1, [r3, #20]
 8013ef6:	68d1      	ldr	r1, [r2, #12]
 8013ef8:	61d9      	str	r1, [r3, #28]
 8013efa:	6911      	ldr	r1, [r2, #16]
 8013efc:	6219      	str	r1, [r3, #32]
 8013efe:	6951      	ldr	r1, [r2, #20]
 8013f00:	6892      	ldr	r2, [r2, #8]
 8013f02:	619a      	str	r2, [r3, #24]
 8013f04:	6259      	str	r1, [r3, #36]	; 0x24
 8013f06:	f7fb fe7b 	bl	800fc00 <uxr_nanos>
 8013f0a:	f002 ffed 	bl	8016ee8 <srand>
 8013f0e:	f003 f819 	bl	8016f44 <rand>
 8013f12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013f14:	6298      	str	r0, [r3, #40]	; 0x28
 8013f16:	2800      	cmp	r0, #0
 8013f18:	d0f9      	beq.n	8013f0e <rmw_init_options_init+0x9e>
 8013f1a:	2000      	movs	r0, #0
 8013f1c:	b003      	add	sp, #12
 8013f1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013f22:	b004      	add	sp, #16
 8013f24:	4770      	bx	lr
 8013f26:	2001      	movs	r0, #1
 8013f28:	e7b1      	b.n	8013e8e <rmw_init_options_init+0x1e>
 8013f2a:	bf00      	nop
 8013f2c:	08019488 	.word	0x08019488
 8013f30:	2000e414 	.word	0x2000e414
 8013f34:	20009cb0 	.word	0x20009cb0
 8013f38:	20009afc 	.word	0x20009afc
 8013f3c:	08018718 	.word	0x08018718

08013f40 <rmw_init_options_copy>:
 8013f40:	b570      	push	{r4, r5, r6, lr}
 8013f42:	b158      	cbz	r0, 8013f5c <rmw_init_options_copy+0x1c>
 8013f44:	460d      	mov	r5, r1
 8013f46:	b149      	cbz	r1, 8013f5c <rmw_init_options_copy+0x1c>
 8013f48:	4604      	mov	r4, r0
 8013f4a:	6880      	ldr	r0, [r0, #8]
 8013f4c:	b120      	cbz	r0, 8013f58 <rmw_init_options_copy+0x18>
 8013f4e:	4b1e      	ldr	r3, [pc, #120]	; (8013fc8 <rmw_init_options_copy+0x88>)
 8013f50:	6819      	ldr	r1, [r3, #0]
 8013f52:	f7ec f95d 	bl	8000210 <strcmp>
 8013f56:	bb90      	cbnz	r0, 8013fbe <rmw_init_options_copy+0x7e>
 8013f58:	68ab      	ldr	r3, [r5, #8]
 8013f5a:	b113      	cbz	r3, 8013f62 <rmw_init_options_copy+0x22>
 8013f5c:	250b      	movs	r5, #11
 8013f5e:	4628      	mov	r0, r5
 8013f60:	bd70      	pop	{r4, r5, r6, pc}
 8013f62:	4623      	mov	r3, r4
 8013f64:	462a      	mov	r2, r5
 8013f66:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8013f6a:	f8d3 c000 	ldr.w	ip, [r3]
 8013f6e:	6858      	ldr	r0, [r3, #4]
 8013f70:	6899      	ldr	r1, [r3, #8]
 8013f72:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8013f76:	f8c2 e00c 	str.w	lr, [r2, #12]
 8013f7a:	3310      	adds	r3, #16
 8013f7c:	42b3      	cmp	r3, r6
 8013f7e:	f8c2 c000 	str.w	ip, [r2]
 8013f82:	6050      	str	r0, [r2, #4]
 8013f84:	6091      	str	r1, [r2, #8]
 8013f86:	f102 0210 	add.w	r2, r2, #16
 8013f8a:	d1ee      	bne.n	8013f6a <rmw_init_options_copy+0x2a>
 8013f8c:	6819      	ldr	r1, [r3, #0]
 8013f8e:	685b      	ldr	r3, [r3, #4]
 8013f90:	480e      	ldr	r0, [pc, #56]	; (8013fcc <rmw_init_options_copy+0x8c>)
 8013f92:	6053      	str	r3, [r2, #4]
 8013f94:	6011      	str	r1, [r2, #0]
 8013f96:	f7ff fed5 	bl	8013d44 <get_memory>
 8013f9a:	b198      	cbz	r0, 8013fc4 <rmw_init_options_copy+0x84>
 8013f9c:	6883      	ldr	r3, [r0, #8]
 8013f9e:	636b      	str	r3, [r5, #52]	; 0x34
 8013fa0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8013fa2:	f102 0c10 	add.w	ip, r2, #16
 8013fa6:	f103 0410 	add.w	r4, r3, #16
 8013faa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fb0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8013fb4:	2500      	movs	r5, #0
 8013fb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013fba:	4628      	mov	r0, r5
 8013fbc:	bd70      	pop	{r4, r5, r6, pc}
 8013fbe:	250c      	movs	r5, #12
 8013fc0:	4628      	mov	r0, r5
 8013fc2:	bd70      	pop	{r4, r5, r6, pc}
 8013fc4:	2501      	movs	r5, #1
 8013fc6:	e7ca      	b.n	8013f5e <rmw_init_options_copy+0x1e>
 8013fc8:	08019488 	.word	0x08019488
 8013fcc:	2000e414 	.word	0x2000e414

08013fd0 <rmw_init_options_fini>:
 8013fd0:	2800      	cmp	r0, #0
 8013fd2:	d03d      	beq.n	8014050 <rmw_init_options_fini+0x80>
 8013fd4:	b510      	push	{r4, lr}
 8013fd6:	4604      	mov	r4, r0
 8013fd8:	b08e      	sub	sp, #56	; 0x38
 8013fda:	3020      	adds	r0, #32
 8013fdc:	f7f5 ff30 	bl	8009e40 <rcutils_allocator_is_valid>
 8013fe0:	b360      	cbz	r0, 801403c <rmw_init_options_fini+0x6c>
 8013fe2:	68a0      	ldr	r0, [r4, #8]
 8013fe4:	b120      	cbz	r0, 8013ff0 <rmw_init_options_fini+0x20>
 8013fe6:	4b1c      	ldr	r3, [pc, #112]	; (8014058 <rmw_init_options_fini+0x88>)
 8013fe8:	6819      	ldr	r1, [r3, #0]
 8013fea:	f7ec f911 	bl	8000210 <strcmp>
 8013fee:	bb68      	cbnz	r0, 801404c <rmw_init_options_fini+0x7c>
 8013ff0:	4b1a      	ldr	r3, [pc, #104]	; (801405c <rmw_init_options_fini+0x8c>)
 8013ff2:	6819      	ldr	r1, [r3, #0]
 8013ff4:	b331      	cbz	r1, 8014044 <rmw_init_options_fini+0x74>
 8013ff6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8013ff8:	e001      	b.n	8013ffe <rmw_init_options_fini+0x2e>
 8013ffa:	6849      	ldr	r1, [r1, #4]
 8013ffc:	b311      	cbz	r1, 8014044 <rmw_init_options_fini+0x74>
 8013ffe:	688b      	ldr	r3, [r1, #8]
 8014000:	429a      	cmp	r2, r3
 8014002:	d1fa      	bne.n	8013ffa <rmw_init_options_fini+0x2a>
 8014004:	4815      	ldr	r0, [pc, #84]	; (801405c <rmw_init_options_fini+0x8c>)
 8014006:	f7ff fead 	bl	8013d64 <put_memory>
 801400a:	4668      	mov	r0, sp
 801400c:	f7ff fd8c 	bl	8013b28 <rmw_get_zero_initialized_init_options>
 8014010:	46ee      	mov	lr, sp
 8014012:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014016:	46a4      	mov	ip, r4
 8014018:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801401c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014020:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014024:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014028:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801402c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014030:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014034:	2300      	movs	r3, #0
 8014036:	4618      	mov	r0, r3
 8014038:	b00e      	add	sp, #56	; 0x38
 801403a:	bd10      	pop	{r4, pc}
 801403c:	230b      	movs	r3, #11
 801403e:	4618      	mov	r0, r3
 8014040:	b00e      	add	sp, #56	; 0x38
 8014042:	bd10      	pop	{r4, pc}
 8014044:	2301      	movs	r3, #1
 8014046:	4618      	mov	r0, r3
 8014048:	b00e      	add	sp, #56	; 0x38
 801404a:	bd10      	pop	{r4, pc}
 801404c:	230c      	movs	r3, #12
 801404e:	e7f2      	b.n	8014036 <rmw_init_options_fini+0x66>
 8014050:	230b      	movs	r3, #11
 8014052:	4618      	mov	r0, r3
 8014054:	4770      	bx	lr
 8014056:	bf00      	nop
 8014058:	08019488 	.word	0x08019488
 801405c:	2000e414 	.word	0x2000e414

08014060 <rmw_init>:
 8014060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014064:	b083      	sub	sp, #12
 8014066:	2800      	cmp	r0, #0
 8014068:	f000 80d3 	beq.w	8014212 <rmw_init+0x1b2>
 801406c:	460e      	mov	r6, r1
 801406e:	2900      	cmp	r1, #0
 8014070:	f000 80cf 	beq.w	8014212 <rmw_init+0x1b2>
 8014074:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014076:	4605      	mov	r5, r0
 8014078:	2b00      	cmp	r3, #0
 801407a:	f000 80ca 	beq.w	8014212 <rmw_init+0x1b2>
 801407e:	4b78      	ldr	r3, [pc, #480]	; (8014260 <rmw_init+0x200>)
 8014080:	6880      	ldr	r0, [r0, #8]
 8014082:	681f      	ldr	r7, [r3, #0]
 8014084:	b128      	cbz	r0, 8014092 <rmw_init+0x32>
 8014086:	4639      	mov	r1, r7
 8014088:	f7ec f8c2 	bl	8000210 <strcmp>
 801408c:	2800      	cmp	r0, #0
 801408e:	f040 80ca 	bne.w	8014226 <rmw_init+0x1c6>
 8014092:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014096:	4c73      	ldr	r4, [pc, #460]	; (8014264 <rmw_init+0x204>)
 8014098:	4973      	ldr	r1, [pc, #460]	; (8014268 <rmw_init+0x208>)
 801409a:	4874      	ldr	r0, [pc, #464]	; (801426c <rmw_init+0x20c>)
 801409c:	60b7      	str	r7, [r6, #8]
 801409e:	e9c6 2300 	strd	r2, r3, [r6]
 80140a2:	68eb      	ldr	r3, [r5, #12]
 80140a4:	64b3      	str	r3, [r6, #72]	; 0x48
 80140a6:	2201      	movs	r2, #1
 80140a8:	f7f6 ff18 	bl	800aedc <rmw_uxrce_init_session_memory>
 80140ac:	4620      	mov	r0, r4
 80140ae:	4970      	ldr	r1, [pc, #448]	; (8014270 <rmw_init+0x210>)
 80140b0:	2204      	movs	r2, #4
 80140b2:	f7f6 ff53 	bl	800af5c <rmw_uxrce_init_static_input_buffer_memory>
 80140b6:	f04f 0800 	mov.w	r8, #0
 80140ba:	486c      	ldr	r0, [pc, #432]	; (801426c <rmw_init+0x20c>)
 80140bc:	f884 800d 	strb.w	r8, [r4, #13]
 80140c0:	f7ff fe40 	bl	8013d44 <get_memory>
 80140c4:	2800      	cmp	r0, #0
 80140c6:	f000 80a9 	beq.w	801421c <rmw_init+0x1bc>
 80140ca:	6884      	ldr	r4, [r0, #8]
 80140cc:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80140ce:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80140d0:	f890 c010 	ldrb.w	ip, [r0, #16]
 80140d4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80140d8:	9101      	str	r1, [sp, #4]
 80140da:	6a00      	ldr	r0, [r0, #32]
 80140dc:	9000      	str	r0, [sp, #0]
 80140de:	f104 0910 	add.w	r9, r4, #16
 80140e2:	4661      	mov	r1, ip
 80140e4:	4648      	mov	r0, r9
 80140e6:	f000 ffdb 	bl	80150a0 <uxr_set_custom_transport_callbacks>
 80140ea:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80140ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80140f2:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 80140f6:	f504 725e 	add.w	r2, r4, #888	; 0x378
 80140fa:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 80140fe:	495d      	ldr	r1, [pc, #372]	; (8014274 <rmw_init+0x214>)
 8014100:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8014104:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8014108:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 801410c:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8014110:	4859      	ldr	r0, [pc, #356]	; (8014278 <rmw_init+0x218>)
 8014112:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8014116:	2201      	movs	r2, #1
 8014118:	64f4      	str	r4, [r6, #76]	; 0x4c
 801411a:	f7f6 febf 	bl	800ae9c <rmw_uxrce_init_node_memory>
 801411e:	4957      	ldr	r1, [pc, #348]	; (801427c <rmw_init+0x21c>)
 8014120:	4857      	ldr	r0, [pc, #348]	; (8014280 <rmw_init+0x220>)
 8014122:	2205      	movs	r2, #5
 8014124:	f7f6 fe9a 	bl	800ae5c <rmw_uxrce_init_subscription_memory>
 8014128:	4956      	ldr	r1, [pc, #344]	; (8014284 <rmw_init+0x224>)
 801412a:	4857      	ldr	r0, [pc, #348]	; (8014288 <rmw_init+0x228>)
 801412c:	220a      	movs	r2, #10
 801412e:	f7f6 fe75 	bl	800ae1c <rmw_uxrce_init_publisher_memory>
 8014132:	4956      	ldr	r1, [pc, #344]	; (801428c <rmw_init+0x22c>)
 8014134:	4856      	ldr	r0, [pc, #344]	; (8014290 <rmw_init+0x230>)
 8014136:	2201      	movs	r2, #1
 8014138:	f7f6 fe30 	bl	800ad9c <rmw_uxrce_init_service_memory>
 801413c:	4955      	ldr	r1, [pc, #340]	; (8014294 <rmw_init+0x234>)
 801413e:	4856      	ldr	r0, [pc, #344]	; (8014298 <rmw_init+0x238>)
 8014140:	2201      	movs	r2, #1
 8014142:	f7f6 fe4b 	bl	800addc <rmw_uxrce_init_client_memory>
 8014146:	4955      	ldr	r1, [pc, #340]	; (801429c <rmw_init+0x23c>)
 8014148:	4855      	ldr	r0, [pc, #340]	; (80142a0 <rmw_init+0x240>)
 801414a:	220f      	movs	r2, #15
 801414c:	f7f6 fee6 	bl	800af1c <rmw_uxrce_init_topic_memory>
 8014150:	4954      	ldr	r1, [pc, #336]	; (80142a4 <rmw_init+0x244>)
 8014152:	4855      	ldr	r0, [pc, #340]	; (80142a8 <rmw_init+0x248>)
 8014154:	2203      	movs	r2, #3
 8014156:	f7f6 ff21 	bl	800af9c <rmw_uxrce_init_init_options_impl_memory>
 801415a:	4954      	ldr	r1, [pc, #336]	; (80142ac <rmw_init+0x24c>)
 801415c:	4854      	ldr	r0, [pc, #336]	; (80142b0 <rmw_init+0x250>)
 801415e:	2204      	movs	r2, #4
 8014160:	f7f6 ff3c 	bl	800afdc <rmw_uxrce_init_wait_set_memory>
 8014164:	4953      	ldr	r1, [pc, #332]	; (80142b4 <rmw_init+0x254>)
 8014166:	4854      	ldr	r0, [pc, #336]	; (80142b8 <rmw_init+0x258>)
 8014168:	2204      	movs	r2, #4
 801416a:	f7f6 ff57 	bl	800b01c <rmw_uxrce_init_guard_condition_memory>
 801416e:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8014170:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8014172:	4642      	mov	r2, r8
 8014174:	f000 faa0 	bl	80146b8 <rmw_uxrce_transport_init>
 8014178:	4607      	mov	r7, r0
 801417a:	2800      	cmp	r0, #0
 801417c:	d158      	bne.n	8014230 <rmw_init+0x1d0>
 801417e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8014180:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8014184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014186:	f504 7122 	add.w	r1, r4, #648	; 0x288
 801418a:	4628      	mov	r0, r5
 801418c:	f7fa fb9c 	bl	800e8c8 <uxr_init_session>
 8014190:	494a      	ldr	r1, [pc, #296]	; (80142bc <rmw_init+0x25c>)
 8014192:	4622      	mov	r2, r4
 8014194:	4628      	mov	r0, r5
 8014196:	f7fa fbbb 	bl	800e910 <uxr_set_topic_callback>
 801419a:	4949      	ldr	r1, [pc, #292]	; (80142c0 <rmw_init+0x260>)
 801419c:	463a      	mov	r2, r7
 801419e:	4628      	mov	r0, r5
 80141a0:	f7fa fbb2 	bl	800e908 <uxr_set_status_callback>
 80141a4:	4947      	ldr	r1, [pc, #284]	; (80142c4 <rmw_init+0x264>)
 80141a6:	463a      	mov	r2, r7
 80141a8:	4628      	mov	r0, r5
 80141aa:	f7fa fbb5 	bl	800e918 <uxr_set_request_callback>
 80141ae:	4946      	ldr	r1, [pc, #280]	; (80142c8 <rmw_init+0x268>)
 80141b0:	463a      	mov	r2, r7
 80141b2:	4628      	mov	r0, r5
 80141b4:	f7fa fbb4 	bl	800e920 <uxr_set_reply_callback>
 80141b8:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80141bc:	2304      	movs	r3, #4
 80141be:	0092      	lsls	r2, r2, #2
 80141c0:	f504 7165 	add.w	r1, r4, #916	; 0x394
 80141c4:	4628      	mov	r0, r5
 80141c6:	f7fa fbe9 	bl	800e99c <uxr_create_input_reliable_stream>
 80141ca:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80141ce:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 80141d2:	0092      	lsls	r2, r2, #2
 80141d4:	2304      	movs	r3, #4
 80141d6:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 80141da:	4628      	mov	r0, r5
 80141dc:	f7fa fbb6 	bl	800e94c <uxr_create_output_reliable_stream>
 80141e0:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 80141e4:	4628      	mov	r0, r5
 80141e6:	f7fa fbd3 	bl	800e990 <uxr_create_input_best_effort_stream>
 80141ea:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 80141ee:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 80141f2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80141f6:	3114      	adds	r1, #20
 80141f8:	4628      	mov	r0, r5
 80141fa:	f7fa fb95 	bl	800e928 <uxr_create_output_best_effort_stream>
 80141fe:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8014202:	4628      	mov	r0, r5
 8014204:	f7fb f920 	bl	800f448 <uxr_create_session>
 8014208:	b1f8      	cbz	r0, 801424a <rmw_init+0x1ea>
 801420a:	4638      	mov	r0, r7
 801420c:	b003      	add	sp, #12
 801420e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014212:	270b      	movs	r7, #11
 8014214:	4638      	mov	r0, r7
 8014216:	b003      	add	sp, #12
 8014218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801421c:	2701      	movs	r7, #1
 801421e:	4638      	mov	r0, r7
 8014220:	b003      	add	sp, #12
 8014222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014226:	270c      	movs	r7, #12
 8014228:	4638      	mov	r0, r7
 801422a:	b003      	add	sp, #12
 801422c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014230:	4648      	mov	r0, r9
 8014232:	f000 ff77 	bl	8015124 <uxr_close_custom_transport>
 8014236:	480d      	ldr	r0, [pc, #52]	; (801426c <rmw_init+0x20c>)
 8014238:	4621      	mov	r1, r4
 801423a:	f7ff fd93 	bl	8013d64 <put_memory>
 801423e:	4638      	mov	r0, r7
 8014240:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 8014244:	b003      	add	sp, #12
 8014246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801424a:	4648      	mov	r0, r9
 801424c:	f000 ff6a 	bl	8015124 <uxr_close_custom_transport>
 8014250:	4806      	ldr	r0, [pc, #24]	; (801426c <rmw_init+0x20c>)
 8014252:	4621      	mov	r1, r4
 8014254:	f7ff fd86 	bl	8013d64 <put_memory>
 8014258:	64f7      	str	r7, [r6, #76]	; 0x4c
 801425a:	2701      	movs	r7, #1
 801425c:	e7d5      	b.n	801420a <rmw_init+0x1aa>
 801425e:	bf00      	nop
 8014260:	08019488 	.word	0x08019488
 8014264:	2000e464 	.word	0x2000e464
 8014268:	2000a710 	.word	0x2000a710
 801426c:	2000e454 	.word	0x2000e454
 8014270:	2000bcb8 	.word	0x2000bcb8
 8014274:	20009d34 	.word	0x20009d34
 8014278:	2000e424 	.word	0x2000e424
 801427c:	2000ddb8 	.word	0x2000ddb8
 8014280:	2000e474 	.word	0x2000e474
 8014284:	20009dd8 	.word	0x20009dd8
 8014288:	2000e434 	.word	0x2000e434
 801428c:	2000a648 	.word	0x2000a648
 8014290:	2000e444 	.word	0x2000e444
 8014294:	20009b68 	.word	0x20009b68
 8014298:	20009b54 	.word	0x20009b54
 801429c:	2000e1f0 	.word	0x2000e1f0
 80142a0:	2000e484 	.word	0x2000e484
 80142a4:	20009cb0 	.word	0x20009cb0
 80142a8:	2000e414 	.word	0x2000e414
 80142ac:	2000e394 	.word	0x2000e394
 80142b0:	2000e494 	.word	0x2000e494
 80142b4:	20009c30 	.word	0x20009c30
 80142b8:	2000e404 	.word	0x2000e404
 80142bc:	080169fd 	.word	0x080169fd
 80142c0:	080169f5 	.word	0x080169f5
 80142c4:	08016a95 	.word	0x08016a95
 80142c8:	08016b31 	.word	0x08016b31

080142cc <rmw_context_fini>:
 80142cc:	4b17      	ldr	r3, [pc, #92]	; (801432c <rmw_context_fini+0x60>)
 80142ce:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80142d0:	b570      	push	{r4, r5, r6, lr}
 80142d2:	681c      	ldr	r4, [r3, #0]
 80142d4:	4605      	mov	r5, r0
 80142d6:	b334      	cbz	r4, 8014326 <rmw_context_fini+0x5a>
 80142d8:	2600      	movs	r6, #0
 80142da:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 80142de:	6902      	ldr	r2, [r0, #16]
 80142e0:	428a      	cmp	r2, r1
 80142e2:	d018      	beq.n	8014316 <rmw_context_fini+0x4a>
 80142e4:	2c00      	cmp	r4, #0
 80142e6:	d1f8      	bne.n	80142da <rmw_context_fini+0xe>
 80142e8:	b189      	cbz	r1, 801430e <rmw_context_fini+0x42>
 80142ea:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 80142ee:	789b      	ldrb	r3, [r3, #2]
 80142f0:	2b01      	cmp	r3, #1
 80142f2:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 80142f6:	bf14      	ite	ne
 80142f8:	210a      	movne	r1, #10
 80142fa:	2100      	moveq	r1, #0
 80142fc:	f7fb f87c 	bl	800f3f8 <uxr_delete_session_retries>
 8014300:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8014302:	f7f6 feab 	bl	800b05c <rmw_uxrce_fini_session_memory>
 8014306:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8014308:	3010      	adds	r0, #16
 801430a:	f000 ff0b 	bl	8015124 <uxr_close_custom_transport>
 801430e:	2300      	movs	r3, #0
 8014310:	64eb      	str	r3, [r5, #76]	; 0x4c
 8014312:	4630      	mov	r0, r6
 8014314:	bd70      	pop	{r4, r5, r6, pc}
 8014316:	3018      	adds	r0, #24
 8014318:	f7f6 f930 	bl	800a57c <rmw_destroy_node>
 801431c:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 801431e:	4606      	mov	r6, r0
 8014320:	2c00      	cmp	r4, #0
 8014322:	d1da      	bne.n	80142da <rmw_context_fini+0xe>
 8014324:	e7e0      	b.n	80142e8 <rmw_context_fini+0x1c>
 8014326:	4626      	mov	r6, r4
 8014328:	e7de      	b.n	80142e8 <rmw_context_fini+0x1c>
 801432a:	bf00      	nop
 801432c:	2000e424 	.word	0x2000e424

08014330 <create_topic>:
 8014330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014334:	4605      	mov	r5, r0
 8014336:	b084      	sub	sp, #16
 8014338:	4822      	ldr	r0, [pc, #136]	; (80143c4 <create_topic+0x94>)
 801433a:	460f      	mov	r7, r1
 801433c:	4616      	mov	r6, r2
 801433e:	f7ff fd01 	bl	8013d44 <get_memory>
 8014342:	4604      	mov	r4, r0
 8014344:	2800      	cmp	r0, #0
 8014346:	d039      	beq.n	80143bc <create_topic+0x8c>
 8014348:	692b      	ldr	r3, [r5, #16]
 801434a:	6884      	ldr	r4, [r0, #8]
 801434c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80143cc <create_topic+0x9c>
 8014350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014354:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8014358:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 801435c:	1c42      	adds	r2, r0, #1
 801435e:	2102      	movs	r1, #2
 8014360:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 8014364:	f7fa f8c2 	bl	800e4ec <uxr_object_id>
 8014368:	223c      	movs	r2, #60	; 0x3c
 801436a:	6120      	str	r0, [r4, #16]
 801436c:	4641      	mov	r1, r8
 801436e:	4638      	mov	r0, r7
 8014370:	f7f7 f852 	bl	800b418 <generate_topic_name>
 8014374:	b1f0      	cbz	r0, 80143b4 <create_topic+0x84>
 8014376:	4f14      	ldr	r7, [pc, #80]	; (80143c8 <create_topic+0x98>)
 8014378:	4630      	mov	r0, r6
 801437a:	2264      	movs	r2, #100	; 0x64
 801437c:	4639      	mov	r1, r7
 801437e:	f7f7 f81b 	bl	800b3b8 <generate_type_name>
 8014382:	b1b8      	cbz	r0, 80143b4 <create_topic+0x84>
 8014384:	6928      	ldr	r0, [r5, #16]
 8014386:	2306      	movs	r3, #6
 8014388:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801438c:	f8cd 8000 	str.w	r8, [sp]
 8014390:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8014394:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014398:	6811      	ldr	r1, [r2, #0]
 801439a:	696b      	ldr	r3, [r5, #20]
 801439c:	6922      	ldr	r2, [r4, #16]
 801439e:	f7f9 ff21 	bl	800e1e4 <uxr_buffer_create_topic_bin>
 80143a2:	4602      	mov	r2, r0
 80143a4:	6928      	ldr	r0, [r5, #16]
 80143a6:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80143aa:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80143ae:	f7f6 ffcd 	bl	800b34c <run_xrce_session>
 80143b2:	b918      	cbnz	r0, 80143bc <create_topic+0x8c>
 80143b4:	4620      	mov	r0, r4
 80143b6:	f7f6 fec7 	bl	800b148 <rmw_uxrce_fini_topic_memory>
 80143ba:	2400      	movs	r4, #0
 80143bc:	4620      	mov	r0, r4
 80143be:	b004      	add	sp, #16
 80143c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143c4:	2000e484 	.word	0x2000e484
 80143c8:	2000e514 	.word	0x2000e514
 80143cc:	2000e4d8 	.word	0x2000e4d8

080143d0 <destroy_topic>:
 80143d0:	b538      	push	{r3, r4, r5, lr}
 80143d2:	6985      	ldr	r5, [r0, #24]
 80143d4:	b1d5      	cbz	r5, 801440c <destroy_topic+0x3c>
 80143d6:	4604      	mov	r4, r0
 80143d8:	6928      	ldr	r0, [r5, #16]
 80143da:	6922      	ldr	r2, [r4, #16]
 80143dc:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80143e0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80143e4:	6819      	ldr	r1, [r3, #0]
 80143e6:	f7f9 fe7f 	bl	800e0e8 <uxr_buffer_delete_entity>
 80143ea:	4602      	mov	r2, r0
 80143ec:	6928      	ldr	r0, [r5, #16]
 80143ee:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80143f2:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80143f6:	f7f6 ffa9 	bl	800b34c <run_xrce_session>
 80143fa:	2800      	cmp	r0, #0
 80143fc:	4620      	mov	r0, r4
 80143fe:	bf14      	ite	ne
 8014400:	2400      	movne	r4, #0
 8014402:	2402      	moveq	r4, #2
 8014404:	f7f6 fea0 	bl	800b148 <rmw_uxrce_fini_topic_memory>
 8014408:	4620      	mov	r0, r4
 801440a:	bd38      	pop	{r3, r4, r5, pc}
 801440c:	2401      	movs	r4, #1
 801440e:	4620      	mov	r0, r4
 8014410:	bd38      	pop	{r3, r4, r5, pc}
 8014412:	bf00      	nop

08014414 <rmw_send_request>:
 8014414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014418:	4604      	mov	r4, r0
 801441a:	6800      	ldr	r0, [r0, #0]
 801441c:	b08b      	sub	sp, #44	; 0x2c
 801441e:	460e      	mov	r6, r1
 8014420:	4615      	mov	r5, r2
 8014422:	b128      	cbz	r0, 8014430 <rmw_send_request+0x1c>
 8014424:	4b21      	ldr	r3, [pc, #132]	; (80144ac <rmw_send_request+0x98>)
 8014426:	6819      	ldr	r1, [r3, #0]
 8014428:	f7eb fef2 	bl	8000210 <strcmp>
 801442c:	2800      	cmp	r0, #0
 801442e:	d139      	bne.n	80144a4 <rmw_send_request+0x90>
 8014430:	6864      	ldr	r4, [r4, #4]
 8014432:	6963      	ldr	r3, [r4, #20]
 8014434:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 8014438:	689b      	ldr	r3, [r3, #8]
 801443a:	4798      	blx	r3
 801443c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8014440:	4630      	mov	r0, r6
 8014442:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014446:	4798      	blx	r3
 8014448:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801444c:	9000      	str	r0, [sp, #0]
 801444e:	6922      	ldr	r2, [r4, #16]
 8014450:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8014452:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8014456:	ab02      	add	r3, sp, #8
 8014458:	f7fb fc72 	bl	800fd40 <uxr_prepare_output_stream>
 801445c:	2700      	movs	r7, #0
 801445e:	6028      	str	r0, [r5, #0]
 8014460:	606f      	str	r7, [r5, #4]
 8014462:	b198      	cbz	r0, 801448c <rmw_send_request+0x78>
 8014464:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014468:	a902      	add	r1, sp, #8
 801446a:	4630      	mov	r0, r6
 801446c:	4798      	blx	r3
 801446e:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8014472:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8014476:	2b01      	cmp	r3, #1
 8014478:	d00c      	beq.n	8014494 <rmw_send_request+0x80>
 801447a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 801447c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014480:	f7fa fe72 	bl	800f168 <uxr_run_session_until_confirm_delivery>
 8014484:	4638      	mov	r0, r7
 8014486:	b00b      	add	sp, #44	; 0x2c
 8014488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801448c:	2001      	movs	r0, #1
 801448e:	b00b      	add	sp, #44	; 0x2c
 8014490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014494:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014498:	f7fa faa6 	bl	800e9e8 <uxr_flash_output_streams>
 801449c:	4638      	mov	r0, r7
 801449e:	b00b      	add	sp, #44	; 0x2c
 80144a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144a4:	200c      	movs	r0, #12
 80144a6:	b00b      	add	sp, #44	; 0x2c
 80144a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144ac:	08019488 	.word	0x08019488

080144b0 <rmw_take_request>:
 80144b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80144b4:	4605      	mov	r5, r0
 80144b6:	6800      	ldr	r0, [r0, #0]
 80144b8:	b089      	sub	sp, #36	; 0x24
 80144ba:	460c      	mov	r4, r1
 80144bc:	4690      	mov	r8, r2
 80144be:	461e      	mov	r6, r3
 80144c0:	b128      	cbz	r0, 80144ce <rmw_take_request+0x1e>
 80144c2:	4b28      	ldr	r3, [pc, #160]	; (8014564 <rmw_take_request+0xb4>)
 80144c4:	6819      	ldr	r1, [r3, #0]
 80144c6:	f7eb fea3 	bl	8000210 <strcmp>
 80144ca:	2800      	cmp	r0, #0
 80144cc:	d146      	bne.n	801455c <rmw_take_request+0xac>
 80144ce:	b10e      	cbz	r6, 80144d4 <rmw_take_request+0x24>
 80144d0:	2300      	movs	r3, #0
 80144d2:	7033      	strb	r3, [r6, #0]
 80144d4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80144d8:	f7f6 feba 	bl	800b250 <rmw_uxrce_clean_expired_static_input_buffer>
 80144dc:	4648      	mov	r0, r9
 80144de:	f7f6 fe8f 	bl	800b200 <rmw_uxrce_find_static_input_buffer_by_owner>
 80144e2:	4607      	mov	r7, r0
 80144e4:	b3b0      	cbz	r0, 8014554 <rmw_take_request+0xa4>
 80144e6:	6885      	ldr	r5, [r0, #8]
 80144e8:	f8d5 3838 	ldr.w	r3, [r5, #2104]	; 0x838
 80144ec:	f8d5 283c 	ldr.w	r2, [r5, #2108]	; 0x83c
 80144f0:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80144f4:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 80144f8:	7423      	strb	r3, [r4, #16]
 80144fa:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 80144fe:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 8014502:	74e2      	strb	r2, [r4, #19]
 8014504:	f8a4 3011 	strh.w	r3, [r4, #17]
 8014508:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 801450c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 8014510:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 8014514:	61e1      	str	r1, [r4, #28]
 8014516:	6162      	str	r2, [r4, #20]
 8014518:	61a3      	str	r3, [r4, #24]
 801451a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801451e:	689b      	ldr	r3, [r3, #8]
 8014520:	4798      	blx	r3
 8014522:	6844      	ldr	r4, [r0, #4]
 8014524:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8014528:	f105 0110 	add.w	r1, r5, #16
 801452c:	4668      	mov	r0, sp
 801452e:	f7f9 fce7 	bl	800df00 <ucdr_init_buffer>
 8014532:	68e3      	ldr	r3, [r4, #12]
 8014534:	4641      	mov	r1, r8
 8014536:	4668      	mov	r0, sp
 8014538:	4798      	blx	r3
 801453a:	4639      	mov	r1, r7
 801453c:	4604      	mov	r4, r0
 801453e:	480a      	ldr	r0, [pc, #40]	; (8014568 <rmw_take_request+0xb8>)
 8014540:	f7ff fc10 	bl	8013d64 <put_memory>
 8014544:	b106      	cbz	r6, 8014548 <rmw_take_request+0x98>
 8014546:	7034      	strb	r4, [r6, #0]
 8014548:	f084 0001 	eor.w	r0, r4, #1
 801454c:	b2c0      	uxtb	r0, r0
 801454e:	b009      	add	sp, #36	; 0x24
 8014550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014554:	2001      	movs	r0, #1
 8014556:	b009      	add	sp, #36	; 0x24
 8014558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801455c:	200c      	movs	r0, #12
 801455e:	b009      	add	sp, #36	; 0x24
 8014560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014564:	08019488 	.word	0x08019488
 8014568:	2000e464 	.word	0x2000e464

0801456c <rmw_send_response>:
 801456c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801456e:	4605      	mov	r5, r0
 8014570:	6800      	ldr	r0, [r0, #0]
 8014572:	b091      	sub	sp, #68	; 0x44
 8014574:	460c      	mov	r4, r1
 8014576:	4616      	mov	r6, r2
 8014578:	b128      	cbz	r0, 8014586 <rmw_send_response+0x1a>
 801457a:	4b29      	ldr	r3, [pc, #164]	; (8014620 <rmw_send_response+0xb4>)
 801457c:	6819      	ldr	r1, [r3, #0]
 801457e:	f7eb fe47 	bl	8000210 <strcmp>
 8014582:	2800      	cmp	r0, #0
 8014584:	d141      	bne.n	801460a <rmw_send_response+0x9e>
 8014586:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801458a:	9306      	str	r3, [sp, #24]
 801458c:	4623      	mov	r3, r4
 801458e:	9207      	str	r2, [sp, #28]
 8014590:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014594:	686d      	ldr	r5, [r5, #4]
 8014596:	789b      	ldrb	r3, [r3, #2]
 8014598:	68a1      	ldr	r1, [r4, #8]
 801459a:	f88d 2017 	strb.w	r2, [sp, #23]
 801459e:	f88d 3016 	strb.w	r3, [sp, #22]
 80145a2:	68e2      	ldr	r2, [r4, #12]
 80145a4:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80145a8:	6860      	ldr	r0, [r4, #4]
 80145aa:	f8ad 3014 	strh.w	r3, [sp, #20]
 80145ae:	ab02      	add	r3, sp, #8
 80145b0:	c307      	stmia	r3!, {r0, r1, r2}
 80145b2:	696b      	ldr	r3, [r5, #20]
 80145b4:	6faf      	ldr	r7, [r5, #120]	; 0x78
 80145b6:	68db      	ldr	r3, [r3, #12]
 80145b8:	4798      	blx	r3
 80145ba:	6844      	ldr	r4, [r0, #4]
 80145bc:	4630      	mov	r0, r6
 80145be:	6923      	ldr	r3, [r4, #16]
 80145c0:	4798      	blx	r3
 80145c2:	f100 0318 	add.w	r3, r0, #24
 80145c6:	6938      	ldr	r0, [r7, #16]
 80145c8:	9300      	str	r3, [sp, #0]
 80145ca:	692a      	ldr	r2, [r5, #16]
 80145cc:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80145ce:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80145d2:	ab08      	add	r3, sp, #32
 80145d4:	f7fb fbb4 	bl	800fd40 <uxr_prepare_output_stream>
 80145d8:	b910      	cbnz	r0, 80145e0 <rmw_send_response+0x74>
 80145da:	2001      	movs	r0, #1
 80145dc:	b011      	add	sp, #68	; 0x44
 80145de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145e0:	a902      	add	r1, sp, #8
 80145e2:	a808      	add	r0, sp, #32
 80145e4:	f7fc fce4 	bl	8010fb0 <uxr_serialize_SampleIdentity>
 80145e8:	68a3      	ldr	r3, [r4, #8]
 80145ea:	a908      	add	r1, sp, #32
 80145ec:	4630      	mov	r0, r6
 80145ee:	4798      	blx	r3
 80145f0:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 80145f4:	6938      	ldr	r0, [r7, #16]
 80145f6:	2b01      	cmp	r3, #1
 80145f8:	d00a      	beq.n	8014610 <rmw_send_response+0xa4>
 80145fa:	6f69      	ldr	r1, [r5, #116]	; 0x74
 80145fc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014600:	f7fa fdb2 	bl	800f168 <uxr_run_session_until_confirm_delivery>
 8014604:	2000      	movs	r0, #0
 8014606:	b011      	add	sp, #68	; 0x44
 8014608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801460a:	200c      	movs	r0, #12
 801460c:	b011      	add	sp, #68	; 0x44
 801460e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014610:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014614:	f7fa f9e8 	bl	800e9e8 <uxr_flash_output_streams>
 8014618:	2000      	movs	r0, #0
 801461a:	b011      	add	sp, #68	; 0x44
 801461c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801461e:	bf00      	nop
 8014620:	08019488 	.word	0x08019488

08014624 <rmw_take_response>:
 8014624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014628:	4604      	mov	r4, r0
 801462a:	6800      	ldr	r0, [r0, #0]
 801462c:	b088      	sub	sp, #32
 801462e:	4688      	mov	r8, r1
 8014630:	4617      	mov	r7, r2
 8014632:	461d      	mov	r5, r3
 8014634:	b120      	cbz	r0, 8014640 <rmw_take_response+0x1c>
 8014636:	4b1e      	ldr	r3, [pc, #120]	; (80146b0 <rmw_take_response+0x8c>)
 8014638:	6819      	ldr	r1, [r3, #0]
 801463a:	f7eb fde9 	bl	8000210 <strcmp>
 801463e:	bb78      	cbnz	r0, 80146a0 <rmw_take_response+0x7c>
 8014640:	b10d      	cbz	r5, 8014646 <rmw_take_response+0x22>
 8014642:	2300      	movs	r3, #0
 8014644:	702b      	strb	r3, [r5, #0]
 8014646:	6864      	ldr	r4, [r4, #4]
 8014648:	f7f6 fe02 	bl	800b250 <rmw_uxrce_clean_expired_static_input_buffer>
 801464c:	4620      	mov	r0, r4
 801464e:	f7f6 fdd7 	bl	800b200 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014652:	4606      	mov	r6, r0
 8014654:	b340      	cbz	r0, 80146a8 <rmw_take_response+0x84>
 8014656:	6963      	ldr	r3, [r4, #20]
 8014658:	6884      	ldr	r4, [r0, #8]
 801465a:	68db      	ldr	r3, [r3, #12]
 801465c:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 8014660:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8014664:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8014668:	4798      	blx	r3
 801466a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801466e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8014672:	f104 0110 	add.w	r1, r4, #16
 8014676:	4668      	mov	r0, sp
 8014678:	f7f9 fc42 	bl	800df00 <ucdr_init_buffer>
 801467c:	4639      	mov	r1, r7
 801467e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014682:	4668      	mov	r0, sp
 8014684:	4798      	blx	r3
 8014686:	4631      	mov	r1, r6
 8014688:	4604      	mov	r4, r0
 801468a:	480a      	ldr	r0, [pc, #40]	; (80146b4 <rmw_take_response+0x90>)
 801468c:	f7ff fb6a 	bl	8013d64 <put_memory>
 8014690:	b105      	cbz	r5, 8014694 <rmw_take_response+0x70>
 8014692:	702c      	strb	r4, [r5, #0]
 8014694:	f084 0001 	eor.w	r0, r4, #1
 8014698:	b2c0      	uxtb	r0, r0
 801469a:	b008      	add	sp, #32
 801469c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146a0:	200c      	movs	r0, #12
 80146a2:	b008      	add	sp, #32
 80146a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146a8:	2001      	movs	r0, #1
 80146aa:	b008      	add	sp, #32
 80146ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146b0:	08019488 	.word	0x08019488
 80146b4:	2000e464 	.word	0x2000e464

080146b8 <rmw_uxrce_transport_init>:
 80146b8:	b508      	push	{r3, lr}
 80146ba:	b108      	cbz	r0, 80146c0 <rmw_uxrce_transport_init+0x8>
 80146bc:	f100 0210 	add.w	r2, r0, #16
 80146c0:	b139      	cbz	r1, 80146d2 <rmw_uxrce_transport_init+0x1a>
 80146c2:	6949      	ldr	r1, [r1, #20]
 80146c4:	4610      	mov	r0, r2
 80146c6:	f000 fcf9 	bl	80150bc <uxr_init_custom_transport>
 80146ca:	f080 0001 	eor.w	r0, r0, #1
 80146ce:	b2c0      	uxtb	r0, r0
 80146d0:	bd08      	pop	{r3, pc}
 80146d2:	4b04      	ldr	r3, [pc, #16]	; (80146e4 <rmw_uxrce_transport_init+0x2c>)
 80146d4:	4610      	mov	r0, r2
 80146d6:	6859      	ldr	r1, [r3, #4]
 80146d8:	f000 fcf0 	bl	80150bc <uxr_init_custom_transport>
 80146dc:	f080 0001 	eor.w	r0, r0, #1
 80146e0:	b2c0      	uxtb	r0, r0
 80146e2:	bd08      	pop	{r3, pc}
 80146e4:	20009afc 	.word	0x20009afc

080146e8 <rmw_wait>:
 80146e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80146ec:	b089      	sub	sp, #36	; 0x24
 80146ee:	4605      	mov	r5, r0
 80146f0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80146f2:	460e      	mov	r6, r1
 80146f4:	4698      	mov	r8, r3
 80146f6:	4691      	mov	r9, r2
 80146f8:	2a00      	cmp	r2, #0
 80146fa:	f000 810a 	beq.w	8014912 <rmw_wait+0x22a>
 80146fe:	b16c      	cbz	r4, 801471c <rmw_wait+0x34>
 8014700:	4bae      	ldr	r3, [pc, #696]	; (80149bc <rmw_wait+0x2d4>)
 8014702:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014704:	af04      	add	r7, sp, #16
 8014706:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801470a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801470e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014712:	f7ff fa1d 	bl	8013b50 <rmw_time_equal>
 8014716:	2800      	cmp	r0, #0
 8014718:	f000 8127 	beq.w	801496a <rmw_wait+0x282>
 801471c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014720:	f7f6 fd96 	bl	800b250 <rmw_uxrce_clean_expired_static_input_buffer>
 8014724:	4ba6      	ldr	r3, [pc, #664]	; (80149c0 <rmw_wait+0x2d8>)
 8014726:	681c      	ldr	r4, [r3, #0]
 8014728:	b14c      	cbz	r4, 801473e <rmw_wait+0x56>
 801472a:	4623      	mov	r3, r4
 801472c:	2100      	movs	r1, #0
 801472e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8014732:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8014736:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 801473a:	2b00      	cmp	r3, #0
 801473c:	d1f7      	bne.n	801472e <rmw_wait+0x46>
 801473e:	f1b9 0f00 	cmp.w	r9, #0
 8014742:	d011      	beq.n	8014768 <rmw_wait+0x80>
 8014744:	f8d9 1000 	ldr.w	r1, [r9]
 8014748:	b171      	cbz	r1, 8014768 <rmw_wait+0x80>
 801474a:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801474e:	2300      	movs	r3, #0
 8014750:	2001      	movs	r0, #1
 8014752:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014756:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8014758:	6912      	ldr	r2, [r2, #16]
 801475a:	3301      	adds	r3, #1
 801475c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8014760:	4299      	cmp	r1, r3
 8014762:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8014766:	d1f4      	bne.n	8014752 <rmw_wait+0x6a>
 8014768:	f1b8 0f00 	cmp.w	r8, #0
 801476c:	d011      	beq.n	8014792 <rmw_wait+0xaa>
 801476e:	f8d8 1000 	ldr.w	r1, [r8]
 8014772:	b171      	cbz	r1, 8014792 <rmw_wait+0xaa>
 8014774:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8014778:	2300      	movs	r3, #0
 801477a:	2001      	movs	r0, #1
 801477c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014780:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8014782:	6912      	ldr	r2, [r2, #16]
 8014784:	3301      	adds	r3, #1
 8014786:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801478a:	4299      	cmp	r1, r3
 801478c:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8014790:	d1f4      	bne.n	801477c <rmw_wait+0x94>
 8014792:	b185      	cbz	r5, 80147b6 <rmw_wait+0xce>
 8014794:	6829      	ldr	r1, [r5, #0]
 8014796:	b171      	cbz	r1, 80147b6 <rmw_wait+0xce>
 8014798:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801479c:	2300      	movs	r3, #0
 801479e:	2001      	movs	r0, #1
 80147a0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80147a4:	6a12      	ldr	r2, [r2, #32]
 80147a6:	6912      	ldr	r2, [r2, #16]
 80147a8:	3301      	adds	r3, #1
 80147aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80147ae:	4299      	cmp	r1, r3
 80147b0:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 80147b4:	d1f4      	bne.n	80147a0 <rmw_wait+0xb8>
 80147b6:	b34c      	cbz	r4, 801480c <rmw_wait+0x124>
 80147b8:	4622      	mov	r2, r4
 80147ba:	2300      	movs	r3, #0
 80147bc:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80147c0:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80147c4:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 80147c8:	440b      	add	r3, r1
 80147ca:	b2db      	uxtb	r3, r3
 80147cc:	2a00      	cmp	r2, #0
 80147ce:	d1f5      	bne.n	80147bc <rmw_wait+0xd4>
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	f000 8084 	beq.w	80148de <rmw_wait+0x1f6>
 80147d6:	1c7a      	adds	r2, r7, #1
 80147d8:	d00d      	beq.n	80147f6 <rmw_wait+0x10e>
 80147da:	ee07 7a90 	vmov	s15, r7
 80147de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80147e2:	ee07 3a90 	vmov	s15, r3
 80147e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80147ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80147ee:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80147f2:	ee17 7a90 	vmov	r7, s15
 80147f6:	68a0      	ldr	r0, [r4, #8]
 80147f8:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 80147fc:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 8014800:	2b00      	cmp	r3, #0
 8014802:	f040 8090 	bne.w	8014926 <rmw_wait+0x23e>
 8014806:	6864      	ldr	r4, [r4, #4]
 8014808:	2c00      	cmp	r4, #0
 801480a:	d1f4      	bne.n	80147f6 <rmw_wait+0x10e>
 801480c:	f1b9 0f00 	cmp.w	r9, #0
 8014810:	f000 80bc 	beq.w	801498c <rmw_wait+0x2a4>
 8014814:	f8d9 7000 	ldr.w	r7, [r9]
 8014818:	2f00      	cmp	r7, #0
 801481a:	f000 808e 	beq.w	801493a <rmw_wait+0x252>
 801481e:	2400      	movs	r4, #0
 8014820:	4627      	mov	r7, r4
 8014822:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014826:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801482a:	f7f6 fce9 	bl	800b200 <rmw_uxrce_find_static_input_buffer_by_owner>
 801482e:	2800      	cmp	r0, #0
 8014830:	d05f      	beq.n	80148f2 <rmw_wait+0x20a>
 8014832:	f8d9 3000 	ldr.w	r3, [r9]
 8014836:	3401      	adds	r4, #1
 8014838:	42a3      	cmp	r3, r4
 801483a:	f04f 0701 	mov.w	r7, #1
 801483e:	d8f0      	bhi.n	8014822 <rmw_wait+0x13a>
 8014840:	f1b8 0f00 	cmp.w	r8, #0
 8014844:	d012      	beq.n	801486c <rmw_wait+0x184>
 8014846:	f8d8 3000 	ldr.w	r3, [r8]
 801484a:	b17b      	cbz	r3, 801486c <rmw_wait+0x184>
 801484c:	2400      	movs	r4, #0
 801484e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014852:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014856:	f7f6 fcd3 	bl	800b200 <rmw_uxrce_find_static_input_buffer_by_owner>
 801485a:	2800      	cmp	r0, #0
 801485c:	d051      	beq.n	8014902 <rmw_wait+0x21a>
 801485e:	f8d8 3000 	ldr.w	r3, [r8]
 8014862:	3401      	adds	r4, #1
 8014864:	42a3      	cmp	r3, r4
 8014866:	f04f 0701 	mov.w	r7, #1
 801486a:	d8f0      	bhi.n	801484e <rmw_wait+0x166>
 801486c:	b1dd      	cbz	r5, 80148a6 <rmw_wait+0x1be>
 801486e:	682b      	ldr	r3, [r5, #0]
 8014870:	b1cb      	cbz	r3, 80148a6 <rmw_wait+0x1be>
 8014872:	2400      	movs	r4, #0
 8014874:	686b      	ldr	r3, [r5, #4]
 8014876:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801487a:	f7f6 fcc1 	bl	800b200 <rmw_uxrce_find_static_input_buffer_by_owner>
 801487e:	b158      	cbz	r0, 8014898 <rmw_wait+0x1b0>
 8014880:	682b      	ldr	r3, [r5, #0]
 8014882:	3401      	adds	r4, #1
 8014884:	42a3      	cmp	r3, r4
 8014886:	d969      	bls.n	801495c <rmw_wait+0x274>
 8014888:	686b      	ldr	r3, [r5, #4]
 801488a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801488e:	2701      	movs	r7, #1
 8014890:	f7f6 fcb6 	bl	800b200 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014894:	2800      	cmp	r0, #0
 8014896:	d1f3      	bne.n	8014880 <rmw_wait+0x198>
 8014898:	e9d5 3200 	ldrd	r3, r2, [r5]
 801489c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80148a0:	3401      	adds	r4, #1
 80148a2:	42a3      	cmp	r3, r4
 80148a4:	d8e6      	bhi.n	8014874 <rmw_wait+0x18c>
 80148a6:	b1a6      	cbz	r6, 80148d2 <rmw_wait+0x1ea>
 80148a8:	6834      	ldr	r4, [r6, #0]
 80148aa:	b194      	cbz	r4, 80148d2 <rmw_wait+0x1ea>
 80148ac:	2300      	movs	r3, #0
 80148ae:	461d      	mov	r5, r3
 80148b0:	e004      	b.n	80148bc <rmw_wait+0x1d4>
 80148b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80148b6:	3301      	adds	r3, #1
 80148b8:	42a3      	cmp	r3, r4
 80148ba:	d00a      	beq.n	80148d2 <rmw_wait+0x1ea>
 80148bc:	6870      	ldr	r0, [r6, #4]
 80148be:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80148c2:	7c0a      	ldrb	r2, [r1, #16]
 80148c4:	2a00      	cmp	r2, #0
 80148c6:	d0f4      	beq.n	80148b2 <rmw_wait+0x1ca>
 80148c8:	3301      	adds	r3, #1
 80148ca:	42a3      	cmp	r3, r4
 80148cc:	740d      	strb	r5, [r1, #16]
 80148ce:	4617      	mov	r7, r2
 80148d0:	d1f4      	bne.n	80148bc <rmw_wait+0x1d4>
 80148d2:	2f00      	cmp	r7, #0
 80148d4:	d03e      	beq.n	8014954 <rmw_wait+0x26c>
 80148d6:	2000      	movs	r0, #0
 80148d8:	b009      	add	sp, #36	; 0x24
 80148da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80148de:	68a0      	ldr	r0, [r4, #8]
 80148e0:	2100      	movs	r1, #0
 80148e2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80148e6:	f7fa fc05 	bl	800f0f4 <uxr_run_session_timeout>
 80148ea:	6864      	ldr	r4, [r4, #4]
 80148ec:	2c00      	cmp	r4, #0
 80148ee:	d1f6      	bne.n	80148de <rmw_wait+0x1f6>
 80148f0:	e78c      	b.n	801480c <rmw_wait+0x124>
 80148f2:	e9d9 3200 	ldrd	r3, r2, [r9]
 80148f6:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80148fa:	3401      	adds	r4, #1
 80148fc:	42a3      	cmp	r3, r4
 80148fe:	d890      	bhi.n	8014822 <rmw_wait+0x13a>
 8014900:	e79e      	b.n	8014840 <rmw_wait+0x158>
 8014902:	e9d8 3200 	ldrd	r3, r2, [r8]
 8014906:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801490a:	3401      	adds	r4, #1
 801490c:	429c      	cmp	r4, r3
 801490e:	d39e      	bcc.n	801484e <rmw_wait+0x166>
 8014910:	e7ac      	b.n	801486c <rmw_wait+0x184>
 8014912:	2b00      	cmp	r3, #0
 8014914:	f47f aef3 	bne.w	80146fe <rmw_wait+0x16>
 8014918:	2800      	cmp	r0, #0
 801491a:	f47f aef0 	bne.w	80146fe <rmw_wait+0x16>
 801491e:	2900      	cmp	r1, #0
 8014920:	f47f aeed 	bne.w	80146fe <rmw_wait+0x16>
 8014924:	e7d7      	b.n	80148d6 <rmw_wait+0x1ee>
 8014926:	4639      	mov	r1, r7
 8014928:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801492c:	f7fa fbfc 	bl	800f128 <uxr_run_session_until_data>
 8014930:	6864      	ldr	r4, [r4, #4]
 8014932:	2c00      	cmp	r4, #0
 8014934:	f47f af5f 	bne.w	80147f6 <rmw_wait+0x10e>
 8014938:	e768      	b.n	801480c <rmw_wait+0x124>
 801493a:	f1b8 0f00 	cmp.w	r8, #0
 801493e:	d032      	beq.n	80149a6 <rmw_wait+0x2be>
 8014940:	f8d8 3000 	ldr.w	r3, [r8]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d181      	bne.n	801484c <rmw_wait+0x164>
 8014948:	461f      	mov	r7, r3
 801494a:	2d00      	cmp	r5, #0
 801494c:	d18f      	bne.n	801486e <rmw_wait+0x186>
 801494e:	462f      	mov	r7, r5
 8014950:	2e00      	cmp	r6, #0
 8014952:	d1a9      	bne.n	80148a8 <rmw_wait+0x1c0>
 8014954:	2002      	movs	r0, #2
 8014956:	b009      	add	sp, #36	; 0x24
 8014958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801495c:	2e00      	cmp	r6, #0
 801495e:	d0ba      	beq.n	80148d6 <rmw_wait+0x1ee>
 8014960:	6834      	ldr	r4, [r6, #0]
 8014962:	2701      	movs	r7, #1
 8014964:	2c00      	cmp	r4, #0
 8014966:	d1a1      	bne.n	80148ac <rmw_wait+0x1c4>
 8014968:	e7b5      	b.n	80148d6 <rmw_wait+0x1ee>
 801496a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801496e:	f7ff f943 	bl	8013bf8 <rmw_time_total_nsec>
 8014972:	2300      	movs	r3, #0
 8014974:	4a13      	ldr	r2, [pc, #76]	; (80149c4 <rmw_wait+0x2dc>)
 8014976:	f7eb fd03 	bl	8000380 <__aeabi_uldivmod>
 801497a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801497e:	f171 0300 	sbcs.w	r3, r1, #0
 8014982:	4607      	mov	r7, r0
 8014984:	bfa8      	it	ge
 8014986:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 801498a:	e6c9      	b.n	8014720 <rmw_wait+0x38>
 801498c:	f1b8 0f00 	cmp.w	r8, #0
 8014990:	d009      	beq.n	80149a6 <rmw_wait+0x2be>
 8014992:	f8d8 3000 	ldr.w	r3, [r8]
 8014996:	464f      	mov	r7, r9
 8014998:	2b00      	cmp	r3, #0
 801499a:	f47f af57 	bne.w	801484c <rmw_wait+0x164>
 801499e:	2d00      	cmp	r5, #0
 80149a0:	f47f af65 	bne.w	801486e <rmw_wait+0x186>
 80149a4:	e7d3      	b.n	801494e <rmw_wait+0x266>
 80149a6:	b17d      	cbz	r5, 80149c8 <rmw_wait+0x2e0>
 80149a8:	682b      	ldr	r3, [r5, #0]
 80149aa:	4647      	mov	r7, r8
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	f47f af60 	bne.w	8014872 <rmw_wait+0x18a>
 80149b2:	2e00      	cmp	r6, #0
 80149b4:	f47f af78 	bne.w	80148a8 <rmw_wait+0x1c0>
 80149b8:	e7cc      	b.n	8014954 <rmw_wait+0x26c>
 80149ba:	bf00      	nop
 80149bc:	080186c0 	.word	0x080186c0
 80149c0:	2000e454 	.word	0x2000e454
 80149c4:	000f4240 	.word	0x000f4240
 80149c8:	2e00      	cmp	r6, #0
 80149ca:	d0c3      	beq.n	8014954 <rmw_wait+0x26c>
 80149cc:	6834      	ldr	r4, [r6, #0]
 80149ce:	462f      	mov	r7, r5
 80149d0:	2c00      	cmp	r4, #0
 80149d2:	f47f af6b 	bne.w	80148ac <rmw_wait+0x1c4>
 80149d6:	e7bd      	b.n	8014954 <rmw_wait+0x26c>

080149d8 <rmw_create_wait_set>:
 80149d8:	b508      	push	{r3, lr}
 80149da:	4803      	ldr	r0, [pc, #12]	; (80149e8 <rmw_create_wait_set+0x10>)
 80149dc:	f7ff f9b2 	bl	8013d44 <get_memory>
 80149e0:	b108      	cbz	r0, 80149e6 <rmw_create_wait_set+0xe>
 80149e2:	6880      	ldr	r0, [r0, #8]
 80149e4:	3010      	adds	r0, #16
 80149e6:	bd08      	pop	{r3, pc}
 80149e8:	2000e494 	.word	0x2000e494

080149ec <rmw_destroy_wait_set>:
 80149ec:	b508      	push	{r3, lr}
 80149ee:	4b08      	ldr	r3, [pc, #32]	; (8014a10 <rmw_destroy_wait_set+0x24>)
 80149f0:	6819      	ldr	r1, [r3, #0]
 80149f2:	b911      	cbnz	r1, 80149fa <rmw_destroy_wait_set+0xe>
 80149f4:	e00a      	b.n	8014a0c <rmw_destroy_wait_set+0x20>
 80149f6:	6849      	ldr	r1, [r1, #4]
 80149f8:	b141      	cbz	r1, 8014a0c <rmw_destroy_wait_set+0x20>
 80149fa:	688b      	ldr	r3, [r1, #8]
 80149fc:	3310      	adds	r3, #16
 80149fe:	4298      	cmp	r0, r3
 8014a00:	d1f9      	bne.n	80149f6 <rmw_destroy_wait_set+0xa>
 8014a02:	4803      	ldr	r0, [pc, #12]	; (8014a10 <rmw_destroy_wait_set+0x24>)
 8014a04:	f7ff f9ae 	bl	8013d64 <put_memory>
 8014a08:	2000      	movs	r0, #0
 8014a0a:	bd08      	pop	{r3, pc}
 8014a0c:	2001      	movs	r0, #1
 8014a0e:	bd08      	pop	{r3, pc}
 8014a10:	2000e494 	.word	0x2000e494

08014a14 <rmw_uros_epoch_nanos>:
 8014a14:	4b05      	ldr	r3, [pc, #20]	; (8014a2c <rmw_uros_epoch_nanos+0x18>)
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	b123      	cbz	r3, 8014a24 <rmw_uros_epoch_nanos+0x10>
 8014a1a:	6898      	ldr	r0, [r3, #8]
 8014a1c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014a20:	f7f9 bfd8 	b.w	800e9d4 <uxr_epoch_nanos>
 8014a24:	2000      	movs	r0, #0
 8014a26:	2100      	movs	r1, #0
 8014a28:	4770      	bx	lr
 8014a2a:	bf00      	nop
 8014a2c:	2000e454 	.word	0x2000e454

08014a30 <rosidl_runtime_c__float__Sequence__init>:
 8014a30:	b530      	push	{r4, r5, lr}
 8014a32:	4604      	mov	r4, r0
 8014a34:	b087      	sub	sp, #28
 8014a36:	b130      	cbz	r0, 8014a46 <rosidl_runtime_c__float__Sequence__init+0x16>
 8014a38:	460d      	mov	r5, r1
 8014a3a:	b931      	cbnz	r1, 8014a4a <rosidl_runtime_c__float__Sequence__init+0x1a>
 8014a3c:	4608      	mov	r0, r1
 8014a3e:	e9c4 0500 	strd	r0, r5, [r4]
 8014a42:	60a5      	str	r5, [r4, #8]
 8014a44:	2001      	movs	r0, #1
 8014a46:	b007      	add	sp, #28
 8014a48:	bd30      	pop	{r4, r5, pc}
 8014a4a:	a801      	add	r0, sp, #4
 8014a4c:	f7f5 f9ea 	bl	8009e24 <rcutils_get_default_allocator>
 8014a50:	9b01      	ldr	r3, [sp, #4]
 8014a52:	9905      	ldr	r1, [sp, #20]
 8014a54:	00a8      	lsls	r0, r5, #2
 8014a56:	4798      	blx	r3
 8014a58:	2800      	cmp	r0, #0
 8014a5a:	d1f0      	bne.n	8014a3e <rosidl_runtime_c__float__Sequence__init+0xe>
 8014a5c:	e7f3      	b.n	8014a46 <rosidl_runtime_c__float__Sequence__init+0x16>
 8014a5e:	bf00      	nop

08014a60 <rosidl_runtime_c__float__Sequence__fini>:
 8014a60:	b188      	cbz	r0, 8014a86 <rosidl_runtime_c__float__Sequence__fini+0x26>
 8014a62:	b510      	push	{r4, lr}
 8014a64:	6803      	ldr	r3, [r0, #0]
 8014a66:	b086      	sub	sp, #24
 8014a68:	4604      	mov	r4, r0
 8014a6a:	b153      	cbz	r3, 8014a82 <rosidl_runtime_c__float__Sequence__fini+0x22>
 8014a6c:	a801      	add	r0, sp, #4
 8014a6e:	f7f5 f9d9 	bl	8009e24 <rcutils_get_default_allocator>
 8014a72:	9b02      	ldr	r3, [sp, #8]
 8014a74:	9905      	ldr	r1, [sp, #20]
 8014a76:	6820      	ldr	r0, [r4, #0]
 8014a78:	4798      	blx	r3
 8014a7a:	2300      	movs	r3, #0
 8014a7c:	e9c4 3300 	strd	r3, r3, [r4]
 8014a80:	60a3      	str	r3, [r4, #8]
 8014a82:	b006      	add	sp, #24
 8014a84:	bd10      	pop	{r4, pc}
 8014a86:	4770      	bx	lr

08014a88 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8014a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a8c:	6805      	ldr	r5, [r0, #0]
 8014a8e:	4604      	mov	r4, r0
 8014a90:	4628      	mov	r0, r5
 8014a92:	460e      	mov	r6, r1
 8014a94:	f7eb fbbc 	bl	8000210 <strcmp>
 8014a98:	b1c8      	cbz	r0, 8014ace <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8014a9a:	4b11      	ldr	r3, [pc, #68]	; (8014ae0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	429d      	cmp	r5, r3
 8014aa0:	d112      	bne.n	8014ac8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8014aa2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8014aa6:	f8d8 4000 	ldr.w	r4, [r8]
 8014aaa:	b16c      	cbz	r4, 8014ac8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8014aac:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8014ab0:	2700      	movs	r7, #0
 8014ab2:	3d04      	subs	r5, #4
 8014ab4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8014ab8:	4631      	mov	r1, r6
 8014aba:	f7eb fba9 	bl	8000210 <strcmp>
 8014abe:	00bb      	lsls	r3, r7, #2
 8014ac0:	b140      	cbz	r0, 8014ad4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8014ac2:	3701      	adds	r7, #1
 8014ac4:	42bc      	cmp	r4, r7
 8014ac6:	d1f5      	bne.n	8014ab4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8014ac8:	2000      	movs	r0, #0
 8014aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ace:	4620      	mov	r0, r4
 8014ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ad4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014ad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014adc:	58d3      	ldr	r3, [r2, r3]
 8014ade:	4718      	bx	r3
 8014ae0:	20000768 	.word	0x20000768

08014ae4 <sensor_msgs__msg__Imu__init>:
 8014ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ae8:	4605      	mov	r5, r0
 8014aea:	b3c0      	cbz	r0, 8014b5e <sensor_msgs__msg__Imu__init+0x7a>
 8014aec:	f000 f894 	bl	8014c18 <std_msgs__msg__Header__init>
 8014af0:	4604      	mov	r4, r0
 8014af2:	b310      	cbz	r0, 8014b3a <sensor_msgs__msg__Imu__init+0x56>
 8014af4:	f105 0618 	add.w	r6, r5, #24
 8014af8:	4630      	mov	r0, r6
 8014afa:	f000 fa21 	bl	8014f40 <geometry_msgs__msg__Quaternion__init>
 8014afe:	4604      	mov	r4, r0
 8014b00:	2800      	cmp	r0, #0
 8014b02:	d040      	beq.n	8014b86 <sensor_msgs__msg__Imu__init+0xa2>
 8014b04:	f105 0780 	add.w	r7, r5, #128	; 0x80
 8014b08:	4638      	mov	r0, r7
 8014b0a:	f000 fa2f 	bl	8014f6c <geometry_msgs__msg__Vector3__init>
 8014b0e:	4604      	mov	r4, r0
 8014b10:	b348      	cbz	r0, 8014b66 <sensor_msgs__msg__Imu__init+0x82>
 8014b12:	f105 08e0 	add.w	r8, r5, #224	; 0xe0
 8014b16:	4640      	mov	r0, r8
 8014b18:	f000 fa28 	bl	8014f6c <geometry_msgs__msg__Vector3__init>
 8014b1c:	4604      	mov	r4, r0
 8014b1e:	b9d8      	cbnz	r0, 8014b58 <sensor_msgs__msg__Imu__init+0x74>
 8014b20:	4628      	mov	r0, r5
 8014b22:	f000 f89d 	bl	8014c60 <std_msgs__msg__Header__fini>
 8014b26:	4630      	mov	r0, r6
 8014b28:	f000 fa1e 	bl	8014f68 <geometry_msgs__msg__Quaternion__fini>
 8014b2c:	4638      	mov	r0, r7
 8014b2e:	f000 fa21 	bl	8014f74 <geometry_msgs__msg__Vector3__fini>
 8014b32:	4640      	mov	r0, r8
 8014b34:	f000 fa1e 	bl	8014f74 <geometry_msgs__msg__Vector3__fini>
 8014b38:	e00e      	b.n	8014b58 <sensor_msgs__msg__Imu__init+0x74>
 8014b3a:	4628      	mov	r0, r5
 8014b3c:	f000 f890 	bl	8014c60 <std_msgs__msg__Header__fini>
 8014b40:	f105 0018 	add.w	r0, r5, #24
 8014b44:	f000 fa10 	bl	8014f68 <geometry_msgs__msg__Quaternion__fini>
 8014b48:	f105 0080 	add.w	r0, r5, #128	; 0x80
 8014b4c:	f000 fa12 	bl	8014f74 <geometry_msgs__msg__Vector3__fini>
 8014b50:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
 8014b54:	f000 fa0e 	bl	8014f74 <geometry_msgs__msg__Vector3__fini>
 8014b58:	4620      	mov	r0, r4
 8014b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b5e:	4604      	mov	r4, r0
 8014b60:	4620      	mov	r0, r4
 8014b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b66:	4628      	mov	r0, r5
 8014b68:	f000 f87a 	bl	8014c60 <std_msgs__msg__Header__fini>
 8014b6c:	4630      	mov	r0, r6
 8014b6e:	f000 f9fb 	bl	8014f68 <geometry_msgs__msg__Quaternion__fini>
 8014b72:	4638      	mov	r0, r7
 8014b74:	f000 f9fe 	bl	8014f74 <geometry_msgs__msg__Vector3__fini>
 8014b78:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
 8014b7c:	f000 f9fa 	bl	8014f74 <geometry_msgs__msg__Vector3__fini>
 8014b80:	4620      	mov	r0, r4
 8014b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b86:	4628      	mov	r0, r5
 8014b88:	f000 f86a 	bl	8014c60 <std_msgs__msg__Header__fini>
 8014b8c:	4630      	mov	r0, r6
 8014b8e:	e7d9      	b.n	8014b44 <sensor_msgs__msg__Imu__init+0x60>

08014b90 <sensor_msgs__msg__Imu__fini>:
 8014b90:	b188      	cbz	r0, 8014bb6 <sensor_msgs__msg__Imu__fini+0x26>
 8014b92:	b510      	push	{r4, lr}
 8014b94:	4604      	mov	r4, r0
 8014b96:	f000 f863 	bl	8014c60 <std_msgs__msg__Header__fini>
 8014b9a:	f104 0018 	add.w	r0, r4, #24
 8014b9e:	f000 f9e3 	bl	8014f68 <geometry_msgs__msg__Quaternion__fini>
 8014ba2:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8014ba6:	f000 f9e5 	bl	8014f74 <geometry_msgs__msg__Vector3__fini>
 8014baa:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8014bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bb2:	f000 b9df 	b.w	8014f74 <geometry_msgs__msg__Vector3__fini>
 8014bb6:	4770      	bx	lr

08014bb8 <std_msgs__msg__Float32MultiArray__init>:
 8014bb8:	b570      	push	{r4, r5, r6, lr}
 8014bba:	4605      	mov	r5, r0
 8014bbc:	b1b0      	cbz	r0, 8014bec <std_msgs__msg__Float32MultiArray__init+0x34>
 8014bbe:	f000 f8e5 	bl	8014d8c <std_msgs__msg__MultiArrayLayout__init>
 8014bc2:	4604      	mov	r4, r0
 8014bc4:	b148      	cbz	r0, 8014bda <std_msgs__msg__Float32MultiArray__init+0x22>
 8014bc6:	f105 0610 	add.w	r6, r5, #16
 8014bca:	2100      	movs	r1, #0
 8014bcc:	4630      	mov	r0, r6
 8014bce:	f7ff ff2f 	bl	8014a30 <rosidl_runtime_c__float__Sequence__init>
 8014bd2:	4604      	mov	r4, r0
 8014bd4:	b168      	cbz	r0, 8014bf2 <std_msgs__msg__Float32MultiArray__init+0x3a>
 8014bd6:	4620      	mov	r0, r4
 8014bd8:	bd70      	pop	{r4, r5, r6, pc}
 8014bda:	4628      	mov	r0, r5
 8014bdc:	f000 f8e8 	bl	8014db0 <std_msgs__msg__MultiArrayLayout__fini>
 8014be0:	f105 0010 	add.w	r0, r5, #16
 8014be4:	f7ff ff3c 	bl	8014a60 <rosidl_runtime_c__float__Sequence__fini>
 8014be8:	4620      	mov	r0, r4
 8014bea:	bd70      	pop	{r4, r5, r6, pc}
 8014bec:	4604      	mov	r4, r0
 8014bee:	4620      	mov	r0, r4
 8014bf0:	bd70      	pop	{r4, r5, r6, pc}
 8014bf2:	4628      	mov	r0, r5
 8014bf4:	f000 f8dc 	bl	8014db0 <std_msgs__msg__MultiArrayLayout__fini>
 8014bf8:	4630      	mov	r0, r6
 8014bfa:	f7ff ff31 	bl	8014a60 <rosidl_runtime_c__float__Sequence__fini>
 8014bfe:	e7ea      	b.n	8014bd6 <std_msgs__msg__Float32MultiArray__init+0x1e>

08014c00 <std_msgs__msg__Float32MultiArray__fini>:
 8014c00:	b148      	cbz	r0, 8014c16 <std_msgs__msg__Float32MultiArray__fini+0x16>
 8014c02:	b510      	push	{r4, lr}
 8014c04:	4604      	mov	r4, r0
 8014c06:	f000 f8d3 	bl	8014db0 <std_msgs__msg__MultiArrayLayout__fini>
 8014c0a:	f104 0010 	add.w	r0, r4, #16
 8014c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c12:	f7ff bf25 	b.w	8014a60 <rosidl_runtime_c__float__Sequence__fini>
 8014c16:	4770      	bx	lr

08014c18 <std_msgs__msg__Header__init>:
 8014c18:	b570      	push	{r4, r5, r6, lr}
 8014c1a:	4605      	mov	r5, r0
 8014c1c:	b1a8      	cbz	r0, 8014c4a <std_msgs__msg__Header__init+0x32>
 8014c1e:	f000 f987 	bl	8014f30 <builtin_interfaces__msg__Time__init>
 8014c22:	4604      	mov	r4, r0
 8014c24:	b140      	cbz	r0, 8014c38 <std_msgs__msg__Header__init+0x20>
 8014c26:	f105 0608 	add.w	r6, r5, #8
 8014c2a:	4630      	mov	r0, r6
 8014c2c:	f001 ffca 	bl	8016bc4 <rosidl_runtime_c__String__init>
 8014c30:	4604      	mov	r4, r0
 8014c32:	b168      	cbz	r0, 8014c50 <std_msgs__msg__Header__init+0x38>
 8014c34:	4620      	mov	r0, r4
 8014c36:	bd70      	pop	{r4, r5, r6, pc}
 8014c38:	4628      	mov	r0, r5
 8014c3a:	f000 f97d 	bl	8014f38 <builtin_interfaces__msg__Time__fini>
 8014c3e:	f105 0008 	add.w	r0, r5, #8
 8014c42:	f001 ffd5 	bl	8016bf0 <rosidl_runtime_c__String__fini>
 8014c46:	4620      	mov	r0, r4
 8014c48:	bd70      	pop	{r4, r5, r6, pc}
 8014c4a:	4604      	mov	r4, r0
 8014c4c:	4620      	mov	r0, r4
 8014c4e:	bd70      	pop	{r4, r5, r6, pc}
 8014c50:	4628      	mov	r0, r5
 8014c52:	f000 f971 	bl	8014f38 <builtin_interfaces__msg__Time__fini>
 8014c56:	4630      	mov	r0, r6
 8014c58:	f001 ffca 	bl	8016bf0 <rosidl_runtime_c__String__fini>
 8014c5c:	e7ea      	b.n	8014c34 <std_msgs__msg__Header__init+0x1c>
 8014c5e:	bf00      	nop

08014c60 <std_msgs__msg__Header__fini>:
 8014c60:	b148      	cbz	r0, 8014c76 <std_msgs__msg__Header__fini+0x16>
 8014c62:	b510      	push	{r4, lr}
 8014c64:	4604      	mov	r4, r0
 8014c66:	f000 f967 	bl	8014f38 <builtin_interfaces__msg__Time__fini>
 8014c6a:	f104 0008 	add.w	r0, r4, #8
 8014c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c72:	f001 bfbd 	b.w	8016bf0 <rosidl_runtime_c__String__fini>
 8014c76:	4770      	bx	lr

08014c78 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>:
 8014c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c7c:	b086      	sub	sp, #24
 8014c7e:	4682      	mov	sl, r0
 8014c80:	4689      	mov	r9, r1
 8014c82:	a801      	add	r0, sp, #4
 8014c84:	f7f5 f8ce 	bl	8009e24 <rcutils_get_default_allocator>
 8014c88:	f1b9 0f00 	cmp.w	r9, #0
 8014c8c:	d02f      	beq.n	8014cee <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 8014c8e:	e9dd 3804 	ldrd	r3, r8, [sp, #16]
 8014c92:	2114      	movs	r1, #20
 8014c94:	4642      	mov	r2, r8
 8014c96:	4648      	mov	r0, r9
 8014c98:	4798      	blx	r3
 8014c9a:	4607      	mov	r7, r0
 8014c9c:	b388      	cbz	r0, 8014d02 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x8a>
 8014c9e:	4606      	mov	r6, r0
 8014ca0:	2400      	movs	r4, #0
 8014ca2:	e004      	b.n	8014cae <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x36>
 8014ca4:	3401      	adds	r4, #1
 8014ca6:	45a1      	cmp	r9, r4
 8014ca8:	f106 0614 	add.w	r6, r6, #20
 8014cac:	d020      	beq.n	8014cf0 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x78>
 8014cae:	4630      	mov	r0, r6
 8014cb0:	f001 ff88 	bl	8016bc4 <rosidl_runtime_c__String__init>
 8014cb4:	4605      	mov	r5, r0
 8014cb6:	2800      	cmp	r0, #0
 8014cb8:	d1f4      	bne.n	8014ca4 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x2c>
 8014cba:	4630      	mov	r0, r6
 8014cbc:	f001 ff98 	bl	8016bf0 <rosidl_runtime_c__String__fini>
 8014cc0:	45a1      	cmp	r9, r4
 8014cc2:	d915      	bls.n	8014cf0 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x78>
 8014cc4:	b15c      	cbz	r4, 8014cde <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x66>
 8014cc6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8014cca:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8014cce:	3c14      	subs	r4, #20
 8014cd0:	4620      	mov	r0, r4
 8014cd2:	f001 ff8d 	bl	8016bf0 <rosidl_runtime_c__String__fini>
 8014cd6:	42a7      	cmp	r7, r4
 8014cd8:	f1a4 0414 	sub.w	r4, r4, #20
 8014cdc:	d1f8      	bne.n	8014cd0 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x58>
 8014cde:	4638      	mov	r0, r7
 8014ce0:	9b02      	ldr	r3, [sp, #8]
 8014ce2:	4641      	mov	r1, r8
 8014ce4:	4798      	blx	r3
 8014ce6:	4628      	mov	r0, r5
 8014ce8:	b006      	add	sp, #24
 8014cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cee:	464f      	mov	r7, r9
 8014cf0:	e9ca 7900 	strd	r7, r9, [sl]
 8014cf4:	f8ca 9008 	str.w	r9, [sl, #8]
 8014cf8:	2501      	movs	r5, #1
 8014cfa:	4628      	mov	r0, r5
 8014cfc:	b006      	add	sp, #24
 8014cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d02:	4605      	mov	r5, r0
 8014d04:	e7f9      	b.n	8014cfa <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x82>
 8014d06:	bf00      	nop

08014d08 <std_msgs__msg__MultiArrayDimension__init>:
 8014d08:	b538      	push	{r3, r4, r5, lr}
 8014d0a:	4604      	mov	r4, r0
 8014d0c:	b128      	cbz	r0, 8014d1a <std_msgs__msg__MultiArrayDimension__init+0x12>
 8014d0e:	f001 ff59 	bl	8016bc4 <rosidl_runtime_c__String__init>
 8014d12:	4605      	mov	r5, r0
 8014d14:	b120      	cbz	r0, 8014d20 <std_msgs__msg__MultiArrayDimension__init+0x18>
 8014d16:	4628      	mov	r0, r5
 8014d18:	bd38      	pop	{r3, r4, r5, pc}
 8014d1a:	4605      	mov	r5, r0
 8014d1c:	4628      	mov	r0, r5
 8014d1e:	bd38      	pop	{r3, r4, r5, pc}
 8014d20:	4620      	mov	r0, r4
 8014d22:	f001 ff65 	bl	8016bf0 <rosidl_runtime_c__String__fini>
 8014d26:	4628      	mov	r0, r5
 8014d28:	bd38      	pop	{r3, r4, r5, pc}
 8014d2a:	bf00      	nop

08014d2c <std_msgs__msg__MultiArrayDimension__fini>:
 8014d2c:	b108      	cbz	r0, 8014d32 <std_msgs__msg__MultiArrayDimension__fini+0x6>
 8014d2e:	f001 bf5f 	b.w	8016bf0 <rosidl_runtime_c__String__fini>
 8014d32:	4770      	bx	lr

08014d34 <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 8014d34:	b108      	cbz	r0, 8014d3a <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6>
 8014d36:	f7ff bf9f 	b.w	8014c78 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>
 8014d3a:	4770      	bx	lr

08014d3c <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 8014d3c:	b320      	cbz	r0, 8014d88 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 8014d3e:	b530      	push	{r4, r5, lr}
 8014d40:	4605      	mov	r5, r0
 8014d42:	b087      	sub	sp, #28
 8014d44:	a801      	add	r0, sp, #4
 8014d46:	f7f5 f86d 	bl	8009e24 <rcutils_get_default_allocator>
 8014d4a:	682a      	ldr	r2, [r5, #0]
 8014d4c:	b1b2      	cbz	r2, 8014d7c <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 8014d4e:	68a9      	ldr	r1, [r5, #8]
 8014d50:	b161      	cbz	r1, 8014d6c <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 8014d52:	2400      	movs	r4, #0
 8014d54:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8014d58:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 8014d5c:	d010      	beq.n	8014d80 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 8014d5e:	f001 ff47 	bl	8016bf0 <rosidl_runtime_c__String__fini>
 8014d62:	68a9      	ldr	r1, [r5, #8]
 8014d64:	682a      	ldr	r2, [r5, #0]
 8014d66:	3401      	adds	r4, #1
 8014d68:	428c      	cmp	r4, r1
 8014d6a:	d3f3      	bcc.n	8014d54 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 8014d6c:	9b02      	ldr	r3, [sp, #8]
 8014d6e:	9905      	ldr	r1, [sp, #20]
 8014d70:	4610      	mov	r0, r2
 8014d72:	4798      	blx	r3
 8014d74:	2300      	movs	r3, #0
 8014d76:	e9c5 3300 	strd	r3, r3, [r5]
 8014d7a:	60ab      	str	r3, [r5, #8]
 8014d7c:	b007      	add	sp, #28
 8014d7e:	bd30      	pop	{r4, r5, pc}
 8014d80:	3401      	adds	r4, #1
 8014d82:	428c      	cmp	r4, r1
 8014d84:	d3e6      	bcc.n	8014d54 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 8014d86:	e7f1      	b.n	8014d6c <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 8014d88:	4770      	bx	lr
 8014d8a:	bf00      	nop

08014d8c <std_msgs__msg__MultiArrayLayout__init>:
 8014d8c:	b538      	push	{r3, r4, r5, lr}
 8014d8e:	4604      	mov	r4, r0
 8014d90:	b130      	cbz	r0, 8014da0 <std_msgs__msg__MultiArrayLayout__init+0x14>
 8014d92:	2100      	movs	r1, #0
 8014d94:	f7ff ffce 	bl	8014d34 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 8014d98:	4605      	mov	r5, r0
 8014d9a:	b120      	cbz	r0, 8014da6 <std_msgs__msg__MultiArrayLayout__init+0x1a>
 8014d9c:	4628      	mov	r0, r5
 8014d9e:	bd38      	pop	{r3, r4, r5, pc}
 8014da0:	4605      	mov	r5, r0
 8014da2:	4628      	mov	r0, r5
 8014da4:	bd38      	pop	{r3, r4, r5, pc}
 8014da6:	4620      	mov	r0, r4
 8014da8:	f7ff ffc8 	bl	8014d3c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 8014dac:	4628      	mov	r0, r5
 8014dae:	bd38      	pop	{r3, r4, r5, pc}

08014db0 <std_msgs__msg__MultiArrayLayout__fini>:
 8014db0:	b108      	cbz	r0, 8014db6 <std_msgs__msg__MultiArrayLayout__fini+0x6>
 8014db2:	f7ff bfc3 	b.w	8014d3c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 8014db6:	4770      	bx	lr

08014db8 <std_msgs__msg__String__init>:
 8014db8:	b538      	push	{r3, r4, r5, lr}
 8014dba:	4604      	mov	r4, r0
 8014dbc:	b128      	cbz	r0, 8014dca <std_msgs__msg__String__init+0x12>
 8014dbe:	f001 ff01 	bl	8016bc4 <rosidl_runtime_c__String__init>
 8014dc2:	4605      	mov	r5, r0
 8014dc4:	b120      	cbz	r0, 8014dd0 <std_msgs__msg__String__init+0x18>
 8014dc6:	4628      	mov	r0, r5
 8014dc8:	bd38      	pop	{r3, r4, r5, pc}
 8014dca:	4605      	mov	r5, r0
 8014dcc:	4628      	mov	r0, r5
 8014dce:	bd38      	pop	{r3, r4, r5, pc}
 8014dd0:	4620      	mov	r0, r4
 8014dd2:	f001 ff0d 	bl	8016bf0 <rosidl_runtime_c__String__fini>
 8014dd6:	4628      	mov	r0, r5
 8014dd8:	bd38      	pop	{r3, r4, r5, pc}
 8014dda:	bf00      	nop

08014ddc <std_msgs__msg__String__fini>:
 8014ddc:	b108      	cbz	r0, 8014de2 <std_msgs__msg__String__fini+0x6>
 8014dde:	f001 bf07 	b.w	8016bf0 <rosidl_runtime_c__String__fini>
 8014de2:	4770      	bx	lr

08014de4 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 8014de4:	f7ff bf90 	b.w	8014d08 <std_msgs__msg__MultiArrayDimension__init>

08014de8 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 8014de8:	f7ff bfa0 	b.w	8014d2c <std_msgs__msg__MultiArrayDimension__fini>

08014dec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8014dec:	4b04      	ldr	r3, [pc, #16]	; (8014e00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8014dee:	681a      	ldr	r2, [r3, #0]
 8014df0:	b10a      	cbz	r2, 8014df6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 8014df2:	4803      	ldr	r0, [pc, #12]	; (8014e00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8014df4:	4770      	bx	lr
 8014df6:	4a03      	ldr	r2, [pc, #12]	; (8014e04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 8014df8:	4801      	ldr	r0, [pc, #4]	; (8014e00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8014dfa:	6812      	ldr	r2, [r2, #0]
 8014dfc:	601a      	str	r2, [r3, #0]
 8014dfe:	4770      	bx	lr
 8014e00:	20000824 	.word	0x20000824
 8014e04:	2000076c 	.word	0x2000076c

08014e08 <_MultiArrayDimension__cdr_serialize>:
 8014e08:	b1d0      	cbz	r0, 8014e40 <_MultiArrayDimension__cdr_serialize+0x38>
 8014e0a:	b570      	push	{r4, r5, r6, lr}
 8014e0c:	6806      	ldr	r6, [r0, #0]
 8014e0e:	460d      	mov	r5, r1
 8014e10:	4604      	mov	r4, r0
 8014e12:	b196      	cbz	r6, 8014e3a <_MultiArrayDimension__cdr_serialize+0x32>
 8014e14:	4630      	mov	r0, r6
 8014e16:	f7eb fa05 	bl	8000224 <strlen>
 8014e1a:	1c42      	adds	r2, r0, #1
 8014e1c:	4631      	mov	r1, r6
 8014e1e:	6060      	str	r0, [r4, #4]
 8014e20:	4628      	mov	r0, r5
 8014e22:	f7f9 f8dd 	bl	800dfe0 <ucdr_serialize_sequence_char>
 8014e26:	68e1      	ldr	r1, [r4, #12]
 8014e28:	4628      	mov	r0, r5
 8014e2a:	f7f7 fe6d 	bl	800cb08 <ucdr_serialize_uint32_t>
 8014e2e:	6921      	ldr	r1, [r4, #16]
 8014e30:	4628      	mov	r0, r5
 8014e32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e36:	f7f7 be67 	b.w	800cb08 <ucdr_serialize_uint32_t>
 8014e3a:	4632      	mov	r2, r6
 8014e3c:	4630      	mov	r0, r6
 8014e3e:	e7ed      	b.n	8014e1c <_MultiArrayDimension__cdr_serialize+0x14>
 8014e40:	4770      	bx	lr
 8014e42:	bf00      	nop

08014e44 <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 8014e44:	b570      	push	{r4, r5, r6, lr}
 8014e46:	4604      	mov	r4, r0
 8014e48:	b1b0      	cbz	r0, 8014e78 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 8014e4a:	460d      	mov	r5, r1
 8014e4c:	4628      	mov	r0, r5
 8014e4e:	2104      	movs	r1, #4
 8014e50:	f7f9 f85a 	bl	800df08 <ucdr_alignment>
 8014e54:	6866      	ldr	r6, [r4, #4]
 8014e56:	1d6b      	adds	r3, r5, #5
 8014e58:	4433      	add	r3, r6
 8014e5a:	181e      	adds	r6, r3, r0
 8014e5c:	2104      	movs	r1, #4
 8014e5e:	4630      	mov	r0, r6
 8014e60:	f7f9 f852 	bl	800df08 <ucdr_alignment>
 8014e64:	1d04      	adds	r4, r0, #4
 8014e66:	4434      	add	r4, r6
 8014e68:	2104      	movs	r1, #4
 8014e6a:	4620      	mov	r0, r4
 8014e6c:	f7f9 f84c 	bl	800df08 <ucdr_alignment>
 8014e70:	f1c5 0504 	rsb	r5, r5, #4
 8014e74:	4428      	add	r0, r5
 8014e76:	4420      	add	r0, r4
 8014e78:	bd70      	pop	{r4, r5, r6, pc}
 8014e7a:	bf00      	nop

08014e7c <_MultiArrayDimension__cdr_deserialize>:
 8014e7c:	b570      	push	{r4, r5, r6, lr}
 8014e7e:	460c      	mov	r4, r1
 8014e80:	b082      	sub	sp, #8
 8014e82:	b1d9      	cbz	r1, 8014ebc <_MultiArrayDimension__cdr_deserialize+0x40>
 8014e84:	688e      	ldr	r6, [r1, #8]
 8014e86:	6809      	ldr	r1, [r1, #0]
 8014e88:	ab01      	add	r3, sp, #4
 8014e8a:	4632      	mov	r2, r6
 8014e8c:	4605      	mov	r5, r0
 8014e8e:	f7f9 f8b9 	bl	800e004 <ucdr_deserialize_sequence_char>
 8014e92:	9b01      	ldr	r3, [sp, #4]
 8014e94:	b970      	cbnz	r0, 8014eb4 <_MultiArrayDimension__cdr_deserialize+0x38>
 8014e96:	429e      	cmp	r6, r3
 8014e98:	d313      	bcc.n	8014ec2 <_MultiArrayDimension__cdr_deserialize+0x46>
 8014e9a:	f104 010c 	add.w	r1, r4, #12
 8014e9e:	4628      	mov	r0, r5
 8014ea0:	f7f7 ff62 	bl	800cd68 <ucdr_deserialize_uint32_t>
 8014ea4:	f104 0110 	add.w	r1, r4, #16
 8014ea8:	4628      	mov	r0, r5
 8014eaa:	b002      	add	sp, #8
 8014eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014eb0:	f7f7 bf5a 	b.w	800cd68 <ucdr_deserialize_uint32_t>
 8014eb4:	b103      	cbz	r3, 8014eb8 <_MultiArrayDimension__cdr_deserialize+0x3c>
 8014eb6:	3b01      	subs	r3, #1
 8014eb8:	6063      	str	r3, [r4, #4]
 8014eba:	e7ee      	b.n	8014e9a <_MultiArrayDimension__cdr_deserialize+0x1e>
 8014ebc:	4608      	mov	r0, r1
 8014ebe:	b002      	add	sp, #8
 8014ec0:	bd70      	pop	{r4, r5, r6, pc}
 8014ec2:	2101      	movs	r1, #1
 8014ec4:	75a8      	strb	r0, [r5, #22]
 8014ec6:	7569      	strb	r1, [r5, #21]
 8014ec8:	6060      	str	r0, [r4, #4]
 8014eca:	4628      	mov	r0, r5
 8014ecc:	f7f9 f832 	bl	800df34 <ucdr_align_to>
 8014ed0:	9901      	ldr	r1, [sp, #4]
 8014ed2:	4628      	mov	r0, r5
 8014ed4:	f7f9 f864 	bl	800dfa0 <ucdr_advance_buffer>
 8014ed8:	e7df      	b.n	8014e9a <_MultiArrayDimension__cdr_deserialize+0x1e>
 8014eda:	bf00      	nop

08014edc <_MultiArrayDimension__max_serialized_size>:
 8014edc:	b510      	push	{r4, lr}
 8014ede:	2104      	movs	r1, #4
 8014ee0:	2000      	movs	r0, #0
 8014ee2:	f7f9 f811 	bl	800df08 <ucdr_alignment>
 8014ee6:	1d04      	adds	r4, r0, #4
 8014ee8:	2104      	movs	r1, #4
 8014eea:	4620      	mov	r0, r4
 8014eec:	f7f9 f80c 	bl	800df08 <ucdr_alignment>
 8014ef0:	3004      	adds	r0, #4
 8014ef2:	4420      	add	r0, r4
 8014ef4:	bd10      	pop	{r4, pc}
 8014ef6:	bf00      	nop

08014ef8 <_MultiArrayDimension__get_serialized_size>:
 8014ef8:	b510      	push	{r4, lr}
 8014efa:	4604      	mov	r4, r0
 8014efc:	b190      	cbz	r0, 8014f24 <_MultiArrayDimension__get_serialized_size+0x2c>
 8014efe:	2104      	movs	r1, #4
 8014f00:	2000      	movs	r0, #0
 8014f02:	f7f9 f801 	bl	800df08 <ucdr_alignment>
 8014f06:	6863      	ldr	r3, [r4, #4]
 8014f08:	3305      	adds	r3, #5
 8014f0a:	181c      	adds	r4, r3, r0
 8014f0c:	2104      	movs	r1, #4
 8014f0e:	4620      	mov	r0, r4
 8014f10:	f7f8 fffa 	bl	800df08 <ucdr_alignment>
 8014f14:	3004      	adds	r0, #4
 8014f16:	4404      	add	r4, r0
 8014f18:	2104      	movs	r1, #4
 8014f1a:	4620      	mov	r0, r4
 8014f1c:	f7f8 fff4 	bl	800df08 <ucdr_alignment>
 8014f20:	3004      	adds	r0, #4
 8014f22:	4420      	add	r0, r4
 8014f24:	bd10      	pop	{r4, pc}
 8014f26:	bf00      	nop

08014f28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8014f28:	4800      	ldr	r0, [pc, #0]	; (8014f2c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 8014f2a:	4770      	bx	lr
 8014f2c:	20000830 	.word	0x20000830

08014f30 <builtin_interfaces__msg__Time__init>:
 8014f30:	3800      	subs	r0, #0
 8014f32:	bf18      	it	ne
 8014f34:	2001      	movne	r0, #1
 8014f36:	4770      	bx	lr

08014f38 <builtin_interfaces__msg__Time__fini>:
 8014f38:	4770      	bx	lr
 8014f3a:	bf00      	nop
 8014f3c:	0000      	movs	r0, r0
	...

08014f40 <geometry_msgs__msg__Quaternion__init>:
 8014f40:	b160      	cbz	r0, 8014f5c <geometry_msgs__msg__Quaternion__init+0x1c>
 8014f42:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8014f60 <geometry_msgs__msg__Quaternion__init+0x20>
 8014f46:	2200      	movs	r2, #0
 8014f48:	2300      	movs	r3, #0
 8014f4a:	e9c0 2300 	strd	r2, r3, [r0]
 8014f4e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014f52:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014f56:	ed80 7b06 	vstr	d7, [r0, #24]
 8014f5a:	2001      	movs	r0, #1
 8014f5c:	4770      	bx	lr
 8014f5e:	bf00      	nop
 8014f60:	00000000 	.word	0x00000000
 8014f64:	3ff00000 	.word	0x3ff00000

08014f68 <geometry_msgs__msg__Quaternion__fini>:
 8014f68:	4770      	bx	lr
 8014f6a:	bf00      	nop

08014f6c <geometry_msgs__msg__Vector3__init>:
 8014f6c:	3800      	subs	r0, #0
 8014f6e:	bf18      	it	ne
 8014f70:	2001      	movne	r0, #1
 8014f72:	4770      	bx	lr

08014f74 <geometry_msgs__msg__Vector3__fini>:
 8014f74:	4770      	bx	lr
 8014f76:	bf00      	nop

08014f78 <ucdr_serialize_string>:
 8014f78:	b510      	push	{r4, lr}
 8014f7a:	b082      	sub	sp, #8
 8014f7c:	4604      	mov	r4, r0
 8014f7e:	4608      	mov	r0, r1
 8014f80:	9101      	str	r1, [sp, #4]
 8014f82:	f7eb f94f 	bl	8000224 <strlen>
 8014f86:	9901      	ldr	r1, [sp, #4]
 8014f88:	1c42      	adds	r2, r0, #1
 8014f8a:	4620      	mov	r0, r4
 8014f8c:	b002      	add	sp, #8
 8014f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f92:	f7f9 b825 	b.w	800dfe0 <ucdr_serialize_sequence_char>
 8014f96:	bf00      	nop

08014f98 <ucdr_deserialize_string>:
 8014f98:	b500      	push	{lr}
 8014f9a:	b083      	sub	sp, #12
 8014f9c:	ab01      	add	r3, sp, #4
 8014f9e:	f7f9 f831 	bl	800e004 <ucdr_deserialize_sequence_char>
 8014fa2:	b003      	add	sp, #12
 8014fa4:	f85d fb04 	ldr.w	pc, [sp], #4

08014fa8 <get_custom_error>:
 8014fa8:	4b01      	ldr	r3, [pc, #4]	; (8014fb0 <get_custom_error+0x8>)
 8014faa:	7818      	ldrb	r0, [r3, #0]
 8014fac:	4770      	bx	lr
 8014fae:	bf00      	nop
 8014fb0:	2000e578 	.word	0x2000e578

08014fb4 <recv_custom_msg>:
 8014fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fb8:	4693      	mov	fp, r2
 8014fba:	b089      	sub	sp, #36	; 0x24
 8014fbc:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8014fc0:	9305      	str	r3, [sp, #20]
 8014fc2:	468a      	mov	sl, r1
 8014fc4:	2100      	movs	r1, #0
 8014fc6:	4604      	mov	r4, r0
 8014fc8:	f88d 101e 	strb.w	r1, [sp, #30]
 8014fcc:	b322      	cbz	r2, 8015018 <recv_custom_msg+0x64>
 8014fce:	f200 2902 	addw	r9, r0, #514	; 0x202
 8014fd2:	f10d 081f 	add.w	r8, sp, #31
 8014fd6:	af05      	add	r7, sp, #20
 8014fd8:	f10d 061e 	add.w	r6, sp, #30
 8014fdc:	f44f 7500 	mov.w	r5, #512	; 0x200
 8014fe0:	e002      	b.n	8014fe8 <recv_custom_msg+0x34>
 8014fe2:	9b05      	ldr	r3, [sp, #20]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	dd0f      	ble.n	8015008 <recv_custom_msg+0x54>
 8014fe8:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8014fec:	4623      	mov	r3, r4
 8014fee:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8014ff2:	e9cd 5600 	strd	r5, r6, [sp]
 8014ff6:	4622      	mov	r2, r4
 8014ff8:	4648      	mov	r0, r9
 8014ffa:	f000 fffd 	bl	8015ff8 <uxr_read_framed_msg>
 8014ffe:	2800      	cmp	r0, #0
 8015000:	d0ef      	beq.n	8014fe2 <recv_custom_msg+0x2e>
 8015002:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015006:	b1b3      	cbz	r3, 8015036 <recv_custom_msg+0x82>
 8015008:	4b0f      	ldr	r3, [pc, #60]	; (8015048 <recv_custom_msg+0x94>)
 801500a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801500e:	701a      	strb	r2, [r3, #0]
 8015010:	2000      	movs	r0, #0
 8015012:	b009      	add	sp, #36	; 0x24
 8015014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015018:	f10d 021f 	add.w	r2, sp, #31
 801501c:	9200      	str	r2, [sp, #0]
 801501e:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8015022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015026:	4601      	mov	r1, r0
 8015028:	47a8      	blx	r5
 801502a:	2800      	cmp	r0, #0
 801502c:	d0ec      	beq.n	8015008 <recv_custom_msg+0x54>
 801502e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d1e8      	bne.n	8015008 <recv_custom_msg+0x54>
 8015036:	f8cb 0000 	str.w	r0, [fp]
 801503a:	2001      	movs	r0, #1
 801503c:	f8ca 4000 	str.w	r4, [sl]
 8015040:	b009      	add	sp, #36	; 0x24
 8015042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015046:	bf00      	nop
 8015048:	2000e578 	.word	0x2000e578

0801504c <send_custom_msg>:
 801504c:	b530      	push	{r4, r5, lr}
 801504e:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 8015052:	b087      	sub	sp, #28
 8015054:	4615      	mov	r5, r2
 8015056:	b974      	cbnz	r4, 8015076 <send_custom_msg+0x2a>
 8015058:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 801505c:	f10d 0317 	add.w	r3, sp, #23
 8015060:	47a0      	blx	r4
 8015062:	b108      	cbz	r0, 8015068 <send_custom_msg+0x1c>
 8015064:	42a8      	cmp	r0, r5
 8015066:	d015      	beq.n	8015094 <send_custom_msg+0x48>
 8015068:	4b0c      	ldr	r3, [pc, #48]	; (801509c <send_custom_msg+0x50>)
 801506a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801506e:	701a      	strb	r2, [r3, #0]
 8015070:	2000      	movs	r0, #0
 8015072:	b007      	add	sp, #28
 8015074:	bd30      	pop	{r4, r5, pc}
 8015076:	460b      	mov	r3, r1
 8015078:	2200      	movs	r2, #0
 801507a:	f10d 0117 	add.w	r1, sp, #23
 801507e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8015082:	4602      	mov	r2, r0
 8015084:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8015088:	9500      	str	r5, [sp, #0]
 801508a:	f200 2002 	addw	r0, r0, #514	; 0x202
 801508e:	f000 fdbb 	bl	8015c08 <uxr_write_framed_msg>
 8015092:	e7e6      	b.n	8015062 <send_custom_msg+0x16>
 8015094:	2001      	movs	r0, #1
 8015096:	b007      	add	sp, #28
 8015098:	bd30      	pop	{r4, r5, pc}
 801509a:	bf00      	nop
 801509c:	2000e578 	.word	0x2000e578

080150a0 <uxr_set_custom_transport_callbacks>:
 80150a0:	b410      	push	{r4}
 80150a2:	9c01      	ldr	r4, [sp, #4]
 80150a4:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 80150a8:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 80150ac:	9b02      	ldr	r3, [sp, #8]
 80150ae:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 80150b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150b6:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 80150ba:	4770      	bx	lr

080150bc <uxr_init_custom_transport>:
 80150bc:	b538      	push	{r3, r4, r5, lr}
 80150be:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 80150c2:	b303      	cbz	r3, 8015106 <uxr_init_custom_transport+0x4a>
 80150c4:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 80150c8:	4604      	mov	r4, r0
 80150ca:	b1e2      	cbz	r2, 8015106 <uxr_init_custom_transport+0x4a>
 80150cc:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 80150d0:	b1ca      	cbz	r2, 8015106 <uxr_init_custom_transport+0x4a>
 80150d2:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 80150d6:	b1b2      	cbz	r2, 8015106 <uxr_init_custom_transport+0x4a>
 80150d8:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 80150dc:	4798      	blx	r3
 80150de:	4605      	mov	r5, r0
 80150e0:	b188      	cbz	r0, 8015106 <uxr_init_custom_transport+0x4a>
 80150e2:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80150e6:	b98b      	cbnz	r3, 801510c <uxr_init_custom_transport+0x50>
 80150e8:	490b      	ldr	r1, [pc, #44]	; (8015118 <uxr_init_custom_transport+0x5c>)
 80150ea:	4b0c      	ldr	r3, [pc, #48]	; (801511c <uxr_init_custom_transport+0x60>)
 80150ec:	4a0c      	ldr	r2, [pc, #48]	; (8015120 <uxr_init_custom_transport+0x64>)
 80150ee:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 80150f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80150f6:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 80150fa:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 80150fe:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8015102:	4628      	mov	r0, r5
 8015104:	bd38      	pop	{r3, r4, r5, pc}
 8015106:	2500      	movs	r5, #0
 8015108:	4628      	mov	r0, r5
 801510a:	bd38      	pop	{r3, r4, r5, pc}
 801510c:	2100      	movs	r1, #0
 801510e:	f204 2002 	addw	r0, r4, #514	; 0x202
 8015112:	f000 fd73 	bl	8015bfc <uxr_init_framing_io>
 8015116:	e7e7      	b.n	80150e8 <uxr_init_custom_transport+0x2c>
 8015118:	0801504d 	.word	0x0801504d
 801511c:	08014fb5 	.word	0x08014fb5
 8015120:	08014fa9 	.word	0x08014fa9

08015124 <uxr_close_custom_transport>:
 8015124:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8015128:	4718      	bx	r3
 801512a:	bf00      	nop

0801512c <uxr_init_input_best_effort_stream>:
 801512c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015130:	8003      	strh	r3, [r0, #0]
 8015132:	4770      	bx	lr

08015134 <uxr_reset_input_best_effort_stream>:
 8015134:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015138:	8003      	strh	r3, [r0, #0]
 801513a:	4770      	bx	lr

0801513c <uxr_receive_best_effort_message>:
 801513c:	b538      	push	{r3, r4, r5, lr}
 801513e:	4604      	mov	r4, r0
 8015140:	8800      	ldrh	r0, [r0, #0]
 8015142:	460d      	mov	r5, r1
 8015144:	f000 fd42 	bl	8015bcc <uxr_seq_num_cmp>
 8015148:	4603      	mov	r3, r0
 801514a:	2b00      	cmp	r3, #0
 801514c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8015150:	bfb8      	it	lt
 8015152:	8025      	strhlt	r5, [r4, #0]
 8015154:	bd38      	pop	{r3, r4, r5, pc}
 8015156:	bf00      	nop

08015158 <on_full_input_buffer>:
 8015158:	b570      	push	{r4, r5, r6, lr}
 801515a:	4605      	mov	r5, r0
 801515c:	460c      	mov	r4, r1
 801515e:	682b      	ldr	r3, [r5, #0]
 8015160:	6809      	ldr	r1, [r1, #0]
 8015162:	8920      	ldrh	r0, [r4, #8]
 8015164:	6862      	ldr	r2, [r4, #4]
 8015166:	fbb2 f2f0 	udiv	r2, r2, r0
 801516a:	eba3 0c01 	sub.w	ip, r3, r1
 801516e:	fbbc fcf2 	udiv	ip, ip, r2
 8015172:	f10c 0c01 	add.w	ip, ip, #1
 8015176:	fa1f f38c 	uxth.w	r3, ip
 801517a:	fbb3 f6f0 	udiv	r6, r3, r0
 801517e:	fb00 3316 	mls	r3, r0, r6, r3
 8015182:	b29b      	uxth	r3, r3
 8015184:	fb02 f303 	mul.w	r3, r2, r3
 8015188:	1d18      	adds	r0, r3, #4
 801518a:	4408      	add	r0, r1
 801518c:	7d26      	ldrb	r6, [r4, #20]
 801518e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8015192:	b116      	cbz	r6, 801519a <on_full_input_buffer+0x42>
 8015194:	2600      	movs	r6, #0
 8015196:	f840 6c04 	str.w	r6, [r0, #-4]
 801519a:	2a03      	cmp	r2, #3
 801519c:	d801      	bhi.n	80151a2 <on_full_input_buffer+0x4a>
 801519e:	2001      	movs	r0, #1
 80151a0:	bd70      	pop	{r4, r5, r6, pc}
 80151a2:	3308      	adds	r3, #8
 80151a4:	4419      	add	r1, r3
 80151a6:	4628      	mov	r0, r5
 80151a8:	692b      	ldr	r3, [r5, #16]
 80151aa:	3a04      	subs	r2, #4
 80151ac:	f7f8 fea0 	bl	800def0 <ucdr_init_buffer_origin>
 80151b0:	4628      	mov	r0, r5
 80151b2:	4903      	ldr	r1, [pc, #12]	; (80151c0 <on_full_input_buffer+0x68>)
 80151b4:	4622      	mov	r2, r4
 80151b6:	f7f8 fe77 	bl	800dea8 <ucdr_set_on_full_buffer_callback>
 80151ba:	2000      	movs	r0, #0
 80151bc:	bd70      	pop	{r4, r5, r6, pc}
 80151be:	bf00      	nop
 80151c0:	08015159 	.word	0x08015159

080151c4 <uxr_init_input_reliable_stream>:
 80151c4:	b500      	push	{lr}
 80151c6:	e9c0 1200 	strd	r1, r2, [r0]
 80151ca:	f04f 0e00 	mov.w	lr, #0
 80151ce:	9a01      	ldr	r2, [sp, #4]
 80151d0:	8103      	strh	r3, [r0, #8]
 80151d2:	6102      	str	r2, [r0, #16]
 80151d4:	f880 e014 	strb.w	lr, [r0, #20]
 80151d8:	b1d3      	cbz	r3, 8015210 <uxr_init_input_reliable_stream+0x4c>
 80151da:	f8c1 e000 	str.w	lr, [r1]
 80151de:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80151e2:	f1bc 0f01 	cmp.w	ip, #1
 80151e6:	d913      	bls.n	8015210 <uxr_init_input_reliable_stream+0x4c>
 80151e8:	2301      	movs	r3, #1
 80151ea:	fbb3 f1fc 	udiv	r1, r3, ip
 80151ee:	fb0c 3111 	mls	r1, ip, r1, r3
 80151f2:	b289      	uxth	r1, r1
 80151f4:	6842      	ldr	r2, [r0, #4]
 80151f6:	fbb2 f2fc 	udiv	r2, r2, ip
 80151fa:	fb01 f202 	mul.w	r2, r1, r2
 80151fe:	6801      	ldr	r1, [r0, #0]
 8015200:	f841 e002 	str.w	lr, [r1, r2]
 8015204:	3301      	adds	r3, #1
 8015206:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801520a:	b29b      	uxth	r3, r3
 801520c:	459c      	cmp	ip, r3
 801520e:	d8ec      	bhi.n	80151ea <uxr_init_input_reliable_stream+0x26>
 8015210:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015214:	60c3      	str	r3, [r0, #12]
 8015216:	f85d fb04 	ldr.w	pc, [sp], #4
 801521a:	bf00      	nop

0801521c <uxr_reset_input_reliable_stream>:
 801521c:	8901      	ldrh	r1, [r0, #8]
 801521e:	b1e9      	cbz	r1, 801525c <uxr_reset_input_reliable_stream+0x40>
 8015220:	f04f 0c00 	mov.w	ip, #0
 8015224:	b500      	push	{lr}
 8015226:	4663      	mov	r3, ip
 8015228:	46e6      	mov	lr, ip
 801522a:	fbb3 f2f1 	udiv	r2, r3, r1
 801522e:	fb01 3312 	mls	r3, r1, r2, r3
 8015232:	b29b      	uxth	r3, r3
 8015234:	6842      	ldr	r2, [r0, #4]
 8015236:	fbb2 f2f1 	udiv	r2, r2, r1
 801523a:	fb02 f303 	mul.w	r3, r2, r3
 801523e:	6802      	ldr	r2, [r0, #0]
 8015240:	f842 e003 	str.w	lr, [r2, r3]
 8015244:	f10c 0c01 	add.w	ip, ip, #1
 8015248:	8901      	ldrh	r1, [r0, #8]
 801524a:	fa1f f38c 	uxth.w	r3, ip
 801524e:	4299      	cmp	r1, r3
 8015250:	d8eb      	bhi.n	801522a <uxr_reset_input_reliable_stream+0xe>
 8015252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015256:	60c3      	str	r3, [r0, #12]
 8015258:	f85d fb04 	ldr.w	pc, [sp], #4
 801525c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015260:	60c3      	str	r3, [r0, #12]
 8015262:	4770      	bx	lr

08015264 <uxr_receive_reliable_message>:
 8015264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015268:	4604      	mov	r4, r0
 801526a:	460d      	mov	r5, r1
 801526c:	8901      	ldrh	r1, [r0, #8]
 801526e:	8980      	ldrh	r0, [r0, #12]
 8015270:	4690      	mov	r8, r2
 8015272:	461f      	mov	r7, r3
 8015274:	f000 fca2 	bl	8015bbc <uxr_seq_num_add>
 8015278:	4629      	mov	r1, r5
 801527a:	4606      	mov	r6, r0
 801527c:	89a0      	ldrh	r0, [r4, #12]
 801527e:	f000 fca5 	bl	8015bcc <uxr_seq_num_cmp>
 8015282:	2800      	cmp	r0, #0
 8015284:	db0a      	blt.n	801529c <uxr_receive_reliable_message+0x38>
 8015286:	2600      	movs	r6, #0
 8015288:	89e0      	ldrh	r0, [r4, #14]
 801528a:	4629      	mov	r1, r5
 801528c:	f000 fc9e 	bl	8015bcc <uxr_seq_num_cmp>
 8015290:	2800      	cmp	r0, #0
 8015292:	da00      	bge.n	8015296 <uxr_receive_reliable_message+0x32>
 8015294:	81e5      	strh	r5, [r4, #14]
 8015296:	4630      	mov	r0, r6
 8015298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801529c:	4630      	mov	r0, r6
 801529e:	4629      	mov	r1, r5
 80152a0:	f000 fc94 	bl	8015bcc <uxr_seq_num_cmp>
 80152a4:	2800      	cmp	r0, #0
 80152a6:	dbee      	blt.n	8015286 <uxr_receive_reliable_message+0x22>
 80152a8:	6923      	ldr	r3, [r4, #16]
 80152aa:	4640      	mov	r0, r8
 80152ac:	4798      	blx	r3
 80152ae:	2101      	movs	r1, #1
 80152b0:	4681      	mov	r9, r0
 80152b2:	89a0      	ldrh	r0, [r4, #12]
 80152b4:	f000 fc82 	bl	8015bbc <uxr_seq_num_add>
 80152b8:	f1b9 0f00 	cmp.w	r9, #0
 80152bc:	d101      	bne.n	80152c2 <uxr_receive_reliable_message+0x5e>
 80152be:	4285      	cmp	r5, r0
 80152c0:	d047      	beq.n	8015352 <uxr_receive_reliable_message+0xee>
 80152c2:	8922      	ldrh	r2, [r4, #8]
 80152c4:	fbb5 f0f2 	udiv	r0, r5, r2
 80152c8:	fb02 5010 	mls	r0, r2, r0, r5
 80152cc:	b280      	uxth	r0, r0
 80152ce:	6863      	ldr	r3, [r4, #4]
 80152d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80152d4:	fb00 f303 	mul.w	r3, r0, r3
 80152d8:	6820      	ldr	r0, [r4, #0]
 80152da:	3304      	adds	r3, #4
 80152dc:	4418      	add	r0, r3
 80152de:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d1cf      	bne.n	8015286 <uxr_receive_reliable_message+0x22>
 80152e6:	4641      	mov	r1, r8
 80152e8:	463a      	mov	r2, r7
 80152ea:	f002 fafa 	bl	80178e2 <memcpy>
 80152ee:	8921      	ldrh	r1, [r4, #8]
 80152f0:	fbb5 f2f1 	udiv	r2, r5, r1
 80152f4:	fb01 5212 	mls	r2, r1, r2, r5
 80152f8:	b292      	uxth	r2, r2
 80152fa:	6863      	ldr	r3, [r4, #4]
 80152fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8015300:	fb02 f303 	mul.w	r3, r2, r3
 8015304:	6822      	ldr	r2, [r4, #0]
 8015306:	50d7      	str	r7, [r2, r3]
 8015308:	9a08      	ldr	r2, [sp, #32]
 801530a:	2301      	movs	r3, #1
 801530c:	7013      	strb	r3, [r2, #0]
 801530e:	f1b9 0f00 	cmp.w	r9, #0
 8015312:	d0b8      	beq.n	8015286 <uxr_receive_reliable_message+0x22>
 8015314:	89a6      	ldrh	r6, [r4, #12]
 8015316:	4630      	mov	r0, r6
 8015318:	2101      	movs	r1, #1
 801531a:	f000 fc4f 	bl	8015bbc <uxr_seq_num_add>
 801531e:	8922      	ldrh	r2, [r4, #8]
 8015320:	6863      	ldr	r3, [r4, #4]
 8015322:	fbb3 f3f2 	udiv	r3, r3, r2
 8015326:	4606      	mov	r6, r0
 8015328:	fbb0 f0f2 	udiv	r0, r0, r2
 801532c:	fb02 6010 	mls	r0, r2, r0, r6
 8015330:	b280      	uxth	r0, r0
 8015332:	fb00 f303 	mul.w	r3, r0, r3
 8015336:	6820      	ldr	r0, [r4, #0]
 8015338:	3304      	adds	r3, #4
 801533a:	4418      	add	r0, r3
 801533c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d0a0      	beq.n	8015286 <uxr_receive_reliable_message+0x22>
 8015344:	6923      	ldr	r3, [r4, #16]
 8015346:	4798      	blx	r3
 8015348:	2802      	cmp	r0, #2
 801534a:	d008      	beq.n	801535e <uxr_receive_reliable_message+0xfa>
 801534c:	2801      	cmp	r0, #1
 801534e:	d0e2      	beq.n	8015316 <uxr_receive_reliable_message+0xb2>
 8015350:	e799      	b.n	8015286 <uxr_receive_reliable_message+0x22>
 8015352:	9b08      	ldr	r3, [sp, #32]
 8015354:	81a5      	strh	r5, [r4, #12]
 8015356:	2601      	movs	r6, #1
 8015358:	f883 9000 	strb.w	r9, [r3]
 801535c:	e794      	b.n	8015288 <uxr_receive_reliable_message+0x24>
 801535e:	2601      	movs	r6, #1
 8015360:	e792      	b.n	8015288 <uxr_receive_reliable_message+0x24>
 8015362:	bf00      	nop

08015364 <uxr_next_input_reliable_buffer_available>:
 8015364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015368:	4604      	mov	r4, r0
 801536a:	460f      	mov	r7, r1
 801536c:	8980      	ldrh	r0, [r0, #12]
 801536e:	2101      	movs	r1, #1
 8015370:	4690      	mov	r8, r2
 8015372:	f000 fc23 	bl	8015bbc <uxr_seq_num_add>
 8015376:	8922      	ldrh	r2, [r4, #8]
 8015378:	fbb0 f6f2 	udiv	r6, r0, r2
 801537c:	fb02 0616 	mls	r6, r2, r6, r0
 8015380:	b2b6      	uxth	r6, r6
 8015382:	6863      	ldr	r3, [r4, #4]
 8015384:	fbb3 f3f2 	udiv	r3, r3, r2
 8015388:	fb06 f303 	mul.w	r3, r6, r3
 801538c:	6826      	ldr	r6, [r4, #0]
 801538e:	3304      	adds	r3, #4
 8015390:	441e      	add	r6, r3
 8015392:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8015396:	f1b9 0f00 	cmp.w	r9, #0
 801539a:	d023      	beq.n	80153e4 <uxr_next_input_reliable_buffer_available+0x80>
 801539c:	6923      	ldr	r3, [r4, #16]
 801539e:	4605      	mov	r5, r0
 80153a0:	4630      	mov	r0, r6
 80153a2:	4798      	blx	r3
 80153a4:	4682      	mov	sl, r0
 80153a6:	b300      	cbz	r0, 80153ea <uxr_next_input_reliable_buffer_available+0x86>
 80153a8:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80153ac:	2101      	movs	r1, #1
 80153ae:	4650      	mov	r0, sl
 80153b0:	f000 fc04 	bl	8015bbc <uxr_seq_num_add>
 80153b4:	8921      	ldrh	r1, [r4, #8]
 80153b6:	fbb0 f2f1 	udiv	r2, r0, r1
 80153ba:	4682      	mov	sl, r0
 80153bc:	fb01 0212 	mls	r2, r1, r2, r0
 80153c0:	e9d4 0300 	ldrd	r0, r3, [r4]
 80153c4:	b292      	uxth	r2, r2
 80153c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80153ca:	fb02 f303 	mul.w	r3, r2, r3
 80153ce:	3304      	adds	r3, #4
 80153d0:	4418      	add	r0, r3
 80153d2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80153d6:	b12b      	cbz	r3, 80153e4 <uxr_next_input_reliable_buffer_available+0x80>
 80153d8:	6923      	ldr	r3, [r4, #16]
 80153da:	4798      	blx	r3
 80153dc:	2802      	cmp	r0, #2
 80153de:	d01b      	beq.n	8015418 <uxr_next_input_reliable_buffer_available+0xb4>
 80153e0:	2801      	cmp	r0, #1
 80153e2:	d0e3      	beq.n	80153ac <uxr_next_input_reliable_buffer_available+0x48>
 80153e4:	2000      	movs	r0, #0
 80153e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153ea:	464a      	mov	r2, r9
 80153ec:	4631      	mov	r1, r6
 80153ee:	4638      	mov	r0, r7
 80153f0:	f7f8 fd86 	bl	800df00 <ucdr_init_buffer>
 80153f4:	8921      	ldrh	r1, [r4, #8]
 80153f6:	fbb5 f2f1 	udiv	r2, r5, r1
 80153fa:	fb01 5212 	mls	r2, r1, r2, r5
 80153fe:	b292      	uxth	r2, r2
 8015400:	6863      	ldr	r3, [r4, #4]
 8015402:	fbb3 f3f1 	udiv	r3, r3, r1
 8015406:	fb02 f303 	mul.w	r3, r2, r3
 801540a:	6822      	ldr	r2, [r4, #0]
 801540c:	f842 a003 	str.w	sl, [r2, r3]
 8015410:	2001      	movs	r0, #1
 8015412:	81a5      	strh	r5, [r4, #12]
 8015414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015418:	8920      	ldrh	r0, [r4, #8]
 801541a:	fbb5 f3f0 	udiv	r3, r5, r0
 801541e:	fb00 5513 	mls	r5, r0, r3, r5
 8015422:	b2ad      	uxth	r5, r5
 8015424:	6863      	ldr	r3, [r4, #4]
 8015426:	fbb3 f3f0 	udiv	r3, r3, r0
 801542a:	fb03 f505 	mul.w	r5, r3, r5
 801542e:	6823      	ldr	r3, [r4, #0]
 8015430:	2000      	movs	r0, #0
 8015432:	5158      	str	r0, [r3, r5]
 8015434:	eb06 0108 	add.w	r1, r6, r8
 8015438:	eba9 0208 	sub.w	r2, r9, r8
 801543c:	4638      	mov	r0, r7
 801543e:	f7f8 fd5f 	bl	800df00 <ucdr_init_buffer>
 8015442:	4638      	mov	r0, r7
 8015444:	4903      	ldr	r1, [pc, #12]	; (8015454 <uxr_next_input_reliable_buffer_available+0xf0>)
 8015446:	4622      	mov	r2, r4
 8015448:	f7f8 fd2e 	bl	800dea8 <ucdr_set_on_full_buffer_callback>
 801544c:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8015450:	2001      	movs	r0, #1
 8015452:	e7c8      	b.n	80153e6 <uxr_next_input_reliable_buffer_available+0x82>
 8015454:	08015159 	.word	0x08015159

08015458 <uxr_process_heartbeat>:
 8015458:	b538      	push	{r3, r4, r5, lr}
 801545a:	4611      	mov	r1, r2
 801545c:	4604      	mov	r4, r0
 801545e:	89c0      	ldrh	r0, [r0, #14]
 8015460:	4615      	mov	r5, r2
 8015462:	f000 fbb3 	bl	8015bcc <uxr_seq_num_cmp>
 8015466:	2800      	cmp	r0, #0
 8015468:	bfb8      	it	lt
 801546a:	81e5      	strhlt	r5, [r4, #14]
 801546c:	bd38      	pop	{r3, r4, r5, pc}
 801546e:	bf00      	nop

08015470 <uxr_compute_acknack>:
 8015470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015474:	8903      	ldrh	r3, [r0, #8]
 8015476:	8985      	ldrh	r5, [r0, #12]
 8015478:	4604      	mov	r4, r0
 801547a:	460e      	mov	r6, r1
 801547c:	b1d3      	cbz	r3, 80154b4 <uxr_compute_acknack+0x44>
 801547e:	4628      	mov	r0, r5
 8015480:	2701      	movs	r7, #1
 8015482:	e003      	b.n	801548c <uxr_compute_acknack+0x1c>
 8015484:	4567      	cmp	r7, ip
 8015486:	d215      	bcs.n	80154b4 <uxr_compute_acknack+0x44>
 8015488:	89a0      	ldrh	r0, [r4, #12]
 801548a:	3701      	adds	r7, #1
 801548c:	b2b9      	uxth	r1, r7
 801548e:	f000 fb95 	bl	8015bbc <uxr_seq_num_add>
 8015492:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015496:	fbb0 f3fc 	udiv	r3, r0, ip
 801549a:	fb0c 0313 	mls	r3, ip, r3, r0
 801549e:	b29a      	uxth	r2, r3
 80154a0:	e9d4 1300 	ldrd	r1, r3, [r4]
 80154a4:	fbb3 f3fc 	udiv	r3, r3, ip
 80154a8:	fb02 f303 	mul.w	r3, r2, r3
 80154ac:	58cb      	ldr	r3, [r1, r3]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d1e8      	bne.n	8015484 <uxr_compute_acknack+0x14>
 80154b2:	4605      	mov	r5, r0
 80154b4:	8035      	strh	r5, [r6, #0]
 80154b6:	2101      	movs	r1, #1
 80154b8:	4628      	mov	r0, r5
 80154ba:	89e7      	ldrh	r7, [r4, #14]
 80154bc:	f000 fb82 	bl	8015bc4 <uxr_seq_num_sub>
 80154c0:	4601      	mov	r1, r0
 80154c2:	4638      	mov	r0, r7
 80154c4:	f000 fb7e 	bl	8015bc4 <uxr_seq_num_sub>
 80154c8:	4605      	mov	r5, r0
 80154ca:	b318      	cbz	r0, 8015514 <uxr_compute_acknack+0xa4>
 80154cc:	f04f 0900 	mov.w	r9, #0
 80154d0:	464f      	mov	r7, r9
 80154d2:	f04f 0801 	mov.w	r8, #1
 80154d6:	fa1f f189 	uxth.w	r1, r9
 80154da:	8830      	ldrh	r0, [r6, #0]
 80154dc:	f000 fb6e 	bl	8015bbc <uxr_seq_num_add>
 80154e0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80154e4:	fbb0 f3fc 	udiv	r3, r0, ip
 80154e8:	e9d4 1200 	ldrd	r1, r2, [r4]
 80154ec:	fb03 001c 	mls	r0, r3, ip, r0
 80154f0:	b283      	uxth	r3, r0
 80154f2:	fbb2 f2fc 	udiv	r2, r2, ip
 80154f6:	fb02 f303 	mul.w	r3, r2, r3
 80154fa:	fa08 f209 	lsl.w	r2, r8, r9
 80154fe:	58cb      	ldr	r3, [r1, r3]
 8015500:	f109 0901 	add.w	r9, r9, #1
 8015504:	b90b      	cbnz	r3, 801550a <uxr_compute_acknack+0x9a>
 8015506:	4317      	orrs	r7, r2
 8015508:	b2bf      	uxth	r7, r7
 801550a:	454d      	cmp	r5, r9
 801550c:	d1e3      	bne.n	80154d6 <uxr_compute_acknack+0x66>
 801550e:	4638      	mov	r0, r7
 8015510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015514:	4607      	mov	r7, r0
 8015516:	4638      	mov	r0, r7
 8015518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801551c <uxr_init_output_best_effort_stream>:
 801551c:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8015520:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8015524:	6001      	str	r1, [r0, #0]
 8015526:	7303      	strb	r3, [r0, #12]
 8015528:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801552c:	4770      	bx	lr
 801552e:	bf00      	nop

08015530 <uxr_reset_output_best_effort_stream>:
 8015530:	7b02      	ldrb	r2, [r0, #12]
 8015532:	6042      	str	r2, [r0, #4]
 8015534:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015538:	81c3      	strh	r3, [r0, #14]
 801553a:	4770      	bx	lr

0801553c <uxr_prepare_best_effort_buffer_to_write>:
 801553c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801553e:	4604      	mov	r4, r0
 8015540:	b083      	sub	sp, #12
 8015542:	6840      	ldr	r0, [r0, #4]
 8015544:	460d      	mov	r5, r1
 8015546:	4616      	mov	r6, r2
 8015548:	f7fa fb3a 	bl	800fbc0 <uxr_submessage_padding>
 801554c:	6863      	ldr	r3, [r4, #4]
 801554e:	4418      	add	r0, r3
 8015550:	68a3      	ldr	r3, [r4, #8]
 8015552:	1942      	adds	r2, r0, r5
 8015554:	4293      	cmp	r3, r2
 8015556:	bf2c      	ite	cs
 8015558:	2701      	movcs	r7, #1
 801555a:	2700      	movcc	r7, #0
 801555c:	d202      	bcs.n	8015564 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801555e:	4638      	mov	r0, r7
 8015560:	b003      	add	sp, #12
 8015562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015564:	9000      	str	r0, [sp, #0]
 8015566:	6821      	ldr	r1, [r4, #0]
 8015568:	4630      	mov	r0, r6
 801556a:	2300      	movs	r3, #0
 801556c:	f7f8 fcb6 	bl	800dedc <ucdr_init_buffer_origin_offset>
 8015570:	6861      	ldr	r1, [r4, #4]
 8015572:	4638      	mov	r0, r7
 8015574:	4429      	add	r1, r5
 8015576:	6061      	str	r1, [r4, #4]
 8015578:	b003      	add	sp, #12
 801557a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801557c <uxr_prepare_best_effort_buffer_to_send>:
 801557c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015580:	4604      	mov	r4, r0
 8015582:	461d      	mov	r5, r3
 8015584:	6840      	ldr	r0, [r0, #4]
 8015586:	7b23      	ldrb	r3, [r4, #12]
 8015588:	4298      	cmp	r0, r3
 801558a:	bf8c      	ite	hi
 801558c:	2601      	movhi	r6, #1
 801558e:	2600      	movls	r6, #0
 8015590:	d802      	bhi.n	8015598 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8015592:	4630      	mov	r0, r6
 8015594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015598:	4688      	mov	r8, r1
 801559a:	89e0      	ldrh	r0, [r4, #14]
 801559c:	2101      	movs	r1, #1
 801559e:	4617      	mov	r7, r2
 80155a0:	f000 fb0c 	bl	8015bbc <uxr_seq_num_add>
 80155a4:	6823      	ldr	r3, [r4, #0]
 80155a6:	81e0      	strh	r0, [r4, #14]
 80155a8:	8028      	strh	r0, [r5, #0]
 80155aa:	f8c8 3000 	str.w	r3, [r8]
 80155ae:	6863      	ldr	r3, [r4, #4]
 80155b0:	603b      	str	r3, [r7, #0]
 80155b2:	7b23      	ldrb	r3, [r4, #12]
 80155b4:	6063      	str	r3, [r4, #4]
 80155b6:	4630      	mov	r0, r6
 80155b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080155bc <on_full_output_buffer>:
 80155bc:	b538      	push	{r3, r4, r5, lr}
 80155be:	6802      	ldr	r2, [r0, #0]
 80155c0:	460c      	mov	r4, r1
 80155c2:	6809      	ldr	r1, [r1, #0]
 80155c4:	8923      	ldrh	r3, [r4, #8]
 80155c6:	eba2 0c01 	sub.w	ip, r2, r1
 80155ca:	6862      	ldr	r2, [r4, #4]
 80155cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80155d0:	fbbc fcf2 	udiv	ip, ip, r2
 80155d4:	f10c 0c01 	add.w	ip, ip, #1
 80155d8:	fa1f fc8c 	uxth.w	ip, ip
 80155dc:	fbbc fef3 	udiv	lr, ip, r3
 80155e0:	fb03 c31e 	mls	r3, r3, lr, ip
 80155e4:	b29b      	uxth	r3, r3
 80155e6:	fb02 f303 	mul.w	r3, r2, r3
 80155ea:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80155ee:	58ca      	ldr	r2, [r1, r3]
 80155f0:	4463      	add	r3, ip
 80155f2:	eba2 020c 	sub.w	r2, r2, ip
 80155f6:	3308      	adds	r3, #8
 80155f8:	4605      	mov	r5, r0
 80155fa:	4419      	add	r1, r3
 80155fc:	3a04      	subs	r2, #4
 80155fe:	6903      	ldr	r3, [r0, #16]
 8015600:	f7f8 fc76 	bl	800def0 <ucdr_init_buffer_origin>
 8015604:	4628      	mov	r0, r5
 8015606:	4903      	ldr	r1, [pc, #12]	; (8015614 <on_full_output_buffer+0x58>)
 8015608:	4622      	mov	r2, r4
 801560a:	f7f8 fc4d 	bl	800dea8 <ucdr_set_on_full_buffer_callback>
 801560e:	2000      	movs	r0, #0
 8015610:	bd38      	pop	{r3, r4, r5, pc}
 8015612:	bf00      	nop
 8015614:	080155bd 	.word	0x080155bd

08015618 <uxr_init_output_reliable_stream>:
 8015618:	b410      	push	{r4}
 801561a:	f89d c004 	ldrb.w	ip, [sp, #4]
 801561e:	8103      	strh	r3, [r0, #8]
 8015620:	e9c0 1200 	strd	r1, r2, [r0]
 8015624:	f880 c00c 	strb.w	ip, [r0, #12]
 8015628:	b1d3      	cbz	r3, 8015660 <uxr_init_output_reliable_stream+0x48>
 801562a:	f8c1 c000 	str.w	ip, [r1]
 801562e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015632:	f1bc 0f01 	cmp.w	ip, #1
 8015636:	d913      	bls.n	8015660 <uxr_init_output_reliable_stream+0x48>
 8015638:	2301      	movs	r3, #1
 801563a:	fbb3 f1fc 	udiv	r1, r3, ip
 801563e:	fb0c 3111 	mls	r1, ip, r1, r3
 8015642:	b289      	uxth	r1, r1
 8015644:	6842      	ldr	r2, [r0, #4]
 8015646:	6804      	ldr	r4, [r0, #0]
 8015648:	fbb2 f2fc 	udiv	r2, r2, ip
 801564c:	fb01 f202 	mul.w	r2, r1, r2
 8015650:	7b01      	ldrb	r1, [r0, #12]
 8015652:	50a1      	str	r1, [r4, r2]
 8015654:	3301      	adds	r3, #1
 8015656:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801565a:	b29b      	uxth	r3, r3
 801565c:	459c      	cmp	ip, r3
 801565e:	d8ec      	bhi.n	801563a <uxr_init_output_reliable_stream+0x22>
 8015660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015664:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015668:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801566c:	4905      	ldr	r1, [pc, #20]	; (8015684 <uxr_init_output_reliable_stream+0x6c>)
 801566e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015672:	f8c0 100e 	str.w	r1, [r0, #14]
 8015676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801567a:	2300      	movs	r3, #0
 801567c:	8242      	strh	r2, [r0, #18]
 801567e:	8403      	strh	r3, [r0, #32]
 8015680:	4770      	bx	lr
 8015682:	bf00      	nop
 8015684:	ffff0000 	.word	0xffff0000

08015688 <uxr_reset_output_reliable_stream>:
 8015688:	8901      	ldrh	r1, [r0, #8]
 801568a:	b1b1      	cbz	r1, 80156ba <uxr_reset_output_reliable_stream+0x32>
 801568c:	f04f 0c00 	mov.w	ip, #0
 8015690:	4663      	mov	r3, ip
 8015692:	fbb3 f2f1 	udiv	r2, r3, r1
 8015696:	fb01 3312 	mls	r3, r1, r2, r3
 801569a:	b29b      	uxth	r3, r3
 801569c:	6842      	ldr	r2, [r0, #4]
 801569e:	fbb2 f2f1 	udiv	r2, r2, r1
 80156a2:	6801      	ldr	r1, [r0, #0]
 80156a4:	fb02 f303 	mul.w	r3, r2, r3
 80156a8:	7b02      	ldrb	r2, [r0, #12]
 80156aa:	50ca      	str	r2, [r1, r3]
 80156ac:	f10c 0c01 	add.w	ip, ip, #1
 80156b0:	8901      	ldrh	r1, [r0, #8]
 80156b2:	fa1f f38c 	uxth.w	r3, ip
 80156b6:	4299      	cmp	r1, r3
 80156b8:	d8eb      	bhi.n	8015692 <uxr_reset_output_reliable_stream+0xa>
 80156ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80156be:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80156c2:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80156c6:	4904      	ldr	r1, [pc, #16]	; (80156d8 <uxr_reset_output_reliable_stream+0x50>)
 80156c8:	f8c0 100e 	str.w	r1, [r0, #14]
 80156cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80156d0:	2300      	movs	r3, #0
 80156d2:	8242      	strh	r2, [r0, #18]
 80156d4:	8403      	strh	r3, [r0, #32]
 80156d6:	4770      	bx	lr
 80156d8:	ffff0000 	.word	0xffff0000

080156dc <uxr_prepare_reliable_buffer_to_write>:
 80156dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156e0:	4604      	mov	r4, r0
 80156e2:	b091      	sub	sp, #68	; 0x44
 80156e4:	8900      	ldrh	r0, [r0, #8]
 80156e6:	89e6      	ldrh	r6, [r4, #14]
 80156e8:	6823      	ldr	r3, [r4, #0]
 80156ea:	9204      	str	r2, [sp, #16]
 80156ec:	fbb6 f2f0 	udiv	r2, r6, r0
 80156f0:	fb00 6212 	mls	r2, r0, r2, r6
 80156f4:	b292      	uxth	r2, r2
 80156f6:	6865      	ldr	r5, [r4, #4]
 80156f8:	fbb5 f5f0 	udiv	r5, r5, r0
 80156fc:	fb05 3202 	mla	r2, r5, r2, r3
 8015700:	3204      	adds	r2, #4
 8015702:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8015706:	f894 900c 	ldrb.w	r9, [r4, #12]
 801570a:	9203      	str	r2, [sp, #12]
 801570c:	468b      	mov	fp, r1
 801570e:	1f2f      	subs	r7, r5, #4
 8015710:	2800      	cmp	r0, #0
 8015712:	f000 814c 	beq.w	80159ae <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8015716:	f04f 0c00 	mov.w	ip, #0
 801571a:	46e2      	mov	sl, ip
 801571c:	4661      	mov	r1, ip
 801571e:	fbb1 f2f0 	udiv	r2, r1, r0
 8015722:	fb00 1212 	mls	r2, r0, r2, r1
 8015726:	b292      	uxth	r2, r2
 8015728:	fb05 f202 	mul.w	r2, r5, r2
 801572c:	f10c 0c01 	add.w	ip, ip, #1
 8015730:	589a      	ldr	r2, [r3, r2]
 8015732:	454a      	cmp	r2, r9
 8015734:	bf08      	it	eq
 8015736:	f10a 0a01 	addeq.w	sl, sl, #1
 801573a:	fa1f f18c 	uxth.w	r1, ip
 801573e:	bf08      	it	eq
 8015740:	fa1f fa8a 	uxtheq.w	sl, sl
 8015744:	4281      	cmp	r1, r0
 8015746:	d3ea      	bcc.n	801571e <uxr_prepare_reliable_buffer_to_write+0x42>
 8015748:	4640      	mov	r0, r8
 801574a:	2104      	movs	r1, #4
 801574c:	f8cd a014 	str.w	sl, [sp, #20]
 8015750:	f7f8 fbda 	bl	800df08 <ucdr_alignment>
 8015754:	4480      	add	r8, r0
 8015756:	eb08 020b 	add.w	r2, r8, fp
 801575a:	42ba      	cmp	r2, r7
 801575c:	f240 80cd 	bls.w	80158fa <uxr_prepare_reliable_buffer_to_write+0x21e>
 8015760:	7b22      	ldrb	r2, [r4, #12]
 8015762:	445a      	add	r2, fp
 8015764:	42ba      	cmp	r2, r7
 8015766:	f240 80b5 	bls.w	80158d4 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801576a:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 801576e:	33fc      	adds	r3, #252	; 0xfc
 8015770:	b2ba      	uxth	r2, r7
 8015772:	4413      	add	r3, r2
 8015774:	b29b      	uxth	r3, r3
 8015776:	fb0a f903 	mul.w	r9, sl, r3
 801577a:	45d9      	cmp	r9, fp
 801577c:	9305      	str	r3, [sp, #20]
 801577e:	9306      	str	r3, [sp, #24]
 8015780:	f0c0 80b7 	bcc.w	80158f2 <uxr_prepare_reliable_buffer_to_write+0x216>
 8015784:	f108 0304 	add.w	r3, r8, #4
 8015788:	42bb      	cmp	r3, r7
 801578a:	f080 80db 	bcs.w	8015944 <uxr_prepare_reliable_buffer_to_write+0x268>
 801578e:	f1a2 0904 	sub.w	r9, r2, #4
 8015792:	eba9 0908 	sub.w	r9, r9, r8
 8015796:	9b05      	ldr	r3, [sp, #20]
 8015798:	fa1f f989 	uxth.w	r9, r9
 801579c:	ebab 0b09 	sub.w	fp, fp, r9
 80157a0:	fbbb f2f3 	udiv	r2, fp, r3
 80157a4:	fb03 b312 	mls	r3, r3, r2, fp
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	f000 80c8 	beq.w	801593e <uxr_prepare_reliable_buffer_to_write+0x262>
 80157ae:	3201      	adds	r2, #1
 80157b0:	b292      	uxth	r2, r2
 80157b2:	9306      	str	r3, [sp, #24]
 80157b4:	4552      	cmp	r2, sl
 80157b6:	f200 809c 	bhi.w	80158f2 <uxr_prepare_reliable_buffer_to_write+0x216>
 80157ba:	f10d 0b20 	add.w	fp, sp, #32
 80157be:	2a00      	cmp	r2, #0
 80157c0:	d042      	beq.n	8015848 <uxr_prepare_reliable_buffer_to_write+0x16c>
 80157c2:	f8cd 801c 	str.w	r8, [sp, #28]
 80157c6:	f04f 0a00 	mov.w	sl, #0
 80157ca:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80157ce:	9505      	str	r5, [sp, #20]
 80157d0:	f10d 0b20 	add.w	fp, sp, #32
 80157d4:	4615      	mov	r5, r2
 80157d6:	e000      	b.n	80157da <uxr_prepare_reliable_buffer_to_write+0xfe>
 80157d8:	46c1      	mov	r9, r8
 80157da:	8920      	ldrh	r0, [r4, #8]
 80157dc:	fbb6 f2f0 	udiv	r2, r6, r0
 80157e0:	fb00 6112 	mls	r1, r0, r2, r6
 80157e4:	b28a      	uxth	r2, r1
 80157e6:	6863      	ldr	r3, [r4, #4]
 80157e8:	fbb3 f1f0 	udiv	r1, r3, r0
 80157ec:	6823      	ldr	r3, [r4, #0]
 80157ee:	fb02 f101 	mul.w	r1, r2, r1
 80157f2:	3104      	adds	r1, #4
 80157f4:	4419      	add	r1, r3
 80157f6:	4658      	mov	r0, fp
 80157f8:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80157fc:	9200      	str	r2, [sp, #0]
 80157fe:	2300      	movs	r3, #0
 8015800:	463a      	mov	r2, r7
 8015802:	f7f8 fb6b 	bl	800dedc <ucdr_init_buffer_origin_offset>
 8015806:	464a      	mov	r2, r9
 8015808:	2300      	movs	r3, #0
 801580a:	210d      	movs	r1, #13
 801580c:	4658      	mov	r0, fp
 801580e:	f7fa f997 	bl	800fb40 <uxr_buffer_submessage_header>
 8015812:	8921      	ldrh	r1, [r4, #8]
 8015814:	fbb6 f2f1 	udiv	r2, r6, r1
 8015818:	fb01 6212 	mls	r2, r1, r2, r6
 801581c:	b292      	uxth	r2, r2
 801581e:	6863      	ldr	r3, [r4, #4]
 8015820:	fbb3 f3f1 	udiv	r3, r3, r1
 8015824:	fb02 f303 	mul.w	r3, r2, r3
 8015828:	6822      	ldr	r2, [r4, #0]
 801582a:	4630      	mov	r0, r6
 801582c:	50d7      	str	r7, [r2, r3]
 801582e:	2101      	movs	r1, #1
 8015830:	f000 f9c4 	bl	8015bbc <uxr_seq_num_add>
 8015834:	f10a 0a01 	add.w	sl, sl, #1
 8015838:	fa1f f38a 	uxth.w	r3, sl
 801583c:	429d      	cmp	r5, r3
 801583e:	4606      	mov	r6, r0
 8015840:	d8ca      	bhi.n	80157d8 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8015842:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8015846:	9d05      	ldr	r5, [sp, #20]
 8015848:	8920      	ldrh	r0, [r4, #8]
 801584a:	fbb6 f3f0 	udiv	r3, r6, r0
 801584e:	fb00 6313 	mls	r3, r0, r3, r6
 8015852:	b299      	uxth	r1, r3
 8015854:	6863      	ldr	r3, [r4, #4]
 8015856:	fbb3 f3f0 	udiv	r3, r3, r0
 801585a:	fb01 f303 	mul.w	r3, r1, r3
 801585e:	6821      	ldr	r1, [r4, #0]
 8015860:	3304      	adds	r3, #4
 8015862:	4419      	add	r1, r3
 8015864:	463a      	mov	r2, r7
 8015866:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801586a:	9000      	str	r0, [sp, #0]
 801586c:	2300      	movs	r3, #0
 801586e:	4658      	mov	r0, fp
 8015870:	f7f8 fb34 	bl	800dedc <ucdr_init_buffer_origin_offset>
 8015874:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8015878:	4658      	mov	r0, fp
 801587a:	fa1f f289 	uxth.w	r2, r9
 801587e:	2302      	movs	r3, #2
 8015880:	210d      	movs	r1, #13
 8015882:	f7fa f95d 	bl	800fb40 <uxr_buffer_submessage_header>
 8015886:	9b03      	ldr	r3, [sp, #12]
 8015888:	8927      	ldrh	r7, [r4, #8]
 801588a:	7b20      	ldrb	r0, [r4, #12]
 801588c:	f108 0104 	add.w	r1, r8, #4
 8015890:	440b      	add	r3, r1
 8015892:	4619      	mov	r1, r3
 8015894:	fbb6 f3f7 	udiv	r3, r6, r7
 8015898:	fb07 6313 	mls	r3, r7, r3, r6
 801589c:	f1a5 0208 	sub.w	r2, r5, #8
 80158a0:	b29d      	uxth	r5, r3
 80158a2:	3004      	adds	r0, #4
 80158a4:	6863      	ldr	r3, [r4, #4]
 80158a6:	fbb3 f3f7 	udiv	r3, r3, r7
 80158aa:	fb05 f303 	mul.w	r3, r5, r3
 80158ae:	6825      	ldr	r5, [r4, #0]
 80158b0:	4448      	add	r0, r9
 80158b2:	50e8      	str	r0, [r5, r3]
 80158b4:	9d04      	ldr	r5, [sp, #16]
 80158b6:	eba2 0208 	sub.w	r2, r2, r8
 80158ba:	4628      	mov	r0, r5
 80158bc:	f7f8 fb20 	bl	800df00 <ucdr_init_buffer>
 80158c0:	4628      	mov	r0, r5
 80158c2:	493c      	ldr	r1, [pc, #240]	; (80159b4 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80158c4:	4622      	mov	r2, r4
 80158c6:	f7f8 faef 	bl	800dea8 <ucdr_set_on_full_buffer_callback>
 80158ca:	2001      	movs	r0, #1
 80158cc:	81e6      	strh	r6, [r4, #14]
 80158ce:	b011      	add	sp, #68	; 0x44
 80158d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158d4:	2101      	movs	r1, #1
 80158d6:	89e0      	ldrh	r0, [r4, #14]
 80158d8:	f000 f970 	bl	8015bbc <uxr_seq_num_add>
 80158dc:	8921      	ldrh	r1, [r4, #8]
 80158de:	4605      	mov	r5, r0
 80158e0:	8a60      	ldrh	r0, [r4, #18]
 80158e2:	f000 f96b 	bl	8015bbc <uxr_seq_num_add>
 80158e6:	4601      	mov	r1, r0
 80158e8:	4628      	mov	r0, r5
 80158ea:	f000 f96f 	bl	8015bcc <uxr_seq_num_cmp>
 80158ee:	2800      	cmp	r0, #0
 80158f0:	dd42      	ble.n	8015978 <uxr_prepare_reliable_buffer_to_write+0x29c>
 80158f2:	2000      	movs	r0, #0
 80158f4:	b011      	add	sp, #68	; 0x44
 80158f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158fa:	8921      	ldrh	r1, [r4, #8]
 80158fc:	8a60      	ldrh	r0, [r4, #18]
 80158fe:	9205      	str	r2, [sp, #20]
 8015900:	f000 f95c 	bl	8015bbc <uxr_seq_num_add>
 8015904:	4601      	mov	r1, r0
 8015906:	4630      	mov	r0, r6
 8015908:	f000 f960 	bl	8015bcc <uxr_seq_num_cmp>
 801590c:	2800      	cmp	r0, #0
 801590e:	9a05      	ldr	r2, [sp, #20]
 8015910:	dcef      	bgt.n	80158f2 <uxr_prepare_reliable_buffer_to_write+0x216>
 8015912:	8927      	ldrh	r7, [r4, #8]
 8015914:	fbb6 f3f7 	udiv	r3, r6, r7
 8015918:	fb07 6313 	mls	r3, r7, r3, r6
 801591c:	b29d      	uxth	r5, r3
 801591e:	6863      	ldr	r3, [r4, #4]
 8015920:	6824      	ldr	r4, [r4, #0]
 8015922:	fbb3 f3f7 	udiv	r3, r3, r7
 8015926:	fb05 f303 	mul.w	r3, r5, r3
 801592a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801592e:	50e2      	str	r2, [r4, r3]
 8015930:	2300      	movs	r3, #0
 8015932:	f8cd 8000 	str.w	r8, [sp]
 8015936:	f7f8 fad1 	bl	800dedc <ucdr_init_buffer_origin_offset>
 801593a:	2001      	movs	r0, #1
 801593c:	e7da      	b.n	80158f4 <uxr_prepare_reliable_buffer_to_write+0x218>
 801593e:	b293      	uxth	r3, r2
 8015940:	461a      	mov	r2, r3
 8015942:	e737      	b.n	80157b4 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8015944:	4630      	mov	r0, r6
 8015946:	2101      	movs	r1, #1
 8015948:	9207      	str	r2, [sp, #28]
 801594a:	f000 f937 	bl	8015bbc <uxr_seq_num_add>
 801594e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015952:	fbb0 f1fc 	udiv	r1, r0, ip
 8015956:	fb0c 0111 	mls	r1, ip, r1, r0
 801595a:	4606      	mov	r6, r0
 801595c:	b288      	uxth	r0, r1
 801595e:	6863      	ldr	r3, [r4, #4]
 8015960:	fbb3 f1fc 	udiv	r1, r3, ip
 8015964:	6823      	ldr	r3, [r4, #0]
 8015966:	9a07      	ldr	r2, [sp, #28]
 8015968:	fb00 f101 	mul.w	r1, r0, r1
 801596c:	3104      	adds	r1, #4
 801596e:	440b      	add	r3, r1
 8015970:	9303      	str	r3, [sp, #12]
 8015972:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8015976:	e70a      	b.n	801578e <uxr_prepare_reliable_buffer_to_write+0xb2>
 8015978:	8921      	ldrh	r1, [r4, #8]
 801597a:	fbb5 f3f1 	udiv	r3, r5, r1
 801597e:	fb01 5313 	mls	r3, r1, r3, r5
 8015982:	b29a      	uxth	r2, r3
 8015984:	6863      	ldr	r3, [r4, #4]
 8015986:	fbb3 f3f1 	udiv	r3, r3, r1
 801598a:	6821      	ldr	r1, [r4, #0]
 801598c:	9804      	ldr	r0, [sp, #16]
 801598e:	fb02 f303 	mul.w	r3, r2, r3
 8015992:	3304      	adds	r3, #4
 8015994:	7b22      	ldrb	r2, [r4, #12]
 8015996:	4419      	add	r1, r3
 8015998:	445a      	add	r2, fp
 801599a:	f841 2c04 	str.w	r2, [r1, #-4]
 801599e:	7b23      	ldrb	r3, [r4, #12]
 80159a0:	9300      	str	r3, [sp, #0]
 80159a2:	2300      	movs	r3, #0
 80159a4:	f7f8 fa9a 	bl	800dedc <ucdr_init_buffer_origin_offset>
 80159a8:	81e5      	strh	r5, [r4, #14]
 80159aa:	2001      	movs	r0, #1
 80159ac:	e7a2      	b.n	80158f4 <uxr_prepare_reliable_buffer_to_write+0x218>
 80159ae:	4682      	mov	sl, r0
 80159b0:	e6ca      	b.n	8015748 <uxr_prepare_reliable_buffer_to_write+0x6c>
 80159b2:	bf00      	nop
 80159b4:	080155bd 	.word	0x080155bd

080159b8 <uxr_prepare_next_reliable_buffer_to_send>:
 80159b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159ba:	4604      	mov	r4, r0
 80159bc:	460f      	mov	r7, r1
 80159be:	8a00      	ldrh	r0, [r0, #16]
 80159c0:	2101      	movs	r1, #1
 80159c2:	4616      	mov	r6, r2
 80159c4:	461d      	mov	r5, r3
 80159c6:	f000 f8f9 	bl	8015bbc <uxr_seq_num_add>
 80159ca:	8028      	strh	r0, [r5, #0]
 80159cc:	8922      	ldrh	r2, [r4, #8]
 80159ce:	fbb0 f3f2 	udiv	r3, r0, r2
 80159d2:	fb02 0c13 	mls	ip, r2, r3, r0
 80159d6:	fa1f fc8c 	uxth.w	ip, ip
 80159da:	6863      	ldr	r3, [r4, #4]
 80159dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80159e0:	fb0c fc03 	mul.w	ip, ip, r3
 80159e4:	6823      	ldr	r3, [r4, #0]
 80159e6:	89e1      	ldrh	r1, [r4, #14]
 80159e8:	f10c 0c04 	add.w	ip, ip, #4
 80159ec:	4463      	add	r3, ip
 80159ee:	603b      	str	r3, [r7, #0]
 80159f0:	6823      	ldr	r3, [r4, #0]
 80159f2:	449c      	add	ip, r3
 80159f4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80159f8:	6033      	str	r3, [r6, #0]
 80159fa:	f000 f8e7 	bl	8015bcc <uxr_seq_num_cmp>
 80159fe:	2800      	cmp	r0, #0
 8015a00:	dd01      	ble.n	8015a06 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8015a02:	2000      	movs	r0, #0
 8015a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a06:	7b23      	ldrb	r3, [r4, #12]
 8015a08:	6832      	ldr	r2, [r6, #0]
 8015a0a:	429a      	cmp	r2, r3
 8015a0c:	d9f9      	bls.n	8015a02 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015a0e:	8a61      	ldrh	r1, [r4, #18]
 8015a10:	8a20      	ldrh	r0, [r4, #16]
 8015a12:	f000 f8d7 	bl	8015bc4 <uxr_seq_num_sub>
 8015a16:	8923      	ldrh	r3, [r4, #8]
 8015a18:	4283      	cmp	r3, r0
 8015a1a:	d0f2      	beq.n	8015a02 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015a1c:	8828      	ldrh	r0, [r5, #0]
 8015a1e:	89e3      	ldrh	r3, [r4, #14]
 8015a20:	8220      	strh	r0, [r4, #16]
 8015a22:	4298      	cmp	r0, r3
 8015a24:	d001      	beq.n	8015a2a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8015a26:	2001      	movs	r0, #1
 8015a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a2a:	2101      	movs	r1, #1
 8015a2c:	f000 f8c6 	bl	8015bbc <uxr_seq_num_add>
 8015a30:	81e0      	strh	r0, [r4, #14]
 8015a32:	2001      	movs	r0, #1
 8015a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a36:	bf00      	nop

08015a38 <uxr_update_output_stream_heartbeat_timestamp>:
 8015a38:	b570      	push	{r4, r5, r6, lr}
 8015a3a:	8a01      	ldrh	r1, [r0, #16]
 8015a3c:	4604      	mov	r4, r0
 8015a3e:	8a40      	ldrh	r0, [r0, #18]
 8015a40:	4615      	mov	r5, r2
 8015a42:	461e      	mov	r6, r3
 8015a44:	f000 f8c2 	bl	8015bcc <uxr_seq_num_cmp>
 8015a48:	2800      	cmp	r0, #0
 8015a4a:	db07      	blt.n	8015a5c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8015a4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015a50:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015a54:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8015a58:	2000      	movs	r0, #0
 8015a5a:	bd70      	pop	{r4, r5, r6, pc}
 8015a5c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8015a60:	b940      	cbnz	r0, 8015a74 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8015a62:	2301      	movs	r3, #1
 8015a64:	f884 3020 	strb.w	r3, [r4, #32]
 8015a68:	3564      	adds	r5, #100	; 0x64
 8015a6a:	f146 0600 	adc.w	r6, r6, #0
 8015a6e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8015a72:	bd70      	pop	{r4, r5, r6, pc}
 8015a74:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8015a78:	4295      	cmp	r5, r2
 8015a7a:	eb76 0303 	sbcs.w	r3, r6, r3
 8015a7e:	bfa5      	ittet	ge
 8015a80:	3001      	addge	r0, #1
 8015a82:	f884 0020 	strbge.w	r0, [r4, #32]
 8015a86:	2000      	movlt	r0, #0
 8015a88:	2001      	movge	r0, #1
 8015a8a:	e7ed      	b.n	8015a68 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08015a8c <uxr_begin_output_nack_buffer_it>:
 8015a8c:	8a40      	ldrh	r0, [r0, #18]
 8015a8e:	4770      	bx	lr

08015a90 <uxr_next_reliable_nack_buffer_to_send>:
 8015a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a94:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 8015a98:	b082      	sub	sp, #8
 8015a9a:	f1b8 0f00 	cmp.w	r8, #0
 8015a9e:	d011      	beq.n	8015ac4 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8015aa0:	4604      	mov	r4, r0
 8015aa2:	8818      	ldrh	r0, [r3, #0]
 8015aa4:	460e      	mov	r6, r1
 8015aa6:	4617      	mov	r7, r2
 8015aa8:	461d      	mov	r5, r3
 8015aaa:	2101      	movs	r1, #1
 8015aac:	f000 f886 	bl	8015bbc <uxr_seq_num_add>
 8015ab0:	8028      	strh	r0, [r5, #0]
 8015ab2:	8a21      	ldrh	r1, [r4, #16]
 8015ab4:	f000 f88a 	bl	8015bcc <uxr_seq_num_cmp>
 8015ab8:	2800      	cmp	r0, #0
 8015aba:	dd07      	ble.n	8015acc <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8015abc:	f04f 0800 	mov.w	r8, #0
 8015ac0:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 8015ac4:	4640      	mov	r0, r8
 8015ac6:	b002      	add	sp, #8
 8015ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015acc:	8921      	ldrh	r1, [r4, #8]
 8015ace:	8828      	ldrh	r0, [r5, #0]
 8015ad0:	6823      	ldr	r3, [r4, #0]
 8015ad2:	fbb0 f2f1 	udiv	r2, r0, r1
 8015ad6:	fb01 0c12 	mls	ip, r1, r2, r0
 8015ada:	fa1f f28c 	uxth.w	r2, ip
 8015ade:	9301      	str	r3, [sp, #4]
 8015ae0:	6863      	ldr	r3, [r4, #4]
 8015ae2:	fbb3 fcf1 	udiv	ip, r3, r1
 8015ae6:	9b01      	ldr	r3, [sp, #4]
 8015ae8:	fb02 fc0c 	mul.w	ip, r2, ip
 8015aec:	f10c 0c04 	add.w	ip, ip, #4
 8015af0:	4463      	add	r3, ip
 8015af2:	6033      	str	r3, [r6, #0]
 8015af4:	6823      	ldr	r3, [r4, #0]
 8015af6:	4463      	add	r3, ip
 8015af8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015afc:	603b      	str	r3, [r7, #0]
 8015afe:	7b22      	ldrb	r2, [r4, #12]
 8015b00:	429a      	cmp	r2, r3
 8015b02:	d0d2      	beq.n	8015aaa <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8015b04:	4640      	mov	r0, r8
 8015b06:	b002      	add	sp, #8
 8015b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015b0c <uxr_process_acknack>:
 8015b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b0e:	4604      	mov	r4, r0
 8015b10:	460e      	mov	r6, r1
 8015b12:	4610      	mov	r0, r2
 8015b14:	2101      	movs	r1, #1
 8015b16:	f000 f855 	bl	8015bc4 <uxr_seq_num_sub>
 8015b1a:	8a61      	ldrh	r1, [r4, #18]
 8015b1c:	f000 f852 	bl	8015bc4 <uxr_seq_num_sub>
 8015b20:	b1c0      	cbz	r0, 8015b54 <uxr_process_acknack+0x48>
 8015b22:	4605      	mov	r5, r0
 8015b24:	2700      	movs	r7, #0
 8015b26:	2101      	movs	r1, #1
 8015b28:	8a60      	ldrh	r0, [r4, #18]
 8015b2a:	f000 f847 	bl	8015bbc <uxr_seq_num_add>
 8015b2e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015b32:	fbb0 f1fc 	udiv	r1, r0, ip
 8015b36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015b3a:	fb0c 0111 	mls	r1, ip, r1, r0
 8015b3e:	b289      	uxth	r1, r1
 8015b40:	3701      	adds	r7, #1
 8015b42:	fbb3 f3fc 	udiv	r3, r3, ip
 8015b46:	fb01 f303 	mul.w	r3, r1, r3
 8015b4a:	42bd      	cmp	r5, r7
 8015b4c:	7b21      	ldrb	r1, [r4, #12]
 8015b4e:	8260      	strh	r0, [r4, #18]
 8015b50:	50d1      	str	r1, [r2, r3]
 8015b52:	d1e8      	bne.n	8015b26 <uxr_process_acknack+0x1a>
 8015b54:	3e00      	subs	r6, #0
 8015b56:	f04f 0300 	mov.w	r3, #0
 8015b5a:	bf18      	it	ne
 8015b5c:	2601      	movne	r6, #1
 8015b5e:	f884 3020 	strb.w	r3, [r4, #32]
 8015b62:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8015b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015b68 <uxr_is_output_up_to_date>:
 8015b68:	8a01      	ldrh	r1, [r0, #16]
 8015b6a:	8a40      	ldrh	r0, [r0, #18]
 8015b6c:	b508      	push	{r3, lr}
 8015b6e:	f000 f82d 	bl	8015bcc <uxr_seq_num_cmp>
 8015b72:	fab0 f080 	clz	r0, r0
 8015b76:	0940      	lsrs	r0, r0, #5
 8015b78:	bd08      	pop	{r3, pc}
 8015b7a:	bf00      	nop

08015b7c <get_available_free_slots>:
 8015b7c:	8902      	ldrh	r2, [r0, #8]
 8015b7e:	b1da      	cbz	r2, 8015bb8 <get_available_free_slots+0x3c>
 8015b80:	b530      	push	{r4, r5, lr}
 8015b82:	2100      	movs	r1, #0
 8015b84:	6843      	ldr	r3, [r0, #4]
 8015b86:	6805      	ldr	r5, [r0, #0]
 8015b88:	7b04      	ldrb	r4, [r0, #12]
 8015b8a:	fbb3 fef2 	udiv	lr, r3, r2
 8015b8e:	4608      	mov	r0, r1
 8015b90:	460b      	mov	r3, r1
 8015b92:	fbb3 fcf2 	udiv	ip, r3, r2
 8015b96:	fb02 331c 	mls	r3, r2, ip, r3
 8015b9a:	b29b      	uxth	r3, r3
 8015b9c:	fb0e f303 	mul.w	r3, lr, r3
 8015ba0:	3101      	adds	r1, #1
 8015ba2:	f855 c003 	ldr.w	ip, [r5, r3]
 8015ba6:	4564      	cmp	r4, ip
 8015ba8:	bf08      	it	eq
 8015baa:	3001      	addeq	r0, #1
 8015bac:	b28b      	uxth	r3, r1
 8015bae:	bf08      	it	eq
 8015bb0:	b280      	uxtheq	r0, r0
 8015bb2:	4293      	cmp	r3, r2
 8015bb4:	d3ed      	bcc.n	8015b92 <get_available_free_slots+0x16>
 8015bb6:	bd30      	pop	{r4, r5, pc}
 8015bb8:	4610      	mov	r0, r2
 8015bba:	4770      	bx	lr

08015bbc <uxr_seq_num_add>:
 8015bbc:	4408      	add	r0, r1
 8015bbe:	b280      	uxth	r0, r0
 8015bc0:	4770      	bx	lr
 8015bc2:	bf00      	nop

08015bc4 <uxr_seq_num_sub>:
 8015bc4:	1a40      	subs	r0, r0, r1
 8015bc6:	b280      	uxth	r0, r0
 8015bc8:	4770      	bx	lr
 8015bca:	bf00      	nop

08015bcc <uxr_seq_num_cmp>:
 8015bcc:	4288      	cmp	r0, r1
 8015bce:	d011      	beq.n	8015bf4 <uxr_seq_num_cmp+0x28>
 8015bd0:	d309      	bcc.n	8015be6 <uxr_seq_num_cmp+0x1a>
 8015bd2:	4288      	cmp	r0, r1
 8015bd4:	d910      	bls.n	8015bf8 <uxr_seq_num_cmp+0x2c>
 8015bd6:	1a40      	subs	r0, r0, r1
 8015bd8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8015bdc:	bfd4      	ite	le
 8015bde:	2001      	movle	r0, #1
 8015be0:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8015be4:	4770      	bx	lr
 8015be6:	1a0b      	subs	r3, r1, r0
 8015be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015bec:	daf1      	bge.n	8015bd2 <uxr_seq_num_cmp+0x6>
 8015bee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015bf2:	4770      	bx	lr
 8015bf4:	2000      	movs	r0, #0
 8015bf6:	4770      	bx	lr
 8015bf8:	2001      	movs	r0, #1
 8015bfa:	4770      	bx	lr

08015bfc <uxr_init_framing_io>:
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	7041      	strb	r1, [r0, #1]
 8015c00:	7003      	strb	r3, [r0, #0]
 8015c02:	8583      	strh	r3, [r0, #44]	; 0x2c
 8015c04:	4770      	bx	lr
 8015c06:	bf00      	nop

08015c08 <uxr_write_framed_msg>:
 8015c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c0c:	4617      	mov	r7, r2
 8015c0e:	7842      	ldrb	r2, [r0, #1]
 8015c10:	b083      	sub	sp, #12
 8015c12:	460e      	mov	r6, r1
 8015c14:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8015c18:	469a      	mov	sl, r3
 8015c1a:	2901      	cmp	r1, #1
 8015c1c:	f04f 037e 	mov.w	r3, #126	; 0x7e
 8015c20:	4604      	mov	r4, r0
 8015c22:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8015c26:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8015c2a:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8015c2e:	f240 8137 	bls.w	8015ea0 <uxr_write_framed_msg+0x298>
 8015c32:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8015c36:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8015c3a:	2901      	cmp	r1, #1
 8015c3c:	f04f 0202 	mov.w	r2, #2
 8015c40:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015c44:	f240 808f 	bls.w	8015d66 <uxr_write_framed_msg+0x15e>
 8015c48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c4a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8015c4e:	b2dd      	uxtb	r5, r3
 8015c50:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8015c54:	2203      	movs	r2, #3
 8015c56:	2901      	cmp	r1, #1
 8015c58:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015c5c:	f240 809a 	bls.w	8015d94 <uxr_write_framed_msg+0x18c>
 8015c60:	18a1      	adds	r1, r4, r2
 8015c62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c64:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 8015c68:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8015c6c:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8015c70:	3201      	adds	r2, #1
 8015c72:	2801      	cmp	r0, #1
 8015c74:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015c78:	f240 80a0 	bls.w	8015dbc <uxr_write_framed_msg+0x1b4>
 8015c7c:	18a0      	adds	r0, r4, r2
 8015c7e:	3201      	adds	r2, #1
 8015c80:	b2d2      	uxtb	r2, r2
 8015c82:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8015c86:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	f000 80a9 	beq.w	8015de2 <uxr_write_framed_msg+0x1da>
 8015c90:	f04f 0900 	mov.w	r9, #0
 8015c94:	46c8      	mov	r8, r9
 8015c96:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8015c9a:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8015c9e:	2901      	cmp	r1, #1
 8015ca0:	f240 80c3 	bls.w	8015e2a <uxr_write_framed_msg+0x222>
 8015ca4:	2a29      	cmp	r2, #41	; 0x29
 8015ca6:	f200 809f 	bhi.w	8015de8 <uxr_write_framed_msg+0x1e0>
 8015caa:	18a1      	adds	r1, r4, r2
 8015cac:	3201      	adds	r2, #1
 8015cae:	b2d2      	uxtb	r2, r2
 8015cb0:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8015cb4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015cb8:	ea89 0303 	eor.w	r3, r9, r3
 8015cbc:	498c      	ldr	r1, [pc, #560]	; (8015ef0 <uxr_write_framed_msg+0x2e8>)
 8015cbe:	b2db      	uxtb	r3, r3
 8015cc0:	f108 0801 	add.w	r8, r8, #1
 8015cc4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015cc8:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8015ccc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015cce:	4543      	cmp	r3, r8
 8015cd0:	d8e1      	bhi.n	8015c96 <uxr_write_framed_msg+0x8e>
 8015cd2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8015cd6:	fa5f f889 	uxtb.w	r8, r9
 8015cda:	9301      	str	r3, [sp, #4]
 8015cdc:	f04f 0900 	mov.w	r9, #0
 8015ce0:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 8015ce4:	fa5f f18a 	uxtb.w	r1, sl
 8015ce8:	2901      	cmp	r1, #1
 8015cea:	d921      	bls.n	8015d30 <uxr_write_framed_msg+0x128>
 8015cec:	2a29      	cmp	r2, #41	; 0x29
 8015cee:	f240 80af 	bls.w	8015e50 <uxr_write_framed_msg+0x248>
 8015cf2:	2500      	movs	r5, #0
 8015cf4:	e000      	b.n	8015cf8 <uxr_write_framed_msg+0xf0>
 8015cf6:	b160      	cbz	r0, 8015d12 <uxr_write_framed_msg+0x10a>
 8015cf8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8015cfc:	1b52      	subs	r2, r2, r5
 8015cfe:	465b      	mov	r3, fp
 8015d00:	4421      	add	r1, r4
 8015d02:	4638      	mov	r0, r7
 8015d04:	47b0      	blx	r6
 8015d06:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015d0a:	4405      	add	r5, r0
 8015d0c:	4295      	cmp	r5, r2
 8015d0e:	d3f2      	bcc.n	8015cf6 <uxr_write_framed_msg+0xee>
 8015d10:	d003      	beq.n	8015d1a <uxr_write_framed_msg+0x112>
 8015d12:	2000      	movs	r0, #0
 8015d14:	b003      	add	sp, #12
 8015d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d1a:	fa5f f18a 	uxtb.w	r1, sl
 8015d1e:	f04f 0300 	mov.w	r3, #0
 8015d22:	2901      	cmp	r1, #1
 8015d24:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8015d28:	f04f 0200 	mov.w	r2, #0
 8015d2c:	f200 8090 	bhi.w	8015e50 <uxr_write_framed_msg+0x248>
 8015d30:	1c51      	adds	r1, r2, #1
 8015d32:	b2c9      	uxtb	r1, r1
 8015d34:	2929      	cmp	r1, #41	; 0x29
 8015d36:	d8dc      	bhi.n	8015cf2 <uxr_write_framed_msg+0xea>
 8015d38:	18a5      	adds	r5, r4, r2
 8015d3a:	4421      	add	r1, r4
 8015d3c:	3202      	adds	r2, #2
 8015d3e:	f088 0820 	eor.w	r8, r8, #32
 8015d42:	4648      	mov	r0, r9
 8015d44:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8015d48:	b2d2      	uxtb	r2, r2
 8015d4a:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 8015d4e:	f04f 0901 	mov.w	r9, #1
 8015d52:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8015d56:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015d5a:	2800      	cmp	r0, #0
 8015d5c:	f040 8085 	bne.w	8015e6a <uxr_write_framed_msg+0x262>
 8015d60:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015d64:	e7bc      	b.n	8015ce0 <uxr_write_framed_msg+0xd8>
 8015d66:	4611      	mov	r1, r2
 8015d68:	f04f 0c03 	mov.w	ip, #3
 8015d6c:	2204      	movs	r2, #4
 8015d6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d70:	4421      	add	r1, r4
 8015d72:	b2dd      	uxtb	r5, r3
 8015d74:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8015d78:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 8015d7c:	44a4      	add	ip, r4
 8015d7e:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8015d82:	f080 0020 	eor.w	r0, r0, #32
 8015d86:	2901      	cmp	r1, #1
 8015d88:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8015d8c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015d90:	f63f af66 	bhi.w	8015c60 <uxr_write_framed_msg+0x58>
 8015d94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d96:	18a0      	adds	r0, r4, r2
 8015d98:	f085 0520 	eor.w	r5, r5, #32
 8015d9c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8015da0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8015da4:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 8015da8:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 8015dac:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8015db0:	3202      	adds	r2, #2
 8015db2:	2801      	cmp	r0, #1
 8015db4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015db8:	f63f af60 	bhi.w	8015c7c <uxr_write_framed_msg+0x74>
 8015dbc:	1c50      	adds	r0, r2, #1
 8015dbe:	18a5      	adds	r5, r4, r2
 8015dc0:	fa54 f080 	uxtab	r0, r4, r0
 8015dc4:	3202      	adds	r2, #2
 8015dc6:	f081 0120 	eor.w	r1, r1, #32
 8015dca:	b2d2      	uxtb	r2, r2
 8015dcc:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8015dd0:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 8015dd4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8015dd8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	f47f af57 	bne.w	8015c90 <uxr_write_framed_msg+0x88>
 8015de2:	9301      	str	r3, [sp, #4]
 8015de4:	4698      	mov	r8, r3
 8015de6:	e779      	b.n	8015cdc <uxr_write_framed_msg+0xd4>
 8015de8:	2500      	movs	r5, #0
 8015dea:	e001      	b.n	8015df0 <uxr_write_framed_msg+0x1e8>
 8015dec:	2800      	cmp	r0, #0
 8015dee:	d090      	beq.n	8015d12 <uxr_write_framed_msg+0x10a>
 8015df0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8015df4:	1b52      	subs	r2, r2, r5
 8015df6:	465b      	mov	r3, fp
 8015df8:	4421      	add	r1, r4
 8015dfa:	4638      	mov	r0, r7
 8015dfc:	47b0      	blx	r6
 8015dfe:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015e02:	4405      	add	r5, r0
 8015e04:	4295      	cmp	r5, r2
 8015e06:	d3f1      	bcc.n	8015dec <uxr_write_framed_msg+0x1e4>
 8015e08:	d183      	bne.n	8015d12 <uxr_write_framed_msg+0x10a>
 8015e0a:	f04f 0300 	mov.w	r3, #0
 8015e0e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8015e12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e14:	4543      	cmp	r3, r8
 8015e16:	d964      	bls.n	8015ee2 <uxr_write_framed_msg+0x2da>
 8015e18:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8015e1c:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8015e20:	2901      	cmp	r1, #1
 8015e22:	f04f 0200 	mov.w	r2, #0
 8015e26:	f63f af3d 	bhi.w	8015ca4 <uxr_write_framed_msg+0x9c>
 8015e2a:	1c51      	adds	r1, r2, #1
 8015e2c:	b2c9      	uxtb	r1, r1
 8015e2e:	2929      	cmp	r1, #41	; 0x29
 8015e30:	d8da      	bhi.n	8015de8 <uxr_write_framed_msg+0x1e0>
 8015e32:	18a0      	adds	r0, r4, r2
 8015e34:	4421      	add	r1, r4
 8015e36:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8015e3a:	3202      	adds	r2, #2
 8015e3c:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8015e40:	b2d2      	uxtb	r2, r2
 8015e42:	f083 0020 	eor.w	r0, r3, #32
 8015e46:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8015e4a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015e4e:	e733      	b.n	8015cb8 <uxr_write_framed_msg+0xb0>
 8015e50:	18a1      	adds	r1, r4, r2
 8015e52:	3201      	adds	r2, #1
 8015e54:	4648      	mov	r0, r9
 8015e56:	b2d2      	uxtb	r2, r2
 8015e58:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8015e5c:	f04f 0901 	mov.w	r9, #1
 8015e60:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015e64:	2800      	cmp	r0, #0
 8015e66:	f43f af7b 	beq.w	8015d60 <uxr_write_framed_msg+0x158>
 8015e6a:	2500      	movs	r5, #0
 8015e6c:	e002      	b.n	8015e74 <uxr_write_framed_msg+0x26c>
 8015e6e:	2800      	cmp	r0, #0
 8015e70:	f43f af4f 	beq.w	8015d12 <uxr_write_framed_msg+0x10a>
 8015e74:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8015e78:	1b52      	subs	r2, r2, r5
 8015e7a:	465b      	mov	r3, fp
 8015e7c:	4421      	add	r1, r4
 8015e7e:	4638      	mov	r0, r7
 8015e80:	47b0      	blx	r6
 8015e82:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015e86:	4405      	add	r5, r0
 8015e88:	4295      	cmp	r5, r2
 8015e8a:	d3f0      	bcc.n	8015e6e <uxr_write_framed_msg+0x266>
 8015e8c:	f47f af41 	bne.w	8015d12 <uxr_write_framed_msg+0x10a>
 8015e90:	2300      	movs	r3, #0
 8015e92:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8015e96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e98:	b298      	uxth	r0, r3
 8015e9a:	b003      	add	sp, #12
 8015e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ea0:	217d      	movs	r1, #125	; 0x7d
 8015ea2:	f082 0220 	eor.w	r2, r2, #32
 8015ea6:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8015eaa:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8015eae:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8015eb2:	2901      	cmp	r1, #1
 8015eb4:	f04f 0203 	mov.w	r2, #3
 8015eb8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015ebc:	d804      	bhi.n	8015ec8 <uxr_write_framed_msg+0x2c0>
 8015ebe:	4611      	mov	r1, r2
 8015ec0:	f04f 0c04 	mov.w	ip, #4
 8015ec4:	2205      	movs	r2, #5
 8015ec6:	e752      	b.n	8015d6e <uxr_write_framed_msg+0x166>
 8015ec8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015eca:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8015ece:	b2dd      	uxtb	r5, r3
 8015ed0:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8015ed4:	2204      	movs	r2, #4
 8015ed6:	2901      	cmp	r1, #1
 8015ed8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015edc:	f63f aec0 	bhi.w	8015c60 <uxr_write_framed_msg+0x58>
 8015ee0:	e758      	b.n	8015d94 <uxr_write_framed_msg+0x18c>
 8015ee2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8015ee6:	fa5f f889 	uxtb.w	r8, r9
 8015eea:	9301      	str	r3, [sp, #4]
 8015eec:	2200      	movs	r2, #0
 8015eee:	e6f5      	b.n	8015cdc <uxr_write_framed_msg+0xd4>
 8015ef0:	080194ec 	.word	0x080194ec

08015ef4 <uxr_framing_read_transport>:
 8015ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ef8:	4604      	mov	r4, r0
 8015efa:	b083      	sub	sp, #12
 8015efc:	461f      	mov	r7, r3
 8015efe:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8015f02:	4689      	mov	r9, r1
 8015f04:	4692      	mov	sl, r2
 8015f06:	f7f9 fe61 	bl	800fbcc <uxr_millis>
 8015f0a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015f0e:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8015f12:	42b3      	cmp	r3, r6
 8015f14:	4680      	mov	r8, r0
 8015f16:	d061      	beq.n	8015fdc <uxr_framing_read_transport+0xe8>
 8015f18:	d81c      	bhi.n	8015f54 <uxr_framing_read_transport+0x60>
 8015f1a:	1e75      	subs	r5, r6, #1
 8015f1c:	1aed      	subs	r5, r5, r3
 8015f1e:	b2ed      	uxtb	r5, r5
 8015f20:	2600      	movs	r6, #0
 8015f22:	455d      	cmp	r5, fp
 8015f24:	d81f      	bhi.n	8015f66 <uxr_framing_read_transport+0x72>
 8015f26:	19ab      	adds	r3, r5, r6
 8015f28:	455b      	cmp	r3, fp
 8015f2a:	bf84      	itt	hi
 8015f2c:	ebab 0605 	subhi.w	r6, fp, r5
 8015f30:	b2f6      	uxtbhi	r6, r6
 8015f32:	b9ed      	cbnz	r5, 8015f70 <uxr_framing_read_transport+0x7c>
 8015f34:	f04f 0b00 	mov.w	fp, #0
 8015f38:	f7f9 fe48 	bl	800fbcc <uxr_millis>
 8015f3c:	683b      	ldr	r3, [r7, #0]
 8015f3e:	eba0 0808 	sub.w	r8, r0, r8
 8015f42:	eba3 0308 	sub.w	r3, r3, r8
 8015f46:	4658      	mov	r0, fp
 8015f48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015f4c:	603b      	str	r3, [r7, #0]
 8015f4e:	b003      	add	sp, #12
 8015f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f54:	2e00      	cmp	r6, #0
 8015f56:	d049      	beq.n	8015fec <uxr_framing_read_transport+0xf8>
 8015f58:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8015f5c:	b2ed      	uxtb	r5, r5
 8015f5e:	3e01      	subs	r6, #1
 8015f60:	455d      	cmp	r5, fp
 8015f62:	b2f6      	uxtb	r6, r6
 8015f64:	d9df      	bls.n	8015f26 <uxr_framing_read_transport+0x32>
 8015f66:	fa5f f58b 	uxtb.w	r5, fp
 8015f6a:	2600      	movs	r6, #0
 8015f6c:	2d00      	cmp	r5, #0
 8015f6e:	d0e1      	beq.n	8015f34 <uxr_framing_read_transport+0x40>
 8015f70:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015f74:	3102      	adds	r1, #2
 8015f76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f78:	9300      	str	r3, [sp, #0]
 8015f7a:	683b      	ldr	r3, [r7, #0]
 8015f7c:	4421      	add	r1, r4
 8015f7e:	462a      	mov	r2, r5
 8015f80:	4650      	mov	r0, sl
 8015f82:	47c8      	blx	r9
 8015f84:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015f88:	4a1a      	ldr	r2, [pc, #104]	; (8015ff4 <uxr_framing_read_transport+0x100>)
 8015f8a:	4403      	add	r3, r0
 8015f8c:	0859      	lsrs	r1, r3, #1
 8015f8e:	fba2 2101 	umull	r2, r1, r2, r1
 8015f92:	0889      	lsrs	r1, r1, #2
 8015f94:	222a      	movs	r2, #42	; 0x2a
 8015f96:	fb02 3111 	mls	r1, r2, r1, r3
 8015f9a:	4683      	mov	fp, r0
 8015f9c:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8015fa0:	2800      	cmp	r0, #0
 8015fa2:	d0c7      	beq.n	8015f34 <uxr_framing_read_transport+0x40>
 8015fa4:	42a8      	cmp	r0, r5
 8015fa6:	d1c7      	bne.n	8015f38 <uxr_framing_read_transport+0x44>
 8015fa8:	2e00      	cmp	r6, #0
 8015faa:	d0c5      	beq.n	8015f38 <uxr_framing_read_transport+0x44>
 8015fac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015fae:	9300      	str	r3, [sp, #0]
 8015fb0:	3102      	adds	r1, #2
 8015fb2:	4632      	mov	r2, r6
 8015fb4:	4421      	add	r1, r4
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	4650      	mov	r0, sl
 8015fba:	47c8      	blx	r9
 8015fbc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015fc0:	4a0c      	ldr	r2, [pc, #48]	; (8015ff4 <uxr_framing_read_transport+0x100>)
 8015fc2:	180b      	adds	r3, r1, r0
 8015fc4:	0859      	lsrs	r1, r3, #1
 8015fc6:	fba2 1201 	umull	r1, r2, r2, r1
 8015fca:	0892      	lsrs	r2, r2, #2
 8015fcc:	212a      	movs	r1, #42	; 0x2a
 8015fce:	fb01 3312 	mls	r3, r1, r2, r3
 8015fd2:	eb00 0b05 	add.w	fp, r0, r5
 8015fd6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8015fda:	e7ad      	b.n	8015f38 <uxr_framing_read_transport+0x44>
 8015fdc:	2600      	movs	r6, #0
 8015fde:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8015fe2:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8015fe4:	d9bf      	bls.n	8015f66 <uxr_framing_read_transport+0x72>
 8015fe6:	2102      	movs	r1, #2
 8015fe8:	2529      	movs	r5, #41	; 0x29
 8015fea:	e7c4      	b.n	8015f76 <uxr_framing_read_transport+0x82>
 8015fec:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8015ff0:	b2ed      	uxtb	r5, r5
 8015ff2:	e796      	b.n	8015f22 <uxr_framing_read_transport+0x2e>
 8015ff4:	30c30c31 	.word	0x30c30c31

08015ff8 <uxr_read_framed_msg>:
 8015ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ffc:	461e      	mov	r6, r3
 8015ffe:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8016002:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8016006:	429d      	cmp	r5, r3
 8016008:	b083      	sub	sp, #12
 801600a:	4604      	mov	r4, r0
 801600c:	4688      	mov	r8, r1
 801600e:	4691      	mov	r9, r2
 8016010:	f000 8188 	beq.w	8016324 <uxr_read_framed_msg+0x32c>
 8016014:	7823      	ldrb	r3, [r4, #0]
 8016016:	4dc1      	ldr	r5, [pc, #772]	; (801631c <uxr_read_framed_msg+0x324>)
 8016018:	4fc1      	ldr	r7, [pc, #772]	; (8016320 <uxr_read_framed_msg+0x328>)
 801601a:	2b07      	cmp	r3, #7
 801601c:	d8fd      	bhi.n	801601a <uxr_read_framed_msg+0x22>
 801601e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8016022:	0115      	.short	0x0115
 8016024:	00d600f6 	.word	0x00d600f6
 8016028:	009000b9 	.word	0x009000b9
 801602c:	0030004d 	.word	0x0030004d
 8016030:	0008      	.short	0x0008
 8016032:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8016036:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801603a:	4299      	cmp	r1, r3
 801603c:	f000 814a 	beq.w	80162d4 <uxr_read_framed_msg+0x2dc>
 8016040:	18e2      	adds	r2, r4, r3
 8016042:	7892      	ldrb	r2, [r2, #2]
 8016044:	2a7d      	cmp	r2, #125	; 0x7d
 8016046:	f000 8199 	beq.w	801637c <uxr_read_framed_msg+0x384>
 801604a:	3301      	adds	r3, #1
 801604c:	0858      	lsrs	r0, r3, #1
 801604e:	fba5 1000 	umull	r1, r0, r5, r0
 8016052:	0880      	lsrs	r0, r0, #2
 8016054:	212a      	movs	r1, #42	; 0x2a
 8016056:	fb01 3310 	mls	r3, r1, r0, r3
 801605a:	2a7e      	cmp	r2, #126	; 0x7e
 801605c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016060:	f000 8252 	beq.w	8016508 <uxr_read_framed_msg+0x510>
 8016064:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8016066:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8016068:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801606c:	b29b      	uxth	r3, r3
 801606e:	2200      	movs	r2, #0
 8016070:	4299      	cmp	r1, r3
 8016072:	86a3      	strh	r3, [r4, #52]	; 0x34
 8016074:	7022      	strb	r2, [r4, #0]
 8016076:	f000 8179 	beq.w	801636c <uxr_read_framed_msg+0x374>
 801607a:	2000      	movs	r0, #0
 801607c:	b003      	add	sp, #12
 801607e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016082:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8016086:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801608a:	4299      	cmp	r1, r3
 801608c:	f000 8131 	beq.w	80162f2 <uxr_read_framed_msg+0x2fa>
 8016090:	18e2      	adds	r2, r4, r3
 8016092:	7890      	ldrb	r0, [r2, #2]
 8016094:	287d      	cmp	r0, #125	; 0x7d
 8016096:	f000 8190 	beq.w	80163ba <uxr_read_framed_msg+0x3c2>
 801609a:	3301      	adds	r3, #1
 801609c:	085a      	lsrs	r2, r3, #1
 801609e:	fba5 1202 	umull	r1, r2, r5, r2
 80160a2:	0892      	lsrs	r2, r2, #2
 80160a4:	212a      	movs	r1, #42	; 0x2a
 80160a6:	fb01 3312 	mls	r3, r1, r2, r3
 80160aa:	287e      	cmp	r0, #126	; 0x7e
 80160ac:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80160b0:	f000 821a 	beq.w	80164e8 <uxr_read_framed_msg+0x4f0>
 80160b4:	2307      	movs	r3, #7
 80160b6:	86a0      	strh	r0, [r4, #52]	; 0x34
 80160b8:	7023      	strb	r3, [r4, #0]
 80160ba:	e7ae      	b.n	801601a <uxr_read_framed_msg+0x22>
 80160bc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80160be:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 80160c2:	459e      	cmp	lr, r3
 80160c4:	d938      	bls.n	8016138 <uxr_read_framed_msg+0x140>
 80160c6:	ee07 8a90 	vmov	s15, r8
 80160ca:	212a      	movs	r1, #42	; 0x2a
 80160cc:	e020      	b.n	8016110 <uxr_read_framed_msg+0x118>
 80160ce:	f89b c002 	ldrb.w	ip, [fp, #2]
 80160d2:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 80160d6:	f000 80d4 	beq.w	8016282 <uxr_read_framed_msg+0x28a>
 80160da:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 80160de:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80160e2:	f000 8219 	beq.w	8016518 <uxr_read_framed_msg+0x520>
 80160e6:	f806 c003 	strb.w	ip, [r6, r3]
 80160ea:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 80160ee:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80160f0:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 80160f4:	ea8a 000c 	eor.w	r0, sl, ip
 80160f8:	b2c0      	uxtb	r0, r0
 80160fa:	3301      	adds	r3, #1
 80160fc:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8016100:	b29b      	uxth	r3, r3
 8016102:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8016106:	4573      	cmp	r3, lr
 8016108:	8663      	strh	r3, [r4, #50]	; 0x32
 801610a:	86e2      	strh	r2, [r4, #54]	; 0x36
 801610c:	f080 8120 	bcs.w	8016350 <uxr_read_framed_msg+0x358>
 8016110:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8016114:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8016118:	f100 0c01 	add.w	ip, r0, #1
 801611c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016120:	fba5 8202 	umull	r8, r2, r5, r2
 8016124:	0892      	lsrs	r2, r2, #2
 8016126:	4582      	cmp	sl, r0
 8016128:	eb04 0b00 	add.w	fp, r4, r0
 801612c:	fb01 c212 	mls	r2, r1, r2, ip
 8016130:	d1cd      	bne.n	80160ce <uxr_read_framed_msg+0xd6>
 8016132:	ee17 8a90 	vmov	r8, s15
 8016136:	459e      	cmp	lr, r3
 8016138:	f040 8111 	bne.w	801635e <uxr_read_framed_msg+0x366>
 801613c:	2306      	movs	r3, #6
 801613e:	7023      	strb	r3, [r4, #0]
 8016140:	e76b      	b.n	801601a <uxr_read_framed_msg+0x22>
 8016142:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8016146:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801614a:	4298      	cmp	r0, r3
 801614c:	f000 80c2 	beq.w	80162d4 <uxr_read_framed_msg+0x2dc>
 8016150:	18e2      	adds	r2, r4, r3
 8016152:	7891      	ldrb	r1, [r2, #2]
 8016154:	297d      	cmp	r1, #125	; 0x7d
 8016156:	f000 814c 	beq.w	80163f2 <uxr_read_framed_msg+0x3fa>
 801615a:	3301      	adds	r3, #1
 801615c:	085a      	lsrs	r2, r3, #1
 801615e:	fba5 0202 	umull	r0, r2, r5, r2
 8016162:	0892      	lsrs	r2, r2, #2
 8016164:	202a      	movs	r0, #42	; 0x2a
 8016166:	fb00 3312 	mls	r3, r0, r2, r3
 801616a:	297e      	cmp	r1, #126	; 0x7e
 801616c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016170:	f000 81ca 	beq.w	8016508 <uxr_read_framed_msg+0x510>
 8016174:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8016176:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801617a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801617c:	b29b      	uxth	r3, r3
 801617e:	2000      	movs	r0, #0
 8016180:	428b      	cmp	r3, r1
 8016182:	8623      	strh	r3, [r4, #48]	; 0x30
 8016184:	8660      	strh	r0, [r4, #50]	; 0x32
 8016186:	86e0      	strh	r0, [r4, #54]	; 0x36
 8016188:	f240 80df 	bls.w	801634a <uxr_read_framed_msg+0x352>
 801618c:	7020      	strb	r0, [r4, #0]
 801618e:	b003      	add	sp, #12
 8016190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016194:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8016198:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801619c:	4299      	cmp	r1, r3
 801619e:	f000 80a8 	beq.w	80162f2 <uxr_read_framed_msg+0x2fa>
 80161a2:	18e2      	adds	r2, r4, r3
 80161a4:	7890      	ldrb	r0, [r2, #2]
 80161a6:	287d      	cmp	r0, #125	; 0x7d
 80161a8:	f000 8164 	beq.w	8016474 <uxr_read_framed_msg+0x47c>
 80161ac:	3301      	adds	r3, #1
 80161ae:	085a      	lsrs	r2, r3, #1
 80161b0:	fba5 1202 	umull	r1, r2, r5, r2
 80161b4:	0892      	lsrs	r2, r2, #2
 80161b6:	212a      	movs	r1, #42	; 0x2a
 80161b8:	fb01 3312 	mls	r3, r1, r2, r3
 80161bc:	287e      	cmp	r0, #126	; 0x7e
 80161be:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80161c2:	f000 8191 	beq.w	80164e8 <uxr_read_framed_msg+0x4f0>
 80161c6:	2304      	movs	r3, #4
 80161c8:	8620      	strh	r0, [r4, #48]	; 0x30
 80161ca:	7023      	strb	r3, [r4, #0]
 80161cc:	e725      	b.n	801601a <uxr_read_framed_msg+0x22>
 80161ce:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80161d2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80161d6:	4290      	cmp	r0, r2
 80161d8:	f000 80b3 	beq.w	8016342 <uxr_read_framed_msg+0x34a>
 80161dc:	18a3      	adds	r3, r4, r2
 80161de:	7899      	ldrb	r1, [r3, #2]
 80161e0:	297d      	cmp	r1, #125	; 0x7d
 80161e2:	f000 8164 	beq.w	80164ae <uxr_read_framed_msg+0x4b6>
 80161e6:	3201      	adds	r2, #1
 80161e8:	0850      	lsrs	r0, r2, #1
 80161ea:	fba5 3000 	umull	r3, r0, r5, r0
 80161ee:	0880      	lsrs	r0, r0, #2
 80161f0:	232a      	movs	r3, #42	; 0x2a
 80161f2:	fb03 2210 	mls	r2, r3, r0, r2
 80161f6:	297e      	cmp	r1, #126	; 0x7e
 80161f8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80161fc:	f000 8188 	beq.w	8016510 <uxr_read_framed_msg+0x518>
 8016200:	7863      	ldrb	r3, [r4, #1]
 8016202:	428b      	cmp	r3, r1
 8016204:	bf0c      	ite	eq
 8016206:	2303      	moveq	r3, #3
 8016208:	2300      	movne	r3, #0
 801620a:	7023      	strb	r3, [r4, #0]
 801620c:	e705      	b.n	801601a <uxr_read_framed_msg+0x22>
 801620e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8016212:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016216:	2200      	movs	r2, #0
 8016218:	4299      	cmp	r1, r3
 801621a:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 801621e:	d06c      	beq.n	80162fa <uxr_read_framed_msg+0x302>
 8016220:	18e2      	adds	r2, r4, r3
 8016222:	7890      	ldrb	r0, [r2, #2]
 8016224:	287d      	cmp	r0, #125	; 0x7d
 8016226:	f000 8101 	beq.w	801642c <uxr_read_framed_msg+0x434>
 801622a:	3301      	adds	r3, #1
 801622c:	085a      	lsrs	r2, r3, #1
 801622e:	fba5 1202 	umull	r1, r2, r5, r2
 8016232:	0892      	lsrs	r2, r2, #2
 8016234:	212a      	movs	r1, #42	; 0x2a
 8016236:	fb01 3312 	mls	r3, r1, r2, r3
 801623a:	287e      	cmp	r0, #126	; 0x7e
 801623c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8016240:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016244:	d059      	beq.n	80162fa <uxr_read_framed_msg+0x302>
 8016246:	2302      	movs	r3, #2
 8016248:	7023      	strb	r3, [r4, #0]
 801624a:	e6e6      	b.n	801601a <uxr_read_framed_msg+0x22>
 801624c:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8016250:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8016254:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8016258:	1c51      	adds	r1, r2, #1
 801625a:	084b      	lsrs	r3, r1, #1
 801625c:	fba5 c303 	umull	ip, r3, r5, r3
 8016260:	089b      	lsrs	r3, r3, #2
 8016262:	fb0e 1313 	mls	r3, lr, r3, r1
 8016266:	4592      	cmp	sl, r2
 8016268:	eb04 0002 	add.w	r0, r4, r2
 801626c:	b2da      	uxtb	r2, r3
 801626e:	f43f af04 	beq.w	801607a <uxr_read_framed_msg+0x82>
 8016272:	7883      	ldrb	r3, [r0, #2]
 8016274:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8016278:	2b7e      	cmp	r3, #126	; 0x7e
 801627a:	d1ed      	bne.n	8016258 <uxr_read_framed_msg+0x260>
 801627c:	2301      	movs	r3, #1
 801627e:	7023      	strb	r3, [r4, #0]
 8016280:	e6cb      	b.n	801601a <uxr_read_framed_msg+0x22>
 8016282:	f100 0c01 	add.w	ip, r0, #1
 8016286:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801628a:	fba5 8202 	umull	r8, r2, r5, r2
 801628e:	0892      	lsrs	r2, r2, #2
 8016290:	fb01 c212 	mls	r2, r1, r2, ip
 8016294:	eb04 0c02 	add.w	ip, r4, r2
 8016298:	b2d2      	uxtb	r2, r2
 801629a:	4592      	cmp	sl, r2
 801629c:	f100 0002 	add.w	r0, r0, #2
 80162a0:	f43f af47 	beq.w	8016132 <uxr_read_framed_msg+0x13a>
 80162a4:	0842      	lsrs	r2, r0, #1
 80162a6:	f89c a002 	ldrb.w	sl, [ip, #2]
 80162aa:	fba5 8202 	umull	r8, r2, r5, r2
 80162ae:	0892      	lsrs	r2, r2, #2
 80162b0:	fb01 0012 	mls	r0, r1, r2, r0
 80162b4:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 80162b8:	f08a 0c20 	eor.w	ip, sl, #32
 80162bc:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 80162c0:	f47f af11 	bne.w	80160e6 <uxr_read_framed_msg+0xee>
 80162c4:	459e      	cmp	lr, r3
 80162c6:	ee17 8a90 	vmov	r8, s15
 80162ca:	f43f af37 	beq.w	801613c <uxr_read_framed_msg+0x144>
 80162ce:	2301      	movs	r3, #1
 80162d0:	7023      	strb	r3, [r4, #0]
 80162d2:	e6a2      	b.n	801601a <uxr_read_framed_msg+0x22>
 80162d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80162d6:	9300      	str	r3, [sp, #0]
 80162d8:	2301      	movs	r3, #1
 80162da:	9301      	str	r3, [sp, #4]
 80162dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80162de:	464a      	mov	r2, r9
 80162e0:	4641      	mov	r1, r8
 80162e2:	4620      	mov	r0, r4
 80162e4:	f7ff fe06 	bl	8015ef4 <uxr_framing_read_transport>
 80162e8:	2800      	cmp	r0, #0
 80162ea:	f43f aec6 	beq.w	801607a <uxr_read_framed_msg+0x82>
 80162ee:	7823      	ldrb	r3, [r4, #0]
 80162f0:	e693      	b.n	801601a <uxr_read_framed_msg+0x22>
 80162f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80162f4:	9300      	str	r3, [sp, #0]
 80162f6:	2302      	movs	r3, #2
 80162f8:	e7ef      	b.n	80162da <uxr_read_framed_msg+0x2e2>
 80162fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80162fc:	9300      	str	r3, [sp, #0]
 80162fe:	2304      	movs	r3, #4
 8016300:	9301      	str	r3, [sp, #4]
 8016302:	464a      	mov	r2, r9
 8016304:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016306:	4641      	mov	r1, r8
 8016308:	4620      	mov	r0, r4
 801630a:	f7ff fdf3 	bl	8015ef4 <uxr_framing_read_transport>
 801630e:	2800      	cmp	r0, #0
 8016310:	d1ed      	bne.n	80162ee <uxr_read_framed_msg+0x2f6>
 8016312:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8016316:	2b7e      	cmp	r3, #126	; 0x7e
 8016318:	d0e9      	beq.n	80162ee <uxr_read_framed_msg+0x2f6>
 801631a:	e6ae      	b.n	801607a <uxr_read_framed_msg+0x82>
 801631c:	30c30c31 	.word	0x30c30c31
 8016320:	080194ec 	.word	0x080194ec
 8016324:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016326:	9300      	str	r3, [sp, #0]
 8016328:	2305      	movs	r3, #5
 801632a:	9301      	str	r3, [sp, #4]
 801632c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801632e:	f7ff fde1 	bl	8015ef4 <uxr_framing_read_transport>
 8016332:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8016336:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801633a:	429a      	cmp	r2, r3
 801633c:	f43f ae9d 	beq.w	801607a <uxr_read_framed_msg+0x82>
 8016340:	e668      	b.n	8016014 <uxr_read_framed_msg+0x1c>
 8016342:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016344:	9300      	str	r3, [sp, #0]
 8016346:	2303      	movs	r3, #3
 8016348:	e7c7      	b.n	80162da <uxr_read_framed_msg+0x2e2>
 801634a:	2305      	movs	r3, #5
 801634c:	7023      	strb	r3, [r4, #0]
 801634e:	e664      	b.n	801601a <uxr_read_framed_msg+0x22>
 8016350:	ee17 8a90 	vmov	r8, s15
 8016354:	f43f aef2 	beq.w	801613c <uxr_read_framed_msg+0x144>
 8016358:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801635c:	d08e      	beq.n	801627c <uxr_read_framed_msg+0x284>
 801635e:	ebae 0303 	sub.w	r3, lr, r3
 8016362:	3302      	adds	r3, #2
 8016364:	9301      	str	r3, [sp, #4]
 8016366:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016368:	9300      	str	r3, [sp, #0]
 801636a:	e7b7      	b.n	80162dc <uxr_read_framed_msg+0x2e4>
 801636c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801636e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8016372:	7013      	strb	r3, [r2, #0]
 8016374:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8016376:	b003      	add	sp, #12
 8016378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801637c:	f103 0c01 	add.w	ip, r3, #1
 8016380:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016384:	fba5 0202 	umull	r0, r2, r5, r2
 8016388:	0892      	lsrs	r2, r2, #2
 801638a:	202a      	movs	r0, #42	; 0x2a
 801638c:	fb00 c212 	mls	r2, r0, r2, ip
 8016390:	fa5f fc82 	uxtb.w	ip, r2
 8016394:	4561      	cmp	r1, ip
 8016396:	d09d      	beq.n	80162d4 <uxr_read_framed_msg+0x2dc>
 8016398:	3302      	adds	r3, #2
 801639a:	4422      	add	r2, r4
 801639c:	0859      	lsrs	r1, r3, #1
 801639e:	7892      	ldrb	r2, [r2, #2]
 80163a0:	fba5 c101 	umull	ip, r1, r5, r1
 80163a4:	0889      	lsrs	r1, r1, #2
 80163a6:	fb00 3311 	mls	r3, r0, r1, r3
 80163aa:	2a7e      	cmp	r2, #126	; 0x7e
 80163ac:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80163b0:	f000 80aa 	beq.w	8016508 <uxr_read_framed_msg+0x510>
 80163b4:	f082 0220 	eor.w	r2, r2, #32
 80163b8:	e654      	b.n	8016064 <uxr_read_framed_msg+0x6c>
 80163ba:	1c58      	adds	r0, r3, #1
 80163bc:	0842      	lsrs	r2, r0, #1
 80163be:	fba5 c202 	umull	ip, r2, r5, r2
 80163c2:	0892      	lsrs	r2, r2, #2
 80163c4:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80163c8:	fb0c 0212 	mls	r2, ip, r2, r0
 80163cc:	b2d0      	uxtb	r0, r2
 80163ce:	4281      	cmp	r1, r0
 80163d0:	d08f      	beq.n	80162f2 <uxr_read_framed_msg+0x2fa>
 80163d2:	4422      	add	r2, r4
 80163d4:	3302      	adds	r3, #2
 80163d6:	7890      	ldrb	r0, [r2, #2]
 80163d8:	085a      	lsrs	r2, r3, #1
 80163da:	fba5 1202 	umull	r1, r2, r5, r2
 80163de:	0892      	lsrs	r2, r2, #2
 80163e0:	fb0c 3312 	mls	r3, ip, r2, r3
 80163e4:	287e      	cmp	r0, #126	; 0x7e
 80163e6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80163ea:	d07d      	beq.n	80164e8 <uxr_read_framed_msg+0x4f0>
 80163ec:	f080 0020 	eor.w	r0, r0, #32
 80163f0:	e660      	b.n	80160b4 <uxr_read_framed_msg+0xbc>
 80163f2:	1c59      	adds	r1, r3, #1
 80163f4:	084a      	lsrs	r2, r1, #1
 80163f6:	fba5 c202 	umull	ip, r2, r5, r2
 80163fa:	0892      	lsrs	r2, r2, #2
 80163fc:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8016400:	fb0c 1212 	mls	r2, ip, r2, r1
 8016404:	b2d1      	uxtb	r1, r2
 8016406:	4288      	cmp	r0, r1
 8016408:	f43f af64 	beq.w	80162d4 <uxr_read_framed_msg+0x2dc>
 801640c:	4422      	add	r2, r4
 801640e:	3302      	adds	r3, #2
 8016410:	7891      	ldrb	r1, [r2, #2]
 8016412:	085a      	lsrs	r2, r3, #1
 8016414:	fba5 0202 	umull	r0, r2, r5, r2
 8016418:	0892      	lsrs	r2, r2, #2
 801641a:	fb0c 3312 	mls	r3, ip, r2, r3
 801641e:	297e      	cmp	r1, #126	; 0x7e
 8016420:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016424:	d070      	beq.n	8016508 <uxr_read_framed_msg+0x510>
 8016426:	f081 0120 	eor.w	r1, r1, #32
 801642a:	e6a3      	b.n	8016174 <uxr_read_framed_msg+0x17c>
 801642c:	f103 0c01 	add.w	ip, r3, #1
 8016430:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016434:	fba5 0202 	umull	r0, r2, r5, r2
 8016438:	0892      	lsrs	r2, r2, #2
 801643a:	202a      	movs	r0, #42	; 0x2a
 801643c:	fb00 c212 	mls	r2, r0, r2, ip
 8016440:	fa5f fc82 	uxtb.w	ip, r2
 8016444:	4561      	cmp	r1, ip
 8016446:	f43f af58 	beq.w	80162fa <uxr_read_framed_msg+0x302>
 801644a:	4422      	add	r2, r4
 801644c:	3302      	adds	r3, #2
 801644e:	7891      	ldrb	r1, [r2, #2]
 8016450:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8016454:	085a      	lsrs	r2, r3, #1
 8016456:	fba5 c202 	umull	ip, r2, r5, r2
 801645a:	0892      	lsrs	r2, r2, #2
 801645c:	fb00 3312 	mls	r3, r0, r2, r3
 8016460:	297e      	cmp	r1, #126	; 0x7e
 8016462:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016466:	f43f af48 	beq.w	80162fa <uxr_read_framed_msg+0x302>
 801646a:	f081 0120 	eor.w	r1, r1, #32
 801646e:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8016472:	e6e8      	b.n	8016246 <uxr_read_framed_msg+0x24e>
 8016474:	1c58      	adds	r0, r3, #1
 8016476:	0842      	lsrs	r2, r0, #1
 8016478:	fba5 c202 	umull	ip, r2, r5, r2
 801647c:	0892      	lsrs	r2, r2, #2
 801647e:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8016482:	fb0c 0212 	mls	r2, ip, r2, r0
 8016486:	b2d0      	uxtb	r0, r2
 8016488:	4281      	cmp	r1, r0
 801648a:	f43f af32 	beq.w	80162f2 <uxr_read_framed_msg+0x2fa>
 801648e:	4422      	add	r2, r4
 8016490:	3302      	adds	r3, #2
 8016492:	7890      	ldrb	r0, [r2, #2]
 8016494:	085a      	lsrs	r2, r3, #1
 8016496:	fba5 1202 	umull	r1, r2, r5, r2
 801649a:	0892      	lsrs	r2, r2, #2
 801649c:	fb0c 3312 	mls	r3, ip, r2, r3
 80164a0:	287e      	cmp	r0, #126	; 0x7e
 80164a2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80164a6:	d01f      	beq.n	80164e8 <uxr_read_framed_msg+0x4f0>
 80164a8:	f080 0020 	eor.w	r0, r0, #32
 80164ac:	e68b      	b.n	80161c6 <uxr_read_framed_msg+0x1ce>
 80164ae:	1c51      	adds	r1, r2, #1
 80164b0:	084b      	lsrs	r3, r1, #1
 80164b2:	fba5 c303 	umull	ip, r3, r5, r3
 80164b6:	089b      	lsrs	r3, r3, #2
 80164b8:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80164bc:	fb0c 1313 	mls	r3, ip, r3, r1
 80164c0:	b2d9      	uxtb	r1, r3
 80164c2:	4288      	cmp	r0, r1
 80164c4:	f43f af3d 	beq.w	8016342 <uxr_read_framed_msg+0x34a>
 80164c8:	3202      	adds	r2, #2
 80164ca:	4423      	add	r3, r4
 80164cc:	0850      	lsrs	r0, r2, #1
 80164ce:	789b      	ldrb	r3, [r3, #2]
 80164d0:	fba5 1000 	umull	r1, r0, r5, r0
 80164d4:	0880      	lsrs	r0, r0, #2
 80164d6:	fb0c 2210 	mls	r2, ip, r0, r2
 80164da:	2b7e      	cmp	r3, #126	; 0x7e
 80164dc:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80164e0:	d016      	beq.n	8016510 <uxr_read_framed_msg+0x518>
 80164e2:	f083 0120 	eor.w	r1, r3, #32
 80164e6:	e68b      	b.n	8016200 <uxr_read_framed_msg+0x208>
 80164e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80164ea:	9300      	str	r3, [sp, #0]
 80164ec:	2302      	movs	r3, #2
 80164ee:	9301      	str	r3, [sp, #4]
 80164f0:	464a      	mov	r2, r9
 80164f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164f4:	4641      	mov	r1, r8
 80164f6:	4620      	mov	r0, r4
 80164f8:	f7ff fcfc 	bl	8015ef4 <uxr_framing_read_transport>
 80164fc:	2800      	cmp	r0, #0
 80164fe:	f47f aef6 	bne.w	80162ee <uxr_read_framed_msg+0x2f6>
 8016502:	2301      	movs	r3, #1
 8016504:	7023      	strb	r3, [r4, #0]
 8016506:	e588      	b.n	801601a <uxr_read_framed_msg+0x22>
 8016508:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801650a:	9300      	str	r3, [sp, #0]
 801650c:	2301      	movs	r3, #1
 801650e:	e7ee      	b.n	80164ee <uxr_read_framed_msg+0x4f6>
 8016510:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016512:	9300      	str	r3, [sp, #0]
 8016514:	2303      	movs	r3, #3
 8016516:	e7ea      	b.n	80164ee <uxr_read_framed_msg+0x4f6>
 8016518:	ee17 8a90 	vmov	r8, s15
 801651c:	e6ae      	b.n	801627c <uxr_read_framed_msg+0x284>
 801651e:	bf00      	nop

08016520 <rcl_get_default_domain_id>:
 8016520:	b530      	push	{r4, r5, lr}
 8016522:	b083      	sub	sp, #12
 8016524:	2300      	movs	r3, #0
 8016526:	9300      	str	r3, [sp, #0]
 8016528:	b1d0      	cbz	r0, 8016560 <rcl_get_default_domain_id+0x40>
 801652a:	4604      	mov	r4, r0
 801652c:	4669      	mov	r1, sp
 801652e:	4815      	ldr	r0, [pc, #84]	; (8016584 <rcl_get_default_domain_id+0x64>)
 8016530:	f7f3 fc94 	bl	8009e5c <rcutils_get_env>
 8016534:	4602      	mov	r2, r0
 8016536:	b110      	cbz	r0, 801653e <rcl_get_default_domain_id+0x1e>
 8016538:	2001      	movs	r0, #1
 801653a:	b003      	add	sp, #12
 801653c:	bd30      	pop	{r4, r5, pc}
 801653e:	9b00      	ldr	r3, [sp, #0]
 8016540:	b18b      	cbz	r3, 8016566 <rcl_get_default_domain_id+0x46>
 8016542:	7818      	ldrb	r0, [r3, #0]
 8016544:	2800      	cmp	r0, #0
 8016546:	d0f8      	beq.n	801653a <rcl_get_default_domain_id+0x1a>
 8016548:	a901      	add	r1, sp, #4
 801654a:	4618      	mov	r0, r3
 801654c:	9201      	str	r2, [sp, #4]
 801654e:	f000 fde1 	bl	8017114 <strtoul>
 8016552:	4605      	mov	r5, r0
 8016554:	b150      	cbz	r0, 801656c <rcl_get_default_domain_id+0x4c>
 8016556:	1c43      	adds	r3, r0, #1
 8016558:	d00d      	beq.n	8016576 <rcl_get_default_domain_id+0x56>
 801655a:	6025      	str	r5, [r4, #0]
 801655c:	2000      	movs	r0, #0
 801655e:	e7ec      	b.n	801653a <rcl_get_default_domain_id+0x1a>
 8016560:	200b      	movs	r0, #11
 8016562:	b003      	add	sp, #12
 8016564:	bd30      	pop	{r4, r5, pc}
 8016566:	4618      	mov	r0, r3
 8016568:	b003      	add	sp, #12
 801656a:	bd30      	pop	{r4, r5, pc}
 801656c:	9b01      	ldr	r3, [sp, #4]
 801656e:	781b      	ldrb	r3, [r3, #0]
 8016570:	2b00      	cmp	r3, #0
 8016572:	d0f2      	beq.n	801655a <rcl_get_default_domain_id+0x3a>
 8016574:	e7e0      	b.n	8016538 <rcl_get_default_domain_id+0x18>
 8016576:	f001 f97f 	bl	8017878 <__errno>
 801657a:	6803      	ldr	r3, [r0, #0]
 801657c:	2b22      	cmp	r3, #34	; 0x22
 801657e:	d1ec      	bne.n	801655a <rcl_get_default_domain_id+0x3a>
 8016580:	e7da      	b.n	8016538 <rcl_get_default_domain_id+0x18>
 8016582:	bf00      	nop
 8016584:	080196ec 	.word	0x080196ec

08016588 <rcl_expand_topic_name>:
 8016588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801658c:	b08b      	sub	sp, #44	; 0x2c
 801658e:	9306      	str	r3, [sp, #24]
 8016590:	2800      	cmp	r0, #0
 8016592:	f000 80ad 	beq.w	80166f0 <rcl_expand_topic_name+0x168>
 8016596:	460e      	mov	r6, r1
 8016598:	2900      	cmp	r1, #0
 801659a:	f000 80a9 	beq.w	80166f0 <rcl_expand_topic_name+0x168>
 801659e:	4617      	mov	r7, r2
 80165a0:	2a00      	cmp	r2, #0
 80165a2:	f000 80a5 	beq.w	80166f0 <rcl_expand_topic_name+0x168>
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	f000 80a2 	beq.w	80166f0 <rcl_expand_topic_name+0x168>
 80165ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	f000 809e 	beq.w	80166f0 <rcl_expand_topic_name+0x168>
 80165b4:	2200      	movs	r2, #0
 80165b6:	a909      	add	r1, sp, #36	; 0x24
 80165b8:	4680      	mov	r8, r0
 80165ba:	f000 f949 	bl	8016850 <rcl_validate_topic_name>
 80165be:	4604      	mov	r4, r0
 80165c0:	2800      	cmp	r0, #0
 80165c2:	f040 8096 	bne.w	80166f2 <rcl_expand_topic_name+0x16a>
 80165c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	f040 809a 	bne.w	8016702 <rcl_expand_topic_name+0x17a>
 80165ce:	4602      	mov	r2, r0
 80165d0:	a909      	add	r1, sp, #36	; 0x24
 80165d2:	4630      	mov	r0, r6
 80165d4:	f7f3 fecc 	bl	800a370 <rmw_validate_node_name>
 80165d8:	2800      	cmp	r0, #0
 80165da:	f040 808e 	bne.w	80166fa <rcl_expand_topic_name+0x172>
 80165de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80165e0:	2a00      	cmp	r2, #0
 80165e2:	f040 8093 	bne.w	801670c <rcl_expand_topic_name+0x184>
 80165e6:	a909      	add	r1, sp, #36	; 0x24
 80165e8:	4638      	mov	r0, r7
 80165ea:	f7f3 fea3 	bl	800a334 <rmw_validate_namespace>
 80165ee:	2800      	cmp	r0, #0
 80165f0:	f040 8083 	bne.w	80166fa <rcl_expand_topic_name+0x172>
 80165f4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80165f6:	2c00      	cmp	r4, #0
 80165f8:	f040 80ed 	bne.w	80167d6 <rcl_expand_topic_name+0x24e>
 80165fc:	217b      	movs	r1, #123	; 0x7b
 80165fe:	4640      	mov	r0, r8
 8016600:	f001 f858 	bl	80176b4 <strchr>
 8016604:	f898 3000 	ldrb.w	r3, [r8]
 8016608:	2b2f      	cmp	r3, #47	; 0x2f
 801660a:	4605      	mov	r5, r0
 801660c:	f000 809e 	beq.w	801674c <rcl_expand_topic_name+0x1c4>
 8016610:	2b7e      	cmp	r3, #126	; 0x7e
 8016612:	f040 80a2 	bne.w	801675a <rcl_expand_topic_name+0x1d2>
 8016616:	4638      	mov	r0, r7
 8016618:	f7e9 fe04 	bl	8000224 <strlen>
 801661c:	4a82      	ldr	r2, [pc, #520]	; (8016828 <rcl_expand_topic_name+0x2a0>)
 801661e:	4b83      	ldr	r3, [pc, #524]	; (801682c <rcl_expand_topic_name+0x2a4>)
 8016620:	2801      	cmp	r0, #1
 8016622:	bf18      	it	ne
 8016624:	4613      	movne	r3, r2
 8016626:	9302      	str	r3, [sp, #8]
 8016628:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801662a:	9300      	str	r3, [sp, #0]
 801662c:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8016630:	f108 0301 	add.w	r3, r8, #1
 8016634:	9305      	str	r3, [sp, #20]
 8016636:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801663a:	9301      	str	r3, [sp, #4]
 801663c:	ab14      	add	r3, sp, #80	; 0x50
 801663e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016640:	f7f3 fc56 	bl	8009ef0 <rcutils_format_string_limit>
 8016644:	4682      	mov	sl, r0
 8016646:	2800      	cmp	r0, #0
 8016648:	f000 80c7 	beq.w	80167da <rcl_expand_topic_name+0x252>
 801664c:	2d00      	cmp	r5, #0
 801664e:	f000 80a2 	beq.w	8016796 <rcl_expand_topic_name+0x20e>
 8016652:	217b      	movs	r1, #123	; 0x7b
 8016654:	f001 f82e 	bl	80176b4 <strchr>
 8016658:	46d1      	mov	r9, sl
 801665a:	4605      	mov	r5, r0
 801665c:	9407      	str	r4, [sp, #28]
 801665e:	46d3      	mov	fp, sl
 8016660:	464c      	mov	r4, r9
 8016662:	2d00      	cmp	r5, #0
 8016664:	f000 80be 	beq.w	80167e4 <rcl_expand_topic_name+0x25c>
 8016668:	217d      	movs	r1, #125	; 0x7d
 801666a:	4620      	mov	r0, r4
 801666c:	f001 f822 	bl	80176b4 <strchr>
 8016670:	eba0 0905 	sub.w	r9, r0, r5
 8016674:	f109 0a01 	add.w	sl, r9, #1
 8016678:	486d      	ldr	r0, [pc, #436]	; (8016830 <rcl_expand_topic_name+0x2a8>)
 801667a:	4652      	mov	r2, sl
 801667c:	4629      	mov	r1, r5
 801667e:	f001 f826 	bl	80176ce <strncmp>
 8016682:	2800      	cmp	r0, #0
 8016684:	d067      	beq.n	8016756 <rcl_expand_topic_name+0x1ce>
 8016686:	486b      	ldr	r0, [pc, #428]	; (8016834 <rcl_expand_topic_name+0x2ac>)
 8016688:	4652      	mov	r2, sl
 801668a:	4629      	mov	r1, r5
 801668c:	f001 f81f 	bl	80176ce <strncmp>
 8016690:	b130      	cbz	r0, 80166a0 <rcl_expand_topic_name+0x118>
 8016692:	4869      	ldr	r0, [pc, #420]	; (8016838 <rcl_expand_topic_name+0x2b0>)
 8016694:	4652      	mov	r2, sl
 8016696:	4629      	mov	r1, r5
 8016698:	f001 f819 	bl	80176ce <strncmp>
 801669c:	2800      	cmp	r0, #0
 801669e:	d137      	bne.n	8016710 <rcl_expand_topic_name+0x188>
 80166a0:	46b9      	mov	r9, r7
 80166a2:	ab16      	add	r3, sp, #88	; 0x58
 80166a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80166a8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80166ac:	ab14      	add	r3, sp, #80	; 0x50
 80166ae:	4628      	mov	r0, r5
 80166b0:	cb0c      	ldmia	r3, {r2, r3}
 80166b2:	4651      	mov	r1, sl
 80166b4:	f7f3 fd58 	bl	800a168 <rcutils_strndup>
 80166b8:	4605      	mov	r5, r0
 80166ba:	2800      	cmp	r0, #0
 80166bc:	f000 809c 	beq.w	80167f8 <rcl_expand_topic_name+0x270>
 80166c0:	464a      	mov	r2, r9
 80166c2:	4620      	mov	r0, r4
 80166c4:	ab14      	add	r3, sp, #80	; 0x50
 80166c6:	4629      	mov	r1, r5
 80166c8:	f7f3 fc4c 	bl	8009f64 <rcutils_repl_str>
 80166cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80166ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80166d0:	4604      	mov	r4, r0
 80166d2:	4628      	mov	r0, r5
 80166d4:	4798      	blx	r3
 80166d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80166d8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80166da:	4658      	mov	r0, fp
 80166dc:	4798      	blx	r3
 80166de:	2c00      	cmp	r4, #0
 80166e0:	d07b      	beq.n	80167da <rcl_expand_topic_name+0x252>
 80166e2:	217b      	movs	r1, #123	; 0x7b
 80166e4:	4620      	mov	r0, r4
 80166e6:	f000 ffe5 	bl	80176b4 <strchr>
 80166ea:	46a3      	mov	fp, r4
 80166ec:	4605      	mov	r5, r0
 80166ee:	e7b8      	b.n	8016662 <rcl_expand_topic_name+0xda>
 80166f0:	240b      	movs	r4, #11
 80166f2:	4620      	mov	r0, r4
 80166f4:	b00b      	add	sp, #44	; 0x2c
 80166f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166fa:	f7fa fd37 	bl	801116c <rcl_convert_rmw_ret_to_rcl_ret>
 80166fe:	4604      	mov	r4, r0
 8016700:	e7f7      	b.n	80166f2 <rcl_expand_topic_name+0x16a>
 8016702:	2467      	movs	r4, #103	; 0x67
 8016704:	4620      	mov	r0, r4
 8016706:	b00b      	add	sp, #44	; 0x2c
 8016708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801670c:	24c9      	movs	r4, #201	; 0xc9
 801670e:	e7f0      	b.n	80166f2 <rcl_expand_topic_name+0x16a>
 8016710:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8016714:	9806      	ldr	r0, [sp, #24]
 8016716:	1c69      	adds	r1, r5, #1
 8016718:	f7fd f9c8 	bl	8013aac <rcutils_string_map_getn>
 801671c:	4681      	mov	r9, r0
 801671e:	2800      	cmp	r0, #0
 8016720:	d1bf      	bne.n	80166a2 <rcl_expand_topic_name+0x11a>
 8016722:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016724:	aa16      	add	r2, sp, #88	; 0x58
 8016726:	6018      	str	r0, [r3, #0]
 8016728:	ca07      	ldmia	r2, {r0, r1, r2}
 801672a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801672e:	ab14      	add	r3, sp, #80	; 0x50
 8016730:	cb0c      	ldmia	r3, {r2, r3}
 8016732:	4651      	mov	r1, sl
 8016734:	4628      	mov	r0, r5
 8016736:	f7f3 fd17 	bl	800a168 <rcutils_strndup>
 801673a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801673c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801673e:	4798      	blx	r3
 8016740:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016742:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016744:	4658      	mov	r0, fp
 8016746:	2469      	movs	r4, #105	; 0x69
 8016748:	4798      	blx	r3
 801674a:	e7d2      	b.n	80166f2 <rcl_expand_topic_name+0x16a>
 801674c:	2800      	cmp	r0, #0
 801674e:	d05b      	beq.n	8016808 <rcl_expand_topic_name+0x280>
 8016750:	46c1      	mov	r9, r8
 8016752:	46a2      	mov	sl, r4
 8016754:	e782      	b.n	801665c <rcl_expand_topic_name+0xd4>
 8016756:	46b1      	mov	r9, r6
 8016758:	e7a3      	b.n	80166a2 <rcl_expand_topic_name+0x11a>
 801675a:	2800      	cmp	r0, #0
 801675c:	d1f8      	bne.n	8016750 <rcl_expand_topic_name+0x1c8>
 801675e:	4638      	mov	r0, r7
 8016760:	f7e9 fd60 	bl	8000224 <strlen>
 8016764:	4a35      	ldr	r2, [pc, #212]	; (801683c <rcl_expand_topic_name+0x2b4>)
 8016766:	4b36      	ldr	r3, [pc, #216]	; (8016840 <rcl_expand_topic_name+0x2b8>)
 8016768:	f8cd 8010 	str.w	r8, [sp, #16]
 801676c:	2801      	cmp	r0, #1
 801676e:	bf18      	it	ne
 8016770:	4613      	movne	r3, r2
 8016772:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8016776:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801677a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801677c:	9703      	str	r7, [sp, #12]
 801677e:	9200      	str	r2, [sp, #0]
 8016780:	ab14      	add	r3, sp, #80	; 0x50
 8016782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016784:	f7f3 fbb4 	bl	8009ef0 <rcutils_format_string_limit>
 8016788:	4682      	mov	sl, r0
 801678a:	4653      	mov	r3, sl
 801678c:	b32b      	cbz	r3, 80167da <rcl_expand_topic_name+0x252>
 801678e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016790:	f8c3 a000 	str.w	sl, [r3]
 8016794:	e7ad      	b.n	80166f2 <rcl_expand_topic_name+0x16a>
 8016796:	f89a 3000 	ldrb.w	r3, [sl]
 801679a:	2b2f      	cmp	r3, #47	; 0x2f
 801679c:	d0f7      	beq.n	801678e <rcl_expand_topic_name+0x206>
 801679e:	4638      	mov	r0, r7
 80167a0:	f7e9 fd40 	bl	8000224 <strlen>
 80167a4:	4a25      	ldr	r2, [pc, #148]	; (801683c <rcl_expand_topic_name+0x2b4>)
 80167a6:	4b26      	ldr	r3, [pc, #152]	; (8016840 <rcl_expand_topic_name+0x2b8>)
 80167a8:	f8cd a010 	str.w	sl, [sp, #16]
 80167ac:	2801      	cmp	r0, #1
 80167ae:	bf18      	it	ne
 80167b0:	4613      	movne	r3, r2
 80167b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80167b6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80167ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80167bc:	9703      	str	r7, [sp, #12]
 80167be:	9200      	str	r2, [sp, #0]
 80167c0:	ab14      	add	r3, sp, #80	; 0x50
 80167c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80167c4:	f7f3 fb94 	bl	8009ef0 <rcutils_format_string_limit>
 80167c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80167ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80167cc:	4605      	mov	r5, r0
 80167ce:	4650      	mov	r0, sl
 80167d0:	4798      	blx	r3
 80167d2:	46aa      	mov	sl, r5
 80167d4:	e7d9      	b.n	801678a <rcl_expand_topic_name+0x202>
 80167d6:	24ca      	movs	r4, #202	; 0xca
 80167d8:	e78b      	b.n	80166f2 <rcl_expand_topic_name+0x16a>
 80167da:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80167dc:	2300      	movs	r3, #0
 80167de:	6013      	str	r3, [r2, #0]
 80167e0:	240a      	movs	r4, #10
 80167e2:	e786      	b.n	80166f2 <rcl_expand_topic_name+0x16a>
 80167e4:	465b      	mov	r3, fp
 80167e6:	9c07      	ldr	r4, [sp, #28]
 80167e8:	46da      	mov	sl, fp
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d1d3      	bne.n	8016796 <rcl_expand_topic_name+0x20e>
 80167ee:	f898 3000 	ldrb.w	r3, [r8]
 80167f2:	2b2f      	cmp	r3, #47	; 0x2f
 80167f4:	d0cb      	beq.n	801678e <rcl_expand_topic_name+0x206>
 80167f6:	e7b2      	b.n	801675e <rcl_expand_topic_name+0x1d6>
 80167f8:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 80167fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80167fe:	6015      	str	r5, [r2, #0]
 8016800:	4658      	mov	r0, fp
 8016802:	4798      	blx	r3
 8016804:	240a      	movs	r4, #10
 8016806:	e774      	b.n	80166f2 <rcl_expand_topic_name+0x16a>
 8016808:	ab17      	add	r3, sp, #92	; 0x5c
 801680a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801680e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016812:	ab14      	add	r3, sp, #80	; 0x50
 8016814:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016816:	4640      	mov	r0, r8
 8016818:	f7f3 fc84 	bl	800a124 <rcutils_strdup>
 801681c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801681e:	2800      	cmp	r0, #0
 8016820:	6018      	str	r0, [r3, #0]
 8016822:	bf08      	it	eq
 8016824:	240a      	moveq	r4, #10
 8016826:	e764      	b.n	80166f2 <rcl_expand_topic_name+0x16a>
 8016828:	080196fc 	.word	0x080196fc
 801682c:	08018cf8 	.word	0x08018cf8
 8016830:	08019704 	.word	0x08019704
 8016834:	0801970c 	.word	0x0801970c
 8016838:	08019714 	.word	0x08019714
 801683c:	08018728 	.word	0x08018728
 8016840:	08018720 	.word	0x08018720

08016844 <rcl_get_default_topic_name_substitutions>:
 8016844:	2800      	cmp	r0, #0
 8016846:	bf0c      	ite	eq
 8016848:	200b      	moveq	r0, #11
 801684a:	2000      	movne	r0, #0
 801684c:	4770      	bx	lr
 801684e:	bf00      	nop

08016850 <rcl_validate_topic_name>:
 8016850:	2800      	cmp	r0, #0
 8016852:	d07a      	beq.n	801694a <rcl_validate_topic_name+0xfa>
 8016854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016858:	460e      	mov	r6, r1
 801685a:	2900      	cmp	r1, #0
 801685c:	d07c      	beq.n	8016958 <rcl_validate_topic_name+0x108>
 801685e:	4617      	mov	r7, r2
 8016860:	4605      	mov	r5, r0
 8016862:	f7e9 fcdf 	bl	8000224 <strlen>
 8016866:	b1b0      	cbz	r0, 8016896 <rcl_validate_topic_name+0x46>
 8016868:	f895 9000 	ldrb.w	r9, [r5]
 801686c:	f8df c180 	ldr.w	ip, [pc, #384]	; 80169f0 <rcl_validate_topic_name+0x1a0>
 8016870:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8016874:	f013 0304 	ands.w	r3, r3, #4
 8016878:	d169      	bne.n	801694e <rcl_validate_topic_name+0xfe>
 801687a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801687e:	f815 2008 	ldrb.w	r2, [r5, r8]
 8016882:	2a2f      	cmp	r2, #47	; 0x2f
 8016884:	d10e      	bne.n	80168a4 <rcl_validate_topic_name+0x54>
 8016886:	2202      	movs	r2, #2
 8016888:	6032      	str	r2, [r6, #0]
 801688a:	b36f      	cbz	r7, 80168e8 <rcl_validate_topic_name+0x98>
 801688c:	f8c7 8000 	str.w	r8, [r7]
 8016890:	4618      	mov	r0, r3
 8016892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016896:	2301      	movs	r3, #1
 8016898:	6033      	str	r3, [r6, #0]
 801689a:	b32f      	cbz	r7, 80168e8 <rcl_validate_topic_name+0x98>
 801689c:	2000      	movs	r0, #0
 801689e:	6038      	str	r0, [r7, #0]
 80168a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168a4:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 80168a8:	461c      	mov	r4, r3
 80168aa:	4619      	mov	r1, r3
 80168ac:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80168b0:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80168b4:	f1be 0f09 	cmp.w	lr, #9
 80168b8:	d919      	bls.n	80168ee <rcl_validate_topic_name+0x9e>
 80168ba:	f022 0e20 	bic.w	lr, r2, #32
 80168be:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 80168c2:	f1be 0f19 	cmp.w	lr, #25
 80168c6:	d912      	bls.n	80168ee <rcl_validate_topic_name+0x9e>
 80168c8:	2a5f      	cmp	r2, #95	; 0x5f
 80168ca:	d019      	beq.n	8016900 <rcl_validate_topic_name+0xb0>
 80168cc:	2a2f      	cmp	r2, #47	; 0x2f
 80168ce:	d051      	beq.n	8016974 <rcl_validate_topic_name+0x124>
 80168d0:	2a7e      	cmp	r2, #126	; 0x7e
 80168d2:	d048      	beq.n	8016966 <rcl_validate_topic_name+0x116>
 80168d4:	2a7b      	cmp	r2, #123	; 0x7b
 80168d6:	d054      	beq.n	8016982 <rcl_validate_topic_name+0x132>
 80168d8:	2a7d      	cmp	r2, #125	; 0x7d
 80168da:	d161      	bne.n	80169a0 <rcl_validate_topic_name+0x150>
 80168dc:	2c00      	cmp	r4, #0
 80168de:	d155      	bne.n	801698c <rcl_validate_topic_name+0x13c>
 80168e0:	2305      	movs	r3, #5
 80168e2:	6033      	str	r3, [r6, #0]
 80168e4:	b107      	cbz	r7, 80168e8 <rcl_validate_topic_name+0x98>
 80168e6:	6039      	str	r1, [r7, #0]
 80168e8:	2000      	movs	r0, #0
 80168ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168ee:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80168f2:	0752      	lsls	r2, r2, #29
 80168f4:	d504      	bpl.n	8016900 <rcl_validate_topic_name+0xb0>
 80168f6:	b11c      	cbz	r4, 8016900 <rcl_validate_topic_name+0xb0>
 80168f8:	b111      	cbz	r1, 8016900 <rcl_validate_topic_name+0xb0>
 80168fa:	1e4a      	subs	r2, r1, #1
 80168fc:	429a      	cmp	r2, r3
 80168fe:	d02d      	beq.n	801695c <rcl_validate_topic_name+0x10c>
 8016900:	3101      	adds	r1, #1
 8016902:	4288      	cmp	r0, r1
 8016904:	d1d2      	bne.n	80168ac <rcl_validate_topic_name+0x5c>
 8016906:	2c00      	cmp	r4, #0
 8016908:	d145      	bne.n	8016996 <rcl_validate_topic_name+0x146>
 801690a:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 801690e:	d04f      	beq.n	80169b0 <rcl_validate_topic_name+0x160>
 8016910:	4620      	mov	r0, r4
 8016912:	2301      	movs	r3, #1
 8016914:	e006      	b.n	8016924 <rcl_validate_topic_name+0xd4>
 8016916:	428b      	cmp	r3, r1
 8016918:	f105 0501 	add.w	r5, r5, #1
 801691c:	f103 0201 	add.w	r2, r3, #1
 8016920:	d236      	bcs.n	8016990 <rcl_validate_topic_name+0x140>
 8016922:	4613      	mov	r3, r2
 8016924:	4580      	cmp	r8, r0
 8016926:	f100 0001 	add.w	r0, r0, #1
 801692a:	d0f4      	beq.n	8016916 <rcl_validate_topic_name+0xc6>
 801692c:	782a      	ldrb	r2, [r5, #0]
 801692e:	2a2f      	cmp	r2, #47	; 0x2f
 8016930:	d1f1      	bne.n	8016916 <rcl_validate_topic_name+0xc6>
 8016932:	786a      	ldrb	r2, [r5, #1]
 8016934:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016938:	0754      	lsls	r4, r2, #29
 801693a:	d5ec      	bpl.n	8016916 <rcl_validate_topic_name+0xc6>
 801693c:	2204      	movs	r2, #4
 801693e:	6032      	str	r2, [r6, #0]
 8016940:	2f00      	cmp	r7, #0
 8016942:	d0d1      	beq.n	80168e8 <rcl_validate_topic_name+0x98>
 8016944:	603b      	str	r3, [r7, #0]
 8016946:	2000      	movs	r0, #0
 8016948:	e7aa      	b.n	80168a0 <rcl_validate_topic_name+0x50>
 801694a:	200b      	movs	r0, #11
 801694c:	4770      	bx	lr
 801694e:	2304      	movs	r3, #4
 8016950:	6033      	str	r3, [r6, #0]
 8016952:	2f00      	cmp	r7, #0
 8016954:	d1a2      	bne.n	801689c <rcl_validate_topic_name+0x4c>
 8016956:	e7c7      	b.n	80168e8 <rcl_validate_topic_name+0x98>
 8016958:	200b      	movs	r0, #11
 801695a:	e7a1      	b.n	80168a0 <rcl_validate_topic_name+0x50>
 801695c:	2309      	movs	r3, #9
 801695e:	6033      	str	r3, [r6, #0]
 8016960:	2f00      	cmp	r7, #0
 8016962:	d1c0      	bne.n	80168e6 <rcl_validate_topic_name+0x96>
 8016964:	e7c0      	b.n	80168e8 <rcl_validate_topic_name+0x98>
 8016966:	2900      	cmp	r1, #0
 8016968:	d0ca      	beq.n	8016900 <rcl_validate_topic_name+0xb0>
 801696a:	2306      	movs	r3, #6
 801696c:	6033      	str	r3, [r6, #0]
 801696e:	2f00      	cmp	r7, #0
 8016970:	d1b9      	bne.n	80168e6 <rcl_validate_topic_name+0x96>
 8016972:	e7b9      	b.n	80168e8 <rcl_validate_topic_name+0x98>
 8016974:	2c00      	cmp	r4, #0
 8016976:	d0c3      	beq.n	8016900 <rcl_validate_topic_name+0xb0>
 8016978:	2308      	movs	r3, #8
 801697a:	6033      	str	r3, [r6, #0]
 801697c:	2f00      	cmp	r7, #0
 801697e:	d1b2      	bne.n	80168e6 <rcl_validate_topic_name+0x96>
 8016980:	e7b2      	b.n	80168e8 <rcl_validate_topic_name+0x98>
 8016982:	2c00      	cmp	r4, #0
 8016984:	d1f8      	bne.n	8016978 <rcl_validate_topic_name+0x128>
 8016986:	460b      	mov	r3, r1
 8016988:	2401      	movs	r4, #1
 801698a:	e7b9      	b.n	8016900 <rcl_validate_topic_name+0xb0>
 801698c:	2400      	movs	r4, #0
 801698e:	e7b7      	b.n	8016900 <rcl_validate_topic_name+0xb0>
 8016990:	2000      	movs	r0, #0
 8016992:	6030      	str	r0, [r6, #0]
 8016994:	e784      	b.n	80168a0 <rcl_validate_topic_name+0x50>
 8016996:	2205      	movs	r2, #5
 8016998:	6032      	str	r2, [r6, #0]
 801699a:	2f00      	cmp	r7, #0
 801699c:	d1d2      	bne.n	8016944 <rcl_validate_topic_name+0xf4>
 801699e:	e7a3      	b.n	80168e8 <rcl_validate_topic_name+0x98>
 80169a0:	2c00      	cmp	r4, #0
 80169a2:	bf14      	ite	ne
 80169a4:	2308      	movne	r3, #8
 80169a6:	2303      	moveq	r3, #3
 80169a8:	6033      	str	r3, [r6, #0]
 80169aa:	2f00      	cmp	r7, #0
 80169ac:	d19b      	bne.n	80168e6 <rcl_validate_topic_name+0x96>
 80169ae:	e79b      	b.n	80168e8 <rcl_validate_topic_name+0x98>
 80169b0:	2301      	movs	r3, #1
 80169b2:	e00a      	b.n	80169ca <rcl_validate_topic_name+0x17a>
 80169b4:	2c01      	cmp	r4, #1
 80169b6:	d013      	beq.n	80169e0 <rcl_validate_topic_name+0x190>
 80169b8:	4299      	cmp	r1, r3
 80169ba:	f104 0401 	add.w	r4, r4, #1
 80169be:	f105 0501 	add.w	r5, r5, #1
 80169c2:	f103 0201 	add.w	r2, r3, #1
 80169c6:	d9e3      	bls.n	8016990 <rcl_validate_topic_name+0x140>
 80169c8:	4613      	mov	r3, r2
 80169ca:	45a0      	cmp	r8, r4
 80169cc:	d0f4      	beq.n	80169b8 <rcl_validate_topic_name+0x168>
 80169ce:	782a      	ldrb	r2, [r5, #0]
 80169d0:	2a2f      	cmp	r2, #47	; 0x2f
 80169d2:	d1ef      	bne.n	80169b4 <rcl_validate_topic_name+0x164>
 80169d4:	786a      	ldrb	r2, [r5, #1]
 80169d6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80169da:	0752      	lsls	r2, r2, #29
 80169dc:	d5ec      	bpl.n	80169b8 <rcl_validate_topic_name+0x168>
 80169de:	e7ad      	b.n	801693c <rcl_validate_topic_name+0xec>
 80169e0:	2307      	movs	r3, #7
 80169e2:	6033      	str	r3, [r6, #0]
 80169e4:	2f00      	cmp	r7, #0
 80169e6:	f43f af7f 	beq.w	80168e8 <rcl_validate_topic_name+0x98>
 80169ea:	603c      	str	r4, [r7, #0]
 80169ec:	2000      	movs	r0, #0
 80169ee:	e757      	b.n	80168a0 <rcl_validate_topic_name+0x50>
 80169f0:	08019882 	.word	0x08019882

080169f4 <on_status>:
 80169f4:	b082      	sub	sp, #8
 80169f6:	b002      	add	sp, #8
 80169f8:	4770      	bx	lr
 80169fa:	bf00      	nop

080169fc <on_topic>:
 80169fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a00:	4a22      	ldr	r2, [pc, #136]	; (8016a8c <on_topic+0x90>)
 8016a02:	b094      	sub	sp, #80	; 0x50
 8016a04:	6812      	ldr	r2, [r2, #0]
 8016a06:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8016a08:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8016a0c:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 8016a10:	b3c2      	cbz	r2, 8016a84 <on_topic+0x88>
 8016a12:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8016a16:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8016a1a:	e001      	b.n	8016a20 <on_topic+0x24>
 8016a1c:	6852      	ldr	r2, [r2, #4]
 8016a1e:	b38a      	cbz	r2, 8016a84 <on_topic+0x88>
 8016a20:	6894      	ldr	r4, [r2, #8]
 8016a22:	8aa3      	ldrh	r3, [r4, #20]
 8016a24:	428b      	cmp	r3, r1
 8016a26:	d1f9      	bne.n	8016a1c <on_topic+0x20>
 8016a28:	7da3      	ldrb	r3, [r4, #22]
 8016a2a:	4283      	cmp	r3, r0
 8016a2c:	d1f6      	bne.n	8016a1c <on_topic+0x20>
 8016a2e:	2248      	movs	r2, #72	; 0x48
 8016a30:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8016a34:	4668      	mov	r0, sp
 8016a36:	f000 ff54 	bl	80178e2 <memcpy>
 8016a3a:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8016a3e:	cb0c      	ldmia	r3, {r2, r3}
 8016a40:	4620      	mov	r0, r4
 8016a42:	f7f4 fb8d 	bl	800b160 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016a46:	4607      	mov	r7, r0
 8016a48:	b1e0      	cbz	r0, 8016a84 <on_topic+0x88>
 8016a4a:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8016a4e:	4632      	mov	r2, r6
 8016a50:	4628      	mov	r0, r5
 8016a52:	f108 0110 	add.w	r1, r8, #16
 8016a56:	f7f5 fc5b 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 8016a5a:	b930      	cbnz	r0, 8016a6a <on_topic+0x6e>
 8016a5c:	480c      	ldr	r0, [pc, #48]	; (8016a90 <on_topic+0x94>)
 8016a5e:	4639      	mov	r1, r7
 8016a60:	b014      	add	sp, #80	; 0x50
 8016a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a66:	f7fd b97d 	b.w	8013d64 <put_memory>
 8016a6a:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8016a6e:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 8016a72:	f7fd ffcf 	bl	8014a14 <rmw_uros_epoch_nanos>
 8016a76:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 8016a7a:	2305      	movs	r3, #5
 8016a7c:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016a80:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8016a84:	b014      	add	sp, #80	; 0x50
 8016a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a8a:	bf00      	nop
 8016a8c:	2000e474 	.word	0x2000e474
 8016a90:	2000e464 	.word	0x2000e464

08016a94 <on_request>:
 8016a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a98:	4823      	ldr	r0, [pc, #140]	; (8016b28 <on_request+0x94>)
 8016a9a:	b094      	sub	sp, #80	; 0x50
 8016a9c:	6800      	ldr	r0, [r0, #0]
 8016a9e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8016aa0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8016aa4:	9113      	str	r1, [sp, #76]	; 0x4c
 8016aa6:	2800      	cmp	r0, #0
 8016aa8:	d03b      	beq.n	8016b22 <on_request+0x8e>
 8016aaa:	461d      	mov	r5, r3
 8016aac:	e001      	b.n	8016ab2 <on_request+0x1e>
 8016aae:	6840      	ldr	r0, [r0, #4]
 8016ab0:	b3b8      	cbz	r0, 8016b22 <on_request+0x8e>
 8016ab2:	6884      	ldr	r4, [r0, #8]
 8016ab4:	8b21      	ldrh	r1, [r4, #24]
 8016ab6:	4291      	cmp	r1, r2
 8016ab8:	d1f9      	bne.n	8016aae <on_request+0x1a>
 8016aba:	2248      	movs	r2, #72	; 0x48
 8016abc:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8016ac0:	4668      	mov	r0, sp
 8016ac2:	f000 ff0e 	bl	80178e2 <memcpy>
 8016ac6:	f104 0320 	add.w	r3, r4, #32
 8016aca:	cb0c      	ldmia	r3, {r2, r3}
 8016acc:	4620      	mov	r0, r4
 8016ace:	f7f4 fb47 	bl	800b160 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016ad2:	4680      	mov	r8, r0
 8016ad4:	b328      	cbz	r0, 8016b22 <on_request+0x8e>
 8016ad6:	4638      	mov	r0, r7
 8016ad8:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016adc:	4632      	mov	r2, r6
 8016ade:	f107 0110 	add.w	r1, r7, #16
 8016ae2:	f7f5 fc15 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 8016ae6:	b930      	cbnz	r0, 8016af6 <on_request+0x62>
 8016ae8:	4810      	ldr	r0, [pc, #64]	; (8016b2c <on_request+0x98>)
 8016aea:	4641      	mov	r1, r8
 8016aec:	b014      	add	sp, #80	; 0x50
 8016aee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016af2:	f7fd b937 	b.w	8013d64 <put_memory>
 8016af6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016af8:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 8016afc:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8016b00:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8016b04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b08:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016b0c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016b10:	f7fd ff80 	bl	8014a14 <rmw_uros_epoch_nanos>
 8016b14:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8016b18:	2303      	movs	r3, #3
 8016b1a:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016b1e:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 8016b22:	b014      	add	sp, #80	; 0x50
 8016b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b28:	2000e444 	.word	0x2000e444
 8016b2c:	2000e464 	.word	0x2000e464

08016b30 <on_reply>:
 8016b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b34:	4821      	ldr	r0, [pc, #132]	; (8016bbc <on_reply+0x8c>)
 8016b36:	b094      	sub	sp, #80	; 0x50
 8016b38:	6800      	ldr	r0, [r0, #0]
 8016b3a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8016b3c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8016b40:	9113      	str	r1, [sp, #76]	; 0x4c
 8016b42:	b3b8      	cbz	r0, 8016bb4 <on_reply+0x84>
 8016b44:	461d      	mov	r5, r3
 8016b46:	e001      	b.n	8016b4c <on_reply+0x1c>
 8016b48:	6840      	ldr	r0, [r0, #4]
 8016b4a:	b398      	cbz	r0, 8016bb4 <on_reply+0x84>
 8016b4c:	6884      	ldr	r4, [r0, #8]
 8016b4e:	8b21      	ldrh	r1, [r4, #24]
 8016b50:	4291      	cmp	r1, r2
 8016b52:	d1f9      	bne.n	8016b48 <on_reply+0x18>
 8016b54:	2248      	movs	r2, #72	; 0x48
 8016b56:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8016b5a:	4668      	mov	r0, sp
 8016b5c:	f000 fec1 	bl	80178e2 <memcpy>
 8016b60:	f104 0320 	add.w	r3, r4, #32
 8016b64:	cb0c      	ldmia	r3, {r2, r3}
 8016b66:	4620      	mov	r0, r4
 8016b68:	f7f4 fafa 	bl	800b160 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016b6c:	4680      	mov	r8, r0
 8016b6e:	b308      	cbz	r0, 8016bb4 <on_reply+0x84>
 8016b70:	4638      	mov	r0, r7
 8016b72:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016b76:	4632      	mov	r2, r6
 8016b78:	f107 0110 	add.w	r1, r7, #16
 8016b7c:	f7f5 fbc8 	bl	800c310 <ucdr_deserialize_array_uint8_t>
 8016b80:	b930      	cbnz	r0, 8016b90 <on_reply+0x60>
 8016b82:	480f      	ldr	r0, [pc, #60]	; (8016bc0 <on_reply+0x90>)
 8016b84:	4641      	mov	r1, r8
 8016b86:	b014      	add	sp, #80	; 0x50
 8016b88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b8c:	f7fd b8ea 	b.w	8013d64 <put_memory>
 8016b90:	2200      	movs	r2, #0
 8016b92:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 8016b96:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8016b9a:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8016b9e:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 8016ba2:	f7fd ff37 	bl	8014a14 <rmw_uros_epoch_nanos>
 8016ba6:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8016baa:	2304      	movs	r3, #4
 8016bac:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016bb0:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 8016bb4:	b014      	add	sp, #80	; 0x50
 8016bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bba:	bf00      	nop
 8016bbc:	20009b54 	.word	0x20009b54
 8016bc0:	2000e464 	.word	0x2000e464

08016bc4 <rosidl_runtime_c__String__init>:
 8016bc4:	b510      	push	{r4, lr}
 8016bc6:	4604      	mov	r4, r0
 8016bc8:	b086      	sub	sp, #24
 8016bca:	b170      	cbz	r0, 8016bea <rosidl_runtime_c__String__init+0x26>
 8016bcc:	a801      	add	r0, sp, #4
 8016bce:	f7f3 f929 	bl	8009e24 <rcutils_get_default_allocator>
 8016bd2:	9b01      	ldr	r3, [sp, #4]
 8016bd4:	9905      	ldr	r1, [sp, #20]
 8016bd6:	2001      	movs	r0, #1
 8016bd8:	4798      	blx	r3
 8016bda:	6020      	str	r0, [r4, #0]
 8016bdc:	b128      	cbz	r0, 8016bea <rosidl_runtime_c__String__init+0x26>
 8016bde:	2100      	movs	r1, #0
 8016be0:	2201      	movs	r2, #1
 8016be2:	7001      	strb	r1, [r0, #0]
 8016be4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8016be8:	4610      	mov	r0, r2
 8016bea:	b006      	add	sp, #24
 8016bec:	bd10      	pop	{r4, pc}
 8016bee:	bf00      	nop

08016bf0 <rosidl_runtime_c__String__fini>:
 8016bf0:	b320      	cbz	r0, 8016c3c <rosidl_runtime_c__String__fini+0x4c>
 8016bf2:	b510      	push	{r4, lr}
 8016bf4:	6803      	ldr	r3, [r0, #0]
 8016bf6:	b086      	sub	sp, #24
 8016bf8:	4604      	mov	r4, r0
 8016bfa:	b173      	cbz	r3, 8016c1a <rosidl_runtime_c__String__fini+0x2a>
 8016bfc:	6883      	ldr	r3, [r0, #8]
 8016bfe:	b1f3      	cbz	r3, 8016c3e <rosidl_runtime_c__String__fini+0x4e>
 8016c00:	a801      	add	r0, sp, #4
 8016c02:	f7f3 f90f 	bl	8009e24 <rcutils_get_default_allocator>
 8016c06:	9b02      	ldr	r3, [sp, #8]
 8016c08:	9905      	ldr	r1, [sp, #20]
 8016c0a:	6820      	ldr	r0, [r4, #0]
 8016c0c:	4798      	blx	r3
 8016c0e:	2300      	movs	r3, #0
 8016c10:	e9c4 3300 	strd	r3, r3, [r4]
 8016c14:	60a3      	str	r3, [r4, #8]
 8016c16:	b006      	add	sp, #24
 8016c18:	bd10      	pop	{r4, pc}
 8016c1a:	6843      	ldr	r3, [r0, #4]
 8016c1c:	b9db      	cbnz	r3, 8016c56 <rosidl_runtime_c__String__fini+0x66>
 8016c1e:	6883      	ldr	r3, [r0, #8]
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d0f8      	beq.n	8016c16 <rosidl_runtime_c__String__fini+0x26>
 8016c24:	4b12      	ldr	r3, [pc, #72]	; (8016c70 <rosidl_runtime_c__String__fini+0x80>)
 8016c26:	4813      	ldr	r0, [pc, #76]	; (8016c74 <rosidl_runtime_c__String__fini+0x84>)
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	2251      	movs	r2, #81	; 0x51
 8016c2c:	68db      	ldr	r3, [r3, #12]
 8016c2e:	2101      	movs	r1, #1
 8016c30:	f000 fb88 	bl	8017344 <fwrite>
 8016c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c38:	f000 f840 	bl	8016cbc <exit>
 8016c3c:	4770      	bx	lr
 8016c3e:	4b0c      	ldr	r3, [pc, #48]	; (8016c70 <rosidl_runtime_c__String__fini+0x80>)
 8016c40:	480d      	ldr	r0, [pc, #52]	; (8016c78 <rosidl_runtime_c__String__fini+0x88>)
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	224c      	movs	r2, #76	; 0x4c
 8016c46:	68db      	ldr	r3, [r3, #12]
 8016c48:	2101      	movs	r1, #1
 8016c4a:	f000 fb7b 	bl	8017344 <fwrite>
 8016c4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c52:	f000 f833 	bl	8016cbc <exit>
 8016c56:	4b06      	ldr	r3, [pc, #24]	; (8016c70 <rosidl_runtime_c__String__fini+0x80>)
 8016c58:	4808      	ldr	r0, [pc, #32]	; (8016c7c <rosidl_runtime_c__String__fini+0x8c>)
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	224e      	movs	r2, #78	; 0x4e
 8016c5e:	68db      	ldr	r3, [r3, #12]
 8016c60:	2101      	movs	r1, #1
 8016c62:	f000 fb6f 	bl	8017344 <fwrite>
 8016c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c6a:	f000 f827 	bl	8016cbc <exit>
 8016c6e:	bf00      	nop
 8016c70:	200008b0 	.word	0x200008b0
 8016c74:	080197c0 	.word	0x080197c0
 8016c78:	08019720 	.word	0x08019720
 8016c7c:	08019770 	.word	0x08019770

08016c80 <calloc>:
 8016c80:	4b02      	ldr	r3, [pc, #8]	; (8016c8c <calloc+0xc>)
 8016c82:	460a      	mov	r2, r1
 8016c84:	4601      	mov	r1, r0
 8016c86:	6818      	ldr	r0, [r3, #0]
 8016c88:	f000 b802 	b.w	8016c90 <_calloc_r>
 8016c8c:	200008b0 	.word	0x200008b0

08016c90 <_calloc_r>:
 8016c90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016c92:	fba1 2402 	umull	r2, r4, r1, r2
 8016c96:	b94c      	cbnz	r4, 8016cac <_calloc_r+0x1c>
 8016c98:	4611      	mov	r1, r2
 8016c9a:	9201      	str	r2, [sp, #4]
 8016c9c:	f000 f898 	bl	8016dd0 <_malloc_r>
 8016ca0:	9a01      	ldr	r2, [sp, #4]
 8016ca2:	4605      	mov	r5, r0
 8016ca4:	b930      	cbnz	r0, 8016cb4 <_calloc_r+0x24>
 8016ca6:	4628      	mov	r0, r5
 8016ca8:	b003      	add	sp, #12
 8016caa:	bd30      	pop	{r4, r5, pc}
 8016cac:	220c      	movs	r2, #12
 8016cae:	6002      	str	r2, [r0, #0]
 8016cb0:	2500      	movs	r5, #0
 8016cb2:	e7f8      	b.n	8016ca6 <_calloc_r+0x16>
 8016cb4:	4621      	mov	r1, r4
 8016cb6:	f000 fcf5 	bl	80176a4 <memset>
 8016cba:	e7f4      	b.n	8016ca6 <_calloc_r+0x16>

08016cbc <exit>:
 8016cbc:	b508      	push	{r3, lr}
 8016cbe:	4b06      	ldr	r3, [pc, #24]	; (8016cd8 <exit+0x1c>)
 8016cc0:	4604      	mov	r4, r0
 8016cc2:	b113      	cbz	r3, 8016cca <exit+0xe>
 8016cc4:	2100      	movs	r1, #0
 8016cc6:	f3af 8000 	nop.w
 8016cca:	4b04      	ldr	r3, [pc, #16]	; (8016cdc <exit+0x20>)
 8016ccc:	681b      	ldr	r3, [r3, #0]
 8016cce:	b103      	cbz	r3, 8016cd2 <exit+0x16>
 8016cd0:	4798      	blx	r3
 8016cd2:	4620      	mov	r0, r4
 8016cd4:	f7ea fffc 	bl	8001cd0 <_exit>
 8016cd8:	00000000 	.word	0x00000000
 8016cdc:	2000e6bc 	.word	0x2000e6bc

08016ce0 <getenv>:
 8016ce0:	b507      	push	{r0, r1, r2, lr}
 8016ce2:	4b04      	ldr	r3, [pc, #16]	; (8016cf4 <getenv+0x14>)
 8016ce4:	4601      	mov	r1, r0
 8016ce6:	aa01      	add	r2, sp, #4
 8016ce8:	6818      	ldr	r0, [r3, #0]
 8016cea:	f000 f805 	bl	8016cf8 <_findenv_r>
 8016cee:	b003      	add	sp, #12
 8016cf0:	f85d fb04 	ldr.w	pc, [sp], #4
 8016cf4:	200008b0 	.word	0x200008b0

08016cf8 <_findenv_r>:
 8016cf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cfc:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8016d6c <_findenv_r+0x74>
 8016d00:	4607      	mov	r7, r0
 8016d02:	4689      	mov	r9, r1
 8016d04:	4616      	mov	r6, r2
 8016d06:	f000 fe19 	bl	801793c <__env_lock>
 8016d0a:	f8da 4000 	ldr.w	r4, [sl]
 8016d0e:	b134      	cbz	r4, 8016d1e <_findenv_r+0x26>
 8016d10:	464b      	mov	r3, r9
 8016d12:	4698      	mov	r8, r3
 8016d14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016d18:	b13a      	cbz	r2, 8016d2a <_findenv_r+0x32>
 8016d1a:	2a3d      	cmp	r2, #61	; 0x3d
 8016d1c:	d1f9      	bne.n	8016d12 <_findenv_r+0x1a>
 8016d1e:	4638      	mov	r0, r7
 8016d20:	f000 fe12 	bl	8017948 <__env_unlock>
 8016d24:	2000      	movs	r0, #0
 8016d26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d2a:	eba8 0809 	sub.w	r8, r8, r9
 8016d2e:	46a3      	mov	fp, r4
 8016d30:	f854 0b04 	ldr.w	r0, [r4], #4
 8016d34:	2800      	cmp	r0, #0
 8016d36:	d0f2      	beq.n	8016d1e <_findenv_r+0x26>
 8016d38:	4642      	mov	r2, r8
 8016d3a:	4649      	mov	r1, r9
 8016d3c:	f000 fcc7 	bl	80176ce <strncmp>
 8016d40:	2800      	cmp	r0, #0
 8016d42:	d1f4      	bne.n	8016d2e <_findenv_r+0x36>
 8016d44:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016d48:	eb03 0508 	add.w	r5, r3, r8
 8016d4c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016d50:	2b3d      	cmp	r3, #61	; 0x3d
 8016d52:	d1ec      	bne.n	8016d2e <_findenv_r+0x36>
 8016d54:	f8da 3000 	ldr.w	r3, [sl]
 8016d58:	ebab 0303 	sub.w	r3, fp, r3
 8016d5c:	109b      	asrs	r3, r3, #2
 8016d5e:	4638      	mov	r0, r7
 8016d60:	6033      	str	r3, [r6, #0]
 8016d62:	f000 fdf1 	bl	8017948 <__env_unlock>
 8016d66:	1c68      	adds	r0, r5, #1
 8016d68:	e7dd      	b.n	8016d26 <_findenv_r+0x2e>
 8016d6a:	bf00      	nop
 8016d6c:	20000000 	.word	0x20000000

08016d70 <malloc>:
 8016d70:	4b02      	ldr	r3, [pc, #8]	; (8016d7c <malloc+0xc>)
 8016d72:	4601      	mov	r1, r0
 8016d74:	6818      	ldr	r0, [r3, #0]
 8016d76:	f000 b82b 	b.w	8016dd0 <_malloc_r>
 8016d7a:	bf00      	nop
 8016d7c:	200008b0 	.word	0x200008b0

08016d80 <free>:
 8016d80:	4b02      	ldr	r3, [pc, #8]	; (8016d8c <free+0xc>)
 8016d82:	4601      	mov	r1, r0
 8016d84:	6818      	ldr	r0, [r3, #0]
 8016d86:	f000 bde5 	b.w	8017954 <_free_r>
 8016d8a:	bf00      	nop
 8016d8c:	200008b0 	.word	0x200008b0

08016d90 <sbrk_aligned>:
 8016d90:	b570      	push	{r4, r5, r6, lr}
 8016d92:	4e0e      	ldr	r6, [pc, #56]	; (8016dcc <sbrk_aligned+0x3c>)
 8016d94:	460c      	mov	r4, r1
 8016d96:	6831      	ldr	r1, [r6, #0]
 8016d98:	4605      	mov	r5, r0
 8016d9a:	b911      	cbnz	r1, 8016da2 <sbrk_aligned+0x12>
 8016d9c:	f000 fd4a 	bl	8017834 <_sbrk_r>
 8016da0:	6030      	str	r0, [r6, #0]
 8016da2:	4621      	mov	r1, r4
 8016da4:	4628      	mov	r0, r5
 8016da6:	f000 fd45 	bl	8017834 <_sbrk_r>
 8016daa:	1c43      	adds	r3, r0, #1
 8016dac:	d00a      	beq.n	8016dc4 <sbrk_aligned+0x34>
 8016dae:	1cc4      	adds	r4, r0, #3
 8016db0:	f024 0403 	bic.w	r4, r4, #3
 8016db4:	42a0      	cmp	r0, r4
 8016db6:	d007      	beq.n	8016dc8 <sbrk_aligned+0x38>
 8016db8:	1a21      	subs	r1, r4, r0
 8016dba:	4628      	mov	r0, r5
 8016dbc:	f000 fd3a 	bl	8017834 <_sbrk_r>
 8016dc0:	3001      	adds	r0, #1
 8016dc2:	d101      	bne.n	8016dc8 <sbrk_aligned+0x38>
 8016dc4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016dc8:	4620      	mov	r0, r4
 8016dca:	bd70      	pop	{r4, r5, r6, pc}
 8016dcc:	2000e580 	.word	0x2000e580

08016dd0 <_malloc_r>:
 8016dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016dd4:	1ccd      	adds	r5, r1, #3
 8016dd6:	f025 0503 	bic.w	r5, r5, #3
 8016dda:	3508      	adds	r5, #8
 8016ddc:	2d0c      	cmp	r5, #12
 8016dde:	bf38      	it	cc
 8016de0:	250c      	movcc	r5, #12
 8016de2:	2d00      	cmp	r5, #0
 8016de4:	4607      	mov	r7, r0
 8016de6:	db01      	blt.n	8016dec <_malloc_r+0x1c>
 8016de8:	42a9      	cmp	r1, r5
 8016dea:	d905      	bls.n	8016df8 <_malloc_r+0x28>
 8016dec:	230c      	movs	r3, #12
 8016dee:	603b      	str	r3, [r7, #0]
 8016df0:	2600      	movs	r6, #0
 8016df2:	4630      	mov	r0, r6
 8016df4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016df8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8016ecc <_malloc_r+0xfc>
 8016dfc:	f000 f868 	bl	8016ed0 <__malloc_lock>
 8016e00:	f8d8 3000 	ldr.w	r3, [r8]
 8016e04:	461c      	mov	r4, r3
 8016e06:	bb5c      	cbnz	r4, 8016e60 <_malloc_r+0x90>
 8016e08:	4629      	mov	r1, r5
 8016e0a:	4638      	mov	r0, r7
 8016e0c:	f7ff ffc0 	bl	8016d90 <sbrk_aligned>
 8016e10:	1c43      	adds	r3, r0, #1
 8016e12:	4604      	mov	r4, r0
 8016e14:	d155      	bne.n	8016ec2 <_malloc_r+0xf2>
 8016e16:	f8d8 4000 	ldr.w	r4, [r8]
 8016e1a:	4626      	mov	r6, r4
 8016e1c:	2e00      	cmp	r6, #0
 8016e1e:	d145      	bne.n	8016eac <_malloc_r+0xdc>
 8016e20:	2c00      	cmp	r4, #0
 8016e22:	d048      	beq.n	8016eb6 <_malloc_r+0xe6>
 8016e24:	6823      	ldr	r3, [r4, #0]
 8016e26:	4631      	mov	r1, r6
 8016e28:	4638      	mov	r0, r7
 8016e2a:	eb04 0903 	add.w	r9, r4, r3
 8016e2e:	f000 fd01 	bl	8017834 <_sbrk_r>
 8016e32:	4581      	cmp	r9, r0
 8016e34:	d13f      	bne.n	8016eb6 <_malloc_r+0xe6>
 8016e36:	6821      	ldr	r1, [r4, #0]
 8016e38:	1a6d      	subs	r5, r5, r1
 8016e3a:	4629      	mov	r1, r5
 8016e3c:	4638      	mov	r0, r7
 8016e3e:	f7ff ffa7 	bl	8016d90 <sbrk_aligned>
 8016e42:	3001      	adds	r0, #1
 8016e44:	d037      	beq.n	8016eb6 <_malloc_r+0xe6>
 8016e46:	6823      	ldr	r3, [r4, #0]
 8016e48:	442b      	add	r3, r5
 8016e4a:	6023      	str	r3, [r4, #0]
 8016e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d038      	beq.n	8016ec6 <_malloc_r+0xf6>
 8016e54:	685a      	ldr	r2, [r3, #4]
 8016e56:	42a2      	cmp	r2, r4
 8016e58:	d12b      	bne.n	8016eb2 <_malloc_r+0xe2>
 8016e5a:	2200      	movs	r2, #0
 8016e5c:	605a      	str	r2, [r3, #4]
 8016e5e:	e00f      	b.n	8016e80 <_malloc_r+0xb0>
 8016e60:	6822      	ldr	r2, [r4, #0]
 8016e62:	1b52      	subs	r2, r2, r5
 8016e64:	d41f      	bmi.n	8016ea6 <_malloc_r+0xd6>
 8016e66:	2a0b      	cmp	r2, #11
 8016e68:	d917      	bls.n	8016e9a <_malloc_r+0xca>
 8016e6a:	1961      	adds	r1, r4, r5
 8016e6c:	42a3      	cmp	r3, r4
 8016e6e:	6025      	str	r5, [r4, #0]
 8016e70:	bf18      	it	ne
 8016e72:	6059      	strne	r1, [r3, #4]
 8016e74:	6863      	ldr	r3, [r4, #4]
 8016e76:	bf08      	it	eq
 8016e78:	f8c8 1000 	streq.w	r1, [r8]
 8016e7c:	5162      	str	r2, [r4, r5]
 8016e7e:	604b      	str	r3, [r1, #4]
 8016e80:	4638      	mov	r0, r7
 8016e82:	f104 060b 	add.w	r6, r4, #11
 8016e86:	f000 f829 	bl	8016edc <__malloc_unlock>
 8016e8a:	f026 0607 	bic.w	r6, r6, #7
 8016e8e:	1d23      	adds	r3, r4, #4
 8016e90:	1af2      	subs	r2, r6, r3
 8016e92:	d0ae      	beq.n	8016df2 <_malloc_r+0x22>
 8016e94:	1b9b      	subs	r3, r3, r6
 8016e96:	50a3      	str	r3, [r4, r2]
 8016e98:	e7ab      	b.n	8016df2 <_malloc_r+0x22>
 8016e9a:	42a3      	cmp	r3, r4
 8016e9c:	6862      	ldr	r2, [r4, #4]
 8016e9e:	d1dd      	bne.n	8016e5c <_malloc_r+0x8c>
 8016ea0:	f8c8 2000 	str.w	r2, [r8]
 8016ea4:	e7ec      	b.n	8016e80 <_malloc_r+0xb0>
 8016ea6:	4623      	mov	r3, r4
 8016ea8:	6864      	ldr	r4, [r4, #4]
 8016eaa:	e7ac      	b.n	8016e06 <_malloc_r+0x36>
 8016eac:	4634      	mov	r4, r6
 8016eae:	6876      	ldr	r6, [r6, #4]
 8016eb0:	e7b4      	b.n	8016e1c <_malloc_r+0x4c>
 8016eb2:	4613      	mov	r3, r2
 8016eb4:	e7cc      	b.n	8016e50 <_malloc_r+0x80>
 8016eb6:	230c      	movs	r3, #12
 8016eb8:	603b      	str	r3, [r7, #0]
 8016eba:	4638      	mov	r0, r7
 8016ebc:	f000 f80e 	bl	8016edc <__malloc_unlock>
 8016ec0:	e797      	b.n	8016df2 <_malloc_r+0x22>
 8016ec2:	6025      	str	r5, [r4, #0]
 8016ec4:	e7dc      	b.n	8016e80 <_malloc_r+0xb0>
 8016ec6:	605b      	str	r3, [r3, #4]
 8016ec8:	deff      	udf	#255	; 0xff
 8016eca:	bf00      	nop
 8016ecc:	2000e57c 	.word	0x2000e57c

08016ed0 <__malloc_lock>:
 8016ed0:	4801      	ldr	r0, [pc, #4]	; (8016ed8 <__malloc_lock+0x8>)
 8016ed2:	f000 bcfc 	b.w	80178ce <__retarget_lock_acquire_recursive>
 8016ed6:	bf00      	nop
 8016ed8:	2000e6c5 	.word	0x2000e6c5

08016edc <__malloc_unlock>:
 8016edc:	4801      	ldr	r0, [pc, #4]	; (8016ee4 <__malloc_unlock+0x8>)
 8016ede:	f000 bcf7 	b.w	80178d0 <__retarget_lock_release_recursive>
 8016ee2:	bf00      	nop
 8016ee4:	2000e6c5 	.word	0x2000e6c5

08016ee8 <srand>:
 8016ee8:	b538      	push	{r3, r4, r5, lr}
 8016eea:	4b10      	ldr	r3, [pc, #64]	; (8016f2c <srand+0x44>)
 8016eec:	681d      	ldr	r5, [r3, #0]
 8016eee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016ef0:	4604      	mov	r4, r0
 8016ef2:	b9b3      	cbnz	r3, 8016f22 <srand+0x3a>
 8016ef4:	2018      	movs	r0, #24
 8016ef6:	f7ff ff3b 	bl	8016d70 <malloc>
 8016efa:	4602      	mov	r2, r0
 8016efc:	6328      	str	r0, [r5, #48]	; 0x30
 8016efe:	b920      	cbnz	r0, 8016f0a <srand+0x22>
 8016f00:	4b0b      	ldr	r3, [pc, #44]	; (8016f30 <srand+0x48>)
 8016f02:	480c      	ldr	r0, [pc, #48]	; (8016f34 <srand+0x4c>)
 8016f04:	2146      	movs	r1, #70	; 0x46
 8016f06:	f000 fcfb 	bl	8017900 <__assert_func>
 8016f0a:	490b      	ldr	r1, [pc, #44]	; (8016f38 <srand+0x50>)
 8016f0c:	4b0b      	ldr	r3, [pc, #44]	; (8016f3c <srand+0x54>)
 8016f0e:	e9c0 1300 	strd	r1, r3, [r0]
 8016f12:	4b0b      	ldr	r3, [pc, #44]	; (8016f40 <srand+0x58>)
 8016f14:	6083      	str	r3, [r0, #8]
 8016f16:	230b      	movs	r3, #11
 8016f18:	8183      	strh	r3, [r0, #12]
 8016f1a:	2100      	movs	r1, #0
 8016f1c:	2001      	movs	r0, #1
 8016f1e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016f22:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016f24:	2200      	movs	r2, #0
 8016f26:	611c      	str	r4, [r3, #16]
 8016f28:	615a      	str	r2, [r3, #20]
 8016f2a:	bd38      	pop	{r3, r4, r5, pc}
 8016f2c:	200008b0 	.word	0x200008b0
 8016f30:	08019812 	.word	0x08019812
 8016f34:	08019829 	.word	0x08019829
 8016f38:	abcd330e 	.word	0xabcd330e
 8016f3c:	e66d1234 	.word	0xe66d1234
 8016f40:	0005deec 	.word	0x0005deec

08016f44 <rand>:
 8016f44:	4b16      	ldr	r3, [pc, #88]	; (8016fa0 <rand+0x5c>)
 8016f46:	b510      	push	{r4, lr}
 8016f48:	681c      	ldr	r4, [r3, #0]
 8016f4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016f4c:	b9b3      	cbnz	r3, 8016f7c <rand+0x38>
 8016f4e:	2018      	movs	r0, #24
 8016f50:	f7ff ff0e 	bl	8016d70 <malloc>
 8016f54:	4602      	mov	r2, r0
 8016f56:	6320      	str	r0, [r4, #48]	; 0x30
 8016f58:	b920      	cbnz	r0, 8016f64 <rand+0x20>
 8016f5a:	4b12      	ldr	r3, [pc, #72]	; (8016fa4 <rand+0x60>)
 8016f5c:	4812      	ldr	r0, [pc, #72]	; (8016fa8 <rand+0x64>)
 8016f5e:	2152      	movs	r1, #82	; 0x52
 8016f60:	f000 fcce 	bl	8017900 <__assert_func>
 8016f64:	4911      	ldr	r1, [pc, #68]	; (8016fac <rand+0x68>)
 8016f66:	4b12      	ldr	r3, [pc, #72]	; (8016fb0 <rand+0x6c>)
 8016f68:	e9c0 1300 	strd	r1, r3, [r0]
 8016f6c:	4b11      	ldr	r3, [pc, #68]	; (8016fb4 <rand+0x70>)
 8016f6e:	6083      	str	r3, [r0, #8]
 8016f70:	230b      	movs	r3, #11
 8016f72:	8183      	strh	r3, [r0, #12]
 8016f74:	2100      	movs	r1, #0
 8016f76:	2001      	movs	r0, #1
 8016f78:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016f7c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016f7e:	480e      	ldr	r0, [pc, #56]	; (8016fb8 <rand+0x74>)
 8016f80:	690b      	ldr	r3, [r1, #16]
 8016f82:	694c      	ldr	r4, [r1, #20]
 8016f84:	4a0d      	ldr	r2, [pc, #52]	; (8016fbc <rand+0x78>)
 8016f86:	4358      	muls	r0, r3
 8016f88:	fb02 0004 	mla	r0, r2, r4, r0
 8016f8c:	fba3 3202 	umull	r3, r2, r3, r2
 8016f90:	3301      	adds	r3, #1
 8016f92:	eb40 0002 	adc.w	r0, r0, r2
 8016f96:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016f9a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016f9e:	bd10      	pop	{r4, pc}
 8016fa0:	200008b0 	.word	0x200008b0
 8016fa4:	08019812 	.word	0x08019812
 8016fa8:	08019829 	.word	0x08019829
 8016fac:	abcd330e 	.word	0xabcd330e
 8016fb0:	e66d1234 	.word	0xe66d1234
 8016fb4:	0005deec 	.word	0x0005deec
 8016fb8:	5851f42d 	.word	0x5851f42d
 8016fbc:	4c957f2d 	.word	0x4c957f2d

08016fc0 <realloc>:
 8016fc0:	4b02      	ldr	r3, [pc, #8]	; (8016fcc <realloc+0xc>)
 8016fc2:	460a      	mov	r2, r1
 8016fc4:	4601      	mov	r1, r0
 8016fc6:	6818      	ldr	r0, [r3, #0]
 8016fc8:	f000 b802 	b.w	8016fd0 <_realloc_r>
 8016fcc:	200008b0 	.word	0x200008b0

08016fd0 <_realloc_r>:
 8016fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fd4:	4680      	mov	r8, r0
 8016fd6:	4614      	mov	r4, r2
 8016fd8:	460e      	mov	r6, r1
 8016fda:	b921      	cbnz	r1, 8016fe6 <_realloc_r+0x16>
 8016fdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016fe0:	4611      	mov	r1, r2
 8016fe2:	f7ff bef5 	b.w	8016dd0 <_malloc_r>
 8016fe6:	b92a      	cbnz	r2, 8016ff4 <_realloc_r+0x24>
 8016fe8:	f000 fcb4 	bl	8017954 <_free_r>
 8016fec:	4625      	mov	r5, r4
 8016fee:	4628      	mov	r0, r5
 8016ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ff4:	f000 fcfa 	bl	80179ec <_malloc_usable_size_r>
 8016ff8:	4284      	cmp	r4, r0
 8016ffa:	4607      	mov	r7, r0
 8016ffc:	d802      	bhi.n	8017004 <_realloc_r+0x34>
 8016ffe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017002:	d812      	bhi.n	801702a <_realloc_r+0x5a>
 8017004:	4621      	mov	r1, r4
 8017006:	4640      	mov	r0, r8
 8017008:	f7ff fee2 	bl	8016dd0 <_malloc_r>
 801700c:	4605      	mov	r5, r0
 801700e:	2800      	cmp	r0, #0
 8017010:	d0ed      	beq.n	8016fee <_realloc_r+0x1e>
 8017012:	42bc      	cmp	r4, r7
 8017014:	4622      	mov	r2, r4
 8017016:	4631      	mov	r1, r6
 8017018:	bf28      	it	cs
 801701a:	463a      	movcs	r2, r7
 801701c:	f000 fc61 	bl	80178e2 <memcpy>
 8017020:	4631      	mov	r1, r6
 8017022:	4640      	mov	r0, r8
 8017024:	f000 fc96 	bl	8017954 <_free_r>
 8017028:	e7e1      	b.n	8016fee <_realloc_r+0x1e>
 801702a:	4635      	mov	r5, r6
 801702c:	e7df      	b.n	8016fee <_realloc_r+0x1e>
	...

08017030 <_strtoul_l.constprop.0>:
 8017030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017034:	4f36      	ldr	r7, [pc, #216]	; (8017110 <_strtoul_l.constprop.0+0xe0>)
 8017036:	4686      	mov	lr, r0
 8017038:	460d      	mov	r5, r1
 801703a:	4628      	mov	r0, r5
 801703c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017040:	5d3e      	ldrb	r6, [r7, r4]
 8017042:	f016 0608 	ands.w	r6, r6, #8
 8017046:	d1f8      	bne.n	801703a <_strtoul_l.constprop.0+0xa>
 8017048:	2c2d      	cmp	r4, #45	; 0x2d
 801704a:	d130      	bne.n	80170ae <_strtoul_l.constprop.0+0x7e>
 801704c:	782c      	ldrb	r4, [r5, #0]
 801704e:	2601      	movs	r6, #1
 8017050:	1c85      	adds	r5, r0, #2
 8017052:	2b00      	cmp	r3, #0
 8017054:	d057      	beq.n	8017106 <_strtoul_l.constprop.0+0xd6>
 8017056:	2b10      	cmp	r3, #16
 8017058:	d109      	bne.n	801706e <_strtoul_l.constprop.0+0x3e>
 801705a:	2c30      	cmp	r4, #48	; 0x30
 801705c:	d107      	bne.n	801706e <_strtoul_l.constprop.0+0x3e>
 801705e:	7828      	ldrb	r0, [r5, #0]
 8017060:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8017064:	2858      	cmp	r0, #88	; 0x58
 8017066:	d149      	bne.n	80170fc <_strtoul_l.constprop.0+0xcc>
 8017068:	786c      	ldrb	r4, [r5, #1]
 801706a:	2310      	movs	r3, #16
 801706c:	3502      	adds	r5, #2
 801706e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8017072:	2700      	movs	r7, #0
 8017074:	fbb8 f8f3 	udiv	r8, r8, r3
 8017078:	fb03 f908 	mul.w	r9, r3, r8
 801707c:	ea6f 0909 	mvn.w	r9, r9
 8017080:	4638      	mov	r0, r7
 8017082:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8017086:	f1bc 0f09 	cmp.w	ip, #9
 801708a:	d815      	bhi.n	80170b8 <_strtoul_l.constprop.0+0x88>
 801708c:	4664      	mov	r4, ip
 801708e:	42a3      	cmp	r3, r4
 8017090:	dd23      	ble.n	80170da <_strtoul_l.constprop.0+0xaa>
 8017092:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8017096:	d007      	beq.n	80170a8 <_strtoul_l.constprop.0+0x78>
 8017098:	4580      	cmp	r8, r0
 801709a:	d31b      	bcc.n	80170d4 <_strtoul_l.constprop.0+0xa4>
 801709c:	d101      	bne.n	80170a2 <_strtoul_l.constprop.0+0x72>
 801709e:	45a1      	cmp	r9, r4
 80170a0:	db18      	blt.n	80170d4 <_strtoul_l.constprop.0+0xa4>
 80170a2:	fb00 4003 	mla	r0, r0, r3, r4
 80170a6:	2701      	movs	r7, #1
 80170a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80170ac:	e7e9      	b.n	8017082 <_strtoul_l.constprop.0+0x52>
 80170ae:	2c2b      	cmp	r4, #43	; 0x2b
 80170b0:	bf04      	itt	eq
 80170b2:	782c      	ldrbeq	r4, [r5, #0]
 80170b4:	1c85      	addeq	r5, r0, #2
 80170b6:	e7cc      	b.n	8017052 <_strtoul_l.constprop.0+0x22>
 80170b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80170bc:	f1bc 0f19 	cmp.w	ip, #25
 80170c0:	d801      	bhi.n	80170c6 <_strtoul_l.constprop.0+0x96>
 80170c2:	3c37      	subs	r4, #55	; 0x37
 80170c4:	e7e3      	b.n	801708e <_strtoul_l.constprop.0+0x5e>
 80170c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80170ca:	f1bc 0f19 	cmp.w	ip, #25
 80170ce:	d804      	bhi.n	80170da <_strtoul_l.constprop.0+0xaa>
 80170d0:	3c57      	subs	r4, #87	; 0x57
 80170d2:	e7dc      	b.n	801708e <_strtoul_l.constprop.0+0x5e>
 80170d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80170d8:	e7e6      	b.n	80170a8 <_strtoul_l.constprop.0+0x78>
 80170da:	1c7b      	adds	r3, r7, #1
 80170dc:	d106      	bne.n	80170ec <_strtoul_l.constprop.0+0xbc>
 80170de:	2322      	movs	r3, #34	; 0x22
 80170e0:	f8ce 3000 	str.w	r3, [lr]
 80170e4:	4638      	mov	r0, r7
 80170e6:	b932      	cbnz	r2, 80170f6 <_strtoul_l.constprop.0+0xc6>
 80170e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80170ec:	b106      	cbz	r6, 80170f0 <_strtoul_l.constprop.0+0xc0>
 80170ee:	4240      	negs	r0, r0
 80170f0:	2a00      	cmp	r2, #0
 80170f2:	d0f9      	beq.n	80170e8 <_strtoul_l.constprop.0+0xb8>
 80170f4:	b107      	cbz	r7, 80170f8 <_strtoul_l.constprop.0+0xc8>
 80170f6:	1e69      	subs	r1, r5, #1
 80170f8:	6011      	str	r1, [r2, #0]
 80170fa:	e7f5      	b.n	80170e8 <_strtoul_l.constprop.0+0xb8>
 80170fc:	2430      	movs	r4, #48	; 0x30
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d1b5      	bne.n	801706e <_strtoul_l.constprop.0+0x3e>
 8017102:	2308      	movs	r3, #8
 8017104:	e7b3      	b.n	801706e <_strtoul_l.constprop.0+0x3e>
 8017106:	2c30      	cmp	r4, #48	; 0x30
 8017108:	d0a9      	beq.n	801705e <_strtoul_l.constprop.0+0x2e>
 801710a:	230a      	movs	r3, #10
 801710c:	e7af      	b.n	801706e <_strtoul_l.constprop.0+0x3e>
 801710e:	bf00      	nop
 8017110:	08019882 	.word	0x08019882

08017114 <strtoul>:
 8017114:	4613      	mov	r3, r2
 8017116:	460a      	mov	r2, r1
 8017118:	4601      	mov	r1, r0
 801711a:	4802      	ldr	r0, [pc, #8]	; (8017124 <strtoul+0x10>)
 801711c:	6800      	ldr	r0, [r0, #0]
 801711e:	f7ff bf87 	b.w	8017030 <_strtoul_l.constprop.0>
 8017122:	bf00      	nop
 8017124:	200008b0 	.word	0x200008b0

08017128 <std>:
 8017128:	2300      	movs	r3, #0
 801712a:	b510      	push	{r4, lr}
 801712c:	4604      	mov	r4, r0
 801712e:	e9c0 3300 	strd	r3, r3, [r0]
 8017132:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017136:	6083      	str	r3, [r0, #8]
 8017138:	8181      	strh	r1, [r0, #12]
 801713a:	6643      	str	r3, [r0, #100]	; 0x64
 801713c:	81c2      	strh	r2, [r0, #14]
 801713e:	6183      	str	r3, [r0, #24]
 8017140:	4619      	mov	r1, r3
 8017142:	2208      	movs	r2, #8
 8017144:	305c      	adds	r0, #92	; 0x5c
 8017146:	f000 faad 	bl	80176a4 <memset>
 801714a:	4b0d      	ldr	r3, [pc, #52]	; (8017180 <std+0x58>)
 801714c:	6263      	str	r3, [r4, #36]	; 0x24
 801714e:	4b0d      	ldr	r3, [pc, #52]	; (8017184 <std+0x5c>)
 8017150:	62a3      	str	r3, [r4, #40]	; 0x28
 8017152:	4b0d      	ldr	r3, [pc, #52]	; (8017188 <std+0x60>)
 8017154:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017156:	4b0d      	ldr	r3, [pc, #52]	; (801718c <std+0x64>)
 8017158:	6323      	str	r3, [r4, #48]	; 0x30
 801715a:	4b0d      	ldr	r3, [pc, #52]	; (8017190 <std+0x68>)
 801715c:	6224      	str	r4, [r4, #32]
 801715e:	429c      	cmp	r4, r3
 8017160:	d006      	beq.n	8017170 <std+0x48>
 8017162:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8017166:	4294      	cmp	r4, r2
 8017168:	d002      	beq.n	8017170 <std+0x48>
 801716a:	33d0      	adds	r3, #208	; 0xd0
 801716c:	429c      	cmp	r4, r3
 801716e:	d105      	bne.n	801717c <std+0x54>
 8017170:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017178:	f000 bba8 	b.w	80178cc <__retarget_lock_init_recursive>
 801717c:	bd10      	pop	{r4, pc}
 801717e:	bf00      	nop
 8017180:	0801742d 	.word	0x0801742d
 8017184:	0801744f 	.word	0x0801744f
 8017188:	08017487 	.word	0x08017487
 801718c:	080174ab 	.word	0x080174ab
 8017190:	2000e584 	.word	0x2000e584

08017194 <stdio_exit_handler>:
 8017194:	4a02      	ldr	r2, [pc, #8]	; (80171a0 <stdio_exit_handler+0xc>)
 8017196:	4903      	ldr	r1, [pc, #12]	; (80171a4 <stdio_exit_handler+0x10>)
 8017198:	4803      	ldr	r0, [pc, #12]	; (80171a8 <stdio_exit_handler+0x14>)
 801719a:	f000 b869 	b.w	8017270 <_fwalk_sglue>
 801719e:	bf00      	nop
 80171a0:	20000858 	.word	0x20000858
 80171a4:	08018361 	.word	0x08018361
 80171a8:	20000864 	.word	0x20000864

080171ac <cleanup_stdio>:
 80171ac:	6841      	ldr	r1, [r0, #4]
 80171ae:	4b0c      	ldr	r3, [pc, #48]	; (80171e0 <cleanup_stdio+0x34>)
 80171b0:	4299      	cmp	r1, r3
 80171b2:	b510      	push	{r4, lr}
 80171b4:	4604      	mov	r4, r0
 80171b6:	d001      	beq.n	80171bc <cleanup_stdio+0x10>
 80171b8:	f001 f8d2 	bl	8018360 <_fflush_r>
 80171bc:	68a1      	ldr	r1, [r4, #8]
 80171be:	4b09      	ldr	r3, [pc, #36]	; (80171e4 <cleanup_stdio+0x38>)
 80171c0:	4299      	cmp	r1, r3
 80171c2:	d002      	beq.n	80171ca <cleanup_stdio+0x1e>
 80171c4:	4620      	mov	r0, r4
 80171c6:	f001 f8cb 	bl	8018360 <_fflush_r>
 80171ca:	68e1      	ldr	r1, [r4, #12]
 80171cc:	4b06      	ldr	r3, [pc, #24]	; (80171e8 <cleanup_stdio+0x3c>)
 80171ce:	4299      	cmp	r1, r3
 80171d0:	d004      	beq.n	80171dc <cleanup_stdio+0x30>
 80171d2:	4620      	mov	r0, r4
 80171d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171d8:	f001 b8c2 	b.w	8018360 <_fflush_r>
 80171dc:	bd10      	pop	{r4, pc}
 80171de:	bf00      	nop
 80171e0:	2000e584 	.word	0x2000e584
 80171e4:	2000e5ec 	.word	0x2000e5ec
 80171e8:	2000e654 	.word	0x2000e654

080171ec <global_stdio_init.part.0>:
 80171ec:	b510      	push	{r4, lr}
 80171ee:	4b0b      	ldr	r3, [pc, #44]	; (801721c <global_stdio_init.part.0+0x30>)
 80171f0:	4c0b      	ldr	r4, [pc, #44]	; (8017220 <global_stdio_init.part.0+0x34>)
 80171f2:	4a0c      	ldr	r2, [pc, #48]	; (8017224 <global_stdio_init.part.0+0x38>)
 80171f4:	601a      	str	r2, [r3, #0]
 80171f6:	4620      	mov	r0, r4
 80171f8:	2200      	movs	r2, #0
 80171fa:	2104      	movs	r1, #4
 80171fc:	f7ff ff94 	bl	8017128 <std>
 8017200:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8017204:	2201      	movs	r2, #1
 8017206:	2109      	movs	r1, #9
 8017208:	f7ff ff8e 	bl	8017128 <std>
 801720c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8017210:	2202      	movs	r2, #2
 8017212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017216:	2112      	movs	r1, #18
 8017218:	f7ff bf86 	b.w	8017128 <std>
 801721c:	2000e6bc 	.word	0x2000e6bc
 8017220:	2000e584 	.word	0x2000e584
 8017224:	08017195 	.word	0x08017195

08017228 <__sfp_lock_acquire>:
 8017228:	4801      	ldr	r0, [pc, #4]	; (8017230 <__sfp_lock_acquire+0x8>)
 801722a:	f000 bb50 	b.w	80178ce <__retarget_lock_acquire_recursive>
 801722e:	bf00      	nop
 8017230:	2000e6c6 	.word	0x2000e6c6

08017234 <__sfp_lock_release>:
 8017234:	4801      	ldr	r0, [pc, #4]	; (801723c <__sfp_lock_release+0x8>)
 8017236:	f000 bb4b 	b.w	80178d0 <__retarget_lock_release_recursive>
 801723a:	bf00      	nop
 801723c:	2000e6c6 	.word	0x2000e6c6

08017240 <__sinit>:
 8017240:	b510      	push	{r4, lr}
 8017242:	4604      	mov	r4, r0
 8017244:	f7ff fff0 	bl	8017228 <__sfp_lock_acquire>
 8017248:	6a23      	ldr	r3, [r4, #32]
 801724a:	b11b      	cbz	r3, 8017254 <__sinit+0x14>
 801724c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017250:	f7ff bff0 	b.w	8017234 <__sfp_lock_release>
 8017254:	4b04      	ldr	r3, [pc, #16]	; (8017268 <__sinit+0x28>)
 8017256:	6223      	str	r3, [r4, #32]
 8017258:	4b04      	ldr	r3, [pc, #16]	; (801726c <__sinit+0x2c>)
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	2b00      	cmp	r3, #0
 801725e:	d1f5      	bne.n	801724c <__sinit+0xc>
 8017260:	f7ff ffc4 	bl	80171ec <global_stdio_init.part.0>
 8017264:	e7f2      	b.n	801724c <__sinit+0xc>
 8017266:	bf00      	nop
 8017268:	080171ad 	.word	0x080171ad
 801726c:	2000e6bc 	.word	0x2000e6bc

08017270 <_fwalk_sglue>:
 8017270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017274:	4607      	mov	r7, r0
 8017276:	4688      	mov	r8, r1
 8017278:	4614      	mov	r4, r2
 801727a:	2600      	movs	r6, #0
 801727c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017280:	f1b9 0901 	subs.w	r9, r9, #1
 8017284:	d505      	bpl.n	8017292 <_fwalk_sglue+0x22>
 8017286:	6824      	ldr	r4, [r4, #0]
 8017288:	2c00      	cmp	r4, #0
 801728a:	d1f7      	bne.n	801727c <_fwalk_sglue+0xc>
 801728c:	4630      	mov	r0, r6
 801728e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017292:	89ab      	ldrh	r3, [r5, #12]
 8017294:	2b01      	cmp	r3, #1
 8017296:	d907      	bls.n	80172a8 <_fwalk_sglue+0x38>
 8017298:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801729c:	3301      	adds	r3, #1
 801729e:	d003      	beq.n	80172a8 <_fwalk_sglue+0x38>
 80172a0:	4629      	mov	r1, r5
 80172a2:	4638      	mov	r0, r7
 80172a4:	47c0      	blx	r8
 80172a6:	4306      	orrs	r6, r0
 80172a8:	3568      	adds	r5, #104	; 0x68
 80172aa:	e7e9      	b.n	8017280 <_fwalk_sglue+0x10>

080172ac <_fwrite_r>:
 80172ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172b0:	9c08      	ldr	r4, [sp, #32]
 80172b2:	468a      	mov	sl, r1
 80172b4:	4690      	mov	r8, r2
 80172b6:	fb02 f903 	mul.w	r9, r2, r3
 80172ba:	4606      	mov	r6, r0
 80172bc:	b118      	cbz	r0, 80172c6 <_fwrite_r+0x1a>
 80172be:	6a03      	ldr	r3, [r0, #32]
 80172c0:	b90b      	cbnz	r3, 80172c6 <_fwrite_r+0x1a>
 80172c2:	f7ff ffbd 	bl	8017240 <__sinit>
 80172c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80172c8:	07dd      	lsls	r5, r3, #31
 80172ca:	d405      	bmi.n	80172d8 <_fwrite_r+0x2c>
 80172cc:	89a3      	ldrh	r3, [r4, #12]
 80172ce:	0598      	lsls	r0, r3, #22
 80172d0:	d402      	bmi.n	80172d8 <_fwrite_r+0x2c>
 80172d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80172d4:	f000 fafb 	bl	80178ce <__retarget_lock_acquire_recursive>
 80172d8:	89a3      	ldrh	r3, [r4, #12]
 80172da:	0719      	lsls	r1, r3, #28
 80172dc:	d516      	bpl.n	801730c <_fwrite_r+0x60>
 80172de:	6923      	ldr	r3, [r4, #16]
 80172e0:	b1a3      	cbz	r3, 801730c <_fwrite_r+0x60>
 80172e2:	2500      	movs	r5, #0
 80172e4:	454d      	cmp	r5, r9
 80172e6:	d01f      	beq.n	8017328 <_fwrite_r+0x7c>
 80172e8:	68a7      	ldr	r7, [r4, #8]
 80172ea:	f81a 1005 	ldrb.w	r1, [sl, r5]
 80172ee:	3f01      	subs	r7, #1
 80172f0:	2f00      	cmp	r7, #0
 80172f2:	60a7      	str	r7, [r4, #8]
 80172f4:	da04      	bge.n	8017300 <_fwrite_r+0x54>
 80172f6:	69a3      	ldr	r3, [r4, #24]
 80172f8:	429f      	cmp	r7, r3
 80172fa:	db0f      	blt.n	801731c <_fwrite_r+0x70>
 80172fc:	290a      	cmp	r1, #10
 80172fe:	d00d      	beq.n	801731c <_fwrite_r+0x70>
 8017300:	6823      	ldr	r3, [r4, #0]
 8017302:	1c5a      	adds	r2, r3, #1
 8017304:	6022      	str	r2, [r4, #0]
 8017306:	7019      	strb	r1, [r3, #0]
 8017308:	3501      	adds	r5, #1
 801730a:	e7eb      	b.n	80172e4 <_fwrite_r+0x38>
 801730c:	4621      	mov	r1, r4
 801730e:	4630      	mov	r0, r6
 8017310:	f000 f946 	bl	80175a0 <__swsetup_r>
 8017314:	2800      	cmp	r0, #0
 8017316:	d0e4      	beq.n	80172e2 <_fwrite_r+0x36>
 8017318:	2500      	movs	r5, #0
 801731a:	e005      	b.n	8017328 <_fwrite_r+0x7c>
 801731c:	4622      	mov	r2, r4
 801731e:	4630      	mov	r0, r6
 8017320:	f000 f900 	bl	8017524 <__swbuf_r>
 8017324:	3001      	adds	r0, #1
 8017326:	d1ef      	bne.n	8017308 <_fwrite_r+0x5c>
 8017328:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801732a:	07da      	lsls	r2, r3, #31
 801732c:	d405      	bmi.n	801733a <_fwrite_r+0x8e>
 801732e:	89a3      	ldrh	r3, [r4, #12]
 8017330:	059b      	lsls	r3, r3, #22
 8017332:	d402      	bmi.n	801733a <_fwrite_r+0x8e>
 8017334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017336:	f000 facb 	bl	80178d0 <__retarget_lock_release_recursive>
 801733a:	fbb5 f0f8 	udiv	r0, r5, r8
 801733e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08017344 <fwrite>:
 8017344:	b507      	push	{r0, r1, r2, lr}
 8017346:	9300      	str	r3, [sp, #0]
 8017348:	4613      	mov	r3, r2
 801734a:	460a      	mov	r2, r1
 801734c:	4601      	mov	r1, r0
 801734e:	4803      	ldr	r0, [pc, #12]	; (801735c <fwrite+0x18>)
 8017350:	6800      	ldr	r0, [r0, #0]
 8017352:	f7ff ffab 	bl	80172ac <_fwrite_r>
 8017356:	b003      	add	sp, #12
 8017358:	f85d fb04 	ldr.w	pc, [sp], #4
 801735c:	200008b0 	.word	0x200008b0

08017360 <iprintf>:
 8017360:	b40f      	push	{r0, r1, r2, r3}
 8017362:	b507      	push	{r0, r1, r2, lr}
 8017364:	4906      	ldr	r1, [pc, #24]	; (8017380 <iprintf+0x20>)
 8017366:	ab04      	add	r3, sp, #16
 8017368:	6808      	ldr	r0, [r1, #0]
 801736a:	f853 2b04 	ldr.w	r2, [r3], #4
 801736e:	6881      	ldr	r1, [r0, #8]
 8017370:	9301      	str	r3, [sp, #4]
 8017372:	f000 fcc5 	bl	8017d00 <_vfiprintf_r>
 8017376:	b003      	add	sp, #12
 8017378:	f85d eb04 	ldr.w	lr, [sp], #4
 801737c:	b004      	add	sp, #16
 801737e:	4770      	bx	lr
 8017380:	200008b0 	.word	0x200008b0

08017384 <sniprintf>:
 8017384:	b40c      	push	{r2, r3}
 8017386:	b530      	push	{r4, r5, lr}
 8017388:	4b17      	ldr	r3, [pc, #92]	; (80173e8 <sniprintf+0x64>)
 801738a:	1e0c      	subs	r4, r1, #0
 801738c:	681d      	ldr	r5, [r3, #0]
 801738e:	b09d      	sub	sp, #116	; 0x74
 8017390:	da08      	bge.n	80173a4 <sniprintf+0x20>
 8017392:	238b      	movs	r3, #139	; 0x8b
 8017394:	602b      	str	r3, [r5, #0]
 8017396:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801739a:	b01d      	add	sp, #116	; 0x74
 801739c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80173a0:	b002      	add	sp, #8
 80173a2:	4770      	bx	lr
 80173a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80173a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80173ac:	bf14      	ite	ne
 80173ae:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80173b2:	4623      	moveq	r3, r4
 80173b4:	9304      	str	r3, [sp, #16]
 80173b6:	9307      	str	r3, [sp, #28]
 80173b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80173bc:	9002      	str	r0, [sp, #8]
 80173be:	9006      	str	r0, [sp, #24]
 80173c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80173c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80173c6:	ab21      	add	r3, sp, #132	; 0x84
 80173c8:	a902      	add	r1, sp, #8
 80173ca:	4628      	mov	r0, r5
 80173cc:	9301      	str	r3, [sp, #4]
 80173ce:	f000 fb6f 	bl	8017ab0 <_svfiprintf_r>
 80173d2:	1c43      	adds	r3, r0, #1
 80173d4:	bfbc      	itt	lt
 80173d6:	238b      	movlt	r3, #139	; 0x8b
 80173d8:	602b      	strlt	r3, [r5, #0]
 80173da:	2c00      	cmp	r4, #0
 80173dc:	d0dd      	beq.n	801739a <sniprintf+0x16>
 80173de:	9b02      	ldr	r3, [sp, #8]
 80173e0:	2200      	movs	r2, #0
 80173e2:	701a      	strb	r2, [r3, #0]
 80173e4:	e7d9      	b.n	801739a <sniprintf+0x16>
 80173e6:	bf00      	nop
 80173e8:	200008b0 	.word	0x200008b0

080173ec <siprintf>:
 80173ec:	b40e      	push	{r1, r2, r3}
 80173ee:	b500      	push	{lr}
 80173f0:	b09c      	sub	sp, #112	; 0x70
 80173f2:	ab1d      	add	r3, sp, #116	; 0x74
 80173f4:	9002      	str	r0, [sp, #8]
 80173f6:	9006      	str	r0, [sp, #24]
 80173f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80173fc:	4809      	ldr	r0, [pc, #36]	; (8017424 <siprintf+0x38>)
 80173fe:	9107      	str	r1, [sp, #28]
 8017400:	9104      	str	r1, [sp, #16]
 8017402:	4909      	ldr	r1, [pc, #36]	; (8017428 <siprintf+0x3c>)
 8017404:	f853 2b04 	ldr.w	r2, [r3], #4
 8017408:	9105      	str	r1, [sp, #20]
 801740a:	6800      	ldr	r0, [r0, #0]
 801740c:	9301      	str	r3, [sp, #4]
 801740e:	a902      	add	r1, sp, #8
 8017410:	f000 fb4e 	bl	8017ab0 <_svfiprintf_r>
 8017414:	9b02      	ldr	r3, [sp, #8]
 8017416:	2200      	movs	r2, #0
 8017418:	701a      	strb	r2, [r3, #0]
 801741a:	b01c      	add	sp, #112	; 0x70
 801741c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017420:	b003      	add	sp, #12
 8017422:	4770      	bx	lr
 8017424:	200008b0 	.word	0x200008b0
 8017428:	ffff0208 	.word	0xffff0208

0801742c <__sread>:
 801742c:	b510      	push	{r4, lr}
 801742e:	460c      	mov	r4, r1
 8017430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017434:	f000 f9ec 	bl	8017810 <_read_r>
 8017438:	2800      	cmp	r0, #0
 801743a:	bfab      	itete	ge
 801743c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801743e:	89a3      	ldrhlt	r3, [r4, #12]
 8017440:	181b      	addge	r3, r3, r0
 8017442:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017446:	bfac      	ite	ge
 8017448:	6563      	strge	r3, [r4, #84]	; 0x54
 801744a:	81a3      	strhlt	r3, [r4, #12]
 801744c:	bd10      	pop	{r4, pc}

0801744e <__swrite>:
 801744e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017452:	461f      	mov	r7, r3
 8017454:	898b      	ldrh	r3, [r1, #12]
 8017456:	05db      	lsls	r3, r3, #23
 8017458:	4605      	mov	r5, r0
 801745a:	460c      	mov	r4, r1
 801745c:	4616      	mov	r6, r2
 801745e:	d505      	bpl.n	801746c <__swrite+0x1e>
 8017460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017464:	2302      	movs	r3, #2
 8017466:	2200      	movs	r2, #0
 8017468:	f000 f9c0 	bl	80177ec <_lseek_r>
 801746c:	89a3      	ldrh	r3, [r4, #12]
 801746e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017476:	81a3      	strh	r3, [r4, #12]
 8017478:	4632      	mov	r2, r6
 801747a:	463b      	mov	r3, r7
 801747c:	4628      	mov	r0, r5
 801747e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017482:	f000 b9e7 	b.w	8017854 <_write_r>

08017486 <__sseek>:
 8017486:	b510      	push	{r4, lr}
 8017488:	460c      	mov	r4, r1
 801748a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801748e:	f000 f9ad 	bl	80177ec <_lseek_r>
 8017492:	1c43      	adds	r3, r0, #1
 8017494:	89a3      	ldrh	r3, [r4, #12]
 8017496:	bf15      	itete	ne
 8017498:	6560      	strne	r0, [r4, #84]	; 0x54
 801749a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801749e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80174a2:	81a3      	strheq	r3, [r4, #12]
 80174a4:	bf18      	it	ne
 80174a6:	81a3      	strhne	r3, [r4, #12]
 80174a8:	bd10      	pop	{r4, pc}

080174aa <__sclose>:
 80174aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174ae:	f000 b937 	b.w	8017720 <_close_r>

080174b2 <_vsniprintf_r>:
 80174b2:	b530      	push	{r4, r5, lr}
 80174b4:	4614      	mov	r4, r2
 80174b6:	2c00      	cmp	r4, #0
 80174b8:	b09b      	sub	sp, #108	; 0x6c
 80174ba:	4605      	mov	r5, r0
 80174bc:	461a      	mov	r2, r3
 80174be:	da05      	bge.n	80174cc <_vsniprintf_r+0x1a>
 80174c0:	238b      	movs	r3, #139	; 0x8b
 80174c2:	6003      	str	r3, [r0, #0]
 80174c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80174c8:	b01b      	add	sp, #108	; 0x6c
 80174ca:	bd30      	pop	{r4, r5, pc}
 80174cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80174d0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80174d4:	bf14      	ite	ne
 80174d6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80174da:	4623      	moveq	r3, r4
 80174dc:	9302      	str	r3, [sp, #8]
 80174de:	9305      	str	r3, [sp, #20]
 80174e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80174e4:	9100      	str	r1, [sp, #0]
 80174e6:	9104      	str	r1, [sp, #16]
 80174e8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80174ec:	4669      	mov	r1, sp
 80174ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80174f0:	f000 fade 	bl	8017ab0 <_svfiprintf_r>
 80174f4:	1c43      	adds	r3, r0, #1
 80174f6:	bfbc      	itt	lt
 80174f8:	238b      	movlt	r3, #139	; 0x8b
 80174fa:	602b      	strlt	r3, [r5, #0]
 80174fc:	2c00      	cmp	r4, #0
 80174fe:	d0e3      	beq.n	80174c8 <_vsniprintf_r+0x16>
 8017500:	9b00      	ldr	r3, [sp, #0]
 8017502:	2200      	movs	r2, #0
 8017504:	701a      	strb	r2, [r3, #0]
 8017506:	e7df      	b.n	80174c8 <_vsniprintf_r+0x16>

08017508 <vsniprintf>:
 8017508:	b507      	push	{r0, r1, r2, lr}
 801750a:	9300      	str	r3, [sp, #0]
 801750c:	4613      	mov	r3, r2
 801750e:	460a      	mov	r2, r1
 8017510:	4601      	mov	r1, r0
 8017512:	4803      	ldr	r0, [pc, #12]	; (8017520 <vsniprintf+0x18>)
 8017514:	6800      	ldr	r0, [r0, #0]
 8017516:	f7ff ffcc 	bl	80174b2 <_vsniprintf_r>
 801751a:	b003      	add	sp, #12
 801751c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017520:	200008b0 	.word	0x200008b0

08017524 <__swbuf_r>:
 8017524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017526:	460e      	mov	r6, r1
 8017528:	4614      	mov	r4, r2
 801752a:	4605      	mov	r5, r0
 801752c:	b118      	cbz	r0, 8017536 <__swbuf_r+0x12>
 801752e:	6a03      	ldr	r3, [r0, #32]
 8017530:	b90b      	cbnz	r3, 8017536 <__swbuf_r+0x12>
 8017532:	f7ff fe85 	bl	8017240 <__sinit>
 8017536:	69a3      	ldr	r3, [r4, #24]
 8017538:	60a3      	str	r3, [r4, #8]
 801753a:	89a3      	ldrh	r3, [r4, #12]
 801753c:	071a      	lsls	r2, r3, #28
 801753e:	d525      	bpl.n	801758c <__swbuf_r+0x68>
 8017540:	6923      	ldr	r3, [r4, #16]
 8017542:	b31b      	cbz	r3, 801758c <__swbuf_r+0x68>
 8017544:	6823      	ldr	r3, [r4, #0]
 8017546:	6922      	ldr	r2, [r4, #16]
 8017548:	1a98      	subs	r0, r3, r2
 801754a:	6963      	ldr	r3, [r4, #20]
 801754c:	b2f6      	uxtb	r6, r6
 801754e:	4283      	cmp	r3, r0
 8017550:	4637      	mov	r7, r6
 8017552:	dc04      	bgt.n	801755e <__swbuf_r+0x3a>
 8017554:	4621      	mov	r1, r4
 8017556:	4628      	mov	r0, r5
 8017558:	f000 ff02 	bl	8018360 <_fflush_r>
 801755c:	b9e0      	cbnz	r0, 8017598 <__swbuf_r+0x74>
 801755e:	68a3      	ldr	r3, [r4, #8]
 8017560:	3b01      	subs	r3, #1
 8017562:	60a3      	str	r3, [r4, #8]
 8017564:	6823      	ldr	r3, [r4, #0]
 8017566:	1c5a      	adds	r2, r3, #1
 8017568:	6022      	str	r2, [r4, #0]
 801756a:	701e      	strb	r6, [r3, #0]
 801756c:	6962      	ldr	r2, [r4, #20]
 801756e:	1c43      	adds	r3, r0, #1
 8017570:	429a      	cmp	r2, r3
 8017572:	d004      	beq.n	801757e <__swbuf_r+0x5a>
 8017574:	89a3      	ldrh	r3, [r4, #12]
 8017576:	07db      	lsls	r3, r3, #31
 8017578:	d506      	bpl.n	8017588 <__swbuf_r+0x64>
 801757a:	2e0a      	cmp	r6, #10
 801757c:	d104      	bne.n	8017588 <__swbuf_r+0x64>
 801757e:	4621      	mov	r1, r4
 8017580:	4628      	mov	r0, r5
 8017582:	f000 feed 	bl	8018360 <_fflush_r>
 8017586:	b938      	cbnz	r0, 8017598 <__swbuf_r+0x74>
 8017588:	4638      	mov	r0, r7
 801758a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801758c:	4621      	mov	r1, r4
 801758e:	4628      	mov	r0, r5
 8017590:	f000 f806 	bl	80175a0 <__swsetup_r>
 8017594:	2800      	cmp	r0, #0
 8017596:	d0d5      	beq.n	8017544 <__swbuf_r+0x20>
 8017598:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801759c:	e7f4      	b.n	8017588 <__swbuf_r+0x64>
	...

080175a0 <__swsetup_r>:
 80175a0:	b538      	push	{r3, r4, r5, lr}
 80175a2:	4b2a      	ldr	r3, [pc, #168]	; (801764c <__swsetup_r+0xac>)
 80175a4:	4605      	mov	r5, r0
 80175a6:	6818      	ldr	r0, [r3, #0]
 80175a8:	460c      	mov	r4, r1
 80175aa:	b118      	cbz	r0, 80175b4 <__swsetup_r+0x14>
 80175ac:	6a03      	ldr	r3, [r0, #32]
 80175ae:	b90b      	cbnz	r3, 80175b4 <__swsetup_r+0x14>
 80175b0:	f7ff fe46 	bl	8017240 <__sinit>
 80175b4:	89a3      	ldrh	r3, [r4, #12]
 80175b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80175ba:	0718      	lsls	r0, r3, #28
 80175bc:	d422      	bmi.n	8017604 <__swsetup_r+0x64>
 80175be:	06d9      	lsls	r1, r3, #27
 80175c0:	d407      	bmi.n	80175d2 <__swsetup_r+0x32>
 80175c2:	2309      	movs	r3, #9
 80175c4:	602b      	str	r3, [r5, #0]
 80175c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80175ca:	81a3      	strh	r3, [r4, #12]
 80175cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80175d0:	e034      	b.n	801763c <__swsetup_r+0x9c>
 80175d2:	0758      	lsls	r0, r3, #29
 80175d4:	d512      	bpl.n	80175fc <__swsetup_r+0x5c>
 80175d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80175d8:	b141      	cbz	r1, 80175ec <__swsetup_r+0x4c>
 80175da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80175de:	4299      	cmp	r1, r3
 80175e0:	d002      	beq.n	80175e8 <__swsetup_r+0x48>
 80175e2:	4628      	mov	r0, r5
 80175e4:	f000 f9b6 	bl	8017954 <_free_r>
 80175e8:	2300      	movs	r3, #0
 80175ea:	6363      	str	r3, [r4, #52]	; 0x34
 80175ec:	89a3      	ldrh	r3, [r4, #12]
 80175ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80175f2:	81a3      	strh	r3, [r4, #12]
 80175f4:	2300      	movs	r3, #0
 80175f6:	6063      	str	r3, [r4, #4]
 80175f8:	6923      	ldr	r3, [r4, #16]
 80175fa:	6023      	str	r3, [r4, #0]
 80175fc:	89a3      	ldrh	r3, [r4, #12]
 80175fe:	f043 0308 	orr.w	r3, r3, #8
 8017602:	81a3      	strh	r3, [r4, #12]
 8017604:	6923      	ldr	r3, [r4, #16]
 8017606:	b94b      	cbnz	r3, 801761c <__swsetup_r+0x7c>
 8017608:	89a3      	ldrh	r3, [r4, #12]
 801760a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801760e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017612:	d003      	beq.n	801761c <__swsetup_r+0x7c>
 8017614:	4621      	mov	r1, r4
 8017616:	4628      	mov	r0, r5
 8017618:	f000 ff02 	bl	8018420 <__smakebuf_r>
 801761c:	89a0      	ldrh	r0, [r4, #12]
 801761e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017622:	f010 0301 	ands.w	r3, r0, #1
 8017626:	d00a      	beq.n	801763e <__swsetup_r+0x9e>
 8017628:	2300      	movs	r3, #0
 801762a:	60a3      	str	r3, [r4, #8]
 801762c:	6963      	ldr	r3, [r4, #20]
 801762e:	425b      	negs	r3, r3
 8017630:	61a3      	str	r3, [r4, #24]
 8017632:	6923      	ldr	r3, [r4, #16]
 8017634:	b943      	cbnz	r3, 8017648 <__swsetup_r+0xa8>
 8017636:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801763a:	d1c4      	bne.n	80175c6 <__swsetup_r+0x26>
 801763c:	bd38      	pop	{r3, r4, r5, pc}
 801763e:	0781      	lsls	r1, r0, #30
 8017640:	bf58      	it	pl
 8017642:	6963      	ldrpl	r3, [r4, #20]
 8017644:	60a3      	str	r3, [r4, #8]
 8017646:	e7f4      	b.n	8017632 <__swsetup_r+0x92>
 8017648:	2000      	movs	r0, #0
 801764a:	e7f7      	b.n	801763c <__swsetup_r+0x9c>
 801764c:	200008b0 	.word	0x200008b0

08017650 <memcmp>:
 8017650:	b510      	push	{r4, lr}
 8017652:	3901      	subs	r1, #1
 8017654:	4402      	add	r2, r0
 8017656:	4290      	cmp	r0, r2
 8017658:	d101      	bne.n	801765e <memcmp+0xe>
 801765a:	2000      	movs	r0, #0
 801765c:	e005      	b.n	801766a <memcmp+0x1a>
 801765e:	7803      	ldrb	r3, [r0, #0]
 8017660:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017664:	42a3      	cmp	r3, r4
 8017666:	d001      	beq.n	801766c <memcmp+0x1c>
 8017668:	1b18      	subs	r0, r3, r4
 801766a:	bd10      	pop	{r4, pc}
 801766c:	3001      	adds	r0, #1
 801766e:	e7f2      	b.n	8017656 <memcmp+0x6>

08017670 <memmove>:
 8017670:	4288      	cmp	r0, r1
 8017672:	b510      	push	{r4, lr}
 8017674:	eb01 0402 	add.w	r4, r1, r2
 8017678:	d902      	bls.n	8017680 <memmove+0x10>
 801767a:	4284      	cmp	r4, r0
 801767c:	4623      	mov	r3, r4
 801767e:	d807      	bhi.n	8017690 <memmove+0x20>
 8017680:	1e43      	subs	r3, r0, #1
 8017682:	42a1      	cmp	r1, r4
 8017684:	d008      	beq.n	8017698 <memmove+0x28>
 8017686:	f811 2b01 	ldrb.w	r2, [r1], #1
 801768a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801768e:	e7f8      	b.n	8017682 <memmove+0x12>
 8017690:	4402      	add	r2, r0
 8017692:	4601      	mov	r1, r0
 8017694:	428a      	cmp	r2, r1
 8017696:	d100      	bne.n	801769a <memmove+0x2a>
 8017698:	bd10      	pop	{r4, pc}
 801769a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801769e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80176a2:	e7f7      	b.n	8017694 <memmove+0x24>

080176a4 <memset>:
 80176a4:	4402      	add	r2, r0
 80176a6:	4603      	mov	r3, r0
 80176a8:	4293      	cmp	r3, r2
 80176aa:	d100      	bne.n	80176ae <memset+0xa>
 80176ac:	4770      	bx	lr
 80176ae:	f803 1b01 	strb.w	r1, [r3], #1
 80176b2:	e7f9      	b.n	80176a8 <memset+0x4>

080176b4 <strchr>:
 80176b4:	b2c9      	uxtb	r1, r1
 80176b6:	4603      	mov	r3, r0
 80176b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80176bc:	b11a      	cbz	r2, 80176c6 <strchr+0x12>
 80176be:	428a      	cmp	r2, r1
 80176c0:	d1f9      	bne.n	80176b6 <strchr+0x2>
 80176c2:	4618      	mov	r0, r3
 80176c4:	4770      	bx	lr
 80176c6:	2900      	cmp	r1, #0
 80176c8:	bf18      	it	ne
 80176ca:	2300      	movne	r3, #0
 80176cc:	e7f9      	b.n	80176c2 <strchr+0xe>

080176ce <strncmp>:
 80176ce:	b510      	push	{r4, lr}
 80176d0:	b16a      	cbz	r2, 80176ee <strncmp+0x20>
 80176d2:	3901      	subs	r1, #1
 80176d4:	1884      	adds	r4, r0, r2
 80176d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80176da:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80176de:	429a      	cmp	r2, r3
 80176e0:	d103      	bne.n	80176ea <strncmp+0x1c>
 80176e2:	42a0      	cmp	r0, r4
 80176e4:	d001      	beq.n	80176ea <strncmp+0x1c>
 80176e6:	2a00      	cmp	r2, #0
 80176e8:	d1f5      	bne.n	80176d6 <strncmp+0x8>
 80176ea:	1ad0      	subs	r0, r2, r3
 80176ec:	bd10      	pop	{r4, pc}
 80176ee:	4610      	mov	r0, r2
 80176f0:	e7fc      	b.n	80176ec <strncmp+0x1e>

080176f2 <strstr>:
 80176f2:	780a      	ldrb	r2, [r1, #0]
 80176f4:	b570      	push	{r4, r5, r6, lr}
 80176f6:	b96a      	cbnz	r2, 8017714 <strstr+0x22>
 80176f8:	bd70      	pop	{r4, r5, r6, pc}
 80176fa:	429a      	cmp	r2, r3
 80176fc:	d109      	bne.n	8017712 <strstr+0x20>
 80176fe:	460c      	mov	r4, r1
 8017700:	4605      	mov	r5, r0
 8017702:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017706:	2b00      	cmp	r3, #0
 8017708:	d0f6      	beq.n	80176f8 <strstr+0x6>
 801770a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801770e:	429e      	cmp	r6, r3
 8017710:	d0f7      	beq.n	8017702 <strstr+0x10>
 8017712:	3001      	adds	r0, #1
 8017714:	7803      	ldrb	r3, [r0, #0]
 8017716:	2b00      	cmp	r3, #0
 8017718:	d1ef      	bne.n	80176fa <strstr+0x8>
 801771a:	4618      	mov	r0, r3
 801771c:	e7ec      	b.n	80176f8 <strstr+0x6>
	...

08017720 <_close_r>:
 8017720:	b538      	push	{r3, r4, r5, lr}
 8017722:	4d06      	ldr	r5, [pc, #24]	; (801773c <_close_r+0x1c>)
 8017724:	2300      	movs	r3, #0
 8017726:	4604      	mov	r4, r0
 8017728:	4608      	mov	r0, r1
 801772a:	602b      	str	r3, [r5, #0]
 801772c:	f7ea fb13 	bl	8001d56 <_close>
 8017730:	1c43      	adds	r3, r0, #1
 8017732:	d102      	bne.n	801773a <_close_r+0x1a>
 8017734:	682b      	ldr	r3, [r5, #0]
 8017736:	b103      	cbz	r3, 801773a <_close_r+0x1a>
 8017738:	6023      	str	r3, [r4, #0]
 801773a:	bd38      	pop	{r3, r4, r5, pc}
 801773c:	2000e6c0 	.word	0x2000e6c0

08017740 <_reclaim_reent>:
 8017740:	4b29      	ldr	r3, [pc, #164]	; (80177e8 <_reclaim_reent+0xa8>)
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	4283      	cmp	r3, r0
 8017746:	b570      	push	{r4, r5, r6, lr}
 8017748:	4604      	mov	r4, r0
 801774a:	d04b      	beq.n	80177e4 <_reclaim_reent+0xa4>
 801774c:	69c3      	ldr	r3, [r0, #28]
 801774e:	b143      	cbz	r3, 8017762 <_reclaim_reent+0x22>
 8017750:	68db      	ldr	r3, [r3, #12]
 8017752:	2b00      	cmp	r3, #0
 8017754:	d144      	bne.n	80177e0 <_reclaim_reent+0xa0>
 8017756:	69e3      	ldr	r3, [r4, #28]
 8017758:	6819      	ldr	r1, [r3, #0]
 801775a:	b111      	cbz	r1, 8017762 <_reclaim_reent+0x22>
 801775c:	4620      	mov	r0, r4
 801775e:	f000 f8f9 	bl	8017954 <_free_r>
 8017762:	6961      	ldr	r1, [r4, #20]
 8017764:	b111      	cbz	r1, 801776c <_reclaim_reent+0x2c>
 8017766:	4620      	mov	r0, r4
 8017768:	f000 f8f4 	bl	8017954 <_free_r>
 801776c:	69e1      	ldr	r1, [r4, #28]
 801776e:	b111      	cbz	r1, 8017776 <_reclaim_reent+0x36>
 8017770:	4620      	mov	r0, r4
 8017772:	f000 f8ef 	bl	8017954 <_free_r>
 8017776:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017778:	b111      	cbz	r1, 8017780 <_reclaim_reent+0x40>
 801777a:	4620      	mov	r0, r4
 801777c:	f000 f8ea 	bl	8017954 <_free_r>
 8017780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017782:	b111      	cbz	r1, 801778a <_reclaim_reent+0x4a>
 8017784:	4620      	mov	r0, r4
 8017786:	f000 f8e5 	bl	8017954 <_free_r>
 801778a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801778c:	b111      	cbz	r1, 8017794 <_reclaim_reent+0x54>
 801778e:	4620      	mov	r0, r4
 8017790:	f000 f8e0 	bl	8017954 <_free_r>
 8017794:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017796:	b111      	cbz	r1, 801779e <_reclaim_reent+0x5e>
 8017798:	4620      	mov	r0, r4
 801779a:	f000 f8db 	bl	8017954 <_free_r>
 801779e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80177a0:	b111      	cbz	r1, 80177a8 <_reclaim_reent+0x68>
 80177a2:	4620      	mov	r0, r4
 80177a4:	f000 f8d6 	bl	8017954 <_free_r>
 80177a8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80177aa:	b111      	cbz	r1, 80177b2 <_reclaim_reent+0x72>
 80177ac:	4620      	mov	r0, r4
 80177ae:	f000 f8d1 	bl	8017954 <_free_r>
 80177b2:	6a23      	ldr	r3, [r4, #32]
 80177b4:	b1b3      	cbz	r3, 80177e4 <_reclaim_reent+0xa4>
 80177b6:	4620      	mov	r0, r4
 80177b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80177bc:	4718      	bx	r3
 80177be:	5949      	ldr	r1, [r1, r5]
 80177c0:	b941      	cbnz	r1, 80177d4 <_reclaim_reent+0x94>
 80177c2:	3504      	adds	r5, #4
 80177c4:	69e3      	ldr	r3, [r4, #28]
 80177c6:	2d80      	cmp	r5, #128	; 0x80
 80177c8:	68d9      	ldr	r1, [r3, #12]
 80177ca:	d1f8      	bne.n	80177be <_reclaim_reent+0x7e>
 80177cc:	4620      	mov	r0, r4
 80177ce:	f000 f8c1 	bl	8017954 <_free_r>
 80177d2:	e7c0      	b.n	8017756 <_reclaim_reent+0x16>
 80177d4:	680e      	ldr	r6, [r1, #0]
 80177d6:	4620      	mov	r0, r4
 80177d8:	f000 f8bc 	bl	8017954 <_free_r>
 80177dc:	4631      	mov	r1, r6
 80177de:	e7ef      	b.n	80177c0 <_reclaim_reent+0x80>
 80177e0:	2500      	movs	r5, #0
 80177e2:	e7ef      	b.n	80177c4 <_reclaim_reent+0x84>
 80177e4:	bd70      	pop	{r4, r5, r6, pc}
 80177e6:	bf00      	nop
 80177e8:	200008b0 	.word	0x200008b0

080177ec <_lseek_r>:
 80177ec:	b538      	push	{r3, r4, r5, lr}
 80177ee:	4d07      	ldr	r5, [pc, #28]	; (801780c <_lseek_r+0x20>)
 80177f0:	4604      	mov	r4, r0
 80177f2:	4608      	mov	r0, r1
 80177f4:	4611      	mov	r1, r2
 80177f6:	2200      	movs	r2, #0
 80177f8:	602a      	str	r2, [r5, #0]
 80177fa:	461a      	mov	r2, r3
 80177fc:	f7ea fad2 	bl	8001da4 <_lseek>
 8017800:	1c43      	adds	r3, r0, #1
 8017802:	d102      	bne.n	801780a <_lseek_r+0x1e>
 8017804:	682b      	ldr	r3, [r5, #0]
 8017806:	b103      	cbz	r3, 801780a <_lseek_r+0x1e>
 8017808:	6023      	str	r3, [r4, #0]
 801780a:	bd38      	pop	{r3, r4, r5, pc}
 801780c:	2000e6c0 	.word	0x2000e6c0

08017810 <_read_r>:
 8017810:	b538      	push	{r3, r4, r5, lr}
 8017812:	4d07      	ldr	r5, [pc, #28]	; (8017830 <_read_r+0x20>)
 8017814:	4604      	mov	r4, r0
 8017816:	4608      	mov	r0, r1
 8017818:	4611      	mov	r1, r2
 801781a:	2200      	movs	r2, #0
 801781c:	602a      	str	r2, [r5, #0]
 801781e:	461a      	mov	r2, r3
 8017820:	f7ea fa60 	bl	8001ce4 <_read>
 8017824:	1c43      	adds	r3, r0, #1
 8017826:	d102      	bne.n	801782e <_read_r+0x1e>
 8017828:	682b      	ldr	r3, [r5, #0]
 801782a:	b103      	cbz	r3, 801782e <_read_r+0x1e>
 801782c:	6023      	str	r3, [r4, #0]
 801782e:	bd38      	pop	{r3, r4, r5, pc}
 8017830:	2000e6c0 	.word	0x2000e6c0

08017834 <_sbrk_r>:
 8017834:	b538      	push	{r3, r4, r5, lr}
 8017836:	4d06      	ldr	r5, [pc, #24]	; (8017850 <_sbrk_r+0x1c>)
 8017838:	2300      	movs	r3, #0
 801783a:	4604      	mov	r4, r0
 801783c:	4608      	mov	r0, r1
 801783e:	602b      	str	r3, [r5, #0]
 8017840:	f7ea fabe 	bl	8001dc0 <_sbrk>
 8017844:	1c43      	adds	r3, r0, #1
 8017846:	d102      	bne.n	801784e <_sbrk_r+0x1a>
 8017848:	682b      	ldr	r3, [r5, #0]
 801784a:	b103      	cbz	r3, 801784e <_sbrk_r+0x1a>
 801784c:	6023      	str	r3, [r4, #0]
 801784e:	bd38      	pop	{r3, r4, r5, pc}
 8017850:	2000e6c0 	.word	0x2000e6c0

08017854 <_write_r>:
 8017854:	b538      	push	{r3, r4, r5, lr}
 8017856:	4d07      	ldr	r5, [pc, #28]	; (8017874 <_write_r+0x20>)
 8017858:	4604      	mov	r4, r0
 801785a:	4608      	mov	r0, r1
 801785c:	4611      	mov	r1, r2
 801785e:	2200      	movs	r2, #0
 8017860:	602a      	str	r2, [r5, #0]
 8017862:	461a      	mov	r2, r3
 8017864:	f7ea fa5b 	bl	8001d1e <_write>
 8017868:	1c43      	adds	r3, r0, #1
 801786a:	d102      	bne.n	8017872 <_write_r+0x1e>
 801786c:	682b      	ldr	r3, [r5, #0]
 801786e:	b103      	cbz	r3, 8017872 <_write_r+0x1e>
 8017870:	6023      	str	r3, [r4, #0]
 8017872:	bd38      	pop	{r3, r4, r5, pc}
 8017874:	2000e6c0 	.word	0x2000e6c0

08017878 <__errno>:
 8017878:	4b01      	ldr	r3, [pc, #4]	; (8017880 <__errno+0x8>)
 801787a:	6818      	ldr	r0, [r3, #0]
 801787c:	4770      	bx	lr
 801787e:	bf00      	nop
 8017880:	200008b0 	.word	0x200008b0

08017884 <__libc_init_array>:
 8017884:	b570      	push	{r4, r5, r6, lr}
 8017886:	4d0d      	ldr	r5, [pc, #52]	; (80178bc <__libc_init_array+0x38>)
 8017888:	4c0d      	ldr	r4, [pc, #52]	; (80178c0 <__libc_init_array+0x3c>)
 801788a:	1b64      	subs	r4, r4, r5
 801788c:	10a4      	asrs	r4, r4, #2
 801788e:	2600      	movs	r6, #0
 8017890:	42a6      	cmp	r6, r4
 8017892:	d109      	bne.n	80178a8 <__libc_init_array+0x24>
 8017894:	4d0b      	ldr	r5, [pc, #44]	; (80178c4 <__libc_init_array+0x40>)
 8017896:	4c0c      	ldr	r4, [pc, #48]	; (80178c8 <__libc_init_array+0x44>)
 8017898:	f000 fe6c 	bl	8018574 <_init>
 801789c:	1b64      	subs	r4, r4, r5
 801789e:	10a4      	asrs	r4, r4, #2
 80178a0:	2600      	movs	r6, #0
 80178a2:	42a6      	cmp	r6, r4
 80178a4:	d105      	bne.n	80178b2 <__libc_init_array+0x2e>
 80178a6:	bd70      	pop	{r4, r5, r6, pc}
 80178a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80178ac:	4798      	blx	r3
 80178ae:	3601      	adds	r6, #1
 80178b0:	e7ee      	b.n	8017890 <__libc_init_array+0xc>
 80178b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80178b6:	4798      	blx	r3
 80178b8:	3601      	adds	r6, #1
 80178ba:	e7f2      	b.n	80178a2 <__libc_init_array+0x1e>
 80178bc:	080199fc 	.word	0x080199fc
 80178c0:	080199fc 	.word	0x080199fc
 80178c4:	080199fc 	.word	0x080199fc
 80178c8:	08019a0c 	.word	0x08019a0c

080178cc <__retarget_lock_init_recursive>:
 80178cc:	4770      	bx	lr

080178ce <__retarget_lock_acquire_recursive>:
 80178ce:	4770      	bx	lr

080178d0 <__retarget_lock_release_recursive>:
 80178d0:	4770      	bx	lr

080178d2 <strcpy>:
 80178d2:	4603      	mov	r3, r0
 80178d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80178d8:	f803 2b01 	strb.w	r2, [r3], #1
 80178dc:	2a00      	cmp	r2, #0
 80178de:	d1f9      	bne.n	80178d4 <strcpy+0x2>
 80178e0:	4770      	bx	lr

080178e2 <memcpy>:
 80178e2:	440a      	add	r2, r1
 80178e4:	4291      	cmp	r1, r2
 80178e6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80178ea:	d100      	bne.n	80178ee <memcpy+0xc>
 80178ec:	4770      	bx	lr
 80178ee:	b510      	push	{r4, lr}
 80178f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80178f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80178f8:	4291      	cmp	r1, r2
 80178fa:	d1f9      	bne.n	80178f0 <memcpy+0xe>
 80178fc:	bd10      	pop	{r4, pc}
	...

08017900 <__assert_func>:
 8017900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017902:	4614      	mov	r4, r2
 8017904:	461a      	mov	r2, r3
 8017906:	4b09      	ldr	r3, [pc, #36]	; (801792c <__assert_func+0x2c>)
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	4605      	mov	r5, r0
 801790c:	68d8      	ldr	r0, [r3, #12]
 801790e:	b14c      	cbz	r4, 8017924 <__assert_func+0x24>
 8017910:	4b07      	ldr	r3, [pc, #28]	; (8017930 <__assert_func+0x30>)
 8017912:	9100      	str	r1, [sp, #0]
 8017914:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017918:	4906      	ldr	r1, [pc, #24]	; (8017934 <__assert_func+0x34>)
 801791a:	462b      	mov	r3, r5
 801791c:	f000 fd48 	bl	80183b0 <fiprintf>
 8017920:	f000 fddc 	bl	80184dc <abort>
 8017924:	4b04      	ldr	r3, [pc, #16]	; (8017938 <__assert_func+0x38>)
 8017926:	461c      	mov	r4, r3
 8017928:	e7f3      	b.n	8017912 <__assert_func+0x12>
 801792a:	bf00      	nop
 801792c:	200008b0 	.word	0x200008b0
 8017930:	08019982 	.word	0x08019982
 8017934:	0801998f 	.word	0x0801998f
 8017938:	080199bd 	.word	0x080199bd

0801793c <__env_lock>:
 801793c:	4801      	ldr	r0, [pc, #4]	; (8017944 <__env_lock+0x8>)
 801793e:	f7ff bfc6 	b.w	80178ce <__retarget_lock_acquire_recursive>
 8017942:	bf00      	nop
 8017944:	2000e6c4 	.word	0x2000e6c4

08017948 <__env_unlock>:
 8017948:	4801      	ldr	r0, [pc, #4]	; (8017950 <__env_unlock+0x8>)
 801794a:	f7ff bfc1 	b.w	80178d0 <__retarget_lock_release_recursive>
 801794e:	bf00      	nop
 8017950:	2000e6c4 	.word	0x2000e6c4

08017954 <_free_r>:
 8017954:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017956:	2900      	cmp	r1, #0
 8017958:	d044      	beq.n	80179e4 <_free_r+0x90>
 801795a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801795e:	9001      	str	r0, [sp, #4]
 8017960:	2b00      	cmp	r3, #0
 8017962:	f1a1 0404 	sub.w	r4, r1, #4
 8017966:	bfb8      	it	lt
 8017968:	18e4      	addlt	r4, r4, r3
 801796a:	f7ff fab1 	bl	8016ed0 <__malloc_lock>
 801796e:	4a1e      	ldr	r2, [pc, #120]	; (80179e8 <_free_r+0x94>)
 8017970:	9801      	ldr	r0, [sp, #4]
 8017972:	6813      	ldr	r3, [r2, #0]
 8017974:	b933      	cbnz	r3, 8017984 <_free_r+0x30>
 8017976:	6063      	str	r3, [r4, #4]
 8017978:	6014      	str	r4, [r2, #0]
 801797a:	b003      	add	sp, #12
 801797c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017980:	f7ff baac 	b.w	8016edc <__malloc_unlock>
 8017984:	42a3      	cmp	r3, r4
 8017986:	d908      	bls.n	801799a <_free_r+0x46>
 8017988:	6825      	ldr	r5, [r4, #0]
 801798a:	1961      	adds	r1, r4, r5
 801798c:	428b      	cmp	r3, r1
 801798e:	bf01      	itttt	eq
 8017990:	6819      	ldreq	r1, [r3, #0]
 8017992:	685b      	ldreq	r3, [r3, #4]
 8017994:	1949      	addeq	r1, r1, r5
 8017996:	6021      	streq	r1, [r4, #0]
 8017998:	e7ed      	b.n	8017976 <_free_r+0x22>
 801799a:	461a      	mov	r2, r3
 801799c:	685b      	ldr	r3, [r3, #4]
 801799e:	b10b      	cbz	r3, 80179a4 <_free_r+0x50>
 80179a0:	42a3      	cmp	r3, r4
 80179a2:	d9fa      	bls.n	801799a <_free_r+0x46>
 80179a4:	6811      	ldr	r1, [r2, #0]
 80179a6:	1855      	adds	r5, r2, r1
 80179a8:	42a5      	cmp	r5, r4
 80179aa:	d10b      	bne.n	80179c4 <_free_r+0x70>
 80179ac:	6824      	ldr	r4, [r4, #0]
 80179ae:	4421      	add	r1, r4
 80179b0:	1854      	adds	r4, r2, r1
 80179b2:	42a3      	cmp	r3, r4
 80179b4:	6011      	str	r1, [r2, #0]
 80179b6:	d1e0      	bne.n	801797a <_free_r+0x26>
 80179b8:	681c      	ldr	r4, [r3, #0]
 80179ba:	685b      	ldr	r3, [r3, #4]
 80179bc:	6053      	str	r3, [r2, #4]
 80179be:	440c      	add	r4, r1
 80179c0:	6014      	str	r4, [r2, #0]
 80179c2:	e7da      	b.n	801797a <_free_r+0x26>
 80179c4:	d902      	bls.n	80179cc <_free_r+0x78>
 80179c6:	230c      	movs	r3, #12
 80179c8:	6003      	str	r3, [r0, #0]
 80179ca:	e7d6      	b.n	801797a <_free_r+0x26>
 80179cc:	6825      	ldr	r5, [r4, #0]
 80179ce:	1961      	adds	r1, r4, r5
 80179d0:	428b      	cmp	r3, r1
 80179d2:	bf04      	itt	eq
 80179d4:	6819      	ldreq	r1, [r3, #0]
 80179d6:	685b      	ldreq	r3, [r3, #4]
 80179d8:	6063      	str	r3, [r4, #4]
 80179da:	bf04      	itt	eq
 80179dc:	1949      	addeq	r1, r1, r5
 80179de:	6021      	streq	r1, [r4, #0]
 80179e0:	6054      	str	r4, [r2, #4]
 80179e2:	e7ca      	b.n	801797a <_free_r+0x26>
 80179e4:	b003      	add	sp, #12
 80179e6:	bd30      	pop	{r4, r5, pc}
 80179e8:	2000e57c 	.word	0x2000e57c

080179ec <_malloc_usable_size_r>:
 80179ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80179f0:	1f18      	subs	r0, r3, #4
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	bfbc      	itt	lt
 80179f6:	580b      	ldrlt	r3, [r1, r0]
 80179f8:	18c0      	addlt	r0, r0, r3
 80179fa:	4770      	bx	lr

080179fc <__ssputs_r>:
 80179fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a00:	688e      	ldr	r6, [r1, #8]
 8017a02:	461f      	mov	r7, r3
 8017a04:	42be      	cmp	r6, r7
 8017a06:	680b      	ldr	r3, [r1, #0]
 8017a08:	4682      	mov	sl, r0
 8017a0a:	460c      	mov	r4, r1
 8017a0c:	4690      	mov	r8, r2
 8017a0e:	d82c      	bhi.n	8017a6a <__ssputs_r+0x6e>
 8017a10:	898a      	ldrh	r2, [r1, #12]
 8017a12:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017a16:	d026      	beq.n	8017a66 <__ssputs_r+0x6a>
 8017a18:	6965      	ldr	r5, [r4, #20]
 8017a1a:	6909      	ldr	r1, [r1, #16]
 8017a1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017a20:	eba3 0901 	sub.w	r9, r3, r1
 8017a24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017a28:	1c7b      	adds	r3, r7, #1
 8017a2a:	444b      	add	r3, r9
 8017a2c:	106d      	asrs	r5, r5, #1
 8017a2e:	429d      	cmp	r5, r3
 8017a30:	bf38      	it	cc
 8017a32:	461d      	movcc	r5, r3
 8017a34:	0553      	lsls	r3, r2, #21
 8017a36:	d527      	bpl.n	8017a88 <__ssputs_r+0x8c>
 8017a38:	4629      	mov	r1, r5
 8017a3a:	f7ff f9c9 	bl	8016dd0 <_malloc_r>
 8017a3e:	4606      	mov	r6, r0
 8017a40:	b360      	cbz	r0, 8017a9c <__ssputs_r+0xa0>
 8017a42:	6921      	ldr	r1, [r4, #16]
 8017a44:	464a      	mov	r2, r9
 8017a46:	f7ff ff4c 	bl	80178e2 <memcpy>
 8017a4a:	89a3      	ldrh	r3, [r4, #12]
 8017a4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017a54:	81a3      	strh	r3, [r4, #12]
 8017a56:	6126      	str	r6, [r4, #16]
 8017a58:	6165      	str	r5, [r4, #20]
 8017a5a:	444e      	add	r6, r9
 8017a5c:	eba5 0509 	sub.w	r5, r5, r9
 8017a60:	6026      	str	r6, [r4, #0]
 8017a62:	60a5      	str	r5, [r4, #8]
 8017a64:	463e      	mov	r6, r7
 8017a66:	42be      	cmp	r6, r7
 8017a68:	d900      	bls.n	8017a6c <__ssputs_r+0x70>
 8017a6a:	463e      	mov	r6, r7
 8017a6c:	6820      	ldr	r0, [r4, #0]
 8017a6e:	4632      	mov	r2, r6
 8017a70:	4641      	mov	r1, r8
 8017a72:	f7ff fdfd 	bl	8017670 <memmove>
 8017a76:	68a3      	ldr	r3, [r4, #8]
 8017a78:	1b9b      	subs	r3, r3, r6
 8017a7a:	60a3      	str	r3, [r4, #8]
 8017a7c:	6823      	ldr	r3, [r4, #0]
 8017a7e:	4433      	add	r3, r6
 8017a80:	6023      	str	r3, [r4, #0]
 8017a82:	2000      	movs	r0, #0
 8017a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a88:	462a      	mov	r2, r5
 8017a8a:	f7ff faa1 	bl	8016fd0 <_realloc_r>
 8017a8e:	4606      	mov	r6, r0
 8017a90:	2800      	cmp	r0, #0
 8017a92:	d1e0      	bne.n	8017a56 <__ssputs_r+0x5a>
 8017a94:	6921      	ldr	r1, [r4, #16]
 8017a96:	4650      	mov	r0, sl
 8017a98:	f7ff ff5c 	bl	8017954 <_free_r>
 8017a9c:	230c      	movs	r3, #12
 8017a9e:	f8ca 3000 	str.w	r3, [sl]
 8017aa2:	89a3      	ldrh	r3, [r4, #12]
 8017aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017aa8:	81a3      	strh	r3, [r4, #12]
 8017aaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017aae:	e7e9      	b.n	8017a84 <__ssputs_r+0x88>

08017ab0 <_svfiprintf_r>:
 8017ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ab4:	4698      	mov	r8, r3
 8017ab6:	898b      	ldrh	r3, [r1, #12]
 8017ab8:	061b      	lsls	r3, r3, #24
 8017aba:	b09d      	sub	sp, #116	; 0x74
 8017abc:	4607      	mov	r7, r0
 8017abe:	460d      	mov	r5, r1
 8017ac0:	4614      	mov	r4, r2
 8017ac2:	d50e      	bpl.n	8017ae2 <_svfiprintf_r+0x32>
 8017ac4:	690b      	ldr	r3, [r1, #16]
 8017ac6:	b963      	cbnz	r3, 8017ae2 <_svfiprintf_r+0x32>
 8017ac8:	2140      	movs	r1, #64	; 0x40
 8017aca:	f7ff f981 	bl	8016dd0 <_malloc_r>
 8017ace:	6028      	str	r0, [r5, #0]
 8017ad0:	6128      	str	r0, [r5, #16]
 8017ad2:	b920      	cbnz	r0, 8017ade <_svfiprintf_r+0x2e>
 8017ad4:	230c      	movs	r3, #12
 8017ad6:	603b      	str	r3, [r7, #0]
 8017ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017adc:	e0d0      	b.n	8017c80 <_svfiprintf_r+0x1d0>
 8017ade:	2340      	movs	r3, #64	; 0x40
 8017ae0:	616b      	str	r3, [r5, #20]
 8017ae2:	2300      	movs	r3, #0
 8017ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8017ae6:	2320      	movs	r3, #32
 8017ae8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017aec:	f8cd 800c 	str.w	r8, [sp, #12]
 8017af0:	2330      	movs	r3, #48	; 0x30
 8017af2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017c98 <_svfiprintf_r+0x1e8>
 8017af6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017afa:	f04f 0901 	mov.w	r9, #1
 8017afe:	4623      	mov	r3, r4
 8017b00:	469a      	mov	sl, r3
 8017b02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b06:	b10a      	cbz	r2, 8017b0c <_svfiprintf_r+0x5c>
 8017b08:	2a25      	cmp	r2, #37	; 0x25
 8017b0a:	d1f9      	bne.n	8017b00 <_svfiprintf_r+0x50>
 8017b0c:	ebba 0b04 	subs.w	fp, sl, r4
 8017b10:	d00b      	beq.n	8017b2a <_svfiprintf_r+0x7a>
 8017b12:	465b      	mov	r3, fp
 8017b14:	4622      	mov	r2, r4
 8017b16:	4629      	mov	r1, r5
 8017b18:	4638      	mov	r0, r7
 8017b1a:	f7ff ff6f 	bl	80179fc <__ssputs_r>
 8017b1e:	3001      	adds	r0, #1
 8017b20:	f000 80a9 	beq.w	8017c76 <_svfiprintf_r+0x1c6>
 8017b24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017b26:	445a      	add	r2, fp
 8017b28:	9209      	str	r2, [sp, #36]	; 0x24
 8017b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	f000 80a1 	beq.w	8017c76 <_svfiprintf_r+0x1c6>
 8017b34:	2300      	movs	r3, #0
 8017b36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017b3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017b3e:	f10a 0a01 	add.w	sl, sl, #1
 8017b42:	9304      	str	r3, [sp, #16]
 8017b44:	9307      	str	r3, [sp, #28]
 8017b46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017b4a:	931a      	str	r3, [sp, #104]	; 0x68
 8017b4c:	4654      	mov	r4, sl
 8017b4e:	2205      	movs	r2, #5
 8017b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b54:	4850      	ldr	r0, [pc, #320]	; (8017c98 <_svfiprintf_r+0x1e8>)
 8017b56:	f7e8 fb73 	bl	8000240 <memchr>
 8017b5a:	9a04      	ldr	r2, [sp, #16]
 8017b5c:	b9d8      	cbnz	r0, 8017b96 <_svfiprintf_r+0xe6>
 8017b5e:	06d0      	lsls	r0, r2, #27
 8017b60:	bf44      	itt	mi
 8017b62:	2320      	movmi	r3, #32
 8017b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b68:	0711      	lsls	r1, r2, #28
 8017b6a:	bf44      	itt	mi
 8017b6c:	232b      	movmi	r3, #43	; 0x2b
 8017b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b72:	f89a 3000 	ldrb.w	r3, [sl]
 8017b76:	2b2a      	cmp	r3, #42	; 0x2a
 8017b78:	d015      	beq.n	8017ba6 <_svfiprintf_r+0xf6>
 8017b7a:	9a07      	ldr	r2, [sp, #28]
 8017b7c:	4654      	mov	r4, sl
 8017b7e:	2000      	movs	r0, #0
 8017b80:	f04f 0c0a 	mov.w	ip, #10
 8017b84:	4621      	mov	r1, r4
 8017b86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017b8a:	3b30      	subs	r3, #48	; 0x30
 8017b8c:	2b09      	cmp	r3, #9
 8017b8e:	d94d      	bls.n	8017c2c <_svfiprintf_r+0x17c>
 8017b90:	b1b0      	cbz	r0, 8017bc0 <_svfiprintf_r+0x110>
 8017b92:	9207      	str	r2, [sp, #28]
 8017b94:	e014      	b.n	8017bc0 <_svfiprintf_r+0x110>
 8017b96:	eba0 0308 	sub.w	r3, r0, r8
 8017b9a:	fa09 f303 	lsl.w	r3, r9, r3
 8017b9e:	4313      	orrs	r3, r2
 8017ba0:	9304      	str	r3, [sp, #16]
 8017ba2:	46a2      	mov	sl, r4
 8017ba4:	e7d2      	b.n	8017b4c <_svfiprintf_r+0x9c>
 8017ba6:	9b03      	ldr	r3, [sp, #12]
 8017ba8:	1d19      	adds	r1, r3, #4
 8017baa:	681b      	ldr	r3, [r3, #0]
 8017bac:	9103      	str	r1, [sp, #12]
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	bfbb      	ittet	lt
 8017bb2:	425b      	neglt	r3, r3
 8017bb4:	f042 0202 	orrlt.w	r2, r2, #2
 8017bb8:	9307      	strge	r3, [sp, #28]
 8017bba:	9307      	strlt	r3, [sp, #28]
 8017bbc:	bfb8      	it	lt
 8017bbe:	9204      	strlt	r2, [sp, #16]
 8017bc0:	7823      	ldrb	r3, [r4, #0]
 8017bc2:	2b2e      	cmp	r3, #46	; 0x2e
 8017bc4:	d10c      	bne.n	8017be0 <_svfiprintf_r+0x130>
 8017bc6:	7863      	ldrb	r3, [r4, #1]
 8017bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8017bca:	d134      	bne.n	8017c36 <_svfiprintf_r+0x186>
 8017bcc:	9b03      	ldr	r3, [sp, #12]
 8017bce:	1d1a      	adds	r2, r3, #4
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	9203      	str	r2, [sp, #12]
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	bfb8      	it	lt
 8017bd8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017bdc:	3402      	adds	r4, #2
 8017bde:	9305      	str	r3, [sp, #20]
 8017be0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017ca8 <_svfiprintf_r+0x1f8>
 8017be4:	7821      	ldrb	r1, [r4, #0]
 8017be6:	2203      	movs	r2, #3
 8017be8:	4650      	mov	r0, sl
 8017bea:	f7e8 fb29 	bl	8000240 <memchr>
 8017bee:	b138      	cbz	r0, 8017c00 <_svfiprintf_r+0x150>
 8017bf0:	9b04      	ldr	r3, [sp, #16]
 8017bf2:	eba0 000a 	sub.w	r0, r0, sl
 8017bf6:	2240      	movs	r2, #64	; 0x40
 8017bf8:	4082      	lsls	r2, r0
 8017bfa:	4313      	orrs	r3, r2
 8017bfc:	3401      	adds	r4, #1
 8017bfe:	9304      	str	r3, [sp, #16]
 8017c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c04:	4825      	ldr	r0, [pc, #148]	; (8017c9c <_svfiprintf_r+0x1ec>)
 8017c06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017c0a:	2206      	movs	r2, #6
 8017c0c:	f7e8 fb18 	bl	8000240 <memchr>
 8017c10:	2800      	cmp	r0, #0
 8017c12:	d038      	beq.n	8017c86 <_svfiprintf_r+0x1d6>
 8017c14:	4b22      	ldr	r3, [pc, #136]	; (8017ca0 <_svfiprintf_r+0x1f0>)
 8017c16:	bb1b      	cbnz	r3, 8017c60 <_svfiprintf_r+0x1b0>
 8017c18:	9b03      	ldr	r3, [sp, #12]
 8017c1a:	3307      	adds	r3, #7
 8017c1c:	f023 0307 	bic.w	r3, r3, #7
 8017c20:	3308      	adds	r3, #8
 8017c22:	9303      	str	r3, [sp, #12]
 8017c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c26:	4433      	add	r3, r6
 8017c28:	9309      	str	r3, [sp, #36]	; 0x24
 8017c2a:	e768      	b.n	8017afe <_svfiprintf_r+0x4e>
 8017c2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017c30:	460c      	mov	r4, r1
 8017c32:	2001      	movs	r0, #1
 8017c34:	e7a6      	b.n	8017b84 <_svfiprintf_r+0xd4>
 8017c36:	2300      	movs	r3, #0
 8017c38:	3401      	adds	r4, #1
 8017c3a:	9305      	str	r3, [sp, #20]
 8017c3c:	4619      	mov	r1, r3
 8017c3e:	f04f 0c0a 	mov.w	ip, #10
 8017c42:	4620      	mov	r0, r4
 8017c44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017c48:	3a30      	subs	r2, #48	; 0x30
 8017c4a:	2a09      	cmp	r2, #9
 8017c4c:	d903      	bls.n	8017c56 <_svfiprintf_r+0x1a6>
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d0c6      	beq.n	8017be0 <_svfiprintf_r+0x130>
 8017c52:	9105      	str	r1, [sp, #20]
 8017c54:	e7c4      	b.n	8017be0 <_svfiprintf_r+0x130>
 8017c56:	fb0c 2101 	mla	r1, ip, r1, r2
 8017c5a:	4604      	mov	r4, r0
 8017c5c:	2301      	movs	r3, #1
 8017c5e:	e7f0      	b.n	8017c42 <_svfiprintf_r+0x192>
 8017c60:	ab03      	add	r3, sp, #12
 8017c62:	9300      	str	r3, [sp, #0]
 8017c64:	462a      	mov	r2, r5
 8017c66:	4b0f      	ldr	r3, [pc, #60]	; (8017ca4 <_svfiprintf_r+0x1f4>)
 8017c68:	a904      	add	r1, sp, #16
 8017c6a:	4638      	mov	r0, r7
 8017c6c:	f3af 8000 	nop.w
 8017c70:	1c42      	adds	r2, r0, #1
 8017c72:	4606      	mov	r6, r0
 8017c74:	d1d6      	bne.n	8017c24 <_svfiprintf_r+0x174>
 8017c76:	89ab      	ldrh	r3, [r5, #12]
 8017c78:	065b      	lsls	r3, r3, #25
 8017c7a:	f53f af2d 	bmi.w	8017ad8 <_svfiprintf_r+0x28>
 8017c7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017c80:	b01d      	add	sp, #116	; 0x74
 8017c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c86:	ab03      	add	r3, sp, #12
 8017c88:	9300      	str	r3, [sp, #0]
 8017c8a:	462a      	mov	r2, r5
 8017c8c:	4b05      	ldr	r3, [pc, #20]	; (8017ca4 <_svfiprintf_r+0x1f4>)
 8017c8e:	a904      	add	r1, sp, #16
 8017c90:	4638      	mov	r0, r7
 8017c92:	f000 f9bd 	bl	8018010 <_printf_i>
 8017c96:	e7eb      	b.n	8017c70 <_svfiprintf_r+0x1c0>
 8017c98:	080199be 	.word	0x080199be
 8017c9c:	080199c8 	.word	0x080199c8
 8017ca0:	00000000 	.word	0x00000000
 8017ca4:	080179fd 	.word	0x080179fd
 8017ca8:	080199c4 	.word	0x080199c4

08017cac <__sfputc_r>:
 8017cac:	6893      	ldr	r3, [r2, #8]
 8017cae:	3b01      	subs	r3, #1
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	b410      	push	{r4}
 8017cb4:	6093      	str	r3, [r2, #8]
 8017cb6:	da08      	bge.n	8017cca <__sfputc_r+0x1e>
 8017cb8:	6994      	ldr	r4, [r2, #24]
 8017cba:	42a3      	cmp	r3, r4
 8017cbc:	db01      	blt.n	8017cc2 <__sfputc_r+0x16>
 8017cbe:	290a      	cmp	r1, #10
 8017cc0:	d103      	bne.n	8017cca <__sfputc_r+0x1e>
 8017cc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017cc6:	f7ff bc2d 	b.w	8017524 <__swbuf_r>
 8017cca:	6813      	ldr	r3, [r2, #0]
 8017ccc:	1c58      	adds	r0, r3, #1
 8017cce:	6010      	str	r0, [r2, #0]
 8017cd0:	7019      	strb	r1, [r3, #0]
 8017cd2:	4608      	mov	r0, r1
 8017cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017cd8:	4770      	bx	lr

08017cda <__sfputs_r>:
 8017cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cdc:	4606      	mov	r6, r0
 8017cde:	460f      	mov	r7, r1
 8017ce0:	4614      	mov	r4, r2
 8017ce2:	18d5      	adds	r5, r2, r3
 8017ce4:	42ac      	cmp	r4, r5
 8017ce6:	d101      	bne.n	8017cec <__sfputs_r+0x12>
 8017ce8:	2000      	movs	r0, #0
 8017cea:	e007      	b.n	8017cfc <__sfputs_r+0x22>
 8017cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017cf0:	463a      	mov	r2, r7
 8017cf2:	4630      	mov	r0, r6
 8017cf4:	f7ff ffda 	bl	8017cac <__sfputc_r>
 8017cf8:	1c43      	adds	r3, r0, #1
 8017cfa:	d1f3      	bne.n	8017ce4 <__sfputs_r+0xa>
 8017cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017d00 <_vfiprintf_r>:
 8017d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d04:	460d      	mov	r5, r1
 8017d06:	b09d      	sub	sp, #116	; 0x74
 8017d08:	4614      	mov	r4, r2
 8017d0a:	4698      	mov	r8, r3
 8017d0c:	4606      	mov	r6, r0
 8017d0e:	b118      	cbz	r0, 8017d18 <_vfiprintf_r+0x18>
 8017d10:	6a03      	ldr	r3, [r0, #32]
 8017d12:	b90b      	cbnz	r3, 8017d18 <_vfiprintf_r+0x18>
 8017d14:	f7ff fa94 	bl	8017240 <__sinit>
 8017d18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017d1a:	07d9      	lsls	r1, r3, #31
 8017d1c:	d405      	bmi.n	8017d2a <_vfiprintf_r+0x2a>
 8017d1e:	89ab      	ldrh	r3, [r5, #12]
 8017d20:	059a      	lsls	r2, r3, #22
 8017d22:	d402      	bmi.n	8017d2a <_vfiprintf_r+0x2a>
 8017d24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017d26:	f7ff fdd2 	bl	80178ce <__retarget_lock_acquire_recursive>
 8017d2a:	89ab      	ldrh	r3, [r5, #12]
 8017d2c:	071b      	lsls	r3, r3, #28
 8017d2e:	d501      	bpl.n	8017d34 <_vfiprintf_r+0x34>
 8017d30:	692b      	ldr	r3, [r5, #16]
 8017d32:	b99b      	cbnz	r3, 8017d5c <_vfiprintf_r+0x5c>
 8017d34:	4629      	mov	r1, r5
 8017d36:	4630      	mov	r0, r6
 8017d38:	f7ff fc32 	bl	80175a0 <__swsetup_r>
 8017d3c:	b170      	cbz	r0, 8017d5c <_vfiprintf_r+0x5c>
 8017d3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017d40:	07dc      	lsls	r4, r3, #31
 8017d42:	d504      	bpl.n	8017d4e <_vfiprintf_r+0x4e>
 8017d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017d48:	b01d      	add	sp, #116	; 0x74
 8017d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d4e:	89ab      	ldrh	r3, [r5, #12]
 8017d50:	0598      	lsls	r0, r3, #22
 8017d52:	d4f7      	bmi.n	8017d44 <_vfiprintf_r+0x44>
 8017d54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017d56:	f7ff fdbb 	bl	80178d0 <__retarget_lock_release_recursive>
 8017d5a:	e7f3      	b.n	8017d44 <_vfiprintf_r+0x44>
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8017d60:	2320      	movs	r3, #32
 8017d62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017d66:	f8cd 800c 	str.w	r8, [sp, #12]
 8017d6a:	2330      	movs	r3, #48	; 0x30
 8017d6c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8017f20 <_vfiprintf_r+0x220>
 8017d70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017d74:	f04f 0901 	mov.w	r9, #1
 8017d78:	4623      	mov	r3, r4
 8017d7a:	469a      	mov	sl, r3
 8017d7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d80:	b10a      	cbz	r2, 8017d86 <_vfiprintf_r+0x86>
 8017d82:	2a25      	cmp	r2, #37	; 0x25
 8017d84:	d1f9      	bne.n	8017d7a <_vfiprintf_r+0x7a>
 8017d86:	ebba 0b04 	subs.w	fp, sl, r4
 8017d8a:	d00b      	beq.n	8017da4 <_vfiprintf_r+0xa4>
 8017d8c:	465b      	mov	r3, fp
 8017d8e:	4622      	mov	r2, r4
 8017d90:	4629      	mov	r1, r5
 8017d92:	4630      	mov	r0, r6
 8017d94:	f7ff ffa1 	bl	8017cda <__sfputs_r>
 8017d98:	3001      	adds	r0, #1
 8017d9a:	f000 80a9 	beq.w	8017ef0 <_vfiprintf_r+0x1f0>
 8017d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017da0:	445a      	add	r2, fp
 8017da2:	9209      	str	r2, [sp, #36]	; 0x24
 8017da4:	f89a 3000 	ldrb.w	r3, [sl]
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	f000 80a1 	beq.w	8017ef0 <_vfiprintf_r+0x1f0>
 8017dae:	2300      	movs	r3, #0
 8017db0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017db4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017db8:	f10a 0a01 	add.w	sl, sl, #1
 8017dbc:	9304      	str	r3, [sp, #16]
 8017dbe:	9307      	str	r3, [sp, #28]
 8017dc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017dc4:	931a      	str	r3, [sp, #104]	; 0x68
 8017dc6:	4654      	mov	r4, sl
 8017dc8:	2205      	movs	r2, #5
 8017dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017dce:	4854      	ldr	r0, [pc, #336]	; (8017f20 <_vfiprintf_r+0x220>)
 8017dd0:	f7e8 fa36 	bl	8000240 <memchr>
 8017dd4:	9a04      	ldr	r2, [sp, #16]
 8017dd6:	b9d8      	cbnz	r0, 8017e10 <_vfiprintf_r+0x110>
 8017dd8:	06d1      	lsls	r1, r2, #27
 8017dda:	bf44      	itt	mi
 8017ddc:	2320      	movmi	r3, #32
 8017dde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017de2:	0713      	lsls	r3, r2, #28
 8017de4:	bf44      	itt	mi
 8017de6:	232b      	movmi	r3, #43	; 0x2b
 8017de8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017dec:	f89a 3000 	ldrb.w	r3, [sl]
 8017df0:	2b2a      	cmp	r3, #42	; 0x2a
 8017df2:	d015      	beq.n	8017e20 <_vfiprintf_r+0x120>
 8017df4:	9a07      	ldr	r2, [sp, #28]
 8017df6:	4654      	mov	r4, sl
 8017df8:	2000      	movs	r0, #0
 8017dfa:	f04f 0c0a 	mov.w	ip, #10
 8017dfe:	4621      	mov	r1, r4
 8017e00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017e04:	3b30      	subs	r3, #48	; 0x30
 8017e06:	2b09      	cmp	r3, #9
 8017e08:	d94d      	bls.n	8017ea6 <_vfiprintf_r+0x1a6>
 8017e0a:	b1b0      	cbz	r0, 8017e3a <_vfiprintf_r+0x13a>
 8017e0c:	9207      	str	r2, [sp, #28]
 8017e0e:	e014      	b.n	8017e3a <_vfiprintf_r+0x13a>
 8017e10:	eba0 0308 	sub.w	r3, r0, r8
 8017e14:	fa09 f303 	lsl.w	r3, r9, r3
 8017e18:	4313      	orrs	r3, r2
 8017e1a:	9304      	str	r3, [sp, #16]
 8017e1c:	46a2      	mov	sl, r4
 8017e1e:	e7d2      	b.n	8017dc6 <_vfiprintf_r+0xc6>
 8017e20:	9b03      	ldr	r3, [sp, #12]
 8017e22:	1d19      	adds	r1, r3, #4
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	9103      	str	r1, [sp, #12]
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	bfbb      	ittet	lt
 8017e2c:	425b      	neglt	r3, r3
 8017e2e:	f042 0202 	orrlt.w	r2, r2, #2
 8017e32:	9307      	strge	r3, [sp, #28]
 8017e34:	9307      	strlt	r3, [sp, #28]
 8017e36:	bfb8      	it	lt
 8017e38:	9204      	strlt	r2, [sp, #16]
 8017e3a:	7823      	ldrb	r3, [r4, #0]
 8017e3c:	2b2e      	cmp	r3, #46	; 0x2e
 8017e3e:	d10c      	bne.n	8017e5a <_vfiprintf_r+0x15a>
 8017e40:	7863      	ldrb	r3, [r4, #1]
 8017e42:	2b2a      	cmp	r3, #42	; 0x2a
 8017e44:	d134      	bne.n	8017eb0 <_vfiprintf_r+0x1b0>
 8017e46:	9b03      	ldr	r3, [sp, #12]
 8017e48:	1d1a      	adds	r2, r3, #4
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	9203      	str	r2, [sp, #12]
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	bfb8      	it	lt
 8017e52:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017e56:	3402      	adds	r4, #2
 8017e58:	9305      	str	r3, [sp, #20]
 8017e5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8017f30 <_vfiprintf_r+0x230>
 8017e5e:	7821      	ldrb	r1, [r4, #0]
 8017e60:	2203      	movs	r2, #3
 8017e62:	4650      	mov	r0, sl
 8017e64:	f7e8 f9ec 	bl	8000240 <memchr>
 8017e68:	b138      	cbz	r0, 8017e7a <_vfiprintf_r+0x17a>
 8017e6a:	9b04      	ldr	r3, [sp, #16]
 8017e6c:	eba0 000a 	sub.w	r0, r0, sl
 8017e70:	2240      	movs	r2, #64	; 0x40
 8017e72:	4082      	lsls	r2, r0
 8017e74:	4313      	orrs	r3, r2
 8017e76:	3401      	adds	r4, #1
 8017e78:	9304      	str	r3, [sp, #16]
 8017e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e7e:	4829      	ldr	r0, [pc, #164]	; (8017f24 <_vfiprintf_r+0x224>)
 8017e80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017e84:	2206      	movs	r2, #6
 8017e86:	f7e8 f9db 	bl	8000240 <memchr>
 8017e8a:	2800      	cmp	r0, #0
 8017e8c:	d03f      	beq.n	8017f0e <_vfiprintf_r+0x20e>
 8017e8e:	4b26      	ldr	r3, [pc, #152]	; (8017f28 <_vfiprintf_r+0x228>)
 8017e90:	bb1b      	cbnz	r3, 8017eda <_vfiprintf_r+0x1da>
 8017e92:	9b03      	ldr	r3, [sp, #12]
 8017e94:	3307      	adds	r3, #7
 8017e96:	f023 0307 	bic.w	r3, r3, #7
 8017e9a:	3308      	adds	r3, #8
 8017e9c:	9303      	str	r3, [sp, #12]
 8017e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ea0:	443b      	add	r3, r7
 8017ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8017ea4:	e768      	b.n	8017d78 <_vfiprintf_r+0x78>
 8017ea6:	fb0c 3202 	mla	r2, ip, r2, r3
 8017eaa:	460c      	mov	r4, r1
 8017eac:	2001      	movs	r0, #1
 8017eae:	e7a6      	b.n	8017dfe <_vfiprintf_r+0xfe>
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	3401      	adds	r4, #1
 8017eb4:	9305      	str	r3, [sp, #20]
 8017eb6:	4619      	mov	r1, r3
 8017eb8:	f04f 0c0a 	mov.w	ip, #10
 8017ebc:	4620      	mov	r0, r4
 8017ebe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ec2:	3a30      	subs	r2, #48	; 0x30
 8017ec4:	2a09      	cmp	r2, #9
 8017ec6:	d903      	bls.n	8017ed0 <_vfiprintf_r+0x1d0>
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d0c6      	beq.n	8017e5a <_vfiprintf_r+0x15a>
 8017ecc:	9105      	str	r1, [sp, #20]
 8017ece:	e7c4      	b.n	8017e5a <_vfiprintf_r+0x15a>
 8017ed0:	fb0c 2101 	mla	r1, ip, r1, r2
 8017ed4:	4604      	mov	r4, r0
 8017ed6:	2301      	movs	r3, #1
 8017ed8:	e7f0      	b.n	8017ebc <_vfiprintf_r+0x1bc>
 8017eda:	ab03      	add	r3, sp, #12
 8017edc:	9300      	str	r3, [sp, #0]
 8017ede:	462a      	mov	r2, r5
 8017ee0:	4b12      	ldr	r3, [pc, #72]	; (8017f2c <_vfiprintf_r+0x22c>)
 8017ee2:	a904      	add	r1, sp, #16
 8017ee4:	4630      	mov	r0, r6
 8017ee6:	f3af 8000 	nop.w
 8017eea:	4607      	mov	r7, r0
 8017eec:	1c78      	adds	r0, r7, #1
 8017eee:	d1d6      	bne.n	8017e9e <_vfiprintf_r+0x19e>
 8017ef0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017ef2:	07d9      	lsls	r1, r3, #31
 8017ef4:	d405      	bmi.n	8017f02 <_vfiprintf_r+0x202>
 8017ef6:	89ab      	ldrh	r3, [r5, #12]
 8017ef8:	059a      	lsls	r2, r3, #22
 8017efa:	d402      	bmi.n	8017f02 <_vfiprintf_r+0x202>
 8017efc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017efe:	f7ff fce7 	bl	80178d0 <__retarget_lock_release_recursive>
 8017f02:	89ab      	ldrh	r3, [r5, #12]
 8017f04:	065b      	lsls	r3, r3, #25
 8017f06:	f53f af1d 	bmi.w	8017d44 <_vfiprintf_r+0x44>
 8017f0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017f0c:	e71c      	b.n	8017d48 <_vfiprintf_r+0x48>
 8017f0e:	ab03      	add	r3, sp, #12
 8017f10:	9300      	str	r3, [sp, #0]
 8017f12:	462a      	mov	r2, r5
 8017f14:	4b05      	ldr	r3, [pc, #20]	; (8017f2c <_vfiprintf_r+0x22c>)
 8017f16:	a904      	add	r1, sp, #16
 8017f18:	4630      	mov	r0, r6
 8017f1a:	f000 f879 	bl	8018010 <_printf_i>
 8017f1e:	e7e4      	b.n	8017eea <_vfiprintf_r+0x1ea>
 8017f20:	080199be 	.word	0x080199be
 8017f24:	080199c8 	.word	0x080199c8
 8017f28:	00000000 	.word	0x00000000
 8017f2c:	08017cdb 	.word	0x08017cdb
 8017f30:	080199c4 	.word	0x080199c4

08017f34 <_printf_common>:
 8017f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f38:	4616      	mov	r6, r2
 8017f3a:	4699      	mov	r9, r3
 8017f3c:	688a      	ldr	r2, [r1, #8]
 8017f3e:	690b      	ldr	r3, [r1, #16]
 8017f40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017f44:	4293      	cmp	r3, r2
 8017f46:	bfb8      	it	lt
 8017f48:	4613      	movlt	r3, r2
 8017f4a:	6033      	str	r3, [r6, #0]
 8017f4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017f50:	4607      	mov	r7, r0
 8017f52:	460c      	mov	r4, r1
 8017f54:	b10a      	cbz	r2, 8017f5a <_printf_common+0x26>
 8017f56:	3301      	adds	r3, #1
 8017f58:	6033      	str	r3, [r6, #0]
 8017f5a:	6823      	ldr	r3, [r4, #0]
 8017f5c:	0699      	lsls	r1, r3, #26
 8017f5e:	bf42      	ittt	mi
 8017f60:	6833      	ldrmi	r3, [r6, #0]
 8017f62:	3302      	addmi	r3, #2
 8017f64:	6033      	strmi	r3, [r6, #0]
 8017f66:	6825      	ldr	r5, [r4, #0]
 8017f68:	f015 0506 	ands.w	r5, r5, #6
 8017f6c:	d106      	bne.n	8017f7c <_printf_common+0x48>
 8017f6e:	f104 0a19 	add.w	sl, r4, #25
 8017f72:	68e3      	ldr	r3, [r4, #12]
 8017f74:	6832      	ldr	r2, [r6, #0]
 8017f76:	1a9b      	subs	r3, r3, r2
 8017f78:	42ab      	cmp	r3, r5
 8017f7a:	dc26      	bgt.n	8017fca <_printf_common+0x96>
 8017f7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017f80:	1e13      	subs	r3, r2, #0
 8017f82:	6822      	ldr	r2, [r4, #0]
 8017f84:	bf18      	it	ne
 8017f86:	2301      	movne	r3, #1
 8017f88:	0692      	lsls	r2, r2, #26
 8017f8a:	d42b      	bmi.n	8017fe4 <_printf_common+0xb0>
 8017f8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017f90:	4649      	mov	r1, r9
 8017f92:	4638      	mov	r0, r7
 8017f94:	47c0      	blx	r8
 8017f96:	3001      	adds	r0, #1
 8017f98:	d01e      	beq.n	8017fd8 <_printf_common+0xa4>
 8017f9a:	6823      	ldr	r3, [r4, #0]
 8017f9c:	6922      	ldr	r2, [r4, #16]
 8017f9e:	f003 0306 	and.w	r3, r3, #6
 8017fa2:	2b04      	cmp	r3, #4
 8017fa4:	bf02      	ittt	eq
 8017fa6:	68e5      	ldreq	r5, [r4, #12]
 8017fa8:	6833      	ldreq	r3, [r6, #0]
 8017faa:	1aed      	subeq	r5, r5, r3
 8017fac:	68a3      	ldr	r3, [r4, #8]
 8017fae:	bf0c      	ite	eq
 8017fb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017fb4:	2500      	movne	r5, #0
 8017fb6:	4293      	cmp	r3, r2
 8017fb8:	bfc4      	itt	gt
 8017fba:	1a9b      	subgt	r3, r3, r2
 8017fbc:	18ed      	addgt	r5, r5, r3
 8017fbe:	2600      	movs	r6, #0
 8017fc0:	341a      	adds	r4, #26
 8017fc2:	42b5      	cmp	r5, r6
 8017fc4:	d11a      	bne.n	8017ffc <_printf_common+0xc8>
 8017fc6:	2000      	movs	r0, #0
 8017fc8:	e008      	b.n	8017fdc <_printf_common+0xa8>
 8017fca:	2301      	movs	r3, #1
 8017fcc:	4652      	mov	r2, sl
 8017fce:	4649      	mov	r1, r9
 8017fd0:	4638      	mov	r0, r7
 8017fd2:	47c0      	blx	r8
 8017fd4:	3001      	adds	r0, #1
 8017fd6:	d103      	bne.n	8017fe0 <_printf_common+0xac>
 8017fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fe0:	3501      	adds	r5, #1
 8017fe2:	e7c6      	b.n	8017f72 <_printf_common+0x3e>
 8017fe4:	18e1      	adds	r1, r4, r3
 8017fe6:	1c5a      	adds	r2, r3, #1
 8017fe8:	2030      	movs	r0, #48	; 0x30
 8017fea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017fee:	4422      	add	r2, r4
 8017ff0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017ff4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017ff8:	3302      	adds	r3, #2
 8017ffa:	e7c7      	b.n	8017f8c <_printf_common+0x58>
 8017ffc:	2301      	movs	r3, #1
 8017ffe:	4622      	mov	r2, r4
 8018000:	4649      	mov	r1, r9
 8018002:	4638      	mov	r0, r7
 8018004:	47c0      	blx	r8
 8018006:	3001      	adds	r0, #1
 8018008:	d0e6      	beq.n	8017fd8 <_printf_common+0xa4>
 801800a:	3601      	adds	r6, #1
 801800c:	e7d9      	b.n	8017fc2 <_printf_common+0x8e>
	...

08018010 <_printf_i>:
 8018010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018014:	7e0f      	ldrb	r7, [r1, #24]
 8018016:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018018:	2f78      	cmp	r7, #120	; 0x78
 801801a:	4691      	mov	r9, r2
 801801c:	4680      	mov	r8, r0
 801801e:	460c      	mov	r4, r1
 8018020:	469a      	mov	sl, r3
 8018022:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018026:	d807      	bhi.n	8018038 <_printf_i+0x28>
 8018028:	2f62      	cmp	r7, #98	; 0x62
 801802a:	d80a      	bhi.n	8018042 <_printf_i+0x32>
 801802c:	2f00      	cmp	r7, #0
 801802e:	f000 80d4 	beq.w	80181da <_printf_i+0x1ca>
 8018032:	2f58      	cmp	r7, #88	; 0x58
 8018034:	f000 80c0 	beq.w	80181b8 <_printf_i+0x1a8>
 8018038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801803c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018040:	e03a      	b.n	80180b8 <_printf_i+0xa8>
 8018042:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018046:	2b15      	cmp	r3, #21
 8018048:	d8f6      	bhi.n	8018038 <_printf_i+0x28>
 801804a:	a101      	add	r1, pc, #4	; (adr r1, 8018050 <_printf_i+0x40>)
 801804c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018050:	080180a9 	.word	0x080180a9
 8018054:	080180bd 	.word	0x080180bd
 8018058:	08018039 	.word	0x08018039
 801805c:	08018039 	.word	0x08018039
 8018060:	08018039 	.word	0x08018039
 8018064:	08018039 	.word	0x08018039
 8018068:	080180bd 	.word	0x080180bd
 801806c:	08018039 	.word	0x08018039
 8018070:	08018039 	.word	0x08018039
 8018074:	08018039 	.word	0x08018039
 8018078:	08018039 	.word	0x08018039
 801807c:	080181c1 	.word	0x080181c1
 8018080:	080180e9 	.word	0x080180e9
 8018084:	0801817b 	.word	0x0801817b
 8018088:	08018039 	.word	0x08018039
 801808c:	08018039 	.word	0x08018039
 8018090:	080181e3 	.word	0x080181e3
 8018094:	08018039 	.word	0x08018039
 8018098:	080180e9 	.word	0x080180e9
 801809c:	08018039 	.word	0x08018039
 80180a0:	08018039 	.word	0x08018039
 80180a4:	08018183 	.word	0x08018183
 80180a8:	682b      	ldr	r3, [r5, #0]
 80180aa:	1d1a      	adds	r2, r3, #4
 80180ac:	681b      	ldr	r3, [r3, #0]
 80180ae:	602a      	str	r2, [r5, #0]
 80180b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80180b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80180b8:	2301      	movs	r3, #1
 80180ba:	e09f      	b.n	80181fc <_printf_i+0x1ec>
 80180bc:	6820      	ldr	r0, [r4, #0]
 80180be:	682b      	ldr	r3, [r5, #0]
 80180c0:	0607      	lsls	r7, r0, #24
 80180c2:	f103 0104 	add.w	r1, r3, #4
 80180c6:	6029      	str	r1, [r5, #0]
 80180c8:	d501      	bpl.n	80180ce <_printf_i+0xbe>
 80180ca:	681e      	ldr	r6, [r3, #0]
 80180cc:	e003      	b.n	80180d6 <_printf_i+0xc6>
 80180ce:	0646      	lsls	r6, r0, #25
 80180d0:	d5fb      	bpl.n	80180ca <_printf_i+0xba>
 80180d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80180d6:	2e00      	cmp	r6, #0
 80180d8:	da03      	bge.n	80180e2 <_printf_i+0xd2>
 80180da:	232d      	movs	r3, #45	; 0x2d
 80180dc:	4276      	negs	r6, r6
 80180de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80180e2:	485a      	ldr	r0, [pc, #360]	; (801824c <_printf_i+0x23c>)
 80180e4:	230a      	movs	r3, #10
 80180e6:	e012      	b.n	801810e <_printf_i+0xfe>
 80180e8:	682b      	ldr	r3, [r5, #0]
 80180ea:	6820      	ldr	r0, [r4, #0]
 80180ec:	1d19      	adds	r1, r3, #4
 80180ee:	6029      	str	r1, [r5, #0]
 80180f0:	0605      	lsls	r5, r0, #24
 80180f2:	d501      	bpl.n	80180f8 <_printf_i+0xe8>
 80180f4:	681e      	ldr	r6, [r3, #0]
 80180f6:	e002      	b.n	80180fe <_printf_i+0xee>
 80180f8:	0641      	lsls	r1, r0, #25
 80180fa:	d5fb      	bpl.n	80180f4 <_printf_i+0xe4>
 80180fc:	881e      	ldrh	r6, [r3, #0]
 80180fe:	4853      	ldr	r0, [pc, #332]	; (801824c <_printf_i+0x23c>)
 8018100:	2f6f      	cmp	r7, #111	; 0x6f
 8018102:	bf0c      	ite	eq
 8018104:	2308      	moveq	r3, #8
 8018106:	230a      	movne	r3, #10
 8018108:	2100      	movs	r1, #0
 801810a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801810e:	6865      	ldr	r5, [r4, #4]
 8018110:	60a5      	str	r5, [r4, #8]
 8018112:	2d00      	cmp	r5, #0
 8018114:	bfa2      	ittt	ge
 8018116:	6821      	ldrge	r1, [r4, #0]
 8018118:	f021 0104 	bicge.w	r1, r1, #4
 801811c:	6021      	strge	r1, [r4, #0]
 801811e:	b90e      	cbnz	r6, 8018124 <_printf_i+0x114>
 8018120:	2d00      	cmp	r5, #0
 8018122:	d04b      	beq.n	80181bc <_printf_i+0x1ac>
 8018124:	4615      	mov	r5, r2
 8018126:	fbb6 f1f3 	udiv	r1, r6, r3
 801812a:	fb03 6711 	mls	r7, r3, r1, r6
 801812e:	5dc7      	ldrb	r7, [r0, r7]
 8018130:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018134:	4637      	mov	r7, r6
 8018136:	42bb      	cmp	r3, r7
 8018138:	460e      	mov	r6, r1
 801813a:	d9f4      	bls.n	8018126 <_printf_i+0x116>
 801813c:	2b08      	cmp	r3, #8
 801813e:	d10b      	bne.n	8018158 <_printf_i+0x148>
 8018140:	6823      	ldr	r3, [r4, #0]
 8018142:	07de      	lsls	r6, r3, #31
 8018144:	d508      	bpl.n	8018158 <_printf_i+0x148>
 8018146:	6923      	ldr	r3, [r4, #16]
 8018148:	6861      	ldr	r1, [r4, #4]
 801814a:	4299      	cmp	r1, r3
 801814c:	bfde      	ittt	le
 801814e:	2330      	movle	r3, #48	; 0x30
 8018150:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018154:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8018158:	1b52      	subs	r2, r2, r5
 801815a:	6122      	str	r2, [r4, #16]
 801815c:	f8cd a000 	str.w	sl, [sp]
 8018160:	464b      	mov	r3, r9
 8018162:	aa03      	add	r2, sp, #12
 8018164:	4621      	mov	r1, r4
 8018166:	4640      	mov	r0, r8
 8018168:	f7ff fee4 	bl	8017f34 <_printf_common>
 801816c:	3001      	adds	r0, #1
 801816e:	d14a      	bne.n	8018206 <_printf_i+0x1f6>
 8018170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018174:	b004      	add	sp, #16
 8018176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801817a:	6823      	ldr	r3, [r4, #0]
 801817c:	f043 0320 	orr.w	r3, r3, #32
 8018180:	6023      	str	r3, [r4, #0]
 8018182:	4833      	ldr	r0, [pc, #204]	; (8018250 <_printf_i+0x240>)
 8018184:	2778      	movs	r7, #120	; 0x78
 8018186:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801818a:	6823      	ldr	r3, [r4, #0]
 801818c:	6829      	ldr	r1, [r5, #0]
 801818e:	061f      	lsls	r7, r3, #24
 8018190:	f851 6b04 	ldr.w	r6, [r1], #4
 8018194:	d402      	bmi.n	801819c <_printf_i+0x18c>
 8018196:	065f      	lsls	r7, r3, #25
 8018198:	bf48      	it	mi
 801819a:	b2b6      	uxthmi	r6, r6
 801819c:	07df      	lsls	r7, r3, #31
 801819e:	bf48      	it	mi
 80181a0:	f043 0320 	orrmi.w	r3, r3, #32
 80181a4:	6029      	str	r1, [r5, #0]
 80181a6:	bf48      	it	mi
 80181a8:	6023      	strmi	r3, [r4, #0]
 80181aa:	b91e      	cbnz	r6, 80181b4 <_printf_i+0x1a4>
 80181ac:	6823      	ldr	r3, [r4, #0]
 80181ae:	f023 0320 	bic.w	r3, r3, #32
 80181b2:	6023      	str	r3, [r4, #0]
 80181b4:	2310      	movs	r3, #16
 80181b6:	e7a7      	b.n	8018108 <_printf_i+0xf8>
 80181b8:	4824      	ldr	r0, [pc, #144]	; (801824c <_printf_i+0x23c>)
 80181ba:	e7e4      	b.n	8018186 <_printf_i+0x176>
 80181bc:	4615      	mov	r5, r2
 80181be:	e7bd      	b.n	801813c <_printf_i+0x12c>
 80181c0:	682b      	ldr	r3, [r5, #0]
 80181c2:	6826      	ldr	r6, [r4, #0]
 80181c4:	6961      	ldr	r1, [r4, #20]
 80181c6:	1d18      	adds	r0, r3, #4
 80181c8:	6028      	str	r0, [r5, #0]
 80181ca:	0635      	lsls	r5, r6, #24
 80181cc:	681b      	ldr	r3, [r3, #0]
 80181ce:	d501      	bpl.n	80181d4 <_printf_i+0x1c4>
 80181d0:	6019      	str	r1, [r3, #0]
 80181d2:	e002      	b.n	80181da <_printf_i+0x1ca>
 80181d4:	0670      	lsls	r0, r6, #25
 80181d6:	d5fb      	bpl.n	80181d0 <_printf_i+0x1c0>
 80181d8:	8019      	strh	r1, [r3, #0]
 80181da:	2300      	movs	r3, #0
 80181dc:	6123      	str	r3, [r4, #16]
 80181de:	4615      	mov	r5, r2
 80181e0:	e7bc      	b.n	801815c <_printf_i+0x14c>
 80181e2:	682b      	ldr	r3, [r5, #0]
 80181e4:	1d1a      	adds	r2, r3, #4
 80181e6:	602a      	str	r2, [r5, #0]
 80181e8:	681d      	ldr	r5, [r3, #0]
 80181ea:	6862      	ldr	r2, [r4, #4]
 80181ec:	2100      	movs	r1, #0
 80181ee:	4628      	mov	r0, r5
 80181f0:	f7e8 f826 	bl	8000240 <memchr>
 80181f4:	b108      	cbz	r0, 80181fa <_printf_i+0x1ea>
 80181f6:	1b40      	subs	r0, r0, r5
 80181f8:	6060      	str	r0, [r4, #4]
 80181fa:	6863      	ldr	r3, [r4, #4]
 80181fc:	6123      	str	r3, [r4, #16]
 80181fe:	2300      	movs	r3, #0
 8018200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018204:	e7aa      	b.n	801815c <_printf_i+0x14c>
 8018206:	6923      	ldr	r3, [r4, #16]
 8018208:	462a      	mov	r2, r5
 801820a:	4649      	mov	r1, r9
 801820c:	4640      	mov	r0, r8
 801820e:	47d0      	blx	sl
 8018210:	3001      	adds	r0, #1
 8018212:	d0ad      	beq.n	8018170 <_printf_i+0x160>
 8018214:	6823      	ldr	r3, [r4, #0]
 8018216:	079b      	lsls	r3, r3, #30
 8018218:	d413      	bmi.n	8018242 <_printf_i+0x232>
 801821a:	68e0      	ldr	r0, [r4, #12]
 801821c:	9b03      	ldr	r3, [sp, #12]
 801821e:	4298      	cmp	r0, r3
 8018220:	bfb8      	it	lt
 8018222:	4618      	movlt	r0, r3
 8018224:	e7a6      	b.n	8018174 <_printf_i+0x164>
 8018226:	2301      	movs	r3, #1
 8018228:	4632      	mov	r2, r6
 801822a:	4649      	mov	r1, r9
 801822c:	4640      	mov	r0, r8
 801822e:	47d0      	blx	sl
 8018230:	3001      	adds	r0, #1
 8018232:	d09d      	beq.n	8018170 <_printf_i+0x160>
 8018234:	3501      	adds	r5, #1
 8018236:	68e3      	ldr	r3, [r4, #12]
 8018238:	9903      	ldr	r1, [sp, #12]
 801823a:	1a5b      	subs	r3, r3, r1
 801823c:	42ab      	cmp	r3, r5
 801823e:	dcf2      	bgt.n	8018226 <_printf_i+0x216>
 8018240:	e7eb      	b.n	801821a <_printf_i+0x20a>
 8018242:	2500      	movs	r5, #0
 8018244:	f104 0619 	add.w	r6, r4, #25
 8018248:	e7f5      	b.n	8018236 <_printf_i+0x226>
 801824a:	bf00      	nop
 801824c:	080199cf 	.word	0x080199cf
 8018250:	080199e0 	.word	0x080199e0

08018254 <__sflush_r>:
 8018254:	898a      	ldrh	r2, [r1, #12]
 8018256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801825a:	4605      	mov	r5, r0
 801825c:	0710      	lsls	r0, r2, #28
 801825e:	460c      	mov	r4, r1
 8018260:	d458      	bmi.n	8018314 <__sflush_r+0xc0>
 8018262:	684b      	ldr	r3, [r1, #4]
 8018264:	2b00      	cmp	r3, #0
 8018266:	dc05      	bgt.n	8018274 <__sflush_r+0x20>
 8018268:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801826a:	2b00      	cmp	r3, #0
 801826c:	dc02      	bgt.n	8018274 <__sflush_r+0x20>
 801826e:	2000      	movs	r0, #0
 8018270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018274:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018276:	2e00      	cmp	r6, #0
 8018278:	d0f9      	beq.n	801826e <__sflush_r+0x1a>
 801827a:	2300      	movs	r3, #0
 801827c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018280:	682f      	ldr	r7, [r5, #0]
 8018282:	6a21      	ldr	r1, [r4, #32]
 8018284:	602b      	str	r3, [r5, #0]
 8018286:	d032      	beq.n	80182ee <__sflush_r+0x9a>
 8018288:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801828a:	89a3      	ldrh	r3, [r4, #12]
 801828c:	075a      	lsls	r2, r3, #29
 801828e:	d505      	bpl.n	801829c <__sflush_r+0x48>
 8018290:	6863      	ldr	r3, [r4, #4]
 8018292:	1ac0      	subs	r0, r0, r3
 8018294:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018296:	b10b      	cbz	r3, 801829c <__sflush_r+0x48>
 8018298:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801829a:	1ac0      	subs	r0, r0, r3
 801829c:	2300      	movs	r3, #0
 801829e:	4602      	mov	r2, r0
 80182a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80182a2:	6a21      	ldr	r1, [r4, #32]
 80182a4:	4628      	mov	r0, r5
 80182a6:	47b0      	blx	r6
 80182a8:	1c43      	adds	r3, r0, #1
 80182aa:	89a3      	ldrh	r3, [r4, #12]
 80182ac:	d106      	bne.n	80182bc <__sflush_r+0x68>
 80182ae:	6829      	ldr	r1, [r5, #0]
 80182b0:	291d      	cmp	r1, #29
 80182b2:	d82b      	bhi.n	801830c <__sflush_r+0xb8>
 80182b4:	4a29      	ldr	r2, [pc, #164]	; (801835c <__sflush_r+0x108>)
 80182b6:	410a      	asrs	r2, r1
 80182b8:	07d6      	lsls	r6, r2, #31
 80182ba:	d427      	bmi.n	801830c <__sflush_r+0xb8>
 80182bc:	2200      	movs	r2, #0
 80182be:	6062      	str	r2, [r4, #4]
 80182c0:	04d9      	lsls	r1, r3, #19
 80182c2:	6922      	ldr	r2, [r4, #16]
 80182c4:	6022      	str	r2, [r4, #0]
 80182c6:	d504      	bpl.n	80182d2 <__sflush_r+0x7e>
 80182c8:	1c42      	adds	r2, r0, #1
 80182ca:	d101      	bne.n	80182d0 <__sflush_r+0x7c>
 80182cc:	682b      	ldr	r3, [r5, #0]
 80182ce:	b903      	cbnz	r3, 80182d2 <__sflush_r+0x7e>
 80182d0:	6560      	str	r0, [r4, #84]	; 0x54
 80182d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80182d4:	602f      	str	r7, [r5, #0]
 80182d6:	2900      	cmp	r1, #0
 80182d8:	d0c9      	beq.n	801826e <__sflush_r+0x1a>
 80182da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80182de:	4299      	cmp	r1, r3
 80182e0:	d002      	beq.n	80182e8 <__sflush_r+0x94>
 80182e2:	4628      	mov	r0, r5
 80182e4:	f7ff fb36 	bl	8017954 <_free_r>
 80182e8:	2000      	movs	r0, #0
 80182ea:	6360      	str	r0, [r4, #52]	; 0x34
 80182ec:	e7c0      	b.n	8018270 <__sflush_r+0x1c>
 80182ee:	2301      	movs	r3, #1
 80182f0:	4628      	mov	r0, r5
 80182f2:	47b0      	blx	r6
 80182f4:	1c41      	adds	r1, r0, #1
 80182f6:	d1c8      	bne.n	801828a <__sflush_r+0x36>
 80182f8:	682b      	ldr	r3, [r5, #0]
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d0c5      	beq.n	801828a <__sflush_r+0x36>
 80182fe:	2b1d      	cmp	r3, #29
 8018300:	d001      	beq.n	8018306 <__sflush_r+0xb2>
 8018302:	2b16      	cmp	r3, #22
 8018304:	d101      	bne.n	801830a <__sflush_r+0xb6>
 8018306:	602f      	str	r7, [r5, #0]
 8018308:	e7b1      	b.n	801826e <__sflush_r+0x1a>
 801830a:	89a3      	ldrh	r3, [r4, #12]
 801830c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018310:	81a3      	strh	r3, [r4, #12]
 8018312:	e7ad      	b.n	8018270 <__sflush_r+0x1c>
 8018314:	690f      	ldr	r7, [r1, #16]
 8018316:	2f00      	cmp	r7, #0
 8018318:	d0a9      	beq.n	801826e <__sflush_r+0x1a>
 801831a:	0793      	lsls	r3, r2, #30
 801831c:	680e      	ldr	r6, [r1, #0]
 801831e:	bf08      	it	eq
 8018320:	694b      	ldreq	r3, [r1, #20]
 8018322:	600f      	str	r7, [r1, #0]
 8018324:	bf18      	it	ne
 8018326:	2300      	movne	r3, #0
 8018328:	eba6 0807 	sub.w	r8, r6, r7
 801832c:	608b      	str	r3, [r1, #8]
 801832e:	f1b8 0f00 	cmp.w	r8, #0
 8018332:	dd9c      	ble.n	801826e <__sflush_r+0x1a>
 8018334:	6a21      	ldr	r1, [r4, #32]
 8018336:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018338:	4643      	mov	r3, r8
 801833a:	463a      	mov	r2, r7
 801833c:	4628      	mov	r0, r5
 801833e:	47b0      	blx	r6
 8018340:	2800      	cmp	r0, #0
 8018342:	dc06      	bgt.n	8018352 <__sflush_r+0xfe>
 8018344:	89a3      	ldrh	r3, [r4, #12]
 8018346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801834a:	81a3      	strh	r3, [r4, #12]
 801834c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018350:	e78e      	b.n	8018270 <__sflush_r+0x1c>
 8018352:	4407      	add	r7, r0
 8018354:	eba8 0800 	sub.w	r8, r8, r0
 8018358:	e7e9      	b.n	801832e <__sflush_r+0xda>
 801835a:	bf00      	nop
 801835c:	dfbffffe 	.word	0xdfbffffe

08018360 <_fflush_r>:
 8018360:	b538      	push	{r3, r4, r5, lr}
 8018362:	690b      	ldr	r3, [r1, #16]
 8018364:	4605      	mov	r5, r0
 8018366:	460c      	mov	r4, r1
 8018368:	b913      	cbnz	r3, 8018370 <_fflush_r+0x10>
 801836a:	2500      	movs	r5, #0
 801836c:	4628      	mov	r0, r5
 801836e:	bd38      	pop	{r3, r4, r5, pc}
 8018370:	b118      	cbz	r0, 801837a <_fflush_r+0x1a>
 8018372:	6a03      	ldr	r3, [r0, #32]
 8018374:	b90b      	cbnz	r3, 801837a <_fflush_r+0x1a>
 8018376:	f7fe ff63 	bl	8017240 <__sinit>
 801837a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801837e:	2b00      	cmp	r3, #0
 8018380:	d0f3      	beq.n	801836a <_fflush_r+0xa>
 8018382:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018384:	07d0      	lsls	r0, r2, #31
 8018386:	d404      	bmi.n	8018392 <_fflush_r+0x32>
 8018388:	0599      	lsls	r1, r3, #22
 801838a:	d402      	bmi.n	8018392 <_fflush_r+0x32>
 801838c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801838e:	f7ff fa9e 	bl	80178ce <__retarget_lock_acquire_recursive>
 8018392:	4628      	mov	r0, r5
 8018394:	4621      	mov	r1, r4
 8018396:	f7ff ff5d 	bl	8018254 <__sflush_r>
 801839a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801839c:	07da      	lsls	r2, r3, #31
 801839e:	4605      	mov	r5, r0
 80183a0:	d4e4      	bmi.n	801836c <_fflush_r+0xc>
 80183a2:	89a3      	ldrh	r3, [r4, #12]
 80183a4:	059b      	lsls	r3, r3, #22
 80183a6:	d4e1      	bmi.n	801836c <_fflush_r+0xc>
 80183a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80183aa:	f7ff fa91 	bl	80178d0 <__retarget_lock_release_recursive>
 80183ae:	e7dd      	b.n	801836c <_fflush_r+0xc>

080183b0 <fiprintf>:
 80183b0:	b40e      	push	{r1, r2, r3}
 80183b2:	b503      	push	{r0, r1, lr}
 80183b4:	4601      	mov	r1, r0
 80183b6:	ab03      	add	r3, sp, #12
 80183b8:	4805      	ldr	r0, [pc, #20]	; (80183d0 <fiprintf+0x20>)
 80183ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80183be:	6800      	ldr	r0, [r0, #0]
 80183c0:	9301      	str	r3, [sp, #4]
 80183c2:	f7ff fc9d 	bl	8017d00 <_vfiprintf_r>
 80183c6:	b002      	add	sp, #8
 80183c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80183cc:	b003      	add	sp, #12
 80183ce:	4770      	bx	lr
 80183d0:	200008b0 	.word	0x200008b0

080183d4 <__swhatbuf_r>:
 80183d4:	b570      	push	{r4, r5, r6, lr}
 80183d6:	460c      	mov	r4, r1
 80183d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183dc:	2900      	cmp	r1, #0
 80183de:	b096      	sub	sp, #88	; 0x58
 80183e0:	4615      	mov	r5, r2
 80183e2:	461e      	mov	r6, r3
 80183e4:	da0d      	bge.n	8018402 <__swhatbuf_r+0x2e>
 80183e6:	89a3      	ldrh	r3, [r4, #12]
 80183e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80183ec:	f04f 0100 	mov.w	r1, #0
 80183f0:	bf0c      	ite	eq
 80183f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80183f6:	2340      	movne	r3, #64	; 0x40
 80183f8:	2000      	movs	r0, #0
 80183fa:	6031      	str	r1, [r6, #0]
 80183fc:	602b      	str	r3, [r5, #0]
 80183fe:	b016      	add	sp, #88	; 0x58
 8018400:	bd70      	pop	{r4, r5, r6, pc}
 8018402:	466a      	mov	r2, sp
 8018404:	f000 f848 	bl	8018498 <_fstat_r>
 8018408:	2800      	cmp	r0, #0
 801840a:	dbec      	blt.n	80183e6 <__swhatbuf_r+0x12>
 801840c:	9901      	ldr	r1, [sp, #4]
 801840e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8018412:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8018416:	4259      	negs	r1, r3
 8018418:	4159      	adcs	r1, r3
 801841a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801841e:	e7eb      	b.n	80183f8 <__swhatbuf_r+0x24>

08018420 <__smakebuf_r>:
 8018420:	898b      	ldrh	r3, [r1, #12]
 8018422:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018424:	079d      	lsls	r5, r3, #30
 8018426:	4606      	mov	r6, r0
 8018428:	460c      	mov	r4, r1
 801842a:	d507      	bpl.n	801843c <__smakebuf_r+0x1c>
 801842c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018430:	6023      	str	r3, [r4, #0]
 8018432:	6123      	str	r3, [r4, #16]
 8018434:	2301      	movs	r3, #1
 8018436:	6163      	str	r3, [r4, #20]
 8018438:	b002      	add	sp, #8
 801843a:	bd70      	pop	{r4, r5, r6, pc}
 801843c:	ab01      	add	r3, sp, #4
 801843e:	466a      	mov	r2, sp
 8018440:	f7ff ffc8 	bl	80183d4 <__swhatbuf_r>
 8018444:	9900      	ldr	r1, [sp, #0]
 8018446:	4605      	mov	r5, r0
 8018448:	4630      	mov	r0, r6
 801844a:	f7fe fcc1 	bl	8016dd0 <_malloc_r>
 801844e:	b948      	cbnz	r0, 8018464 <__smakebuf_r+0x44>
 8018450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018454:	059a      	lsls	r2, r3, #22
 8018456:	d4ef      	bmi.n	8018438 <__smakebuf_r+0x18>
 8018458:	f023 0303 	bic.w	r3, r3, #3
 801845c:	f043 0302 	orr.w	r3, r3, #2
 8018460:	81a3      	strh	r3, [r4, #12]
 8018462:	e7e3      	b.n	801842c <__smakebuf_r+0xc>
 8018464:	89a3      	ldrh	r3, [r4, #12]
 8018466:	6020      	str	r0, [r4, #0]
 8018468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801846c:	81a3      	strh	r3, [r4, #12]
 801846e:	9b00      	ldr	r3, [sp, #0]
 8018470:	6163      	str	r3, [r4, #20]
 8018472:	9b01      	ldr	r3, [sp, #4]
 8018474:	6120      	str	r0, [r4, #16]
 8018476:	b15b      	cbz	r3, 8018490 <__smakebuf_r+0x70>
 8018478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801847c:	4630      	mov	r0, r6
 801847e:	f000 f81d 	bl	80184bc <_isatty_r>
 8018482:	b128      	cbz	r0, 8018490 <__smakebuf_r+0x70>
 8018484:	89a3      	ldrh	r3, [r4, #12]
 8018486:	f023 0303 	bic.w	r3, r3, #3
 801848a:	f043 0301 	orr.w	r3, r3, #1
 801848e:	81a3      	strh	r3, [r4, #12]
 8018490:	89a3      	ldrh	r3, [r4, #12]
 8018492:	431d      	orrs	r5, r3
 8018494:	81a5      	strh	r5, [r4, #12]
 8018496:	e7cf      	b.n	8018438 <__smakebuf_r+0x18>

08018498 <_fstat_r>:
 8018498:	b538      	push	{r3, r4, r5, lr}
 801849a:	4d07      	ldr	r5, [pc, #28]	; (80184b8 <_fstat_r+0x20>)
 801849c:	2300      	movs	r3, #0
 801849e:	4604      	mov	r4, r0
 80184a0:	4608      	mov	r0, r1
 80184a2:	4611      	mov	r1, r2
 80184a4:	602b      	str	r3, [r5, #0]
 80184a6:	f7e9 fc62 	bl	8001d6e <_fstat>
 80184aa:	1c43      	adds	r3, r0, #1
 80184ac:	d102      	bne.n	80184b4 <_fstat_r+0x1c>
 80184ae:	682b      	ldr	r3, [r5, #0]
 80184b0:	b103      	cbz	r3, 80184b4 <_fstat_r+0x1c>
 80184b2:	6023      	str	r3, [r4, #0]
 80184b4:	bd38      	pop	{r3, r4, r5, pc}
 80184b6:	bf00      	nop
 80184b8:	2000e6c0 	.word	0x2000e6c0

080184bc <_isatty_r>:
 80184bc:	b538      	push	{r3, r4, r5, lr}
 80184be:	4d06      	ldr	r5, [pc, #24]	; (80184d8 <_isatty_r+0x1c>)
 80184c0:	2300      	movs	r3, #0
 80184c2:	4604      	mov	r4, r0
 80184c4:	4608      	mov	r0, r1
 80184c6:	602b      	str	r3, [r5, #0]
 80184c8:	f7e9 fc61 	bl	8001d8e <_isatty>
 80184cc:	1c43      	adds	r3, r0, #1
 80184ce:	d102      	bne.n	80184d6 <_isatty_r+0x1a>
 80184d0:	682b      	ldr	r3, [r5, #0]
 80184d2:	b103      	cbz	r3, 80184d6 <_isatty_r+0x1a>
 80184d4:	6023      	str	r3, [r4, #0]
 80184d6:	bd38      	pop	{r3, r4, r5, pc}
 80184d8:	2000e6c0 	.word	0x2000e6c0

080184dc <abort>:
 80184dc:	b508      	push	{r3, lr}
 80184de:	2006      	movs	r0, #6
 80184e0:	f000 f82c 	bl	801853c <raise>
 80184e4:	2001      	movs	r0, #1
 80184e6:	f7e9 fbf3 	bl	8001cd0 <_exit>

080184ea <_raise_r>:
 80184ea:	291f      	cmp	r1, #31
 80184ec:	b538      	push	{r3, r4, r5, lr}
 80184ee:	4604      	mov	r4, r0
 80184f0:	460d      	mov	r5, r1
 80184f2:	d904      	bls.n	80184fe <_raise_r+0x14>
 80184f4:	2316      	movs	r3, #22
 80184f6:	6003      	str	r3, [r0, #0]
 80184f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80184fc:	bd38      	pop	{r3, r4, r5, pc}
 80184fe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8018500:	b112      	cbz	r2, 8018508 <_raise_r+0x1e>
 8018502:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018506:	b94b      	cbnz	r3, 801851c <_raise_r+0x32>
 8018508:	4620      	mov	r0, r4
 801850a:	f000 f831 	bl	8018570 <_getpid_r>
 801850e:	462a      	mov	r2, r5
 8018510:	4601      	mov	r1, r0
 8018512:	4620      	mov	r0, r4
 8018514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018518:	f000 b818 	b.w	801854c <_kill_r>
 801851c:	2b01      	cmp	r3, #1
 801851e:	d00a      	beq.n	8018536 <_raise_r+0x4c>
 8018520:	1c59      	adds	r1, r3, #1
 8018522:	d103      	bne.n	801852c <_raise_r+0x42>
 8018524:	2316      	movs	r3, #22
 8018526:	6003      	str	r3, [r0, #0]
 8018528:	2001      	movs	r0, #1
 801852a:	e7e7      	b.n	80184fc <_raise_r+0x12>
 801852c:	2400      	movs	r4, #0
 801852e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018532:	4628      	mov	r0, r5
 8018534:	4798      	blx	r3
 8018536:	2000      	movs	r0, #0
 8018538:	e7e0      	b.n	80184fc <_raise_r+0x12>
	...

0801853c <raise>:
 801853c:	4b02      	ldr	r3, [pc, #8]	; (8018548 <raise+0xc>)
 801853e:	4601      	mov	r1, r0
 8018540:	6818      	ldr	r0, [r3, #0]
 8018542:	f7ff bfd2 	b.w	80184ea <_raise_r>
 8018546:	bf00      	nop
 8018548:	200008b0 	.word	0x200008b0

0801854c <_kill_r>:
 801854c:	b538      	push	{r3, r4, r5, lr}
 801854e:	4d07      	ldr	r5, [pc, #28]	; (801856c <_kill_r+0x20>)
 8018550:	2300      	movs	r3, #0
 8018552:	4604      	mov	r4, r0
 8018554:	4608      	mov	r0, r1
 8018556:	4611      	mov	r1, r2
 8018558:	602b      	str	r3, [r5, #0]
 801855a:	f7e9 fba9 	bl	8001cb0 <_kill>
 801855e:	1c43      	adds	r3, r0, #1
 8018560:	d102      	bne.n	8018568 <_kill_r+0x1c>
 8018562:	682b      	ldr	r3, [r5, #0]
 8018564:	b103      	cbz	r3, 8018568 <_kill_r+0x1c>
 8018566:	6023      	str	r3, [r4, #0]
 8018568:	bd38      	pop	{r3, r4, r5, pc}
 801856a:	bf00      	nop
 801856c:	2000e6c0 	.word	0x2000e6c0

08018570 <_getpid_r>:
 8018570:	f7e9 bb96 	b.w	8001ca0 <_getpid>

08018574 <_init>:
 8018574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018576:	bf00      	nop
 8018578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801857a:	bc08      	pop	{r3}
 801857c:	469e      	mov	lr, r3
 801857e:	4770      	bx	lr

08018580 <_fini>:
 8018580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018582:	bf00      	nop
 8018584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018586:	bc08      	pop	{r3}
 8018588:	469e      	mov	lr, r3
 801858a:	4770      	bx	lr
